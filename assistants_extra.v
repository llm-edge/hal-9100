(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module anthropic.
  Module  Impl_core_fmt_Display_for_assistants_extra_anthropic_ApiError_t.
  Section Impl_core_fmt_Display_for_assistants_extra_anthropic_ApiError_t.
    Definition Self : Set := assistants_extra.anthropic.ApiError.t.
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            match self {
                ApiError::InvalidRequestError(msg) => write!(f, "Invalid Request: {}", msg),
                ApiError::AuthenticationError(msg) => write!(f, "Authentication Error: {}", msg),
                ApiError::PermissionError(msg) => write!(f, "Permission Error: {}", msg),
                ApiError::NotFoundError(msg) => write!(f, "Not Found: {}", msg),
                ApiError::RateLimitError(msg) => write!(f, "Rate Limit: {}", msg),
                ApiError::ApiError(msg) => write!(f, "API Error: {}", msg),
                ApiError::OverloadedError(msg) => write!(f, "Overloaded: {}", msg),
                ApiError::UnknownError(msg) => write!(f, "Unknown Error: {}", msg),
            }
        }
    *)
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter.t)
        : M ltac:(core.fmt.Result) :=
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 : M.Val (core.result.Result.t unit core.fmt.Error.t) :=
        match_operator
          self
          [
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.InvalidRequestError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_InvalidRequestError_0
                    γ in
                let* msg := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "Invalid Request: ") in
                let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
                let* α3 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
                let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α3 ] in
                let* α5 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
                M.alloc α6
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.AuthenticationError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_AuthenticationError_0
                    γ in
                let* msg := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t :=
                  M.read (mk_str "Authentication Error: ") in
                let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
                let* α3 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
                let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α3 ] in
                let* α5 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
                M.alloc α6
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.PermissionError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_PermissionError_0 γ in
                let* msg := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "Permission Error: ") in
                let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
                let* α3 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
                let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α3 ] in
                let* α5 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
                M.alloc α6
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.NotFoundError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_NotFoundError_0 γ in
                let* msg := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "Not Found: ") in
                let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
                let* α3 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
                let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α3 ] in
                let* α5 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
                M.alloc α6
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.RateLimitError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_RateLimitError_0 γ in
                let* msg := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "Rate Limit: ") in
                let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
                let* α3 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
                let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α3 ] in
                let* α5 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
                M.alloc α6
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.ApiError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_ApiError_0 γ in
                let* msg := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "API Error: ") in
                let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
                let* α3 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
                let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α3 ] in
                let* α5 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
                M.alloc α6
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.OverloadedError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_OverloadedError_0 γ in
                let* msg := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "Overloaded: ") in
                let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
                let* α3 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
                let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α3 ] in
                let* α5 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
                M.alloc α6
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.UnknownError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_UnknownError_0 γ in
                let* msg := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "Unknown Error: ") in
                let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
                let* α3 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
                let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α3 ] in
                let* α5 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
                M.alloc α6
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t))
          ] in
      M.read α0.
    
    Global Instance AssociatedFunction_fmt :
      Notations.DoubleColon Self "fmt" := {
      Notations.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Display.Trait Self := {
      core.fmt.Display.fmt := fmt;
    }.
  End Impl_core_fmt_Display_for_assistants_extra_anthropic_ApiError_t.
  End Impl_core_fmt_Display_for_assistants_extra_anthropic_ApiError_t.
  
  Module  RequestBody.
  Section RequestBody.
    Record t : Set := {
      model : alloc.string.String.t;
      prompt : alloc.string.String.t;
      max_tokens_to_sample : i32.t;
      temperature : f32.t;
      stop_sequences :
        core.option.Option.t
          (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A);
      top_p : core.option.Option.t f32.t;
      top_k : core.option.Option.t i32.t;
      metadata :
        core.option.Option.t
          (std.collections.hash.map.HashMap.t
            alloc.string.String.t
            alloc.string.String.t
            std.collections.hash.map.HashMap.Default.S);
      stream : core.option.Option.t bool.t;
    }.
    
    Definition Get_model :=
      Ref.map (fun α => Some α.(model)) (fun β α => Some (α <| model := β |>)).
    Definition Get_prompt :=
      Ref.map
        (fun α => Some α.(prompt))
        (fun β α => Some (α <| prompt := β |>)).
    Definition Get_max_tokens_to_sample :=
      Ref.map
        (fun α => Some α.(max_tokens_to_sample))
        (fun β α => Some (α <| max_tokens_to_sample := β |>)).
    Definition Get_temperature :=
      Ref.map
        (fun α => Some α.(temperature))
        (fun β α => Some (α <| temperature := β |>)).
    Definition Get_stop_sequences :=
      Ref.map
        (fun α => Some α.(stop_sequences))
        (fun β α => Some (α <| stop_sequences := β |>)).
    Definition Get_top_p :=
      Ref.map (fun α => Some α.(top_p)) (fun β α => Some (α <| top_p := β |>)).
    Definition Get_top_k :=
      Ref.map (fun α => Some α.(top_k)) (fun β α => Some (α <| top_k := β |>)).
    Definition Get_metadata :=
      Ref.map
        (fun α => Some α.(metadata))
        (fun β α => Some (α <| metadata := β |>)).
    Definition Get_stream :=
      Ref.map
        (fun α => Some α.(stream))
        (fun β α => Some (α <| stream := β |>)).
  End RequestBody.
  End RequestBody.
  
  Module  ResponseBody.
  Section ResponseBody.
    Record t : Set := {
      completion : alloc.string.String.t;
      stop_reason : alloc.string.String.t;
      model : alloc.string.String.t;
    }.
    
    Definition Get_completion :=
      Ref.map
        (fun α => Some α.(completion))
        (fun β α => Some (α <| completion := β |>)).
    Definition Get_stop_reason :=
      Ref.map
        (fun α => Some α.(stop_reason))
        (fun β α => Some (α <| stop_reason := β |>)).
    Definition Get_model :=
      Ref.map (fun α => Some α.(model)) (fun β α => Some (α <| model := β |>)).
  End ResponseBody.
  End ResponseBody.
  
  Module  Impl_core_fmt_Debug_for_assistants_extra_anthropic_ResponseBody_t.
  Section Impl_core_fmt_Debug_for_assistants_extra_anthropic_ResponseBody_t.
    Definition Self : Set := assistants_extra.anthropic.ResponseBody.t.
    
    (*
    Debug
    *)
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter.t)
        : M ltac:(core.fmt.Result) :=
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
      let* α1 : ref str.t := M.read (mk_str "ResponseBody") in
      let* α2 : ref str.t := M.read (mk_str "completion") in
      let* α3 : ref assistants_extra.anthropic.ResponseBody.t := M.read self in
      let* α4 : ref str.t := M.read (mk_str "stop_reason") in
      let* α5 : ref assistants_extra.anthropic.ResponseBody.t := M.read self in
      let* α6 : ref str.t := M.read (mk_str "model") in
      let* α7 : ref assistants_extra.anthropic.ResponseBody.t := M.read self in
      let* α8 : M.Val (ref alloc.string.String.t) :=
        M.alloc
          (borrow
            (assistants_extra.anthropic.ResponseBody.Get_model (deref α7))) in
      M.call
        (core.fmt.Formatter.t::["debug_struct_field3_finish"]
          α0
          α1
          α2
          (pointer_coercion
            "Unsize"
            (borrow
              (assistants_extra.anthropic.ResponseBody.Get_completion
                (deref α3))))
          α4
          (pointer_coercion
            "Unsize"
            (borrow
              (assistants_extra.anthropic.ResponseBody.Get_stop_reason
                (deref α5))))
          α6
          (pointer_coercion "Unsize" (borrow α8))).
    
    Global Instance AssociatedFunction_fmt :
      Notations.DoubleColon Self "fmt" := {
      Notations.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ResponseBody_t.
  End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ResponseBody_t.
  
  Module  Usage.
  Section Usage.
    Record t : Set := {
      prompt_tokens : i32.t;
      completion_tokens : i32.t;
      total_tokens : i32.t;
    }.
    
    Definition Get_prompt_tokens :=
      Ref.map
        (fun α => Some α.(prompt_tokens))
        (fun β α => Some (α <| prompt_tokens := β |>)).
    Definition Get_completion_tokens :=
      Ref.map
        (fun α => Some α.(completion_tokens))
        (fun β α => Some (α <| completion_tokens := β |>)).
    Definition Get_total_tokens :=
      Ref.map
        (fun α => Some α.(total_tokens))
        (fun β α => Some (α <| total_tokens := β |>)).
  End Usage.
  End Usage.
  
  Module ApiError.
    Inductive t : Set :=
    | InvalidRequestError (_ : alloc.string.String.t)
    | AuthenticationError (_ : alloc.string.String.t)
    | PermissionError (_ : alloc.string.String.t)
    | NotFoundError (_ : alloc.string.String.t)
    | RateLimitError (_ : alloc.string.String.t)
    | ApiError (_ : alloc.string.String.t)
    | OverloadedError (_ : alloc.string.String.t)
    | UnknownError (_ : alloc.string.String.t).
    
    Definition Get_InvalidRequestError_0 :=
      Ref.map
        (fun α =>
          match α with | InvalidRequestError α0 => Some α0 | _ => None end)
        (fun β α =>
          match α with
          | InvalidRequestError _ => Some (InvalidRequestError β)
          | _ => None
          end).
    
    Definition Get_AuthenticationError_0 :=
      Ref.map
        (fun α =>
          match α with | AuthenticationError α0 => Some α0 | _ => None end)
        (fun β α =>
          match α with
          | AuthenticationError _ => Some (AuthenticationError β)
          | _ => None
          end).
    
    Definition Get_PermissionError_0 :=
      Ref.map
        (fun α => match α with | PermissionError α0 => Some α0 | _ => None end)
        (fun β α =>
          match α with
          | PermissionError _ => Some (PermissionError β)
          | _ => None
          end).
    
    Definition Get_NotFoundError_0 :=
      Ref.map
        (fun α => match α with | NotFoundError α0 => Some α0 | _ => None end)
        (fun β α =>
          match α with
          | NotFoundError _ => Some (NotFoundError β)
          | _ => None
          end).
    
    Definition Get_RateLimitError_0 :=
      Ref.map
        (fun α => match α with | RateLimitError α0 => Some α0 | _ => None end)
        (fun β α =>
          match α with
          | RateLimitError _ => Some (RateLimitError β)
          | _ => None
          end).
    
    Definition Get_ApiError_0 :=
      Ref.map
        (fun α => match α with | ApiError α0 => Some α0 | _ => None end)
        (fun β α =>
          match α with | ApiError _ => Some (ApiError β) | _ => None end).
    
    Definition Get_OverloadedError_0 :=
      Ref.map
        (fun α => match α with | OverloadedError α0 => Some α0 | _ => None end)
        (fun β α =>
          match α with
          | OverloadedError _ => Some (OverloadedError β)
          | _ => None
          end).
    
    Definition Get_UnknownError_0 :=
      Ref.map
        (fun α => match α with | UnknownError α0 => Some α0 | _ => None end)
        (fun β α =>
          match α with
          | UnknownError _ => Some (UnknownError β)
          | _ => None
          end).
  End ApiError.
  
  Module  Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiError_t.
  Section Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiError_t.
    Definition Self : Set := assistants_extra.anthropic.ApiError.t.
    
    (*
    Debug
    *)
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter.t)
        : M ltac:(core.fmt.Result) :=
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 : M.Val (core.result.Result.t unit core.fmt.Error.t) :=
        match_operator
          self
          [
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.InvalidRequestError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_InvalidRequestError_0
                    γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "InvalidRequestError") in
                let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.AuthenticationError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_AuthenticationError_0
                    γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "AuthenticationError") in
                let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.PermissionError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_PermissionError_0 γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "PermissionError") in
                let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.NotFoundError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_NotFoundError_0 γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "NotFoundError") in
                let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.RateLimitError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_RateLimitError_0 γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "RateLimitError") in
                let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.ApiError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_ApiError_0 γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "ApiError") in
                let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.OverloadedError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_OverloadedError_0 γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "OverloadedError") in
                let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiError.UnknownError _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiError.Get_UnknownError_0 γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "UnknownError") in
                let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t))
          ] in
      M.read α0.
    
    Global Instance AssociatedFunction_fmt :
      Notations.DoubleColon Self "fmt" := {
      Notations.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiError_t.
  End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiError_t.
  
  Module ApiResponseBody.
    Module Err.
      Record t : Set := {
        error : assistants_extra.anthropic.ApiErrorType.t;
      }.
    End Err.
    
    Inductive t : Set :=
    | Ok (_ : assistants_extra.anthropic.ResponseBody.t)
    | Err (_ : Err.t).
    
    Definition Get_Ok_0 :=
      Ref.map
        (fun α => match α with | Ok α0 => Some α0 | _ => None end)
        (fun β α => match α with | Ok _ => Some (Ok β) | _ => None end).
    
    Definition Get_Err_error :=
      Ref.map
        (fun α => match α with | Err α => Some α.(Err.error) | _ => None end)
        (fun β α =>
          match α with
          | Err α => Some (Err (α <| Err.error := β |>))
          | _ => None
          end).
  End ApiResponseBody.
  
  Module  Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiResponseBody_t.
  Section Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiResponseBody_t.
    Definition Self : Set := assistants_extra.anthropic.ApiResponseBody.t.
    
    (*
    Debug
    *)
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter.t)
        : M ltac:(core.fmt.Result) :=
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 : M.Val (core.result.Result.t unit core.fmt.Error.t) :=
        match_operator
          self
          [
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.anthropic.ApiResponseBody.Ok _ =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiResponseBody.Get_Ok_0 γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "Ok") in
                let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              |
                  assistants_extra.anthropic.ApiResponseBody.Err
                  {| assistants_extra.anthropic.ApiResponseBody.Err.error := _;
                  |}
                  =>
                let γ1_0 :=
                  assistants_extra.anthropic.ApiResponseBody.Get_Err_error γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "Err") in
                let* α2 : ref str.t := M.read (mk_str "error") in
                let* α3 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_struct_field1_finish"]
                      α0
                      α1
                      α2
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α3
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t))
          ] in
      M.read α0.
    
    Global Instance AssociatedFunction_fmt :
      Notations.DoubleColon Self "fmt" := {
      Notations.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiResponseBody_t.
  End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiResponseBody_t.
  
  Module  ApiErrorType.
  Section ApiErrorType.
    Record t : Set := {
      error_type : alloc.string.String.t;
      message : alloc.string.String.t;
    }.
    
    Definition Get_error_type :=
      Ref.map
        (fun α => Some α.(error_type))
        (fun β α => Some (α <| error_type := β |>)).
    Definition Get_message :=
      Ref.map
        (fun α => Some α.(message))
        (fun β α => Some (α <| message := β |>)).
  End ApiErrorType.
  End ApiErrorType.
  
  Module  Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiErrorType_t.
  Section Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiErrorType_t.
    Definition Self : Set := assistants_extra.anthropic.ApiErrorType.t.
    
    (*
    Debug
    *)
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter.t)
        : M ltac:(core.fmt.Result) :=
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
      let* α1 : ref str.t := M.read (mk_str "ApiErrorType") in
      let* α2 : ref str.t := M.read (mk_str "error_type") in
      let* α3 : ref assistants_extra.anthropic.ApiErrorType.t := M.read self in
      let* α4 : ref str.t := M.read (mk_str "message") in
      let* α5 : ref assistants_extra.anthropic.ApiErrorType.t := M.read self in
      let* α6 : M.Val (ref alloc.string.String.t) :=
        M.alloc
          (borrow
            (assistants_extra.anthropic.ApiErrorType.Get_message (deref α5))) in
      M.call
        (core.fmt.Formatter.t::["debug_struct_field2_finish"]
          α0
          α1
          α2
          (pointer_coercion
            "Unsize"
            (borrow
              (assistants_extra.anthropic.ApiErrorType.Get_error_type
                (deref α3))))
          α4
          (pointer_coercion "Unsize" (borrow α6))).
    
    Global Instance AssociatedFunction_fmt :
      Notations.DoubleColon Self "fmt" := {
      Notations.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiErrorType_t.
  End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiErrorType_t.
  
  Module  Impl_core_convert_From_http_header_value_InvalidHeaderValue_t_for_assistants_extra_anthropic_ApiError_t.
  Section Impl_core_convert_From_http_header_value_InvalidHeaderValue_t_for_assistants_extra_anthropic_ApiError_t.
    Definition Self : Set := assistants_extra.anthropic.ApiError.t.
    
    (*
        fn from(error: InvalidHeaderValue) -> Self {
            ApiError::InvalidRequestError(error.to_string())
        }
    *)
    Definition from (error : http.header.value.InvalidHeaderValue.t) : M Self :=
      let* error := M.alloc error in
      let* α0 :
          (ref http.header.value.InvalidHeaderValue.t) ->
            M alloc.string.String.t :=
        ltac:(M.get_method (fun ℐ =>
          alloc.string.ToString.to_string
            (Self := http.header.value.InvalidHeaderValue.t)
            (Trait := ℐ))) in
      let* α1 : alloc.string.String.t := M.call (α0 (borrow error)) in
      M.pure (assistants_extra.anthropic.ApiError.InvalidRequestError α1).
    
    Global Instance AssociatedFunction_from :
      Notations.DoubleColon Self "from" := {
      Notations.double_colon := from;
    }.
    
    Global Instance ℐ :
      core.convert.From.Trait Self
        (T := http.header.value.InvalidHeaderValue.t) := {
      core.convert.From.from := from;
    }.
  End Impl_core_convert_From_http_header_value_InvalidHeaderValue_t_for_assistants_extra_anthropic_ApiError_t.
  End Impl_core_convert_From_http_header_value_InvalidHeaderValue_t_for_assistants_extra_anthropic_ApiError_t.
  
  Module  Impl_core_convert_From_serde_json_error_Error_t_for_assistants_extra_anthropic_ApiError_t.
  Section Impl_core_convert_From_serde_json_error_Error_t_for_assistants_extra_anthropic_ApiError_t.
    Definition Self : Set := assistants_extra.anthropic.ApiError.t.
    
    (*
        fn from(error: serde_json::Error) -> Self {
            ApiError::InvalidRequestError(error.to_string())
        }
    *)
    Definition from (error : serde_json.error.Error.t) : M Self :=
      let* error := M.alloc error in
      let* α0 : (ref serde_json.error.Error.t) -> M alloc.string.String.t :=
        ltac:(M.get_method (fun ℐ =>
          alloc.string.ToString.to_string
            (Self := serde_json.error.Error.t)
            (Trait := ℐ))) in
      let* α1 : alloc.string.String.t := M.call (α0 (borrow error)) in
      M.pure (assistants_extra.anthropic.ApiError.InvalidRequestError α1).
    
    Global Instance AssociatedFunction_from :
      Notations.DoubleColon Self "from" := {
      Notations.double_colon := from;
    }.
    
    Global Instance ℐ :
      core.convert.From.Trait Self (T := serde_json.error.Error.t) := {
      core.convert.From.from := from;
    }.
  End Impl_core_convert_From_serde_json_error_Error_t_for_assistants_extra_anthropic_ApiError_t.
  End Impl_core_convert_From_serde_json_error_Error_t_for_assistants_extra_anthropic_ApiError_t.
  
  Module  Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_anthropic_ApiError_t.
  Section Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_anthropic_ApiError_t.
    Definition Self : Set := assistants_extra.anthropic.ApiError.t.
    
    (*
        fn from(error: reqwest::Error) -> Self {
            ApiError::InvalidRequestError(error.to_string())
        }
    *)
    Definition from (error : reqwest.error.Error.t) : M Self :=
      let* error := M.alloc error in
      let* α0 : (ref reqwest.error.Error.t) -> M alloc.string.String.t :=
        ltac:(M.get_method (fun ℐ =>
          alloc.string.ToString.to_string
            (Self := reqwest.error.Error.t)
            (Trait := ℐ))) in
      let* α1 : alloc.string.String.t := M.call (α0 (borrow error)) in
      M.pure (assistants_extra.anthropic.ApiError.InvalidRequestError α1).
    
    Global Instance AssociatedFunction_from :
      Notations.DoubleColon Self "from" := {
      Notations.double_colon := from;
    }.
    
    Global Instance ℐ :
      core.convert.From.Trait Self (T := reqwest.error.Error.t) := {
      core.convert.From.from := from;
    }.
  End Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_anthropic_ApiError_t.
  End Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_anthropic_ApiError_t.
  
  Module  Impl_core_error_Error_for_assistants_extra_anthropic_ApiError_t.
  Section Impl_core_error_Error_for_assistants_extra_anthropic_ApiError_t.
    Definition Self : Set := assistants_extra.anthropic.ApiError.t.
    
    Global Instance ℐ : core.error.Error.Required.Trait Self := {
      core.error.Error.source := Datatypes.None;
      core.error.Error.type_id := Datatypes.None;
      core.error.Error.description := Datatypes.None;
      core.error.Error.cause := Datatypes.None;
      core.error.Error.provide := Datatypes.None;
    }.
  End Impl_core_error_Error_for_assistants_extra_anthropic_ApiError_t.
  End Impl_core_error_Error_for_assistants_extra_anthropic_ApiError_t.
  
  (*
  fn format_prompt(mut prompt: String) -> String {
      debug!("Original prompt: {}", prompt);
      if !prompt.starts_with("Human:") {
          prompt = format!("Human: {}", prompt);
      }
      if !prompt.ends_with("Assistant:") {
          prompt = format!("{} Assistant:", prompt);
      }
      debug!("Formatted prompt: {}", prompt);
      prompt
  }
  *)
  Definition format_prompt
      (prompt : alloc.string.String.t)
      : M alloc.string.String.t :=
    let* prompt := M.alloc prompt in
    let* _ : M.Val unit :=
      let* lvl : M.Val log.Level.t := M.alloc log.Level.Debug in
      let* α0 : (ref log.Level.t) -> (ref log.LevelFilter.t) -> M bool.t :=
        ltac:(M.get_method (fun ℐ =>
          core.cmp.PartialOrd.le
            (Self := log.Level.t)
            (Rhs := log.LevelFilter.t)
            (Trait := ℐ))) in
      let* α1 : bool.t :=
        M.call (α0 (borrow lvl) (borrow log.STATIC_MAX_LEVEL)) in
      let* α2 : (ref log.Level.t) -> (ref log.LevelFilter.t) -> M bool.t :=
        ltac:(M.get_method (fun ℐ =>
          core.cmp.PartialOrd.le
            (Self := log.Level.t)
            (Rhs := log.LevelFilter.t)
            (Trait := ℐ))) in
      let* α3 : log.LevelFilter.t := M.call log.max_level in
      let* α4 : M.Val log.LevelFilter.t := M.alloc α3 in
      let* α5 : bool.t := M.call (α2 (borrow lvl) (borrow α4)) in
      let* α6 : M.Val bool.t := M.alloc (BinOp.Pure.and α1 α5) in
      let* α7 : bool.t := M.read (use α6) in
      if α7 then
        let* _ : M.Val unit :=
          let* α0 : ref str.t := M.read (mk_str "Original prompt: ") in
          let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
          let* α2 : core.fmt.rt.Argument.t :=
            M.call (core.fmt.rt.Argument.t::["new_display"] (borrow prompt)) in
          let* α3 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α2 ] in
          let* α4 : core.fmt.Arguments.t :=
            M.call
              (core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion "Unsize" (borrow α1))
                (pointer_coercion "Unsize" (borrow α3))) in
          let* α5 : log.Level.t := M.read lvl in
          let* α6 : ref str.t :=
            M.read (mk_str "assistants_extra::anthropic") in
          let* α7 : ref str.t :=
            M.read (mk_str "assistants_extra::anthropic") in
          let* α8 : ref str.t :=
            M.read (mk_str "assistants-extra/src/anthropic.rs") in
          let* α9 : M.Val (((ref str.t) * (ref str.t)) * (ref str.t)) :=
            M.alloc (α6, α7, α8) in
          let* α10 : unit :=
            M.call
              (log.__private_api.log
                α4
                α5
                (borrow α9)
                ((Integer.of_Z 91) : u32.t)
                core.option.Option.None) in
          M.alloc α10 in
        M.alloc tt
      else
        M.alloc tt in
    let* _ : M.Val unit :=
      let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
        ltac:(M.get_method (fun ℐ =>
          core.ops.deref.Deref.deref
            (Self := alloc.string.String.t)
            (Trait := ℐ))) in
      let* α1 : ref str.t := M.call (α0 (borrow prompt)) in
      let* α2 : ref str.t := M.read (mk_str "Human:") in
      let* α3 : bool.t := M.call (str.t::["starts_with"] α1 α2) in
      let* α4 : M.Val bool.t := M.alloc (UnOp.not α3) in
      let* α5 : bool.t := M.read (use α4) in
      if α5 then
        let* _ : M.Val unit :=
          let* res : M.Val alloc.string.String.t :=
            let* α0 : ref str.t := M.read (mk_str "Human: ") in
            let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
            let* α2 : core.fmt.rt.Argument.t :=
              M.call
                (core.fmt.rt.Argument.t::["new_display"] (borrow prompt)) in
            let* α3 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α2 ] in
            let* α4 : core.fmt.Arguments.t :=
              M.call
                (core.fmt.Arguments.t::["new_v1"]
                  (pointer_coercion "Unsize" (borrow α1))
                  (pointer_coercion "Unsize" (borrow α3))) in
            let* α5 : alloc.string.String.t := M.call (alloc.fmt.format α4) in
            M.alloc α5 in
          let* α0 : alloc.string.String.t := M.read res in
          assign prompt α0 in
        M.alloc tt
      else
        M.alloc tt in
    let* _ : M.Val unit :=
      let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
        ltac:(M.get_method (fun ℐ =>
          core.ops.deref.Deref.deref
            (Self := alloc.string.String.t)
            (Trait := ℐ))) in
      let* α1 : ref str.t := M.call (α0 (borrow prompt)) in
      let* α2 : ref str.t := M.read (mk_str "Assistant:") in
      let* α3 : bool.t := M.call (str.t::["ends_with"] α1 α2) in
      let* α4 : M.Val bool.t := M.alloc (UnOp.not α3) in
      let* α5 : bool.t := M.read (use α4) in
      if α5 then
        let* _ : M.Val unit :=
          let* res : M.Val alloc.string.String.t :=
            let* α0 : ref str.t := M.read (mk_str "") in
            let* α1 : ref str.t := M.read (mk_str " Assistant:") in
            let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
            let* α3 : core.fmt.rt.Argument.t :=
              M.call
                (core.fmt.rt.Argument.t::["new_display"] (borrow prompt)) in
            let* α4 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α3 ] in
            let* α5 : core.fmt.Arguments.t :=
              M.call
                (core.fmt.Arguments.t::["new_v1"]
                  (pointer_coercion "Unsize" (borrow α2))
                  (pointer_coercion "Unsize" (borrow α4))) in
            let* α6 : alloc.string.String.t := M.call (alloc.fmt.format α5) in
            M.alloc α6 in
          let* α0 : alloc.string.String.t := M.read res in
          assign prompt α0 in
        M.alloc tt
      else
        M.alloc tt in
    let* _ : M.Val unit :=
      let* lvl : M.Val log.Level.t := M.alloc log.Level.Debug in
      let* α0 : (ref log.Level.t) -> (ref log.LevelFilter.t) -> M bool.t :=
        ltac:(M.get_method (fun ℐ =>
          core.cmp.PartialOrd.le
            (Self := log.Level.t)
            (Rhs := log.LevelFilter.t)
            (Trait := ℐ))) in
      let* α1 : bool.t :=
        M.call (α0 (borrow lvl) (borrow log.STATIC_MAX_LEVEL)) in
      let* α2 : (ref log.Level.t) -> (ref log.LevelFilter.t) -> M bool.t :=
        ltac:(M.get_method (fun ℐ =>
          core.cmp.PartialOrd.le
            (Self := log.Level.t)
            (Rhs := log.LevelFilter.t)
            (Trait := ℐ))) in
      let* α3 : log.LevelFilter.t := M.call log.max_level in
      let* α4 : M.Val log.LevelFilter.t := M.alloc α3 in
      let* α5 : bool.t := M.call (α2 (borrow lvl) (borrow α4)) in
      let* α6 : M.Val bool.t := M.alloc (BinOp.Pure.and α1 α5) in
      let* α7 : bool.t := M.read (use α6) in
      if α7 then
        let* _ : M.Val unit :=
          let* α0 : ref str.t := M.read (mk_str "Formatted prompt: ") in
          let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
          let* α2 : core.fmt.rt.Argument.t :=
            M.call (core.fmt.rt.Argument.t::["new_display"] (borrow prompt)) in
          let* α3 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α2 ] in
          let* α4 : core.fmt.Arguments.t :=
            M.call
              (core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion "Unsize" (borrow α1))
                (pointer_coercion "Unsize" (borrow α3))) in
          let* α5 : log.Level.t := M.read lvl in
          let* α6 : ref str.t :=
            M.read (mk_str "assistants_extra::anthropic") in
          let* α7 : ref str.t :=
            M.read (mk_str "assistants_extra::anthropic") in
          let* α8 : ref str.t :=
            M.read (mk_str "assistants-extra/src/anthropic.rs") in
          let* α9 : M.Val (((ref str.t) * (ref str.t)) * (ref str.t)) :=
            M.alloc (α6, α7, α8) in
          let* α10 : unit :=
            M.call
              (log.__private_api.log
                α4
                α5
                (borrow α9)
                ((Integer.of_Z 98) : u32.t)
                core.option.Option.None) in
          M.alloc α10 in
        M.alloc tt
      else
        M.alloc tt in
    M.read prompt.
  
  (*
  pub async fn call_anthropic_api_stream(
      mut prompt: String,
      max_tokens_to_sample: i32,
      model: Option<String>,
      temperature: Option<f32>,
      stop_sequences: Option<Vec<String>>,
      top_p: Option<f32>,
      top_k: Option<i32>,
      metadata: Option<HashMap<String, String>>,
  ) -> Result<bytes::Bytes, ApiError> {
      let url = "https://api.anthropic.com/v1/complete";
      let api_key = std::env::var("ANTHROPIC_API_KEY").expect("ANTHROPIC_API_KEY must be set");
      prompt = format_prompt(prompt);
      let mut headers = HeaderMap::new();
      headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
      headers.insert("x-api-key", HeaderValue::from_str(&api_key)?);
  
      let mut body: HashMap<&str, serde_json::Value> = HashMap::new();
      body.insert(
          "model",
          serde_json::json!(model.unwrap_or_else(|| "claude-2.1".to_string())),
      );
      body.insert("prompt", serde_json::json!(prompt));
      body.insert(
          "max_tokens_to_sample",
          serde_json::json!(max_tokens_to_sample),
      );
      body.insert("temperature", serde_json::json!(temperature.unwrap_or(1.0)));
      body.insert("stream", serde_json::json!(true));
      headers.insert("anthropic-version", HeaderValue::from_static("2023-06-01"));
  
      if let Some(stop_sequences) = stop_sequences {
          body.insert("stop_sequences", serde_json::json!(stop_sequences));
      }
      if let Some(top_p) = top_p {
          body.insert("top_p", serde_json::json!(top_p));
      }
      if let Some(top_k) = top_k {
          body.insert("top_k", serde_json::json!(top_k));
      }
      if let Some(metadata) = metadata {
          body.insert("metadata", serde_json::json!(metadata));
      }
  
      let client = reqwest::Client::new();
      let res = client.post(url).headers(headers).json(&body).send().await?;
      Ok(res.bytes().await?)
  }
  *)
  Definition call_anthropic_api_stream
      (prompt : alloc.string.String.t)
      (max_tokens_to_sample : i32.t)
      (model : core.option.Option.t alloc.string.String.t)
      (temperature : core.option.Option.t f32.t)
      (stop_sequences
        :
        core.option.Option.t
          (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A))
      (top_p : core.option.Option.t f32.t)
      (top_k : core.option.Option.t i32.t)
      (metadata
        :
        core.option.Option.t
          (std.collections.hash.map.HashMap.t
            alloc.string.String.t
            alloc.string.String.t
            std.collections.hash.map.HashMap.Default.S))
      : M OpaqueDef :=
    let* prompt := M.alloc prompt in
    let* max_tokens_to_sample := M.alloc max_tokens_to_sample in
    let* model := M.alloc model in
    let* temperature := M.alloc temperature in
    let* stop_sequences := M.alloc stop_sequences in
    let* top_p := M.alloc top_p in
    let* top_k := M.alloc top_k in
    let* metadata := M.alloc metadata in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* prompt : M.Val alloc.string.String.t := M.copy prompt in
              let* max_tokens_to_sample : M.Val i32.t :=
                M.copy max_tokens_to_sample in
              let* model : M.Val (core.option.Option.t alloc.string.String.t) :=
                M.copy model in
              let* temperature : M.Val (core.option.Option.t f32.t) :=
                M.copy temperature in
              let* stop_sequences :
                  M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        alloc.string.String.t
                        alloc.alloc.Global.t)) :=
                M.copy stop_sequences in
              let* top_p : M.Val (core.option.Option.t f32.t) := M.copy top_p in
              let* top_k : M.Val (core.option.Option.t i32.t) := M.copy top_k in
              let* metadata :
                  M.Val
                    (core.option.Option.t
                      (std.collections.hash.map.HashMap.t
                        alloc.string.String.t
                        alloc.string.String.t
                        std.hash.random.RandomState.t)) :=
                M.copy metadata in
              let* url : M.Val (ref str.t) :=
                M.copy (mk_str "https://api.anthropic.com/v1/complete") in
              let* api_key : M.Val alloc.string.String.t :=
                let* α0 : ref str.t := M.read (mk_str "ANTHROPIC_API_KEY") in
                let* α1 :
                    core.result.Result.t
                      alloc.string.String.t
                      std.env.VarError.t :=
                  M.call (std.env.var α0) in
                let* α2 : ref str.t :=
                  M.read (mk_str "ANTHROPIC_API_KEY must be set") in
                let* α3 : alloc.string.String.t :=
                  M.call
                    ((core.result.Result.t
                          alloc.string.String.t
                          std.env.VarError.t)::["expect"]
                      α1
                      α2) in
                M.alloc α3 in
              let* _ : M.Val unit :=
                let* α0 : alloc.string.String.t := M.read prompt in
                let* α1 : alloc.string.String.t :=
                  M.call (assistants_extra.anthropic.format_prompt α0) in
                assign prompt α1 in
              let* headers :
                  M.Val
                    (http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t) :=
                let* α0 :
                    http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["new"] in
                M.alloc α0 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : http.header.name.HeaderName.t :=
                  M.read http.header.name.CONTENT_TYPE in
                let* α1 : ref str.t := M.read (mk_str "application/json") in
                let* α2 : http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.value.HeaderValue.t::["from_static"] α1) in
                let* α3 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : ref str.t := M.read (mk_str "x-api-key") in
                let* α1 :
                    (core.result.Result.t
                        http.header.value.HeaderValue.t
                        http.header.value.InvalidHeaderValue.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          http.header.value.HeaderValue.t
                          http.header.value.InvalidHeaderValue.t)
                      (Trait := ℐ))) in
                let* α2 : (ref alloc.string.String.t) -> M (ref _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.deref.Deref.deref
                      (Self := alloc.string.String.t)
                      (Trait := ℐ))) in
                let* α3 : ref str.t := M.call (α2 (borrow api_key)) in
                let* α4 :
                    core.result.Result.t
                      http.header.value.HeaderValue.t
                      http.header.value.InvalidHeaderValue.t :=
                  M.call (http.header.value.HeaderValue.t::["from_str"] α3) in
                let* α5 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        http.header.value.InvalidHeaderValue.t)
                      http.header.value.HeaderValue.t :=
                  M.call (α1 α4) in
                let* α6 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          http.header.value.InvalidHeaderValue.t)
                        http.header.value.HeaderValue.t) :=
                  M.alloc α5 in
                let* α7 : M.Val http.header.value.HeaderValue.t :=
                  match_operator
                    α6
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  http.header.value.InvalidHeaderValue.t)
                                ->
                                M
                                  (core.result.Result.t
                                    bytes.bytes.Bytes.t
                                    assistants_extra.anthropic.ApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    bytes.bytes.Bytes.t
                                    assistants_extra.anthropic.ApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    http.header.value.InvalidHeaderValue.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                http.header.value.InvalidHeaderValue.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                bytes.bytes.Bytes.t
                                assistants_extra.anthropic.ApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : http.header.value.HeaderValue.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val http.header.value.HeaderValue.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val http.header.value.HeaderValue.t)
                    ] in
                let* α8 : http.header.value.HeaderValue.t := M.read α7 in
                let* α9 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α8) in
                M.alloc α9 in
              let* body :
                  M.Val
                    (std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t) :=
                let* α0 :
                    std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t :=
                  M.call
                    (std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["new"] in
                M.alloc α0 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "model") in
                let* α1 : core.option.Option.t alloc.string.String.t :=
                  M.read model in
                let* α2 : alloc.string.String.t :=
                  M.call
                    ((core.option.Option.t
                          alloc.string.String.t)::["unwrap_or_else"]
                      α1
                      (fun (α0 : unit) =>
                        (let* α0 := M.alloc α0 in
                        match_operator
                          α0
                          [
                            fun γ =>
                              (let* α0 :
                                  (ref str.t) -> M alloc.string.String.t :=
                                ltac:(M.get_method (fun ℐ =>
                                  alloc.string.ToString.to_string
                                    (Self := str.t)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "claude-2.1") in
                              M.call (α0 α1)) :
                              M alloc.string.String.t
                          ]) :
                        M alloc.string.String.t)) in
                let* α3 : M.Val alloc.string.String.t := M.alloc α2 in
                let* α4 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow α3)) in
                let* α5 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α4) in
                let* α6 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α5) in
                M.alloc α6 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "prompt") in
                let* α1 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow prompt)) in
                let* α2 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α1) in
                let* α3 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "max_tokens_to_sample") in
                let* α1 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call
                    (serde_json.value.to_value (borrow max_tokens_to_sample)) in
                let* α2 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α1) in
                let* α3 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "temperature") in
                let* α1 : core.option.Option.t f32.t := M.read temperature in
                let* α2 : f32.t := M.read (UnsupportedLiteral : M.Val f32.t) in
                let* α3 : f32.t :=
                  M.call ((core.option.Option.t f32.t)::["unwrap_or"] α1 α2) in
                let* α4 : M.Val f32.t := M.alloc α3 in
                let* α5 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow α4)) in
                let* α6 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α5) in
                let* α7 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α6) in
                M.alloc α7 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "stream") in
                let* α1 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      (serde_json.value.Value.Bool true)) in
                M.alloc α1 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : ref str.t := M.read (mk_str "anthropic-version") in
                let* α1 : ref str.t := M.read (mk_str "2023-06-01") in
                let* α2 : http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.value.HeaderValue.t::["from_static"] α1) in
                let* α3 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val unit :=
                match_operator
                  stop_sequences
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* stop_sequences := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t :=
                            M.read (mk_str "stop_sequences") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call
                              (serde_json.value.to_value
                                (borrow stop_sequences)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* _ : M.Val unit :=
                match_operator
                  top_p
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* top_p := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t := M.read (mk_str "top_p") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call (serde_json.value.to_value (borrow top_p)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* _ : M.Val unit :=
                match_operator
                  top_k
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* top_k := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t := M.read (mk_str "top_k") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call (serde_json.value.to_value (borrow top_k)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* _ : M.Val unit :=
                match_operator
                  metadata
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* metadata := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t := M.read (mk_str "metadata") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call
                              (serde_json.value.to_value (borrow metadata)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* client : M.Val reqwest.async_impl.client.Client.t :=
                let* α0 : reqwest.async_impl.client.Client.t :=
                  M.call reqwest.async_impl.client.Client.t::["new"] in
                M.alloc α0 in
              let* res : M.Val reqwest.async_impl.response.Response.t :=
                let* α0 :
                    (core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          reqwest.async_impl.response.Response.t
                          reqwest.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 : _ -> M _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.future.into_future.IntoFuture.into_future
                      (Self := _)
                      (Trait := ℐ))) in
                let* α2 : ref str.t := M.read url in
                let* α3 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.client.Client.t::["post"]
                      (borrow client)
                      α2) in
                let* α4 :
                    http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t :=
                  M.read headers in
                let* α5 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["headers"]
                      α3
                      α4) in
                let* α6 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["json"]
                      α5
                      (borrow body)) in
                let* α7 : _ :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["send"]
                      α6) in
                let* α8 : _ := M.call (α1 α7) in
                let* α9 : M.Val _ := M.alloc α8 in
                let* α10 :
                    M.Val
                      (core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t) :=
                  match_operator
                    α9
                    [
                      fun γ =>
                        (let* __awaitee := M.copy γ in
                        M.loop
                          (let* _ : M.Val unit :=
                            let* α0 :
                                (core.pin.Pin.t (mut_ref _)) ->
                                  (mut_ref core.task.wake.Context.t) ->
                                  M (core.task.poll.Poll.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.future.future.Future.poll
                                  (Self := _)
                                  (Trait := ℐ))) in
                            let* α1 : core.pin.Pin.t (mut_ref _) :=
                              M.call
                                ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                  (borrow_mut __awaitee)) in
                            let* α2 : core.future.ResumeTy.t :=
                              M.read _task_context in
                            let* α3 : mut_ref core.task.wake.Context.t :=
                              M.call (core.future.get_context α2) in
                            let* α4 :
                                core.task.poll.Poll.t
                                  (core.result.Result.t
                                    reqwest.async_impl.response.Response.t
                                    reqwest.error.Error.t) :=
                              M.call (α0 α1 α3) in
                            let* α5 :
                                M.Val
                                  (core.task.poll.Poll.t
                                    (core.result.Result.t
                                      reqwest.async_impl.response.Response.t
                                      reqwest.error.Error.t)) :=
                              M.alloc α4 in
                            match_operator
                              α5
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Ready _ =>
                                    let γ0_0 :=
                                      core.task.poll.Poll.Get_Ready_0 γ in
                                    let* result := M.copy γ0_0 in
                                    let* α0 : M.Val never.t := M.break in
                                    let* α1 := M.read α0 in
                                    let* α2 : unit := never_to_any α1 in
                                    M.alloc α2
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit);
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Pending => M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit)
                              ] in
                          let* _ : M.Val unit :=
                            let* α0 : M.Val unit := M.alloc tt in
                            let* α1 : M.Val core.future.ResumeTy.t :=
                              yield α0 in
                            let* α2 : core.future.ResumeTy.t := M.read α1 in
                            assign _task_context α2 in
                          M.alloc tt)) :
                        M
                          (M.Val
                            (core.result.Result.t
                              reqwest.async_impl.response.Response.t
                              reqwest.error.Error.t))
                    ] in
                let* α11 :
                    core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t :=
                  M.read α10 in
                let* α12 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      reqwest.async_impl.response.Response.t :=
                  M.call (α0 α11) in
                let* α13 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          reqwest.error.Error.t)
                        reqwest.async_impl.response.Response.t) :=
                  M.alloc α12 in
                let* α14 : M.Val reqwest.async_impl.response.Response.t :=
                  match_operator
                    α13
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                                ->
                                M
                                  (core.result.Result.t
                                    bytes.bytes.Bytes.t
                                    assistants_extra.anthropic.ApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    bytes.bytes.Bytes.t
                                    assistants_extra.anthropic.ApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    reqwest.error.Error.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                bytes.bytes.Bytes.t
                                assistants_extra.anthropic.ApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : reqwest.async_impl.response.Response.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val reqwest.async_impl.response.Response.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val reqwest.async_impl.response.Response.t)
                    ] in
                M.copy α14 in
              let* α0 :
                  (core.result.Result.t
                      bytes.bytes.Bytes.t
                      reqwest.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        bytes.bytes.Bytes.t
                        reqwest.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : _ -> M _ :=
                ltac:(M.get_method (fun ℐ =>
                  core.future.into_future.IntoFuture.into_future
                    (Self := _)
                    (Trait := ℐ))) in
              let* α2 : reqwest.async_impl.response.Response.t := M.read res in
              let* α3 : _ :=
                M.call (reqwest.async_impl.response.Response.t::["bytes"] α2) in
              let* α4 : _ := M.call (α1 α3) in
              let* α5 : M.Val _ := M.alloc α4 in
              let* α6 :
                  M.Val
                    (core.result.Result.t
                      bytes.bytes.Bytes.t
                      reqwest.error.Error.t) :=
                match_operator
                  α5
                  [
                    fun γ =>
                      (let* __awaitee := M.copy γ in
                      M.loop
                        (let* _ : M.Val unit :=
                          let* α0 :
                              (core.pin.Pin.t (mut_ref _)) ->
                                (mut_ref core.task.wake.Context.t) ->
                                M (core.task.poll.Poll.t _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.future.Future.poll
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 : core.pin.Pin.t (mut_ref _) :=
                            M.call
                              ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                (borrow_mut __awaitee)) in
                          let* α2 : core.future.ResumeTy.t :=
                            M.read _task_context in
                          let* α3 : mut_ref core.task.wake.Context.t :=
                            M.call (core.future.get_context α2) in
                          let* α4 :
                              core.task.poll.Poll.t
                                (core.result.Result.t
                                  bytes.bytes.Bytes.t
                                  reqwest.error.Error.t) :=
                            M.call (α0 α1 α3) in
                          let* α5 :
                              M.Val
                                (core.task.poll.Poll.t
                                  (core.result.Result.t
                                    bytes.bytes.Bytes.t
                                    reqwest.error.Error.t)) :=
                            M.alloc α4 in
                          match_operator
                            α5
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Ready _ =>
                                  let γ0_0 :=
                                    core.task.poll.Poll.Get_Ready_0 γ in
                                  let* result := M.copy γ0_0 in
                                  let* α0 : M.Val never.t := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2
                                | _ => M.break_match
                                end) :
                                M (M.Val unit);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Pending => M.alloc tt
                                | _ => M.break_match
                                end) :
                                M (M.Val unit)
                            ] in
                        let* _ : M.Val unit :=
                          let* α0 : M.Val unit := M.alloc tt in
                          let* α1 : M.Val core.future.ResumeTy.t := yield α0 in
                          let* α2 : core.future.ResumeTy.t := M.read α1 in
                          assign _task_context α2 in
                        M.alloc tt)) :
                      M
                        (M.Val
                          (core.result.Result.t
                            bytes.bytes.Bytes.t
                            reqwest.error.Error.t))
                  ] in
              let* α7 :
                  core.result.Result.t
                    bytes.bytes.Bytes.t
                    reqwest.error.Error.t :=
                M.read α6 in
              let* α8 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      reqwest.error.Error.t)
                    bytes.bytes.Bytes.t :=
                M.call (α0 α7) in
              let* α9 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      bytes.bytes.Bytes.t) :=
                M.alloc α8 in
              let* α10 : M.Val bytes.bytes.Bytes.t :=
                match_operator
                  α9
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  bytes.bytes.Bytes.t
                                  assistants_extra.anthropic.ApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  bytes.bytes.Bytes.t
                                  assistants_extra.anthropic.ApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              reqwest.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              bytes.bytes.Bytes.t
                              assistants_extra.anthropic.ApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : bytes.bytes.Bytes.t := never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val bytes.bytes.Bytes.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val bytes.bytes.Bytes.t)
                  ] in
              let* α11 : bytes.bytes.Bytes.t := M.read α10 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      bytes.bytes.Bytes.t
                      assistants_extra.anthropic.ApiError.t) :=
                M.alloc (core.result.Result.Ok α11) in
              M.read (use α0)) :
              M
                (core.result.Result.t
                  bytes.bytes.Bytes.t
                  assistants_extra.anthropic.ApiError.t)
          ]) :
        M
          (core.result.Result.t
            bytes.bytes.Bytes.t
            assistants_extra.anthropic.ApiError.t)).
  
  (*
  pub async fn call_anthropic_api(
      mut prompt: String,
      max_tokens_to_sample: i32,
      model: Option<String>,
      temperature: Option<f32>,
      stop_sequences: Option<Vec<String>>,
      top_p: Option<f32>,
      top_k: Option<i32>,
      metadata: Option<HashMap<String, String>>,
  ) -> Result<ResponseBody, ApiError> {
      let url = "https://api.anthropic.com/v1/complete";
      let api_key = std::env::var("ANTHROPIC_API_KEY").expect("ANTHROPIC_API_KEY must be set");
      prompt = format_prompt(prompt);
      let mut headers = HeaderMap::new();
      headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
      headers.insert("x-api-key", HeaderValue::from_str(&api_key)?);
      // https://docs.anthropic.com/claude/reference/versioning
      headers.insert("anthropic-version", HeaderValue::from_static("2023-06-01"));
      let mut body: HashMap<&str, serde_json::Value> = HashMap::new();
      body.insert(
          "model",
          serde_json::json!(model.unwrap_or_else(|| "claude-2.1".to_string())),
      );
      body.insert("prompt", serde_json::json!(prompt));
      body.insert(
          "max_tokens_to_sample",
          serde_json::json!(max_tokens_to_sample),
      );
      body.insert("temperature", serde_json::json!(temperature.unwrap_or(1.0)));
      body.insert("stream", serde_json::json!(false));
  
      if let Some(stop_sequences) = stop_sequences {
          body.insert("stop_sequences", serde_json::json!(stop_sequences));
      }
      if let Some(top_p) = top_p {
          body.insert("top_p", serde_json::json!(top_p));
      }
      if let Some(top_k) = top_k {
          body.insert("top_k", serde_json::json!(top_k));
      }
      if let Some(metadata) = metadata {
          body.insert("metadata", serde_json::json!(metadata));
      }
  
      let client = reqwest::Client::builder()
          .danger_accept_invalid_certs(true)
          .build()?;
      let res = client.post(url).headers(headers).json(&body).send().await?;
      let raw_res = res.text().await?;
      let api_res: ApiResponseBody = serde_json::from_str(&raw_res)?;
  
      match api_res {
          ApiResponseBody::Ok(res_body) => Ok(res_body),
          ApiResponseBody::Err { error } => match error.error_type.as_str() {
              "invalid_request_error" => Err(ApiError::InvalidRequestError(error.message)),
              "authentication_error" => Err(ApiError::AuthenticationError(error.message)),
              "permission_error" => Err(ApiError::PermissionError(error.message)),
              "not_found_error" => Err(ApiError::NotFoundError(error.message)),
              "rate_limit_error" => Err(ApiError::RateLimitError(error.message)),
              "api_error" => Err(ApiError::ApiError(error.message)),
              "overloaded_error" => Err(ApiError::OverloadedError(error.message)),
              _ => Err(ApiError::UnknownError(error.message)),
          },
      }
  }
  *)
  Definition call_anthropic_api
      (prompt : alloc.string.String.t)
      (max_tokens_to_sample : i32.t)
      (model : core.option.Option.t alloc.string.String.t)
      (temperature : core.option.Option.t f32.t)
      (stop_sequences
        :
        core.option.Option.t
          (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A))
      (top_p : core.option.Option.t f32.t)
      (top_k : core.option.Option.t i32.t)
      (metadata
        :
        core.option.Option.t
          (std.collections.hash.map.HashMap.t
            alloc.string.String.t
            alloc.string.String.t
            std.collections.hash.map.HashMap.Default.S))
      : M OpaqueDef :=
    let* prompt := M.alloc prompt in
    let* max_tokens_to_sample := M.alloc max_tokens_to_sample in
    let* model := M.alloc model in
    let* temperature := M.alloc temperature in
    let* stop_sequences := M.alloc stop_sequences in
    let* top_p := M.alloc top_p in
    let* top_k := M.alloc top_k in
    let* metadata := M.alloc metadata in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* prompt : M.Val alloc.string.String.t := M.copy prompt in
              let* max_tokens_to_sample : M.Val i32.t :=
                M.copy max_tokens_to_sample in
              let* model : M.Val (core.option.Option.t alloc.string.String.t) :=
                M.copy model in
              let* temperature : M.Val (core.option.Option.t f32.t) :=
                M.copy temperature in
              let* stop_sequences :
                  M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        alloc.string.String.t
                        alloc.alloc.Global.t)) :=
                M.copy stop_sequences in
              let* top_p : M.Val (core.option.Option.t f32.t) := M.copy top_p in
              let* top_k : M.Val (core.option.Option.t i32.t) := M.copy top_k in
              let* metadata :
                  M.Val
                    (core.option.Option.t
                      (std.collections.hash.map.HashMap.t
                        alloc.string.String.t
                        alloc.string.String.t
                        std.hash.random.RandomState.t)) :=
                M.copy metadata in
              let* url : M.Val (ref str.t) :=
                M.copy (mk_str "https://api.anthropic.com/v1/complete") in
              let* api_key : M.Val alloc.string.String.t :=
                let* α0 : ref str.t := M.read (mk_str "ANTHROPIC_API_KEY") in
                let* α1 :
                    core.result.Result.t
                      alloc.string.String.t
                      std.env.VarError.t :=
                  M.call (std.env.var α0) in
                let* α2 : ref str.t :=
                  M.read (mk_str "ANTHROPIC_API_KEY must be set") in
                let* α3 : alloc.string.String.t :=
                  M.call
                    ((core.result.Result.t
                          alloc.string.String.t
                          std.env.VarError.t)::["expect"]
                      α1
                      α2) in
                M.alloc α3 in
              let* _ : M.Val unit :=
                let* α0 : alloc.string.String.t := M.read prompt in
                let* α1 : alloc.string.String.t :=
                  M.call (assistants_extra.anthropic.format_prompt α0) in
                assign prompt α1 in
              let* headers :
                  M.Val
                    (http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t) :=
                let* α0 :
                    http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["new"] in
                M.alloc α0 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : http.header.name.HeaderName.t :=
                  M.read http.header.name.CONTENT_TYPE in
                let* α1 : ref str.t := M.read (mk_str "application/json") in
                let* α2 : http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.value.HeaderValue.t::["from_static"] α1) in
                let* α3 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : ref str.t := M.read (mk_str "x-api-key") in
                let* α1 :
                    (core.result.Result.t
                        http.header.value.HeaderValue.t
                        http.header.value.InvalidHeaderValue.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          http.header.value.HeaderValue.t
                          http.header.value.InvalidHeaderValue.t)
                      (Trait := ℐ))) in
                let* α2 : (ref alloc.string.String.t) -> M (ref _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.deref.Deref.deref
                      (Self := alloc.string.String.t)
                      (Trait := ℐ))) in
                let* α3 : ref str.t := M.call (α2 (borrow api_key)) in
                let* α4 :
                    core.result.Result.t
                      http.header.value.HeaderValue.t
                      http.header.value.InvalidHeaderValue.t :=
                  M.call (http.header.value.HeaderValue.t::["from_str"] α3) in
                let* α5 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        http.header.value.InvalidHeaderValue.t)
                      http.header.value.HeaderValue.t :=
                  M.call (α1 α4) in
                let* α6 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          http.header.value.InvalidHeaderValue.t)
                        http.header.value.HeaderValue.t) :=
                  M.alloc α5 in
                let* α7 : M.Val http.header.value.HeaderValue.t :=
                  match_operator
                    α6
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  http.header.value.InvalidHeaderValue.t)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    http.header.value.InvalidHeaderValue.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                http.header.value.InvalidHeaderValue.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.anthropic.ResponseBody.t
                                assistants_extra.anthropic.ApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : http.header.value.HeaderValue.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val http.header.value.HeaderValue.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val http.header.value.HeaderValue.t)
                    ] in
                let* α8 : http.header.value.HeaderValue.t := M.read α7 in
                let* α9 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α8) in
                M.alloc α9 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : ref str.t := M.read (mk_str "anthropic-version") in
                let* α1 : ref str.t := M.read (mk_str "2023-06-01") in
                let* α2 : http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.value.HeaderValue.t::["from_static"] α1) in
                let* α3 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α2) in
                M.alloc α3 in
              let* body :
                  M.Val
                    (std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t) :=
                let* α0 :
                    std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t :=
                  M.call
                    (std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["new"] in
                M.alloc α0 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "model") in
                let* α1 : core.option.Option.t alloc.string.String.t :=
                  M.read model in
                let* α2 : alloc.string.String.t :=
                  M.call
                    ((core.option.Option.t
                          alloc.string.String.t)::["unwrap_or_else"]
                      α1
                      (fun (α0 : unit) =>
                        (let* α0 := M.alloc α0 in
                        match_operator
                          α0
                          [
                            fun γ =>
                              (let* α0 :
                                  (ref str.t) -> M alloc.string.String.t :=
                                ltac:(M.get_method (fun ℐ =>
                                  alloc.string.ToString.to_string
                                    (Self := str.t)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "claude-2.1") in
                              M.call (α0 α1)) :
                              M alloc.string.String.t
                          ]) :
                        M alloc.string.String.t)) in
                let* α3 : M.Val alloc.string.String.t := M.alloc α2 in
                let* α4 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow α3)) in
                let* α5 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α4) in
                let* α6 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α5) in
                M.alloc α6 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "prompt") in
                let* α1 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow prompt)) in
                let* α2 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α1) in
                let* α3 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "max_tokens_to_sample") in
                let* α1 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call
                    (serde_json.value.to_value (borrow max_tokens_to_sample)) in
                let* α2 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α1) in
                let* α3 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "temperature") in
                let* α1 : core.option.Option.t f32.t := M.read temperature in
                let* α2 : f32.t := M.read (UnsupportedLiteral : M.Val f32.t) in
                let* α3 : f32.t :=
                  M.call ((core.option.Option.t f32.t)::["unwrap_or"] α1 α2) in
                let* α4 : M.Val f32.t := M.alloc α3 in
                let* α5 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow α4)) in
                let* α6 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α5) in
                let* α7 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α6) in
                M.alloc α7 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "stream") in
                let* α1 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      (serde_json.value.Value.Bool false)) in
                M.alloc α1 in
              let* _ : M.Val unit :=
                match_operator
                  stop_sequences
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* stop_sequences := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t :=
                            M.read (mk_str "stop_sequences") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call
                              (serde_json.value.to_value
                                (borrow stop_sequences)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* _ : M.Val unit :=
                match_operator
                  top_p
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* top_p := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t := M.read (mk_str "top_p") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call (serde_json.value.to_value (borrow top_p)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* _ : M.Val unit :=
                match_operator
                  top_k
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* top_k := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t := M.read (mk_str "top_k") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call (serde_json.value.to_value (borrow top_k)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* _ : M.Val unit :=
                match_operator
                  metadata
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* metadata := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t := M.read (mk_str "metadata") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call
                              (serde_json.value.to_value (borrow metadata)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* client : M.Val reqwest.async_impl.client.Client.t :=
                let* α0 :
                    (core.result.Result.t
                        reqwest.async_impl.client.Client.t
                        reqwest.error.Error.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          reqwest.async_impl.client.Client.t
                          reqwest.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 : reqwest.async_impl.client.ClientBuilder.t :=
                  M.call reqwest.async_impl.client.Client.t::["builder"] in
                let* α2 : reqwest.async_impl.client.ClientBuilder.t :=
                  M.call
                    (reqwest.async_impl.client.ClientBuilder.t::["danger_accept_invalid_certs"]
                      α1
                      true) in
                let* α3 :
                    core.result.Result.t
                      reqwest.async_impl.client.Client.t
                      reqwest.error.Error.t :=
                  M.call
                    (reqwest.async_impl.client.ClientBuilder.t::["build"] α2) in
                let* α4 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      reqwest.async_impl.client.Client.t :=
                  M.call (α0 α3) in
                let* α5 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          reqwest.error.Error.t)
                        reqwest.async_impl.client.Client.t) :=
                  M.alloc α4 in
                let* α6 : M.Val reqwest.async_impl.client.Client.t :=
                  match_operator
                    α5
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    reqwest.error.Error.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.anthropic.ResponseBody.t
                                assistants_extra.anthropic.ApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : reqwest.async_impl.client.Client.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val reqwest.async_impl.client.Client.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val reqwest.async_impl.client.Client.t)
                    ] in
                M.copy α6 in
              let* res : M.Val reqwest.async_impl.response.Response.t :=
                let* α0 :
                    (core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          reqwest.async_impl.response.Response.t
                          reqwest.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 : _ -> M _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.future.into_future.IntoFuture.into_future
                      (Self := _)
                      (Trait := ℐ))) in
                let* α2 : ref str.t := M.read url in
                let* α3 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.client.Client.t::["post"]
                      (borrow client)
                      α2) in
                let* α4 :
                    http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t :=
                  M.read headers in
                let* α5 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["headers"]
                      α3
                      α4) in
                let* α6 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["json"]
                      α5
                      (borrow body)) in
                let* α7 : _ :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["send"]
                      α6) in
                let* α8 : _ := M.call (α1 α7) in
                let* α9 : M.Val _ := M.alloc α8 in
                let* α10 :
                    M.Val
                      (core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t) :=
                  match_operator
                    α9
                    [
                      fun γ =>
                        (let* __awaitee := M.copy γ in
                        M.loop
                          (let* _ : M.Val unit :=
                            let* α0 :
                                (core.pin.Pin.t (mut_ref _)) ->
                                  (mut_ref core.task.wake.Context.t) ->
                                  M (core.task.poll.Poll.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.future.future.Future.poll
                                  (Self := _)
                                  (Trait := ℐ))) in
                            let* α1 : core.pin.Pin.t (mut_ref _) :=
                              M.call
                                ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                  (borrow_mut __awaitee)) in
                            let* α2 : core.future.ResumeTy.t :=
                              M.read _task_context in
                            let* α3 : mut_ref core.task.wake.Context.t :=
                              M.call (core.future.get_context α2) in
                            let* α4 :
                                core.task.poll.Poll.t
                                  (core.result.Result.t
                                    reqwest.async_impl.response.Response.t
                                    reqwest.error.Error.t) :=
                              M.call (α0 α1 α3) in
                            let* α5 :
                                M.Val
                                  (core.task.poll.Poll.t
                                    (core.result.Result.t
                                      reqwest.async_impl.response.Response.t
                                      reqwest.error.Error.t)) :=
                              M.alloc α4 in
                            match_operator
                              α5
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Ready _ =>
                                    let γ0_0 :=
                                      core.task.poll.Poll.Get_Ready_0 γ in
                                    let* result := M.copy γ0_0 in
                                    let* α0 : M.Val never.t := M.break in
                                    let* α1 := M.read α0 in
                                    let* α2 : unit := never_to_any α1 in
                                    M.alloc α2
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit);
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Pending => M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit)
                              ] in
                          let* _ : M.Val unit :=
                            let* α0 : M.Val unit := M.alloc tt in
                            let* α1 : M.Val core.future.ResumeTy.t :=
                              yield α0 in
                            let* α2 : core.future.ResumeTy.t := M.read α1 in
                            assign _task_context α2 in
                          M.alloc tt)) :
                        M
                          (M.Val
                            (core.result.Result.t
                              reqwest.async_impl.response.Response.t
                              reqwest.error.Error.t))
                    ] in
                let* α11 :
                    core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t :=
                  M.read α10 in
                let* α12 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      reqwest.async_impl.response.Response.t :=
                  M.call (α0 α11) in
                let* α13 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          reqwest.error.Error.t)
                        reqwest.async_impl.response.Response.t) :=
                  M.alloc α12 in
                let* α14 : M.Val reqwest.async_impl.response.Response.t :=
                  match_operator
                    α13
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    reqwest.error.Error.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.anthropic.ResponseBody.t
                                assistants_extra.anthropic.ApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : reqwest.async_impl.response.Response.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val reqwest.async_impl.response.Response.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val reqwest.async_impl.response.Response.t)
                    ] in
                M.copy α14 in
              let* raw_res : M.Val alloc.string.String.t :=
                let* α0 :
                    (core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          alloc.string.String.t
                          reqwest.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 : _ -> M _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.future.into_future.IntoFuture.into_future
                      (Self := _)
                      (Trait := ℐ))) in
                let* α2 : reqwest.async_impl.response.Response.t :=
                  M.read res in
                let* α3 : _ :=
                  M.call
                    (reqwest.async_impl.response.Response.t::["text"] α2) in
                let* α4 : _ := M.call (α1 α3) in
                let* α5 : M.Val _ := M.alloc α4 in
                let* α6 :
                    M.Val
                      (core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t) :=
                  match_operator
                    α5
                    [
                      fun γ =>
                        (let* __awaitee := M.copy γ in
                        M.loop
                          (let* _ : M.Val unit :=
                            let* α0 :
                                (core.pin.Pin.t (mut_ref _)) ->
                                  (mut_ref core.task.wake.Context.t) ->
                                  M (core.task.poll.Poll.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.future.future.Future.poll
                                  (Self := _)
                                  (Trait := ℐ))) in
                            let* α1 : core.pin.Pin.t (mut_ref _) :=
                              M.call
                                ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                  (borrow_mut __awaitee)) in
                            let* α2 : core.future.ResumeTy.t :=
                              M.read _task_context in
                            let* α3 : mut_ref core.task.wake.Context.t :=
                              M.call (core.future.get_context α2) in
                            let* α4 :
                                core.task.poll.Poll.t
                                  (core.result.Result.t
                                    alloc.string.String.t
                                    reqwest.error.Error.t) :=
                              M.call (α0 α1 α3) in
                            let* α5 :
                                M.Val
                                  (core.task.poll.Poll.t
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      reqwest.error.Error.t)) :=
                              M.alloc α4 in
                            match_operator
                              α5
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Ready _ =>
                                    let γ0_0 :=
                                      core.task.poll.Poll.Get_Ready_0 γ in
                                    let* result := M.copy γ0_0 in
                                    let* α0 : M.Val never.t := M.break in
                                    let* α1 := M.read α0 in
                                    let* α2 : unit := never_to_any α1 in
                                    M.alloc α2
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit);
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Pending => M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit)
                              ] in
                          let* _ : M.Val unit :=
                            let* α0 : M.Val unit := M.alloc tt in
                            let* α1 : M.Val core.future.ResumeTy.t :=
                              yield α0 in
                            let* α2 : core.future.ResumeTy.t := M.read α1 in
                            assign _task_context α2 in
                          M.alloc tt)) :
                        M
                          (M.Val
                            (core.result.Result.t
                              alloc.string.String.t
                              reqwest.error.Error.t))
                    ] in
                let* α7 :
                    core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t :=
                  M.read α6 in
                let* α8 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      alloc.string.String.t :=
                  M.call (α0 α7) in
                let* α9 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          reqwest.error.Error.t)
                        alloc.string.String.t) :=
                  M.alloc α8 in
                let* α10 : M.Val alloc.string.String.t :=
                  match_operator
                    α9
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    reqwest.error.Error.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.anthropic.ResponseBody.t
                                assistants_extra.anthropic.ApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ] in
                M.copy α10 in
              let* api_res :
                  M.Val assistants_extra.anthropic.ApiResponseBody.t :=
                let* α0 :
                    (core.result.Result.t
                        assistants_extra.anthropic.ApiResponseBody.t
                        serde_json.error.Error.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          assistants_extra.anthropic.ApiResponseBody.t
                          serde_json.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 : (ref alloc.string.String.t) -> M (ref _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.deref.Deref.deref
                      (Self := alloc.string.String.t)
                      (Trait := ℐ))) in
                let* α2 : ref str.t := M.call (α1 (borrow raw_res)) in
                let* α3 :
                    core.result.Result.t
                      assistants_extra.anthropic.ApiResponseBody.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.de.from_str α2) in
                let* α4 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        serde_json.error.Error.t)
                      assistants_extra.anthropic.ApiResponseBody.t :=
                  M.call (α0 α3) in
                let* α5 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          serde_json.error.Error.t)
                        assistants_extra.anthropic.ApiResponseBody.t) :=
                  M.alloc α4 in
                let* α6 : M.Val assistants_extra.anthropic.ApiResponseBody.t :=
                  match_operator
                    α5
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  serde_json.error.Error.t)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    serde_json.error.Error.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                serde_json.error.Error.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.anthropic.ResponseBody.t
                                assistants_extra.anthropic.ApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              assistants_extra.anthropic.ApiResponseBody.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val assistants_extra.anthropic.ApiResponseBody.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val assistants_extra.anthropic.ApiResponseBody.t)
                    ] in
                M.copy α6 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      assistants_extra.anthropic.ResponseBody.t
                      assistants_extra.anthropic.ApiError.t) :=
                match_operator
                  api_res
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | assistants_extra.anthropic.ApiResponseBody.Ok _ =>
                        let γ0_0 :=
                          assistants_extra.anthropic.ApiResponseBody.Get_Ok_0
                            γ in
                        let* res_body := M.copy γ0_0 in
                        let* α0 : assistants_extra.anthropic.ResponseBody.t :=
                          M.read res_body in
                        M.alloc (core.result.Result.Ok α0)
                      | _ => M.break_match
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            assistants_extra.anthropic.ResponseBody.t
                            assistants_extra.anthropic.ApiError.t));
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      |
                          assistants_extra.anthropic.ApiResponseBody.Err
                          {|
                            assistants_extra.anthropic.ApiResponseBody.Err.error
                              :=
                              _;
                          |}
                          =>
                        let γ0_0 :=
                          assistants_extra.anthropic.ApiResponseBody.Get_Err_error
                            γ in
                        let* error := M.copy γ0_0 in
                        let* α0 : ref str.t :=
                          M.call
                            (alloc.string.String.t::["as_str"]
                              (borrow
                                (assistants_extra.anthropic.ApiErrorType.Get_error_type
                                  error))) in
                        let* α1 : M.Val (ref str.t) := M.alloc α0 in
                        match_operator
                          α1
                          [
                            fun γ =>
                              (let* α0 : alloc.string.String.t :=
                                M.read
                                  (assistants_extra.anthropic.ApiErrorType.Get_message
                                    error) in
                              M.alloc
                                (core.result.Result.Err
                                  (assistants_extra.anthropic.ApiError.InvalidRequestError
                                    α0))) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t));
                            fun γ =>
                              (let* α0 : alloc.string.String.t :=
                                M.read
                                  (assistants_extra.anthropic.ApiErrorType.Get_message
                                    error) in
                              M.alloc
                                (core.result.Result.Err
                                  (assistants_extra.anthropic.ApiError.AuthenticationError
                                    α0))) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t));
                            fun γ =>
                              (let* α0 : alloc.string.String.t :=
                                M.read
                                  (assistants_extra.anthropic.ApiErrorType.Get_message
                                    error) in
                              M.alloc
                                (core.result.Result.Err
                                  (assistants_extra.anthropic.ApiError.PermissionError
                                    α0))) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t));
                            fun γ =>
                              (let* α0 : alloc.string.String.t :=
                                M.read
                                  (assistants_extra.anthropic.ApiErrorType.Get_message
                                    error) in
                              M.alloc
                                (core.result.Result.Err
                                  (assistants_extra.anthropic.ApiError.NotFoundError
                                    α0))) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t));
                            fun γ =>
                              (let* α0 : alloc.string.String.t :=
                                M.read
                                  (assistants_extra.anthropic.ApiErrorType.Get_message
                                    error) in
                              M.alloc
                                (core.result.Result.Err
                                  (assistants_extra.anthropic.ApiError.RateLimitError
                                    α0))) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t));
                            fun γ =>
                              (let* α0 : alloc.string.String.t :=
                                M.read
                                  (assistants_extra.anthropic.ApiErrorType.Get_message
                                    error) in
                              M.alloc
                                (core.result.Result.Err
                                  (assistants_extra.anthropic.ApiError.ApiError
                                    α0))) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t));
                            fun γ =>
                              (let* α0 : alloc.string.String.t :=
                                M.read
                                  (assistants_extra.anthropic.ApiErrorType.Get_message
                                    error) in
                              M.alloc
                                (core.result.Result.Err
                                  (assistants_extra.anthropic.ApiError.OverloadedError
                                    α0))) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t));
                            fun γ =>
                              (let* α0 : alloc.string.String.t :=
                                M.read
                                  (assistants_extra.anthropic.ApiErrorType.Get_message
                                    error) in
                              M.alloc
                                (core.result.Result.Err
                                  (assistants_extra.anthropic.ApiError.UnknownError
                                    α0))) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t))
                          ]
                      | _ => M.break_match
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            assistants_extra.anthropic.ResponseBody.t
                            assistants_extra.anthropic.ApiError.t))
                  ] in
              M.read (use α0)) :
              M
                (core.result.Result.t
                  assistants_extra.anthropic.ResponseBody.t
                  assistants_extra.anthropic.ApiError.t)
          ]) :
        M
          (core.result.Result.t
            assistants_extra.anthropic.ResponseBody.t
            assistants_extra.anthropic.ApiError.t)).
End anthropic.

Module  Impl_core_fmt_Display_for_assistants_extra_anthropic_ApiError_t.
Section Impl_core_fmt_Display_for_assistants_extra_anthropic_ApiError_t.
  Definition Self : Set := assistants_extra.anthropic.ApiError.t.
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          match self {
              ApiError::InvalidRequestError(msg) => write!(f, "Invalid Request: {}", msg),
              ApiError::AuthenticationError(msg) => write!(f, "Authentication Error: {}", msg),
              ApiError::PermissionError(msg) => write!(f, "Permission Error: {}", msg),
              ApiError::NotFoundError(msg) => write!(f, "Not Found: {}", msg),
              ApiError::RateLimitError(msg) => write!(f, "Rate Limit: {}", msg),
              ApiError::ApiError(msg) => write!(f, "API Error: {}", msg),
              ApiError::OverloadedError(msg) => write!(f, "Overloaded: {}", msg),
              ApiError::UnknownError(msg) => write!(f, "Unknown Error: {}", msg),
          }
      }
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : M.Val (core.result.Result.t unit core.fmt.Error.t) :=
      match_operator
        self
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.InvalidRequestError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_InvalidRequestError_0
                  γ in
              let* msg := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "Invalid Request: ") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
              let* α3 : core.fmt.rt.Argument.t :=
                M.call (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
              let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α3 ] in
              let* α5 : core.fmt.Arguments.t :=
                M.call
                  (core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α4))) in
              let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
              M.alloc α6
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.AuthenticationError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_AuthenticationError_0
                  γ in
              let* msg := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "Authentication Error: ") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
              let* α3 : core.fmt.rt.Argument.t :=
                M.call (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
              let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α3 ] in
              let* α5 : core.fmt.Arguments.t :=
                M.call
                  (core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α4))) in
              let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
              M.alloc α6
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.PermissionError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_PermissionError_0 γ in
              let* msg := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "Permission Error: ") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
              let* α3 : core.fmt.rt.Argument.t :=
                M.call (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
              let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α3 ] in
              let* α5 : core.fmt.Arguments.t :=
                M.call
                  (core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α4))) in
              let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
              M.alloc α6
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.NotFoundError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_NotFoundError_0 γ in
              let* msg := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "Not Found: ") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
              let* α3 : core.fmt.rt.Argument.t :=
                M.call (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
              let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α3 ] in
              let* α5 : core.fmt.Arguments.t :=
                M.call
                  (core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α4))) in
              let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
              M.alloc α6
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.RateLimitError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_RateLimitError_0 γ in
              let* msg := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "Rate Limit: ") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
              let* α3 : core.fmt.rt.Argument.t :=
                M.call (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
              let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α3 ] in
              let* α5 : core.fmt.Arguments.t :=
                M.call
                  (core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α4))) in
              let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
              M.alloc α6
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.ApiError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_ApiError_0 γ in
              let* msg := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "API Error: ") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
              let* α3 : core.fmt.rt.Argument.t :=
                M.call (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
              let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α3 ] in
              let* α5 : core.fmt.Arguments.t :=
                M.call
                  (core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α4))) in
              let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
              M.alloc α6
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.OverloadedError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_OverloadedError_0 γ in
              let* msg := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "Overloaded: ") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
              let* α3 : core.fmt.rt.Argument.t :=
                M.call (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
              let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α3 ] in
              let* α5 : core.fmt.Arguments.t :=
                M.call
                  (core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α4))) in
              let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
              M.alloc α6
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.UnknownError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_UnknownError_0 γ in
              let* msg := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "Unknown Error: ") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
              let* α3 : core.fmt.rt.Argument.t :=
                M.call (core.fmt.rt.Argument.t::["new_display"] (borrow msg)) in
              let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α3 ] in
              let* α5 : core.fmt.Arguments.t :=
                M.call
                  (core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α4))) in
              let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
              M.alloc α6
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt := fmt;
  }.
End Impl_core_fmt_Display_for_assistants_extra_anthropic_ApiError_t.
End Impl_core_fmt_Display_for_assistants_extra_anthropic_ApiError_t.

Module  RequestBody.
Section RequestBody.
  Record t : Set := {
    model : alloc.string.String.t;
    prompt : alloc.string.String.t;
    max_tokens_to_sample : i32.t;
    temperature : f32.t;
    stop_sequences :
      core.option.Option.t
        (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A);
    top_p : core.option.Option.t f32.t;
    top_k : core.option.Option.t i32.t;
    metadata :
      core.option.Option.t
        (std.collections.hash.map.HashMap.t
          alloc.string.String.t
          alloc.string.String.t
          std.collections.hash.map.HashMap.Default.S);
    stream : core.option.Option.t bool.t;
  }.
  
  Definition Get_model :=
    Ref.map (fun α => Some α.(model)) (fun β α => Some (α <| model := β |>)).
  Definition Get_prompt :=
    Ref.map (fun α => Some α.(prompt)) (fun β α => Some (α <| prompt := β |>)).
  Definition Get_max_tokens_to_sample :=
    Ref.map
      (fun α => Some α.(max_tokens_to_sample))
      (fun β α => Some (α <| max_tokens_to_sample := β |>)).
  Definition Get_temperature :=
    Ref.map
      (fun α => Some α.(temperature))
      (fun β α => Some (α <| temperature := β |>)).
  Definition Get_stop_sequences :=
    Ref.map
      (fun α => Some α.(stop_sequences))
      (fun β α => Some (α <| stop_sequences := β |>)).
  Definition Get_top_p :=
    Ref.map (fun α => Some α.(top_p)) (fun β α => Some (α <| top_p := β |>)).
  Definition Get_top_k :=
    Ref.map (fun α => Some α.(top_k)) (fun β α => Some (α <| top_k := β |>)).
  Definition Get_metadata :=
    Ref.map
      (fun α => Some α.(metadata))
      (fun β α => Some (α <| metadata := β |>)).
  Definition Get_stream :=
    Ref.map (fun α => Some α.(stream)) (fun β α => Some (α <| stream := β |>)).
End RequestBody.
End RequestBody.

Module  Impl_serde_ser_Serialize_for_assistants_extra_anthropic_RequestBody_t.
Section Impl_serde_ser_Serialize_for_assistants_extra_anthropic_RequestBody_t.
  Definition Self : Set := assistants_extra.anthropic.RequestBody.t.
  
  (*
  Serialize
  *)
  Definition serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S}
      (self : ref Self)
      (__serializer : __S)
      : M (core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) :=
    let* self := M.alloc self in
    let* __serializer := M.alloc __serializer in
    let return_ :=
      M.return_
        (R := core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) in
    M.catch_return
      (let* __serde_state : M.Val _ :=
        let* α0 :
            (core.result.Result.t _ _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t _ _)
              (Trait := ℐ))) in
        let* α1 :
            __S -> (ref str.t) -> usize.t -> M (core.result.Result.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.Serializer.serialize_struct
              (Self := __S)
              (Trait := ℐ))) in
        let* α2 : __S := M.read __serializer in
        let* α3 : ref str.t := M.read (mk_str "RequestBody") in
        let* α4 : usize.t :=
          BinOp.Panic.add (rust_cast false) ((Integer.of_Z 1) : usize.t) in
        let* α5 : usize.t := BinOp.Panic.add α4 ((Integer.of_Z 1) : usize.t) in
        let* α6 : usize.t := BinOp.Panic.add α5 ((Integer.of_Z 1) : usize.t) in
        let* α7 : usize.t := BinOp.Panic.add α6 ((Integer.of_Z 1) : usize.t) in
        let* α8 : usize.t := BinOp.Panic.add α7 ((Integer.of_Z 1) : usize.t) in
        let* α9 : usize.t := BinOp.Panic.add α8 ((Integer.of_Z 1) : usize.t) in
        let* α10 : usize.t := BinOp.Panic.add α9 ((Integer.of_Z 1) : usize.t) in
        let* α11 : usize.t :=
          BinOp.Panic.add α10 ((Integer.of_Z 1) : usize.t) in
        let* α12 : usize.t :=
          BinOp.Panic.add α11 ((Integer.of_Z 1) : usize.t) in
        let* α13 : core.result.Result.t _ _ := M.call (α1 α2 α3 α12) in
        let* α14 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              _ :=
          M.call (α0 α13) in
        let* α15 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                _) :=
          M.alloc α14 in
        let* α16 : M.Val _ :=
          match_operator
            α15
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self := core.result.Result.t _ _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : _ := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val _);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val _)
            ] in
        M.copy α16 in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "model") in
        let* α3 : ref assistants_extra.anthropic.RequestBody.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.anthropic.RequestBody.Get_model
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "prompt") in
        let* α3 : ref assistants_extra.anthropic.RequestBody.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.anthropic.RequestBody.Get_prompt
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref i32.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := i32.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "max_tokens_to_sample") in
        let* α3 : ref assistants_extra.anthropic.RequestBody.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.anthropic.RequestBody.Get_max_tokens_to_sample
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref f32.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := f32.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "temperature") in
        let* α3 : ref assistants_extra.anthropic.RequestBody.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.anthropic.RequestBody.Get_temperature
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref
                (core.option.Option.t
                  (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)))
              ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T :=
                core.option.Option.t
                  (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t))
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "stop_sequences") in
        let* α3 : ref assistants_extra.anthropic.RequestBody.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.anthropic.RequestBody.Get_stop_sequences
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref (core.option.Option.t f32.t)) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := core.option.Option.t f32.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "top_p") in
        let* α3 : ref assistants_extra.anthropic.RequestBody.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.anthropic.RequestBody.Get_top_p
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref (core.option.Option.t i32.t)) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := core.option.Option.t i32.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "top_k") in
        let* α3 : ref assistants_extra.anthropic.RequestBody.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.anthropic.RequestBody.Get_top_k
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref
                (core.option.Option.t
                  (std.collections.hash.map.HashMap.t
                    alloc.string.String.t
                    alloc.string.String.t
                    std.hash.random.RandomState.t)))
              ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T :=
                core.option.Option.t
                  (std.collections.hash.map.HashMap.t
                    alloc.string.String.t
                    alloc.string.String.t
                    std.hash.random.RandomState.t))
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "metadata") in
        let* α3 : ref assistants_extra.anthropic.RequestBody.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.anthropic.RequestBody.Get_metadata
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref (core.option.Option.t bool.t)) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := core.option.Option.t bool.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "stream") in
        let* α3 : ref assistants_extra.anthropic.RequestBody.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.anthropic.RequestBody.Get_stream
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* α0 : _ -> M (core.result.Result.t _ _) :=
        ltac:(M.get_method (fun ℐ =>
          serde.ser.SerializeStruct.end_ (Self := _) (Trait := ℐ))) in
      let* α1 : _ := M.read __serde_state in
      let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
      let* α0 : M.Val (core.result.Result.t _ _) := M.alloc α2 in
      M.read α0).
  
  Global Instance AssociatedFunction_serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :
    Notations.DoubleColon Self "serialize" := {
    Notations.double_colon := serialize (__S := __S);
  }.
  
  Global Instance ℐ : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :=
      serialize (__S := __S);
  }.
End Impl_serde_ser_Serialize_for_assistants_extra_anthropic_RequestBody_t.
End Impl_serde_ser_Serialize_for_assistants_extra_anthropic_RequestBody_t.

Module  ResponseBody.
Section ResponseBody.
  Record t : Set := {
    completion : alloc.string.String.t;
    stop_reason : alloc.string.String.t;
    model : alloc.string.String.t;
  }.
  
  Definition Get_completion :=
    Ref.map
      (fun α => Some α.(completion))
      (fun β α => Some (α <| completion := β |>)).
  Definition Get_stop_reason :=
    Ref.map
      (fun α => Some α.(stop_reason))
      (fun β α => Some (α <| stop_reason := β |>)).
  Definition Get_model :=
    Ref.map (fun α => Some α.(model)) (fun β α => Some (α <| model := β |>)).
End ResponseBody.
End ResponseBody.

Module  Impl_serde_de_Deserialize_for_assistants_extra_anthropic_ResponseBody_t.
Section Impl_serde_de_Deserialize_for_assistants_extra_anthropic_ResponseBody_t.
  Definition Self : Set := assistants_extra.anthropic.ResponseBody.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_extra.anthropic._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_extra.anthropic._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "ResponseBody") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_extra.anthropic._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_extra.anthropic._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_extra.anthropic._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_extra_anthropic_ResponseBody_t.
End Impl_serde_de_Deserialize_for_assistants_extra_anthropic_ResponseBody_t.

Module __Field.
  Inductive t : Set :=
  | __field0
  | __field1
  | __field2
  | __ignore.
End __Field.

Module  __FieldVisitor.
Section __FieldVisitor.
  Inductive t : Set := Build.
End __FieldVisitor.
End __FieldVisitor.

Module  Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.
  Definition Self : Set :=
    assistants_extra.anthropic._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.anthropic._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.anthropic._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.anthropic._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.anthropic._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.anthropic._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              let γ1_10 := [10] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.anthropic._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.anthropic._.deserialize.__Field.__field2)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.

Module  Impl_serde_de_Deserialize_for_assistants_extra_anthropic___deserialize___Field_t.
Section Impl_serde_de_Deserialize_for_assistants_extra_anthropic___deserialize___Field_t.
  Definition Self : Set := assistants_extra.anthropic._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          assistants_extra.anthropic._.deserialize.__FieldVisitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_identifier
          (Self := __D)
          (V := assistants_extra.anthropic._.deserialize.__FieldVisitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    M.call
      (α0 α1 assistants_extra.anthropic._.deserialize.__FieldVisitor.Build).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_extra_anthropic___deserialize___Field_t.
End Impl_serde_de_Deserialize_for_assistants_extra_anthropic___deserialize___Field_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker :
      core.marker.PhantomData.t assistants_extra.anthropic.ResponseBody.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.
  Definition Self : Set := assistants_extra.anthropic._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.anthropic.ResponseBody.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct ResponseBody") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.anthropic.ResponseBody.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.anthropic.ResponseBody.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.anthropic.ResponseBody.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ResponseBody with 3 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.anthropic.ResponseBody.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.anthropic.ResponseBody.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.anthropic.ResponseBody.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ResponseBody with 3 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field2 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.anthropic.ResponseBody.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.anthropic.ResponseBody.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.anthropic.ResponseBody.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 2) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ResponseBody with 3 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α2 : alloc.string.String.t := M.read __field2 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_extra.anthropic.ResponseBody.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.anthropic.ResponseBody.completion := α0;
              assistants_extra.anthropic.ResponseBody.stop_reason := α1;
              assistants_extra.anthropic.ResponseBody.model := α2;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field1 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field2 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_extra.anthropic._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.anthropic._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.anthropic._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_extra.anthropic._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_extra.anthropic._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_extra.anthropic._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_extra.anthropic._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_extra.anthropic._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_extra.anthropic.ResponseBody.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_extra.anthropic.ResponseBody.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_extra.anthropic.ResponseBody.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_extra.anthropic._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.anthropic._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.anthropic._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.anthropic._.deserialize.__Field.__field0
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "completion") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.anthropic.ResponseBody.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.anthropic.ResponseBody.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.anthropic.ResponseBody.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.anthropic._.deserialize.__Field.__field1
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "stop_reason") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.anthropic.ResponseBody.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.anthropic.ResponseBody.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.anthropic.ResponseBody.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.anthropic._.deserialize.__Field.__field2
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field2)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "model") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.anthropic.ResponseBody.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.anthropic.ResponseBody.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.anthropic.ResponseBody.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field2 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_extra.anthropic.ResponseBody.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_extra.anthropic.ResponseBody.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_extra.anthropic.ResponseBody.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "completion") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.anthropic.ResponseBody.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "stop_reason") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.anthropic.ResponseBody.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field2 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field2
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field2 := M.copy γ0_0 in
                  M.pure __field2
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "model") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.anthropic.ResponseBody.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α2 : alloc.string.String.t := M.read __field2 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_extra.anthropic.ResponseBody.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.anthropic.ResponseBody.completion := α0;
              assistants_extra.anthropic.ResponseBody.stop_reason := α1;
              assistants_extra.anthropic.ResponseBody.model := α2;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "completion") in
    let* α1 : ref str.t := M.read (mk_str "stop_reason") in
    let* α2 : ref str.t := M.read (mk_str "model") in
    let* α3 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α3))).

Module  Impl_core_fmt_Debug_for_assistants_extra_anthropic_ResponseBody_t.
Section Impl_core_fmt_Debug_for_assistants_extra_anthropic_ResponseBody_t.
  Definition Self : Set := assistants_extra.anthropic.ResponseBody.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "ResponseBody") in
    let* α2 : ref str.t := M.read (mk_str "completion") in
    let* α3 : ref assistants_extra.anthropic.ResponseBody.t := M.read self in
    let* α4 : ref str.t := M.read (mk_str "stop_reason") in
    let* α5 : ref assistants_extra.anthropic.ResponseBody.t := M.read self in
    let* α6 : ref str.t := M.read (mk_str "model") in
    let* α7 : ref assistants_extra.anthropic.ResponseBody.t := M.read self in
    let* α8 : M.Val (ref alloc.string.String.t) :=
      M.alloc
        (borrow
          (assistants_extra.anthropic.ResponseBody.Get_model (deref α7))) in
    M.call
      (core.fmt.Formatter.t::["debug_struct_field3_finish"]
        α0
        α1
        α2
        (pointer_coercion
          "Unsize"
          (borrow
            (assistants_extra.anthropic.ResponseBody.Get_completion
              (deref α3))))
        α4
        (pointer_coercion
          "Unsize"
          (borrow
            (assistants_extra.anthropic.ResponseBody.Get_stop_reason
              (deref α5))))
        α6
        (pointer_coercion "Unsize" (borrow α8))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ResponseBody_t.
End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ResponseBody_t.

Module  Usage.
Section Usage.
  Record t : Set := {
    prompt_tokens : i32.t;
    completion_tokens : i32.t;
    total_tokens : i32.t;
  }.
  
  Definition Get_prompt_tokens :=
    Ref.map
      (fun α => Some α.(prompt_tokens))
      (fun β α => Some (α <| prompt_tokens := β |>)).
  Definition Get_completion_tokens :=
    Ref.map
      (fun α => Some α.(completion_tokens))
      (fun β α => Some (α <| completion_tokens := β |>)).
  Definition Get_total_tokens :=
    Ref.map
      (fun α => Some α.(total_tokens))
      (fun β α => Some (α <| total_tokens := β |>)).
End Usage.
End Usage.

Module  Impl_serde_de_Deserialize_for_assistants_extra_anthropic_Usage_t.
Section Impl_serde_de_Deserialize_for_assistants_extra_anthropic_Usage_t.
  Definition Self : Set := assistants_extra.anthropic.Usage.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_extra.anthropic._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_extra.anthropic._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "Usage") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_extra.anthropic._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_extra.anthropic._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_extra.anthropic._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_extra_anthropic_Usage_t.
End Impl_serde_de_Deserialize_for_assistants_extra_anthropic_Usage_t.

Module  Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.
  Definition Self : Set :=
    assistants_extra.anthropic._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.anthropic._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.anthropic._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.anthropic._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.anthropic._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              let γ1_10 := [10] γ in
              let γ1_11 := [11] γ in
              let γ1_12 := [12] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.anthropic._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              let γ1_10 := [10] γ in
              let γ1_11 := [11] γ in
              let γ1_12 := [12] γ in
              let γ1_13 := [13] γ in
              let γ1_14 := [14] γ in
              let γ1_15 := [15] γ in
              let γ1_16 := [16] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.anthropic._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              let γ1_10 := [10] γ in
              let γ1_11 := [11] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.anthropic._.deserialize.__Field.__field2)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker : core.marker.PhantomData.t assistants_extra.anthropic.Usage.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.
  Definition Self : Set := assistants_extra.anthropic._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.anthropic.Usage.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct Usage") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val i32.t :=
        let* α0 :
            (core.result.Result.t (core.option.Option.t i32.t) _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t (core.option.Option.t i32.t) _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M (core.result.Result.t (core.option.Option.t i32.t) _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := i32.t)
              (Trait := ℐ))) in
        let* α2 : core.result.Result.t (core.option.Option.t i32.t) _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t i32.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t i32.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t i32.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.anthropic.Usage.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.anthropic.Usage.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.anthropic.Usage.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t i32.t := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t))
            ] in
        let* α6 : M.Val i32.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val i32.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow (mk_str "struct Usage with 3 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : i32.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val i32.t)
            ] in
        M.copy α6 in
      let* __field1 : M.Val i32.t :=
        let* α0 :
            (core.result.Result.t (core.option.Option.t i32.t) _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t (core.option.Option.t i32.t) _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M (core.result.Result.t (core.option.Option.t i32.t) _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := i32.t)
              (Trait := ℐ))) in
        let* α2 : core.result.Result.t (core.option.Option.t i32.t) _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t i32.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t i32.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t i32.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.anthropic.Usage.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.anthropic.Usage.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.anthropic.Usage.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t i32.t := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t))
            ] in
        let* α6 : M.Val i32.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val i32.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow (mk_str "struct Usage with 3 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : i32.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val i32.t)
            ] in
        M.copy α6 in
      let* __field2 : M.Val i32.t :=
        let* α0 :
            (core.result.Result.t (core.option.Option.t i32.t) _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t (core.option.Option.t i32.t) _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M (core.result.Result.t (core.option.Option.t i32.t) _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := i32.t)
              (Trait := ℐ))) in
        let* α2 : core.result.Result.t (core.option.Option.t i32.t) _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t i32.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t i32.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t i32.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.anthropic.Usage.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.anthropic.Usage.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.anthropic.Usage.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t i32.t := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t))
            ] in
        let* α6 : M.Val i32.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val i32.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 2) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow (mk_str "struct Usage with 3 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : i32.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val i32.t)
            ] in
        M.copy α6 in
      let* α0 : i32.t := M.read __field0 in
      let* α1 : i32.t := M.read __field1 in
      let* α2 : i32.t := M.read __field2 in
      let* α0 :
          M.Val (core.result.Result.t assistants_extra.anthropic.Usage.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.anthropic.Usage.prompt_tokens := α0;
              assistants_extra.anthropic.Usage.completion_tokens := α1;
              assistants_extra.anthropic.Usage.total_tokens := α2;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val (core.option.Option.t i32.t) :=
        M.alloc core.option.Option.None in
      let* __field1 : M.Val (core.option.Option.t i32.t) :=
        M.alloc core.option.Option.None in
      let* __field2 : M.Val (core.option.Option.t i32.t) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_extra.anthropic._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.anthropic._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.anthropic._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_extra.anthropic._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_extra.anthropic._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_extra.anthropic._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_extra.anthropic._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_extra.anthropic._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_extra.anthropic.Usage.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_extra.anthropic.Usage.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_extra.anthropic.Usage.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_extra.anthropic._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.anthropic._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.anthropic._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.anthropic._.deserialize.__Field.__field0
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t i32.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "prompt_tokens") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t i32.t _) ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self := core.result.Result.t i32.t _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M (core.result.Result.t i32.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := i32.t)
                                  (Trait := ℐ))) in
                            let* α2 : core.result.Result.t i32.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  i32.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    i32.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val i32.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.anthropic.Usage.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.anthropic.Usage.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.anthropic.Usage.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : i32.t := never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val i32.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val i32.t)
                                ] in
                            let* α6 : i32.t := M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.anthropic._.deserialize.__Field.__field1
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t i32.t)::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "completion_tokens") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t i32.t _) ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self := core.result.Result.t i32.t _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M (core.result.Result.t i32.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := i32.t)
                                  (Trait := ℐ))) in
                            let* α2 : core.result.Result.t i32.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  i32.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    i32.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val i32.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.anthropic.Usage.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.anthropic.Usage.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.anthropic.Usage.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : i32.t := never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val i32.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val i32.t)
                                ] in
                            let* α6 : i32.t := M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.anthropic._.deserialize.__Field.__field2
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t i32.t)::["is_some"]
                                  (borrow __field2)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "total_tokens") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t i32.t _) ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self := core.result.Result.t i32.t _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M (core.result.Result.t i32.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := i32.t)
                                  (Trait := ℐ))) in
                            let* α2 : core.result.Result.t i32.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  i32.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    i32.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val i32.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.anthropic.Usage.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.anthropic.Usage.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.anthropic.Usage.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : i32.t := never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val i32.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val i32.t)
                                ] in
                            let* α6 : i32.t := M.read α5 in
                            assign __field2 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_extra.anthropic.Usage.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_extra.anthropic.Usage.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_extra.anthropic.Usage.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val i32.t :=
        let* α0 : M.Val i32.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val i32.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t i32.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t i32.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "prompt_tokens") in
                  let* α2 : core.result.Result.t i32.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        i32.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          i32.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.anthropic.Usage.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.anthropic.Usage.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.anthropic.Usage.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : i32.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val i32.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val i32.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val i32.t)
            ] in
        M.copy α0 in
      let* __field1 : M.Val i32.t :=
        let* α0 : M.Val i32.t :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M (M.Val i32.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t i32.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t i32.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "completion_tokens") in
                  let* α2 : core.result.Result.t i32.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        i32.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          i32.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.anthropic.Usage.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.anthropic.Usage.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.anthropic.Usage.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : i32.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val i32.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val i32.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val i32.t)
            ] in
        M.copy α0 in
      let* __field2 : M.Val i32.t :=
        let* α0 : M.Val i32.t :=
          match_operator
            __field2
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field2 := M.copy γ0_0 in
                  M.pure __field2
                | _ => M.break_match
                end) :
                M (M.Val i32.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t i32.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t i32.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "total_tokens") in
                  let* α2 : core.result.Result.t i32.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        i32.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          i32.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.anthropic.Usage.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.anthropic.Usage.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.anthropic.Usage.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : i32.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val i32.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val i32.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val i32.t)
            ] in
        M.copy α0 in
      let* α0 : i32.t := M.read __field0 in
      let* α1 : i32.t := M.read __field1 in
      let* α2 : i32.t := M.read __field2 in
      let* α0 :
          M.Val (core.result.Result.t assistants_extra.anthropic.Usage.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.anthropic.Usage.prompt_tokens := α0;
              assistants_extra.anthropic.Usage.completion_tokens := α1;
              assistants_extra.anthropic.Usage.total_tokens := α2;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "prompt_tokens") in
    let* α1 : ref str.t := M.read (mk_str "completion_tokens") in
    let* α2 : ref str.t := M.read (mk_str "total_tokens") in
    let* α3 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α3))).

Module ApiError.
  Inductive t : Set :=
  | InvalidRequestError (_ : alloc.string.String.t)
  | AuthenticationError (_ : alloc.string.String.t)
  | PermissionError (_ : alloc.string.String.t)
  | NotFoundError (_ : alloc.string.String.t)
  | RateLimitError (_ : alloc.string.String.t)
  | ApiError (_ : alloc.string.String.t)
  | OverloadedError (_ : alloc.string.String.t)
  | UnknownError (_ : alloc.string.String.t).
  
  Definition Get_InvalidRequestError_0 :=
    Ref.map
      (fun α =>
        match α with | InvalidRequestError α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with
        | InvalidRequestError _ => Some (InvalidRequestError β)
        | _ => None
        end).
  
  Definition Get_AuthenticationError_0 :=
    Ref.map
      (fun α =>
        match α with | AuthenticationError α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with
        | AuthenticationError _ => Some (AuthenticationError β)
        | _ => None
        end).
  
  Definition Get_PermissionError_0 :=
    Ref.map
      (fun α => match α with | PermissionError α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with
        | PermissionError _ => Some (PermissionError β)
        | _ => None
        end).
  
  Definition Get_NotFoundError_0 :=
    Ref.map
      (fun α => match α with | NotFoundError α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with
        | NotFoundError _ => Some (NotFoundError β)
        | _ => None
        end).
  
  Definition Get_RateLimitError_0 :=
    Ref.map
      (fun α => match α with | RateLimitError α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with
        | RateLimitError _ => Some (RateLimitError β)
        | _ => None
        end).
  
  Definition Get_ApiError_0 :=
    Ref.map
      (fun α => match α with | ApiError α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | ApiError _ => Some (ApiError β) | _ => None end).
  
  Definition Get_OverloadedError_0 :=
    Ref.map
      (fun α => match α with | OverloadedError α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with
        | OverloadedError _ => Some (OverloadedError β)
        | _ => None
        end).
  
  Definition Get_UnknownError_0 :=
    Ref.map
      (fun α => match α with | UnknownError α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | UnknownError _ => Some (UnknownError β) | _ => None end).
End ApiError.

Module  Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiError_t.
Section Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiError_t.
  Definition Self : Set := assistants_extra.anthropic.ApiError.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : M.Val (core.result.Result.t unit core.fmt.Error.t) :=
      match_operator
        self
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.InvalidRequestError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_InvalidRequestError_0
                  γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "InvalidRequestError") in
              let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                    α0
                    α1
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α2
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.AuthenticationError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_AuthenticationError_0
                  γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "AuthenticationError") in
              let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                    α0
                    α1
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α2
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.PermissionError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_PermissionError_0 γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "PermissionError") in
              let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                    α0
                    α1
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α2
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.NotFoundError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_NotFoundError_0 γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "NotFoundError") in
              let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                    α0
                    α1
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α2
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.RateLimitError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_RateLimitError_0 γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "RateLimitError") in
              let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                    α0
                    α1
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α2
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.ApiError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_ApiError_0 γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "ApiError") in
              let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                    α0
                    α1
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α2
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.OverloadedError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_OverloadedError_0 γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "OverloadedError") in
              let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                    α0
                    α1
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α2
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiError.UnknownError _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiError.Get_UnknownError_0 γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "UnknownError") in
              let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                    α0
                    α1
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α2
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiError_t.
End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiError_t.

Module ApiResponseBody.
  Module Err.
    Record t : Set := {
      error : assistants_extra.anthropic.ApiErrorType.t;
    }.
  End Err.
  
  Inductive t : Set :=
  | Ok (_ : assistants_extra.anthropic.ResponseBody.t)
  | Err (_ : Err.t).
  
  Definition Get_Ok_0 :=
    Ref.map
      (fun α => match α with | Ok α0 => Some α0 | _ => None end)
      (fun β α => match α with | Ok _ => Some (Ok β) | _ => None end).
  
  Definition Get_Err_error :=
    Ref.map
      (fun α => match α with | Err α => Some α.(Err.error) | _ => None end)
      (fun β α =>
        match α with
        | Err α => Some (Err (α <| Err.error := β |>))
        | _ => None
        end).
End ApiResponseBody.

Module  Impl_serde_de_Deserialize_for_assistants_extra_anthropic_ApiResponseBody_t.
Section Impl_serde_de_Deserialize_for_assistants_extra_anthropic_ApiResponseBody_t.
  Definition Self : Set := assistants_extra.anthropic.ApiResponseBody.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let return_ :=
      M.return_ (R := core.result.Result.t Self __D::type["Error"].t) in
    M.catch_return
      (let* __content : M.Val serde.__private.de.content.Content.t :=
        let* α0 :
            (core.result.Result.t serde.__private.de.content.Content.t _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t serde.__private.de.content.Content.t _)
              (Trait := ℐ))) in
        let* α1 :
            __D ->
              M (core.result.Result.t serde.__private.de.content.Content.t _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.Deserialize.deserialize
              (Self := serde.__private.de.content.Content.t)
              (D := __D)
              (Trait := ℐ))) in
        let* α2 : __D := M.read __deserializer in
        let* α3 : core.result.Result.t serde.__private.de.content.Content.t _ :=
          M.call (α1 α2) in
        let* α4 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              serde.__private.de.content.Content.t :=
          M.call (α0 α3) in
        let* α5 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                serde.__private.de.content.Content.t) :=
          M.alloc α4 in
        let* α6 : M.Val serde.__private.de.content.Content.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.anthropic.ApiResponseBody.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.anthropic.ApiResponseBody.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.anthropic.ApiResponseBody.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : serde.__private.de.content.Content.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val serde.__private.de.content.Content.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val serde.__private.de.content.Content.t)
            ] in
        M.copy α6 in
      let* __deserializer :
          M.Val (serde.__private.de.content.ContentRefDeserializer.t _) :=
        let* α0 : serde.__private.de.content.ContentRefDeserializer.t _ :=
          M.call
            ((serde.__private.de.content.ContentRefDeserializer.t _)::["new"]
              (borrow __content)) in
        M.alloc α0 in
      let* _ : M.Val unit :=
        let* α0 :
            (serde.__private.de.content.ContentRefDeserializer.t _) ->
              M
                (core.result.Result.t
                  assistants_extra.anthropic.ResponseBody.t
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.Deserialize.deserialize
              (Self := assistants_extra.anthropic.ResponseBody.t)
              (D := serde.__private.de.content.ContentRefDeserializer.t _)
              (Trait := ℐ))) in
        let* α1 : serde.__private.de.content.ContentRefDeserializer.t _ :=
          M.read __deserializer in
        let* α2 :
            core.result.Result.t assistants_extra.anthropic.ResponseBody.t _ :=
          M.call (α0 α1) in
        let* α3 :
            core.result.Result.t
              assistants_extra.anthropic.ApiResponseBody.t
              _ :=
          M.call
            ((core.result.Result.t
                  assistants_extra.anthropic.ResponseBody.t
                  _)::["map"]
              α2
              assistants_extra.anthropic.ApiResponseBody.Ok) in
        let* α4 :
            M.Val
              (core.result.Result.t
                assistants_extra.anthropic.ApiResponseBody.t
                _) :=
          M.alloc α3 in
        match_operator
          α4
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                let* __ok := M.copy γ0_0 in
                let* α0 : assistants_extra.anthropic.ApiResponseBody.t :=
                  M.read __ok in
                let* α1 : M.Val never.t := return_ (core.result.Result.Ok α0) in
                let* α2 := M.read α1 in
                let* α3 : unit := never_to_any α2 in
                M.alloc α3
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ => (M.alloc tt) : M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (serde.__private.de.content.ContentRefDeserializer.t _) ->
              assistants_extra.anthropic._.deserialize.__Visitor.t ->
              M (core.result.Result.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.Deserializer.deserialize_any
              (Self := serde.__private.de.content.ContentRefDeserializer.t _)
              (V := assistants_extra.anthropic._.deserialize.__Visitor.t)
              (Trait := ℐ))) in
        let* α1 : serde.__private.de.content.ContentRefDeserializer.t _ :=
          M.read __deserializer in
        let* α2 :
            core.result.Result.t
              assistants_extra.anthropic.ApiResponseBody.t
              _ :=
          M.call
            (α0
              α1
              {|
                assistants_extra.anthropic._.deserialize.__Visitor.marker :=
                  core.marker.PhantomData.Build;
                assistants_extra.anthropic._.deserialize.__Visitor.lifetime :=
                  core.marker.PhantomData.Build;
              |}) in
        let* α3 :
            M.Val
              (core.result.Result.t
                assistants_extra.anthropic.ApiResponseBody.t
                _) :=
          M.alloc α2 in
        match_operator
          α3
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                let* __ok := M.copy γ0_0 in
                let* α0 : assistants_extra.anthropic.ApiResponseBody.t :=
                  M.read __ok in
                let* α1 : M.Val never.t := return_ (core.result.Result.Ok α0) in
                let* α2 := M.read α1 in
                let* α3 : unit := never_to_any α2 in
                M.alloc α3
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ => (M.alloc tt) : M (M.Val unit)
          ] in
      let* α0 : (ref str.t) -> M _ :=
        ltac:(M.get_method (fun ℐ =>
          serde.de.Error.custom (Self := _) (T := ref str.t) (Trait := ℐ))) in
      let* α1 : ref str.t :=
        M.read
          (mk_str
            "data did not match any variant of untagged enum ApiResponseBody") in
      let* α2 : _ := M.call (α0 α1) in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_extra.anthropic.ApiResponseBody.t
              _) :=
        M.alloc (core.result.Result.Err α2) in
      M.read α0).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_extra_anthropic_ApiResponseBody_t.
End Impl_serde_de_Deserialize_for_assistants_extra_anthropic_ApiResponseBody_t.

Module __Field.
  Inductive t : Set :=
  | __field0
  | __ignore.
End __Field.

Module  Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.
  Definition Self : Set :=
    assistants_extra.anthropic._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.anthropic._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.anthropic._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.anthropic._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.anthropic._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.anthropic._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker :
      core.marker.PhantomData.t assistants_extra.anthropic.ApiResponseBody.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.
  Definition Self : Set := assistants_extra.anthropic._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.anthropic.ApiResponseBody.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t :=
      M.read (mk_str "struct variant ApiResponseBody::Err") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 :
          M.Val
            (core.option.Option.t assistants_extra.anthropic.ApiErrorType.t) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_extra.anthropic._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.anthropic._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.anthropic._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_extra.anthropic._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_extra.anthropic._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_extra.anthropic._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_extra.anthropic._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_extra.anthropic._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_extra.anthropic.ApiResponseBody.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_extra.anthropic.ApiResponseBody.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_extra.anthropic.ApiResponseBody.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_extra.anthropic._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.anthropic._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.anthropic._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.anthropic._.deserialize.__Field.__field0
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      assistants_extra.anthropic.ApiErrorType.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "error") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    assistants_extra.anthropic.ApiErrorType.t
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      assistants_extra.anthropic.ApiErrorType.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      assistants_extra.anthropic.ApiErrorType.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    assistants_extra.anthropic.ApiErrorType.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  assistants_extra.anthropic.ApiErrorType.t
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  assistants_extra.anthropic.ApiErrorType.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    assistants_extra.anthropic.ApiErrorType.t) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  assistants_extra.anthropic.ApiErrorType.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.anthropic.ApiResponseBody.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.anthropic.ApiResponseBody.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.anthropic.ApiResponseBody.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          assistants_extra.anthropic.ApiErrorType.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        assistants_extra.anthropic.ApiErrorType.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        assistants_extra.anthropic.ApiErrorType.t)
                                ] in
                            let* α6 :
                                assistants_extra.anthropic.ApiErrorType.t :=
                              M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_extra.anthropic.ApiResponseBody.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_extra.anthropic.ApiResponseBody.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_extra.anthropic.ApiResponseBody.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val assistants_extra.anthropic.ApiErrorType.t :=
        let* α0 : M.Val assistants_extra.anthropic.ApiErrorType.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val assistants_extra.anthropic.ApiErrorType.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          assistants_extra.anthropic.ApiErrorType.t
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            assistants_extra.anthropic.ApiErrorType.t
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "error") in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.anthropic.ApiErrorType.t
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        assistants_extra.anthropic.ApiErrorType.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          assistants_extra.anthropic.ApiErrorType.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ApiResponseBody.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.anthropic.ApiResponseBody.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.anthropic.ApiResponseBody.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : assistants_extra.anthropic.ApiErrorType.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val assistants_extra.anthropic.ApiErrorType.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val assistants_extra.anthropic.ApiErrorType.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val assistants_extra.anthropic.ApiErrorType.t)
            ] in
        M.copy α0 in
      let* α0 : assistants_extra.anthropic.ApiErrorType.t := M.read __field0 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_extra.anthropic.ApiResponseBody.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            (assistants_extra.anthropic.ApiResponseBody.Err
              {|
              assistants_extra.anthropic.ApiResponseBody.Err.error := α0;
            |})) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "error") in
    let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α1))).

Module  Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiResponseBody_t.
Section Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiResponseBody_t.
  Definition Self : Set := assistants_extra.anthropic.ApiResponseBody.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : M.Val (core.result.Result.t unit core.fmt.Error.t) :=
      match_operator
        self
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.anthropic.ApiResponseBody.Ok _ =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiResponseBody.Get_Ok_0 γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "Ok") in
              let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                    α0
                    α1
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α2
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            |
                assistants_extra.anthropic.ApiResponseBody.Err
                {| assistants_extra.anthropic.ApiResponseBody.Err.error := _;
                |}
                =>
              let γ1_0 :=
                assistants_extra.anthropic.ApiResponseBody.Get_Err_error γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "Err") in
              let* α2 : ref str.t := M.read (mk_str "error") in
              let* α3 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_struct_field1_finish"]
                    α0
                    α1
                    α2
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α3
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiResponseBody_t.
End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiResponseBody_t.

Module  ApiErrorType.
Section ApiErrorType.
  Record t : Set := {
    error_type : alloc.string.String.t;
    message : alloc.string.String.t;
  }.
  
  Definition Get_error_type :=
    Ref.map
      (fun α => Some α.(error_type))
      (fun β α => Some (α <| error_type := β |>)).
  Definition Get_message :=
    Ref.map
      (fun α => Some α.(message))
      (fun β α => Some (α <| message := β |>)).
End ApiErrorType.
End ApiErrorType.

Module  Impl_serde_de_Deserialize_for_assistants_extra_anthropic_ApiErrorType_t.
Section Impl_serde_de_Deserialize_for_assistants_extra_anthropic_ApiErrorType_t.
  Definition Self : Set := assistants_extra.anthropic.ApiErrorType.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_extra.anthropic._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_extra.anthropic._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "ApiErrorType") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_extra.anthropic._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_extra.anthropic._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_extra.anthropic._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_extra_anthropic_ApiErrorType_t.
End Impl_serde_de_Deserialize_for_assistants_extra_anthropic_ApiErrorType_t.

Module __Field.
  Inductive t : Set :=
  | __field0
  | __field1
  | __ignore.
End __Field.

Module  Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.
  Definition Self : Set :=
    assistants_extra.anthropic._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.anthropic._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.anthropic._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.anthropic._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.anthropic._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.anthropic._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.anthropic._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.anthropic._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.anthropic._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___FieldVisitor_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker :
      core.marker.PhantomData.t assistants_extra.anthropic.ApiErrorType.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.
  Definition Self : Set := assistants_extra.anthropic._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.anthropic.ApiErrorType.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct ApiErrorType") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.anthropic.ApiErrorType.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.anthropic.ApiErrorType.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.anthropic.ApiErrorType.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ApiErrorType with 2 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.anthropic.ApiErrorType.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.anthropic.ApiErrorType.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.anthropic.ApiErrorType.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ApiErrorType with 2 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_extra.anthropic.ApiErrorType.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.anthropic.ApiErrorType.error_type := α0;
              assistants_extra.anthropic.ApiErrorType.message := α1;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field1 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_extra.anthropic._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.anthropic._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.anthropic._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_extra.anthropic._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_extra.anthropic._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_extra.anthropic._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_extra.anthropic._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_extra.anthropic._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_extra.anthropic.ApiErrorType.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_extra.anthropic.ApiErrorType.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_extra.anthropic.ApiErrorType.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_extra.anthropic._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.anthropic._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.anthropic._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.anthropic._.deserialize.__Field.__field0
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "type") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.anthropic.ApiErrorType.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.anthropic.ApiErrorType.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.anthropic.ApiErrorType.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.anthropic._.deserialize.__Field.__field1
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "message") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.anthropic.ApiErrorType.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.anthropic.ApiErrorType.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.anthropic.ApiErrorType.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_extra.anthropic.ApiErrorType.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_extra.anthropic.ApiErrorType.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_extra.anthropic.ApiErrorType.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "type") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ApiErrorType.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.anthropic.ApiErrorType.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.anthropic.ApiErrorType.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "message") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ApiErrorType.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.anthropic.ApiErrorType.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.anthropic.ApiErrorType.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_extra.anthropic.ApiErrorType.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.anthropic.ApiErrorType.error_type := α0;
              assistants_extra.anthropic.ApiErrorType.message := α1;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_anthropic___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "type") in
    let* α1 : ref str.t := M.read (mk_str "message") in
    let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α2))).

Module  Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiErrorType_t.
Section Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiErrorType_t.
  Definition Self : Set := assistants_extra.anthropic.ApiErrorType.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "ApiErrorType") in
    let* α2 : ref str.t := M.read (mk_str "error_type") in
    let* α3 : ref assistants_extra.anthropic.ApiErrorType.t := M.read self in
    let* α4 : ref str.t := M.read (mk_str "message") in
    let* α5 : ref assistants_extra.anthropic.ApiErrorType.t := M.read self in
    let* α6 : M.Val (ref alloc.string.String.t) :=
      M.alloc
        (borrow
          (assistants_extra.anthropic.ApiErrorType.Get_message (deref α5))) in
    M.call
      (core.fmt.Formatter.t::["debug_struct_field2_finish"]
        α0
        α1
        α2
        (pointer_coercion
          "Unsize"
          (borrow
            (assistants_extra.anthropic.ApiErrorType.Get_error_type
              (deref α3))))
        α4
        (pointer_coercion "Unsize" (borrow α6))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiErrorType_t.
End Impl_core_fmt_Debug_for_assistants_extra_anthropic_ApiErrorType_t.

Module  Impl_core_convert_From_http_header_value_InvalidHeaderValue_t_for_assistants_extra_anthropic_ApiError_t.
Section Impl_core_convert_From_http_header_value_InvalidHeaderValue_t_for_assistants_extra_anthropic_ApiError_t.
  Definition Self : Set := assistants_extra.anthropic.ApiError.t.
  
  (*
      fn from(error: InvalidHeaderValue) -> Self {
          ApiError::InvalidRequestError(error.to_string())
      }
  *)
  Definition from (error : http.header.value.InvalidHeaderValue.t) : M Self :=
    let* error := M.alloc error in
    let* α0 :
        (ref http.header.value.InvalidHeaderValue.t) ->
          M alloc.string.String.t :=
      ltac:(M.get_method (fun ℐ =>
        alloc.string.ToString.to_string
          (Self := http.header.value.InvalidHeaderValue.t)
          (Trait := ℐ))) in
    let* α1 : alloc.string.String.t := M.call (α0 (borrow error)) in
    M.pure (assistants_extra.anthropic.ApiError.InvalidRequestError α1).
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait Self
      (T := http.header.value.InvalidHeaderValue.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_http_header_value_InvalidHeaderValue_t_for_assistants_extra_anthropic_ApiError_t.
End Impl_core_convert_From_http_header_value_InvalidHeaderValue_t_for_assistants_extra_anthropic_ApiError_t.

Module  Impl_core_convert_From_serde_json_error_Error_t_for_assistants_extra_anthropic_ApiError_t.
Section Impl_core_convert_From_serde_json_error_Error_t_for_assistants_extra_anthropic_ApiError_t.
  Definition Self : Set := assistants_extra.anthropic.ApiError.t.
  
  (*
      fn from(error: serde_json::Error) -> Self {
          ApiError::InvalidRequestError(error.to_string())
      }
  *)
  Definition from (error : serde_json.error.Error.t) : M Self :=
    let* error := M.alloc error in
    let* α0 : (ref serde_json.error.Error.t) -> M alloc.string.String.t :=
      ltac:(M.get_method (fun ℐ =>
        alloc.string.ToString.to_string
          (Self := serde_json.error.Error.t)
          (Trait := ℐ))) in
    let* α1 : alloc.string.String.t := M.call (α0 (borrow error)) in
    M.pure (assistants_extra.anthropic.ApiError.InvalidRequestError α1).
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait Self (T := serde_json.error.Error.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_serde_json_error_Error_t_for_assistants_extra_anthropic_ApiError_t.
End Impl_core_convert_From_serde_json_error_Error_t_for_assistants_extra_anthropic_ApiError_t.

Module  Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_anthropic_ApiError_t.
Section Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_anthropic_ApiError_t.
  Definition Self : Set := assistants_extra.anthropic.ApiError.t.
  
  (*
      fn from(error: reqwest::Error) -> Self {
          ApiError::InvalidRequestError(error.to_string())
      }
  *)
  Definition from (error : reqwest.error.Error.t) : M Self :=
    let* error := M.alloc error in
    let* α0 : (ref reqwest.error.Error.t) -> M alloc.string.String.t :=
      ltac:(M.get_method (fun ℐ =>
        alloc.string.ToString.to_string
          (Self := reqwest.error.Error.t)
          (Trait := ℐ))) in
    let* α1 : alloc.string.String.t := M.call (α0 (borrow error)) in
    M.pure (assistants_extra.anthropic.ApiError.InvalidRequestError α1).
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait Self (T := reqwest.error.Error.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_anthropic_ApiError_t.
End Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_anthropic_ApiError_t.

Module  Impl_core_error_Error_for_assistants_extra_anthropic_ApiError_t.
Section Impl_core_error_Error_for_assistants_extra_anthropic_ApiError_t.
  Definition Self : Set := assistants_extra.anthropic.ApiError.t.
  
  Global Instance ℐ : core.error.Error.Required.Trait Self := {
    core.error.Error.source := Datatypes.None;
    core.error.Error.type_id := Datatypes.None;
    core.error.Error.description := Datatypes.None;
    core.error.Error.cause := Datatypes.None;
    core.error.Error.provide := Datatypes.None;
  }.
End Impl_core_error_Error_for_assistants_extra_anthropic_ApiError_t.
End Impl_core_error_Error_for_assistants_extra_anthropic_ApiError_t.

(*
fn format_prompt(mut prompt: String) -> String {
    debug!("Original prompt: {}", prompt);
    if !prompt.starts_with("Human:") {
        prompt = format!("Human: {}", prompt);
    }
    if !prompt.ends_with("Assistant:") {
        prompt = format!("{} Assistant:", prompt);
    }
    debug!("Formatted prompt: {}", prompt);
    prompt
}
*)
Definition format_prompt
    (prompt : alloc.string.String.t)
    : M alloc.string.String.t :=
  let* prompt := M.alloc prompt in
  let* _ : M.Val unit :=
    let* lvl : M.Val log.Level.t := M.alloc log.Level.Debug in
    let* α0 : (ref log.Level.t) -> (ref log.LevelFilter.t) -> M bool.t :=
      ltac:(M.get_method (fun ℐ =>
        core.cmp.PartialOrd.le
          (Self := log.Level.t)
          (Rhs := log.LevelFilter.t)
          (Trait := ℐ))) in
    let* α1 : bool.t :=
      M.call (α0 (borrow lvl) (borrow log.STATIC_MAX_LEVEL)) in
    let* α2 : (ref log.Level.t) -> (ref log.LevelFilter.t) -> M bool.t :=
      ltac:(M.get_method (fun ℐ =>
        core.cmp.PartialOrd.le
          (Self := log.Level.t)
          (Rhs := log.LevelFilter.t)
          (Trait := ℐ))) in
    let* α3 : log.LevelFilter.t := M.call log.max_level in
    let* α4 : M.Val log.LevelFilter.t := M.alloc α3 in
    let* α5 : bool.t := M.call (α2 (borrow lvl) (borrow α4)) in
    let* α6 : M.Val bool.t := M.alloc (BinOp.Pure.and α1 α5) in
    let* α7 : bool.t := M.read (use α6) in
    if α7 then
      let* _ : M.Val unit :=
        let* α0 : ref str.t := M.read (mk_str "Original prompt: ") in
        let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
        let* α2 : core.fmt.rt.Argument.t :=
          M.call (core.fmt.rt.Argument.t::["new_display"] (borrow prompt)) in
        let* α3 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α2 ] in
        let* α4 : core.fmt.Arguments.t :=
          M.call
            (core.fmt.Arguments.t::["new_v1"]
              (pointer_coercion "Unsize" (borrow α1))
              (pointer_coercion "Unsize" (borrow α3))) in
        let* α5 : log.Level.t := M.read lvl in
        let* α6 : ref str.t := M.read (mk_str "assistants_extra::anthropic") in
        let* α7 : ref str.t := M.read (mk_str "assistants_extra::anthropic") in
        let* α8 : ref str.t :=
          M.read (mk_str "assistants-extra/src/anthropic.rs") in
        let* α9 : M.Val (((ref str.t) * (ref str.t)) * (ref str.t)) :=
          M.alloc (α6, α7, α8) in
        let* α10 : unit :=
          M.call
            (log.__private_api.log
              α4
              α5
              (borrow α9)
              ((Integer.of_Z 91) : u32.t)
              core.option.Option.None) in
        M.alloc α10 in
      M.alloc tt
    else
      M.alloc tt in
  let* _ : M.Val unit :=
    let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
      ltac:(M.get_method (fun ℐ =>
        core.ops.deref.Deref.deref
          (Self := alloc.string.String.t)
          (Trait := ℐ))) in
    let* α1 : ref str.t := M.call (α0 (borrow prompt)) in
    let* α2 : ref str.t := M.read (mk_str "Human:") in
    let* α3 : bool.t := M.call (str.t::["starts_with"] α1 α2) in
    let* α4 : M.Val bool.t := M.alloc (UnOp.not α3) in
    let* α5 : bool.t := M.read (use α4) in
    if α5 then
      let* _ : M.Val unit :=
        let* res : M.Val alloc.string.String.t :=
          let* α0 : ref str.t := M.read (mk_str "Human: ") in
          let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
          let* α2 : core.fmt.rt.Argument.t :=
            M.call (core.fmt.rt.Argument.t::["new_display"] (borrow prompt)) in
          let* α3 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α2 ] in
          let* α4 : core.fmt.Arguments.t :=
            M.call
              (core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion "Unsize" (borrow α1))
                (pointer_coercion "Unsize" (borrow α3))) in
          let* α5 : alloc.string.String.t := M.call (alloc.fmt.format α4) in
          M.alloc α5 in
        let* α0 : alloc.string.String.t := M.read res in
        assign prompt α0 in
      M.alloc tt
    else
      M.alloc tt in
  let* _ : M.Val unit :=
    let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
      ltac:(M.get_method (fun ℐ =>
        core.ops.deref.Deref.deref
          (Self := alloc.string.String.t)
          (Trait := ℐ))) in
    let* α1 : ref str.t := M.call (α0 (borrow prompt)) in
    let* α2 : ref str.t := M.read (mk_str "Assistant:") in
    let* α3 : bool.t := M.call (str.t::["ends_with"] α1 α2) in
    let* α4 : M.Val bool.t := M.alloc (UnOp.not α3) in
    let* α5 : bool.t := M.read (use α4) in
    if α5 then
      let* _ : M.Val unit :=
        let* res : M.Val alloc.string.String.t :=
          let* α0 : ref str.t := M.read (mk_str "") in
          let* α1 : ref str.t := M.read (mk_str " Assistant:") in
          let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
          let* α3 : core.fmt.rt.Argument.t :=
            M.call (core.fmt.rt.Argument.t::["new_display"] (borrow prompt)) in
          let* α4 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α3 ] in
          let* α5 : core.fmt.Arguments.t :=
            M.call
              (core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion "Unsize" (borrow α2))
                (pointer_coercion "Unsize" (borrow α4))) in
          let* α6 : alloc.string.String.t := M.call (alloc.fmt.format α5) in
          M.alloc α6 in
        let* α0 : alloc.string.String.t := M.read res in
        assign prompt α0 in
      M.alloc tt
    else
      M.alloc tt in
  let* _ : M.Val unit :=
    let* lvl : M.Val log.Level.t := M.alloc log.Level.Debug in
    let* α0 : (ref log.Level.t) -> (ref log.LevelFilter.t) -> M bool.t :=
      ltac:(M.get_method (fun ℐ =>
        core.cmp.PartialOrd.le
          (Self := log.Level.t)
          (Rhs := log.LevelFilter.t)
          (Trait := ℐ))) in
    let* α1 : bool.t :=
      M.call (α0 (borrow lvl) (borrow log.STATIC_MAX_LEVEL)) in
    let* α2 : (ref log.Level.t) -> (ref log.LevelFilter.t) -> M bool.t :=
      ltac:(M.get_method (fun ℐ =>
        core.cmp.PartialOrd.le
          (Self := log.Level.t)
          (Rhs := log.LevelFilter.t)
          (Trait := ℐ))) in
    let* α3 : log.LevelFilter.t := M.call log.max_level in
    let* α4 : M.Val log.LevelFilter.t := M.alloc α3 in
    let* α5 : bool.t := M.call (α2 (borrow lvl) (borrow α4)) in
    let* α6 : M.Val bool.t := M.alloc (BinOp.Pure.and α1 α5) in
    let* α7 : bool.t := M.read (use α6) in
    if α7 then
      let* _ : M.Val unit :=
        let* α0 : ref str.t := M.read (mk_str "Formatted prompt: ") in
        let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
        let* α2 : core.fmt.rt.Argument.t :=
          M.call (core.fmt.rt.Argument.t::["new_display"] (borrow prompt)) in
        let* α3 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α2 ] in
        let* α4 : core.fmt.Arguments.t :=
          M.call
            (core.fmt.Arguments.t::["new_v1"]
              (pointer_coercion "Unsize" (borrow α1))
              (pointer_coercion "Unsize" (borrow α3))) in
        let* α5 : log.Level.t := M.read lvl in
        let* α6 : ref str.t := M.read (mk_str "assistants_extra::anthropic") in
        let* α7 : ref str.t := M.read (mk_str "assistants_extra::anthropic") in
        let* α8 : ref str.t :=
          M.read (mk_str "assistants-extra/src/anthropic.rs") in
        let* α9 : M.Val (((ref str.t) * (ref str.t)) * (ref str.t)) :=
          M.alloc (α6, α7, α8) in
        let* α10 : unit :=
          M.call
            (log.__private_api.log
              α4
              α5
              (borrow α9)
              ((Integer.of_Z 98) : u32.t)
              core.option.Option.None) in
        M.alloc α10 in
      M.alloc tt
    else
      M.alloc tt in
  M.read prompt.

(*
pub async fn call_anthropic_api_stream(
    mut prompt: String,
    max_tokens_to_sample: i32,
    model: Option<String>,
    temperature: Option<f32>,
    stop_sequences: Option<Vec<String>>,
    top_p: Option<f32>,
    top_k: Option<i32>,
    metadata: Option<HashMap<String, String>>,
) -> Result<bytes::Bytes, ApiError> {
    let url = "https://api.anthropic.com/v1/complete";
    let api_key = std::env::var("ANTHROPIC_API_KEY").expect("ANTHROPIC_API_KEY must be set");
    prompt = format_prompt(prompt);
    let mut headers = HeaderMap::new();
    headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
    headers.insert("x-api-key", HeaderValue::from_str(&api_key)?);

    let mut body: HashMap<&str, serde_json::Value> = HashMap::new();
    body.insert(
        "model",
        serde_json::json!(model.unwrap_or_else(|| "claude-2.1".to_string())),
    );
    body.insert("prompt", serde_json::json!(prompt));
    body.insert(
        "max_tokens_to_sample",
        serde_json::json!(max_tokens_to_sample),
    );
    body.insert("temperature", serde_json::json!(temperature.unwrap_or(1.0)));
    body.insert("stream", serde_json::json!(true));
    headers.insert("anthropic-version", HeaderValue::from_static("2023-06-01"));

    if let Some(stop_sequences) = stop_sequences {
        body.insert("stop_sequences", serde_json::json!(stop_sequences));
    }
    if let Some(top_p) = top_p {
        body.insert("top_p", serde_json::json!(top_p));
    }
    if let Some(top_k) = top_k {
        body.insert("top_k", serde_json::json!(top_k));
    }
    if let Some(metadata) = metadata {
        body.insert("metadata", serde_json::json!(metadata));
    }

    let client = reqwest::Client::new();
    let res = client.post(url).headers(headers).json(&body).send().await?;
    Ok(res.bytes().await?)
}
*)
Definition call_anthropic_api_stream
    (prompt : alloc.string.String.t)
    (max_tokens_to_sample : i32.t)
    (model : core.option.Option.t alloc.string.String.t)
    (temperature : core.option.Option.t f32.t)
    (stop_sequences
      :
      core.option.Option.t
        (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A))
    (top_p : core.option.Option.t f32.t)
    (top_k : core.option.Option.t i32.t)
    (metadata
      :
      core.option.Option.t
        (std.collections.hash.map.HashMap.t
          alloc.string.String.t
          alloc.string.String.t
          std.collections.hash.map.HashMap.Default.S))
    : M OpaqueDef :=
  let* prompt := M.alloc prompt in
  let* max_tokens_to_sample := M.alloc max_tokens_to_sample in
  let* model := M.alloc model in
  let* temperature := M.alloc temperature in
  let* stop_sequences := M.alloc stop_sequences in
  let* top_p := M.alloc top_p in
  let* top_k := M.alloc top_k in
  let* metadata := M.alloc metadata in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* prompt : M.Val alloc.string.String.t := M.copy prompt in
            let* max_tokens_to_sample : M.Val i32.t :=
              M.copy max_tokens_to_sample in
            let* model : M.Val (core.option.Option.t alloc.string.String.t) :=
              M.copy model in
            let* temperature : M.Val (core.option.Option.t f32.t) :=
              M.copy temperature in
            let* stop_sequences :
                M.Val
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      alloc.string.String.t
                      alloc.alloc.Global.t)) :=
              M.copy stop_sequences in
            let* top_p : M.Val (core.option.Option.t f32.t) := M.copy top_p in
            let* top_k : M.Val (core.option.Option.t i32.t) := M.copy top_k in
            let* metadata :
                M.Val
                  (core.option.Option.t
                    (std.collections.hash.map.HashMap.t
                      alloc.string.String.t
                      alloc.string.String.t
                      std.hash.random.RandomState.t)) :=
              M.copy metadata in
            let* url : M.Val (ref str.t) :=
              M.copy (mk_str "https://api.anthropic.com/v1/complete") in
            let* api_key : M.Val alloc.string.String.t :=
              let* α0 : ref str.t := M.read (mk_str "ANTHROPIC_API_KEY") in
              let* α1 :
                  core.result.Result.t
                    alloc.string.String.t
                    std.env.VarError.t :=
                M.call (std.env.var α0) in
              let* α2 : ref str.t :=
                M.read (mk_str "ANTHROPIC_API_KEY must be set") in
              let* α3 : alloc.string.String.t :=
                M.call
                  ((core.result.Result.t
                        alloc.string.String.t
                        std.env.VarError.t)::["expect"]
                    α1
                    α2) in
              M.alloc α3 in
            let* _ : M.Val unit :=
              let* α0 : alloc.string.String.t := M.read prompt in
              let* α1 : alloc.string.String.t :=
                M.call (assistants_extra.anthropic.format_prompt α0) in
              assign prompt α1 in
            let* headers :
                M.Val
                  (http.header.map.HeaderMap.t
                    http.header.value.HeaderValue.t) :=
              let* α0 :
                  http.header.map.HeaderMap.t http.header.value.HeaderValue.t :=
                M.call
                  (http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t)::["new"] in
              M.alloc α0 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : http.header.name.HeaderName.t :=
                M.read http.header.name.CONTENT_TYPE in
              let* α1 : ref str.t := M.read (mk_str "application/json") in
              let* α2 : http.header.value.HeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_static"] α1) in
              let* α3 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : ref str.t := M.read (mk_str "x-api-key") in
              let* α1 :
                  (core.result.Result.t
                      http.header.value.HeaderValue.t
                      http.header.value.InvalidHeaderValue.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        http.header.value.HeaderValue.t
                        http.header.value.InvalidHeaderValue.t)
                    (Trait := ℐ))) in
              let* α2 : (ref alloc.string.String.t) -> M (ref _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.deref.Deref.deref
                    (Self := alloc.string.String.t)
                    (Trait := ℐ))) in
              let* α3 : ref str.t := M.call (α2 (borrow api_key)) in
              let* α4 :
                  core.result.Result.t
                    http.header.value.HeaderValue.t
                    http.header.value.InvalidHeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_str"] α3) in
              let* α5 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      http.header.value.InvalidHeaderValue.t)
                    http.header.value.HeaderValue.t :=
                M.call (α1 α4) in
              let* α6 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        http.header.value.InvalidHeaderValue.t)
                      http.header.value.HeaderValue.t) :=
                M.alloc α5 in
              let* α7 : M.Val http.header.value.HeaderValue.t :=
                match_operator
                  α6
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                http.header.value.InvalidHeaderValue.t)
                              ->
                              M
                                (core.result.Result.t
                                  bytes.bytes.Bytes.t
                                  assistants_extra.anthropic.ApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  bytes.bytes.Bytes.t
                                  assistants_extra.anthropic.ApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  http.header.value.InvalidHeaderValue.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              http.header.value.InvalidHeaderValue.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              bytes.bytes.Bytes.t
                              assistants_extra.anthropic.ApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : http.header.value.HeaderValue.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val http.header.value.HeaderValue.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val http.header.value.HeaderValue.t)
                  ] in
              let* α8 : http.header.value.HeaderValue.t := M.read α7 in
              let* α9 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α8) in
              M.alloc α9 in
            let* body :
                M.Val
                  (std.collections.hash.map.HashMap.t
                    (ref str.t)
                    serde_json.value.Value.t
                    std.hash.random.RandomState.t) :=
              let* α0 :
                  std.collections.hash.map.HashMap.t
                    (ref str.t)
                    serde_json.value.Value.t
                    std.hash.random.RandomState.t :=
                M.call
                  (std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t)::["new"] in
              M.alloc α0 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "model") in
              let* α1 : core.option.Option.t alloc.string.String.t :=
                M.read model in
              let* α2 : alloc.string.String.t :=
                M.call
                  ((core.option.Option.t
                        alloc.string.String.t)::["unwrap_or_else"]
                    α1
                    (fun (α0 : unit) =>
                      (let* α0 := M.alloc α0 in
                      match_operator
                        α0
                        [
                          fun γ =>
                            (let* α0 : (ref str.t) -> M alloc.string.String.t :=
                              ltac:(M.get_method (fun ℐ =>
                                alloc.string.ToString.to_string
                                  (Self := str.t)
                                  (Trait := ℐ))) in
                            let* α1 : ref str.t :=
                              M.read (mk_str "claude-2.1") in
                            M.call (α0 α1)) :
                            M alloc.string.String.t
                        ]) :
                      M alloc.string.String.t)) in
              let* α3 : M.Val alloc.string.String.t := M.alloc α2 in
              let* α4 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow α3)) in
              let* α5 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α4) in
              let* α6 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α5) in
              M.alloc α6 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "prompt") in
              let* α1 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow prompt)) in
              let* α2 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α1) in
              let* α3 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "max_tokens_to_sample") in
              let* α1 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call
                  (serde_json.value.to_value (borrow max_tokens_to_sample)) in
              let* α2 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α1) in
              let* α3 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "temperature") in
              let* α1 : core.option.Option.t f32.t := M.read temperature in
              let* α2 : f32.t := M.read (UnsupportedLiteral : M.Val f32.t) in
              let* α3 : f32.t :=
                M.call ((core.option.Option.t f32.t)::["unwrap_or"] α1 α2) in
              let* α4 : M.Val f32.t := M.alloc α3 in
              let* α5 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow α4)) in
              let* α6 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α5) in
              let* α7 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α6) in
              M.alloc α7 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "stream") in
              let* α1 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    (serde_json.value.Value.Bool true)) in
              M.alloc α1 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : ref str.t := M.read (mk_str "anthropic-version") in
              let* α1 : ref str.t := M.read (mk_str "2023-06-01") in
              let* α2 : http.header.value.HeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_static"] α1) in
              let* α3 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val unit :=
              match_operator
                stop_sequences
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* stop_sequences := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t :=
                          M.read (mk_str "stop_sequences") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call
                            (serde_json.value.to_value
                              (borrow stop_sequences)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* _ : M.Val unit :=
              match_operator
                top_p
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* top_p := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t := M.read (mk_str "top_p") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call (serde_json.value.to_value (borrow top_p)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* _ : M.Val unit :=
              match_operator
                top_k
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* top_k := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t := M.read (mk_str "top_k") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call (serde_json.value.to_value (borrow top_k)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* _ : M.Val unit :=
              match_operator
                metadata
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* metadata := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t := M.read (mk_str "metadata") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call
                            (serde_json.value.to_value (borrow metadata)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* client : M.Val reqwest.async_impl.client.Client.t :=
              let* α0 : reqwest.async_impl.client.Client.t :=
                M.call reqwest.async_impl.client.Client.t::["new"] in
              M.alloc α0 in
            let* res : M.Val reqwest.async_impl.response.Response.t :=
              let* α0 :
                  (core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : _ -> M _ :=
                ltac:(M.get_method (fun ℐ =>
                  core.future.into_future.IntoFuture.into_future
                    (Self := _)
                    (Trait := ℐ))) in
              let* α2 : ref str.t := M.read url in
              let* α3 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.client.Client.t::["post"]
                    (borrow client)
                    α2) in
              let* α4 :
                  http.header.map.HeaderMap.t http.header.value.HeaderValue.t :=
                M.read headers in
              let* α5 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["headers"]
                    α3
                    α4) in
              let* α6 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["json"]
                    α5
                    (borrow body)) in
              let* α7 : _ :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["send"] α6) in
              let* α8 : _ := M.call (α1 α7) in
              let* α9 : M.Val _ := M.alloc α8 in
              let* α10 :
                  M.Val
                    (core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t) :=
                match_operator
                  α9
                  [
                    fun γ =>
                      (let* __awaitee := M.copy γ in
                      M.loop
                        (let* _ : M.Val unit :=
                          let* α0 :
                              (core.pin.Pin.t (mut_ref _)) ->
                                (mut_ref core.task.wake.Context.t) ->
                                M (core.task.poll.Poll.t _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.future.Future.poll
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 : core.pin.Pin.t (mut_ref _) :=
                            M.call
                              ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                (borrow_mut __awaitee)) in
                          let* α2 : core.future.ResumeTy.t :=
                            M.read _task_context in
                          let* α3 : mut_ref core.task.wake.Context.t :=
                            M.call (core.future.get_context α2) in
                          let* α4 :
                              core.task.poll.Poll.t
                                (core.result.Result.t
                                  reqwest.async_impl.response.Response.t
                                  reqwest.error.Error.t) :=
                            M.call (α0 α1 α3) in
                          let* α5 :
                              M.Val
                                (core.task.poll.Poll.t
                                  (core.result.Result.t
                                    reqwest.async_impl.response.Response.t
                                    reqwest.error.Error.t)) :=
                            M.alloc α4 in
                          match_operator
                            α5
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Ready _ =>
                                  let γ0_0 :=
                                    core.task.poll.Poll.Get_Ready_0 γ in
                                  let* result := M.copy γ0_0 in
                                  let* α0 : M.Val never.t := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2
                                | _ => M.break_match
                                end) :
                                M (M.Val unit);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Pending => M.alloc tt
                                | _ => M.break_match
                                end) :
                                M (M.Val unit)
                            ] in
                        let* _ : M.Val unit :=
                          let* α0 : M.Val unit := M.alloc tt in
                          let* α1 : M.Val core.future.ResumeTy.t := yield α0 in
                          let* α2 : core.future.ResumeTy.t := M.read α1 in
                          assign _task_context α2 in
                        M.alloc tt)) :
                      M
                        (M.Val
                          (core.result.Result.t
                            reqwest.async_impl.response.Response.t
                            reqwest.error.Error.t))
                  ] in
              let* α11 :
                  core.result.Result.t
                    reqwest.async_impl.response.Response.t
                    reqwest.error.Error.t :=
                M.read α10 in
              let* α12 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      reqwest.error.Error.t)
                    reqwest.async_impl.response.Response.t :=
                M.call (α0 α11) in
              let* α13 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      reqwest.async_impl.response.Response.t) :=
                M.alloc α12 in
              let* α14 : M.Val reqwest.async_impl.response.Response.t :=
                match_operator
                  α13
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  bytes.bytes.Bytes.t
                                  assistants_extra.anthropic.ApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  bytes.bytes.Bytes.t
                                  assistants_extra.anthropic.ApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              reqwest.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              bytes.bytes.Bytes.t
                              assistants_extra.anthropic.ApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : reqwest.async_impl.response.Response.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val reqwest.async_impl.response.Response.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val reqwest.async_impl.response.Response.t)
                  ] in
              M.copy α14 in
            let* α0 :
                (core.result.Result.t bytes.bytes.Bytes.t reqwest.error.Error.t)
                  ->
                  M (core.ops.control_flow.ControlFlow.t _ _) :=
              ltac:(M.get_method (fun ℐ =>
                core.ops.try_trait.Try.branch
                  (Self :=
                    core.result.Result.t
                      bytes.bytes.Bytes.t
                      reqwest.error.Error.t)
                  (Trait := ℐ))) in
            let* α1 : _ -> M _ :=
              ltac:(M.get_method (fun ℐ =>
                core.future.into_future.IntoFuture.into_future
                  (Self := _)
                  (Trait := ℐ))) in
            let* α2 : reqwest.async_impl.response.Response.t := M.read res in
            let* α3 : _ :=
              M.call (reqwest.async_impl.response.Response.t::["bytes"] α2) in
            let* α4 : _ := M.call (α1 α3) in
            let* α5 : M.Val _ := M.alloc α4 in
            let* α6 :
                M.Val
                  (core.result.Result.t
                    bytes.bytes.Bytes.t
                    reqwest.error.Error.t) :=
              match_operator
                α5
                [
                  fun γ =>
                    (let* __awaitee := M.copy γ in
                    M.loop
                      (let* _ : M.Val unit :=
                        let* α0 :
                            (core.pin.Pin.t (mut_ref _)) ->
                              (mut_ref core.task.wake.Context.t) ->
                              M (core.task.poll.Poll.t _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.future.future.Future.poll
                              (Self := _)
                              (Trait := ℐ))) in
                        let* α1 : core.pin.Pin.t (mut_ref _) :=
                          M.call
                            ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                              (borrow_mut __awaitee)) in
                        let* α2 : core.future.ResumeTy.t :=
                          M.read _task_context in
                        let* α3 : mut_ref core.task.wake.Context.t :=
                          M.call (core.future.get_context α2) in
                        let* α4 :
                            core.task.poll.Poll.t
                              (core.result.Result.t
                                bytes.bytes.Bytes.t
                                reqwest.error.Error.t) :=
                          M.call (α0 α1 α3) in
                        let* α5 :
                            M.Val
                              (core.task.poll.Poll.t
                                (core.result.Result.t
                                  bytes.bytes.Bytes.t
                                  reqwest.error.Error.t)) :=
                          M.alloc α4 in
                        match_operator
                          α5
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | core.task.poll.Poll.Ready _ =>
                                let γ0_0 := core.task.poll.Poll.Get_Ready_0 γ in
                                let* result := M.copy γ0_0 in
                                let* α0 : M.Val never.t := M.break in
                                let* α1 := M.read α0 in
                                let* α2 : unit := never_to_any α1 in
                                M.alloc α2
                              | _ => M.break_match
                              end) :
                              M (M.Val unit);
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | core.task.poll.Poll.Pending => M.alloc tt
                              | _ => M.break_match
                              end) :
                              M (M.Val unit)
                          ] in
                      let* _ : M.Val unit :=
                        let* α0 : M.Val unit := M.alloc tt in
                        let* α1 : M.Val core.future.ResumeTy.t := yield α0 in
                        let* α2 : core.future.ResumeTy.t := M.read α1 in
                        assign _task_context α2 in
                      M.alloc tt)) :
                    M
                      (M.Val
                        (core.result.Result.t
                          bytes.bytes.Bytes.t
                          reqwest.error.Error.t))
                ] in
            let* α7 :
                core.result.Result.t
                  bytes.bytes.Bytes.t
                  reqwest.error.Error.t :=
              M.read α6 in
            let* α8 :
                core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t
                    core.convert.Infallible.t
                    reqwest.error.Error.t)
                  bytes.bytes.Bytes.t :=
              M.call (α0 α7) in
            let* α9 :
                M.Val
                  (core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      reqwest.error.Error.t)
                    bytes.bytes.Bytes.t) :=
              M.alloc α8 in
            let* α10 : M.Val bytes.bytes.Bytes.t :=
              match_operator
                α9
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.ops.control_flow.ControlFlow.Break _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                      let* residual := M.copy γ0_0 in
                      let* α0 :
                          (core.result.Result.t
                              core.convert.Infallible.t
                              reqwest.error.Error.t)
                            ->
                            M
                              (core.result.Result.t
                                bytes.bytes.Bytes.t
                                assistants_extra.anthropic.ApiError.t) :=
                        ltac:(M.get_method (fun ℐ =>
                          core.ops.try_trait.FromResidual.from_residual
                            (Self :=
                              core.result.Result.t
                                bytes.bytes.Bytes.t
                                assistants_extra.anthropic.ApiError.t)
                            (R :=
                              core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t)
                            (Trait := ℐ))) in
                      let* α1 :
                          core.result.Result.t
                            core.convert.Infallible.t
                            reqwest.error.Error.t :=
                        M.read residual in
                      let* α2 :
                          core.result.Result.t
                            bytes.bytes.Bytes.t
                            assistants_extra.anthropic.ApiError.t :=
                        M.call (α0 α1) in
                      let* α3 : M.Val never.t := return_ α2 in
                      let* α4 := M.read α3 in
                      let* α5 : bytes.bytes.Bytes.t := never_to_any α4 in
                      M.alloc α5
                    | _ => M.break_match
                    end) :
                    M (M.Val bytes.bytes.Bytes.t);
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.ops.control_flow.ControlFlow.Continue _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                      let* val := M.copy γ0_0 in
                      M.pure val
                    | _ => M.break_match
                    end) :
                    M (M.Val bytes.bytes.Bytes.t)
                ] in
            let* α11 : bytes.bytes.Bytes.t := M.read α10 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    bytes.bytes.Bytes.t
                    assistants_extra.anthropic.ApiError.t) :=
              M.alloc (core.result.Result.Ok α11) in
            M.read (use α0)) :
            M
              (core.result.Result.t
                bytes.bytes.Bytes.t
                assistants_extra.anthropic.ApiError.t)
        ]) :
      M
        (core.result.Result.t
          bytes.bytes.Bytes.t
          assistants_extra.anthropic.ApiError.t)).

Error OpaqueTy.

(*
pub async fn call_anthropic_api(
    mut prompt: String,
    max_tokens_to_sample: i32,
    model: Option<String>,
    temperature: Option<f32>,
    stop_sequences: Option<Vec<String>>,
    top_p: Option<f32>,
    top_k: Option<i32>,
    metadata: Option<HashMap<String, String>>,
) -> Result<ResponseBody, ApiError> {
    let url = "https://api.anthropic.com/v1/complete";
    let api_key = std::env::var("ANTHROPIC_API_KEY").expect("ANTHROPIC_API_KEY must be set");
    prompt = format_prompt(prompt);
    let mut headers = HeaderMap::new();
    headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
    headers.insert("x-api-key", HeaderValue::from_str(&api_key)?);
    // https://docs.anthropic.com/claude/reference/versioning
    headers.insert("anthropic-version", HeaderValue::from_static("2023-06-01"));
    let mut body: HashMap<&str, serde_json::Value> = HashMap::new();
    body.insert(
        "model",
        serde_json::json!(model.unwrap_or_else(|| "claude-2.1".to_string())),
    );
    body.insert("prompt", serde_json::json!(prompt));
    body.insert(
        "max_tokens_to_sample",
        serde_json::json!(max_tokens_to_sample),
    );
    body.insert("temperature", serde_json::json!(temperature.unwrap_or(1.0)));
    body.insert("stream", serde_json::json!(false));

    if let Some(stop_sequences) = stop_sequences {
        body.insert("stop_sequences", serde_json::json!(stop_sequences));
    }
    if let Some(top_p) = top_p {
        body.insert("top_p", serde_json::json!(top_p));
    }
    if let Some(top_k) = top_k {
        body.insert("top_k", serde_json::json!(top_k));
    }
    if let Some(metadata) = metadata {
        body.insert("metadata", serde_json::json!(metadata));
    }

    let client = reqwest::Client::builder()
        .danger_accept_invalid_certs(true)
        .build()?;
    let res = client.post(url).headers(headers).json(&body).send().await?;
    let raw_res = res.text().await?;
    let api_res: ApiResponseBody = serde_json::from_str(&raw_res)?;

    match api_res {
        ApiResponseBody::Ok(res_body) => Ok(res_body),
        ApiResponseBody::Err { error } => match error.error_type.as_str() {
            "invalid_request_error" => Err(ApiError::InvalidRequestError(error.message)),
            "authentication_error" => Err(ApiError::AuthenticationError(error.message)),
            "permission_error" => Err(ApiError::PermissionError(error.message)),
            "not_found_error" => Err(ApiError::NotFoundError(error.message)),
            "rate_limit_error" => Err(ApiError::RateLimitError(error.message)),
            "api_error" => Err(ApiError::ApiError(error.message)),
            "overloaded_error" => Err(ApiError::OverloadedError(error.message)),
            _ => Err(ApiError::UnknownError(error.message)),
        },
    }
}
*)
Definition call_anthropic_api
    (prompt : alloc.string.String.t)
    (max_tokens_to_sample : i32.t)
    (model : core.option.Option.t alloc.string.String.t)
    (temperature : core.option.Option.t f32.t)
    (stop_sequences
      :
      core.option.Option.t
        (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A))
    (top_p : core.option.Option.t f32.t)
    (top_k : core.option.Option.t i32.t)
    (metadata
      :
      core.option.Option.t
        (std.collections.hash.map.HashMap.t
          alloc.string.String.t
          alloc.string.String.t
          std.collections.hash.map.HashMap.Default.S))
    : M OpaqueDef :=
  let* prompt := M.alloc prompt in
  let* max_tokens_to_sample := M.alloc max_tokens_to_sample in
  let* model := M.alloc model in
  let* temperature := M.alloc temperature in
  let* stop_sequences := M.alloc stop_sequences in
  let* top_p := M.alloc top_p in
  let* top_k := M.alloc top_k in
  let* metadata := M.alloc metadata in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* prompt : M.Val alloc.string.String.t := M.copy prompt in
            let* max_tokens_to_sample : M.Val i32.t :=
              M.copy max_tokens_to_sample in
            let* model : M.Val (core.option.Option.t alloc.string.String.t) :=
              M.copy model in
            let* temperature : M.Val (core.option.Option.t f32.t) :=
              M.copy temperature in
            let* stop_sequences :
                M.Val
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      alloc.string.String.t
                      alloc.alloc.Global.t)) :=
              M.copy stop_sequences in
            let* top_p : M.Val (core.option.Option.t f32.t) := M.copy top_p in
            let* top_k : M.Val (core.option.Option.t i32.t) := M.copy top_k in
            let* metadata :
                M.Val
                  (core.option.Option.t
                    (std.collections.hash.map.HashMap.t
                      alloc.string.String.t
                      alloc.string.String.t
                      std.hash.random.RandomState.t)) :=
              M.copy metadata in
            let* url : M.Val (ref str.t) :=
              M.copy (mk_str "https://api.anthropic.com/v1/complete") in
            let* api_key : M.Val alloc.string.String.t :=
              let* α0 : ref str.t := M.read (mk_str "ANTHROPIC_API_KEY") in
              let* α1 :
                  core.result.Result.t
                    alloc.string.String.t
                    std.env.VarError.t :=
                M.call (std.env.var α0) in
              let* α2 : ref str.t :=
                M.read (mk_str "ANTHROPIC_API_KEY must be set") in
              let* α3 : alloc.string.String.t :=
                M.call
                  ((core.result.Result.t
                        alloc.string.String.t
                        std.env.VarError.t)::["expect"]
                    α1
                    α2) in
              M.alloc α3 in
            let* _ : M.Val unit :=
              let* α0 : alloc.string.String.t := M.read prompt in
              let* α1 : alloc.string.String.t :=
                M.call (assistants_extra.anthropic.format_prompt α0) in
              assign prompt α1 in
            let* headers :
                M.Val
                  (http.header.map.HeaderMap.t
                    http.header.value.HeaderValue.t) :=
              let* α0 :
                  http.header.map.HeaderMap.t http.header.value.HeaderValue.t :=
                M.call
                  (http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t)::["new"] in
              M.alloc α0 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : http.header.name.HeaderName.t :=
                M.read http.header.name.CONTENT_TYPE in
              let* α1 : ref str.t := M.read (mk_str "application/json") in
              let* α2 : http.header.value.HeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_static"] α1) in
              let* α3 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : ref str.t := M.read (mk_str "x-api-key") in
              let* α1 :
                  (core.result.Result.t
                      http.header.value.HeaderValue.t
                      http.header.value.InvalidHeaderValue.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        http.header.value.HeaderValue.t
                        http.header.value.InvalidHeaderValue.t)
                    (Trait := ℐ))) in
              let* α2 : (ref alloc.string.String.t) -> M (ref _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.deref.Deref.deref
                    (Self := alloc.string.String.t)
                    (Trait := ℐ))) in
              let* α3 : ref str.t := M.call (α2 (borrow api_key)) in
              let* α4 :
                  core.result.Result.t
                    http.header.value.HeaderValue.t
                    http.header.value.InvalidHeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_str"] α3) in
              let* α5 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      http.header.value.InvalidHeaderValue.t)
                    http.header.value.HeaderValue.t :=
                M.call (α1 α4) in
              let* α6 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        http.header.value.InvalidHeaderValue.t)
                      http.header.value.HeaderValue.t) :=
                M.alloc α5 in
              let* α7 : M.Val http.header.value.HeaderValue.t :=
                match_operator
                  α6
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                http.header.value.InvalidHeaderValue.t)
                              ->
                              M
                                (core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  http.header.value.InvalidHeaderValue.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              http.header.value.InvalidHeaderValue.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              assistants_extra.anthropic.ResponseBody.t
                              assistants_extra.anthropic.ApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : http.header.value.HeaderValue.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val http.header.value.HeaderValue.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val http.header.value.HeaderValue.t)
                  ] in
              let* α8 : http.header.value.HeaderValue.t := M.read α7 in
              let* α9 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α8) in
              M.alloc α9 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : ref str.t := M.read (mk_str "anthropic-version") in
              let* α1 : ref str.t := M.read (mk_str "2023-06-01") in
              let* α2 : http.header.value.HeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_static"] α1) in
              let* α3 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α2) in
              M.alloc α3 in
            let* body :
                M.Val
                  (std.collections.hash.map.HashMap.t
                    (ref str.t)
                    serde_json.value.Value.t
                    std.hash.random.RandomState.t) :=
              let* α0 :
                  std.collections.hash.map.HashMap.t
                    (ref str.t)
                    serde_json.value.Value.t
                    std.hash.random.RandomState.t :=
                M.call
                  (std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t)::["new"] in
              M.alloc α0 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "model") in
              let* α1 : core.option.Option.t alloc.string.String.t :=
                M.read model in
              let* α2 : alloc.string.String.t :=
                M.call
                  ((core.option.Option.t
                        alloc.string.String.t)::["unwrap_or_else"]
                    α1
                    (fun (α0 : unit) =>
                      (let* α0 := M.alloc α0 in
                      match_operator
                        α0
                        [
                          fun γ =>
                            (let* α0 : (ref str.t) -> M alloc.string.String.t :=
                              ltac:(M.get_method (fun ℐ =>
                                alloc.string.ToString.to_string
                                  (Self := str.t)
                                  (Trait := ℐ))) in
                            let* α1 : ref str.t :=
                              M.read (mk_str "claude-2.1") in
                            M.call (α0 α1)) :
                            M alloc.string.String.t
                        ]) :
                      M alloc.string.String.t)) in
              let* α3 : M.Val alloc.string.String.t := M.alloc α2 in
              let* α4 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow α3)) in
              let* α5 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α4) in
              let* α6 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α5) in
              M.alloc α6 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "prompt") in
              let* α1 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow prompt)) in
              let* α2 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α1) in
              let* α3 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "max_tokens_to_sample") in
              let* α1 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call
                  (serde_json.value.to_value (borrow max_tokens_to_sample)) in
              let* α2 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α1) in
              let* α3 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "temperature") in
              let* α1 : core.option.Option.t f32.t := M.read temperature in
              let* α2 : f32.t := M.read (UnsupportedLiteral : M.Val f32.t) in
              let* α3 : f32.t :=
                M.call ((core.option.Option.t f32.t)::["unwrap_or"] α1 α2) in
              let* α4 : M.Val f32.t := M.alloc α3 in
              let* α5 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow α4)) in
              let* α6 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α5) in
              let* α7 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α6) in
              M.alloc α7 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "stream") in
              let* α1 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    (serde_json.value.Value.Bool false)) in
              M.alloc α1 in
            let* _ : M.Val unit :=
              match_operator
                stop_sequences
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* stop_sequences := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t :=
                          M.read (mk_str "stop_sequences") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call
                            (serde_json.value.to_value
                              (borrow stop_sequences)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* _ : M.Val unit :=
              match_operator
                top_p
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* top_p := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t := M.read (mk_str "top_p") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call (serde_json.value.to_value (borrow top_p)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* _ : M.Val unit :=
              match_operator
                top_k
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* top_k := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t := M.read (mk_str "top_k") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call (serde_json.value.to_value (borrow top_k)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* _ : M.Val unit :=
              match_operator
                metadata
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* metadata := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t := M.read (mk_str "metadata") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call
                            (serde_json.value.to_value (borrow metadata)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* client : M.Val reqwest.async_impl.client.Client.t :=
              let* α0 :
                  (core.result.Result.t
                      reqwest.async_impl.client.Client.t
                      reqwest.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        reqwest.async_impl.client.Client.t
                        reqwest.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : reqwest.async_impl.client.ClientBuilder.t :=
                M.call reqwest.async_impl.client.Client.t::["builder"] in
              let* α2 : reqwest.async_impl.client.ClientBuilder.t :=
                M.call
                  (reqwest.async_impl.client.ClientBuilder.t::["danger_accept_invalid_certs"]
                    α1
                    true) in
              let* α3 :
                  core.result.Result.t
                    reqwest.async_impl.client.Client.t
                    reqwest.error.Error.t :=
                M.call
                  (reqwest.async_impl.client.ClientBuilder.t::["build"] α2) in
              let* α4 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      reqwest.error.Error.t)
                    reqwest.async_impl.client.Client.t :=
                M.call (α0 α3) in
              let* α5 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      reqwest.async_impl.client.Client.t) :=
                M.alloc α4 in
              let* α6 : M.Val reqwest.async_impl.client.Client.t :=
                match_operator
                  α5
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              reqwest.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              assistants_extra.anthropic.ResponseBody.t
                              assistants_extra.anthropic.ApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : reqwest.async_impl.client.Client.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val reqwest.async_impl.client.Client.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val reqwest.async_impl.client.Client.t)
                  ] in
              M.copy α6 in
            let* res : M.Val reqwest.async_impl.response.Response.t :=
              let* α0 :
                  (core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : _ -> M _ :=
                ltac:(M.get_method (fun ℐ =>
                  core.future.into_future.IntoFuture.into_future
                    (Self := _)
                    (Trait := ℐ))) in
              let* α2 : ref str.t := M.read url in
              let* α3 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.client.Client.t::["post"]
                    (borrow client)
                    α2) in
              let* α4 :
                  http.header.map.HeaderMap.t http.header.value.HeaderValue.t :=
                M.read headers in
              let* α5 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["headers"]
                    α3
                    α4) in
              let* α6 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["json"]
                    α5
                    (borrow body)) in
              let* α7 : _ :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["send"] α6) in
              let* α8 : _ := M.call (α1 α7) in
              let* α9 : M.Val _ := M.alloc α8 in
              let* α10 :
                  M.Val
                    (core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t) :=
                match_operator
                  α9
                  [
                    fun γ =>
                      (let* __awaitee := M.copy γ in
                      M.loop
                        (let* _ : M.Val unit :=
                          let* α0 :
                              (core.pin.Pin.t (mut_ref _)) ->
                                (mut_ref core.task.wake.Context.t) ->
                                M (core.task.poll.Poll.t _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.future.Future.poll
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 : core.pin.Pin.t (mut_ref _) :=
                            M.call
                              ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                (borrow_mut __awaitee)) in
                          let* α2 : core.future.ResumeTy.t :=
                            M.read _task_context in
                          let* α3 : mut_ref core.task.wake.Context.t :=
                            M.call (core.future.get_context α2) in
                          let* α4 :
                              core.task.poll.Poll.t
                                (core.result.Result.t
                                  reqwest.async_impl.response.Response.t
                                  reqwest.error.Error.t) :=
                            M.call (α0 α1 α3) in
                          let* α5 :
                              M.Val
                                (core.task.poll.Poll.t
                                  (core.result.Result.t
                                    reqwest.async_impl.response.Response.t
                                    reqwest.error.Error.t)) :=
                            M.alloc α4 in
                          match_operator
                            α5
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Ready _ =>
                                  let γ0_0 :=
                                    core.task.poll.Poll.Get_Ready_0 γ in
                                  let* result := M.copy γ0_0 in
                                  let* α0 : M.Val never.t := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2
                                | _ => M.break_match
                                end) :
                                M (M.Val unit);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Pending => M.alloc tt
                                | _ => M.break_match
                                end) :
                                M (M.Val unit)
                            ] in
                        let* _ : M.Val unit :=
                          let* α0 : M.Val unit := M.alloc tt in
                          let* α1 : M.Val core.future.ResumeTy.t := yield α0 in
                          let* α2 : core.future.ResumeTy.t := M.read α1 in
                          assign _task_context α2 in
                        M.alloc tt)) :
                      M
                        (M.Val
                          (core.result.Result.t
                            reqwest.async_impl.response.Response.t
                            reqwest.error.Error.t))
                  ] in
              let* α11 :
                  core.result.Result.t
                    reqwest.async_impl.response.Response.t
                    reqwest.error.Error.t :=
                M.read α10 in
              let* α12 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      reqwest.error.Error.t)
                    reqwest.async_impl.response.Response.t :=
                M.call (α0 α11) in
              let* α13 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      reqwest.async_impl.response.Response.t) :=
                M.alloc α12 in
              let* α14 : M.Val reqwest.async_impl.response.Response.t :=
                match_operator
                  α13
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              reqwest.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              assistants_extra.anthropic.ResponseBody.t
                              assistants_extra.anthropic.ApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : reqwest.async_impl.response.Response.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val reqwest.async_impl.response.Response.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val reqwest.async_impl.response.Response.t)
                  ] in
              M.copy α14 in
            let* raw_res : M.Val alloc.string.String.t :=
              let* α0 :
                  (core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : _ -> M _ :=
                ltac:(M.get_method (fun ℐ =>
                  core.future.into_future.IntoFuture.into_future
                    (Self := _)
                    (Trait := ℐ))) in
              let* α2 : reqwest.async_impl.response.Response.t := M.read res in
              let* α3 : _ :=
                M.call (reqwest.async_impl.response.Response.t::["text"] α2) in
              let* α4 : _ := M.call (α1 α3) in
              let* α5 : M.Val _ := M.alloc α4 in
              let* α6 :
                  M.Val
                    (core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t) :=
                match_operator
                  α5
                  [
                    fun γ =>
                      (let* __awaitee := M.copy γ in
                      M.loop
                        (let* _ : M.Val unit :=
                          let* α0 :
                              (core.pin.Pin.t (mut_ref _)) ->
                                (mut_ref core.task.wake.Context.t) ->
                                M (core.task.poll.Poll.t _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.future.Future.poll
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 : core.pin.Pin.t (mut_ref _) :=
                            M.call
                              ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                (borrow_mut __awaitee)) in
                          let* α2 : core.future.ResumeTy.t :=
                            M.read _task_context in
                          let* α3 : mut_ref core.task.wake.Context.t :=
                            M.call (core.future.get_context α2) in
                          let* α4 :
                              core.task.poll.Poll.t
                                (core.result.Result.t
                                  alloc.string.String.t
                                  reqwest.error.Error.t) :=
                            M.call (α0 α1 α3) in
                          let* α5 :
                              M.Val
                                (core.task.poll.Poll.t
                                  (core.result.Result.t
                                    alloc.string.String.t
                                    reqwest.error.Error.t)) :=
                            M.alloc α4 in
                          match_operator
                            α5
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Ready _ =>
                                  let γ0_0 :=
                                    core.task.poll.Poll.Get_Ready_0 γ in
                                  let* result := M.copy γ0_0 in
                                  let* α0 : M.Val never.t := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2
                                | _ => M.break_match
                                end) :
                                M (M.Val unit);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Pending => M.alloc tt
                                | _ => M.break_match
                                end) :
                                M (M.Val unit)
                            ] in
                        let* _ : M.Val unit :=
                          let* α0 : M.Val unit := M.alloc tt in
                          let* α1 : M.Val core.future.ResumeTy.t := yield α0 in
                          let* α2 : core.future.ResumeTy.t := M.read α1 in
                          assign _task_context α2 in
                        M.alloc tt)) :
                      M
                        (M.Val
                          (core.result.Result.t
                            alloc.string.String.t
                            reqwest.error.Error.t))
                  ] in
              let* α7 :
                  core.result.Result.t
                    alloc.string.String.t
                    reqwest.error.Error.t :=
                M.read α6 in
              let* α8 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      reqwest.error.Error.t)
                    alloc.string.String.t :=
                M.call (α0 α7) in
              let* α9 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      alloc.string.String.t) :=
                M.alloc α8 in
              let* α10 : M.Val alloc.string.String.t :=
                match_operator
                  α9
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              reqwest.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              assistants_extra.anthropic.ResponseBody.t
                              assistants_extra.anthropic.ApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : alloc.string.String.t := never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val alloc.string.String.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val alloc.string.String.t)
                  ] in
              M.copy α10 in
            let* api_res : M.Val assistants_extra.anthropic.ApiResponseBody.t :=
              let* α0 :
                  (core.result.Result.t
                      assistants_extra.anthropic.ApiResponseBody.t
                      serde_json.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        assistants_extra.anthropic.ApiResponseBody.t
                        serde_json.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : (ref alloc.string.String.t) -> M (ref _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.deref.Deref.deref
                    (Self := alloc.string.String.t)
                    (Trait := ℐ))) in
              let* α2 : ref str.t := M.call (α1 (borrow raw_res)) in
              let* α3 :
                  core.result.Result.t
                    assistants_extra.anthropic.ApiResponseBody.t
                    serde_json.error.Error.t :=
                M.call (serde_json.de.from_str α2) in
              let* α4 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      serde_json.error.Error.t)
                    assistants_extra.anthropic.ApiResponseBody.t :=
                M.call (α0 α3) in
              let* α5 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        serde_json.error.Error.t)
                      assistants_extra.anthropic.ApiResponseBody.t) :=
                M.alloc α4 in
              let* α6 : M.Val assistants_extra.anthropic.ApiResponseBody.t :=
                match_operator
                  α5
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                serde_json.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  serde_json.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              serde_json.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              assistants_extra.anthropic.ResponseBody.t
                              assistants_extra.anthropic.ApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 :
                            assistants_extra.anthropic.ApiResponseBody.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val assistants_extra.anthropic.ApiResponseBody.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val assistants_extra.anthropic.ApiResponseBody.t)
                  ] in
              M.copy α6 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    assistants_extra.anthropic.ResponseBody.t
                    assistants_extra.anthropic.ApiError.t) :=
              match_operator
                api_res
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | assistants_extra.anthropic.ApiResponseBody.Ok _ =>
                      let γ0_0 :=
                        assistants_extra.anthropic.ApiResponseBody.Get_Ok_0 γ in
                      let* res_body := M.copy γ0_0 in
                      let* α0 : assistants_extra.anthropic.ResponseBody.t :=
                        M.read res_body in
                      M.alloc (core.result.Result.Ok α0)
                    | _ => M.break_match
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          assistants_extra.anthropic.ResponseBody.t
                          assistants_extra.anthropic.ApiError.t));
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    |
                        assistants_extra.anthropic.ApiResponseBody.Err
                        {|
                          assistants_extra.anthropic.ApiResponseBody.Err.error
                            :=
                            _;
                        |}
                        =>
                      let γ0_0 :=
                        assistants_extra.anthropic.ApiResponseBody.Get_Err_error
                          γ in
                      let* error := M.copy γ0_0 in
                      let* α0 : ref str.t :=
                        M.call
                          (alloc.string.String.t::["as_str"]
                            (borrow
                              (assistants_extra.anthropic.ApiErrorType.Get_error_type
                                error))) in
                      let* α1 : M.Val (ref str.t) := M.alloc α0 in
                      match_operator
                        α1
                        [
                          fun γ =>
                            (let* α0 : alloc.string.String.t :=
                              M.read
                                (assistants_extra.anthropic.ApiErrorType.Get_message
                                  error) in
                            M.alloc
                              (core.result.Result.Err
                                (assistants_extra.anthropic.ApiError.InvalidRequestError
                                  α0))) :
                            M
                              (M.Val
                                (core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t));
                          fun γ =>
                            (let* α0 : alloc.string.String.t :=
                              M.read
                                (assistants_extra.anthropic.ApiErrorType.Get_message
                                  error) in
                            M.alloc
                              (core.result.Result.Err
                                (assistants_extra.anthropic.ApiError.AuthenticationError
                                  α0))) :
                            M
                              (M.Val
                                (core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t));
                          fun γ =>
                            (let* α0 : alloc.string.String.t :=
                              M.read
                                (assistants_extra.anthropic.ApiErrorType.Get_message
                                  error) in
                            M.alloc
                              (core.result.Result.Err
                                (assistants_extra.anthropic.ApiError.PermissionError
                                  α0))) :
                            M
                              (M.Val
                                (core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t));
                          fun γ =>
                            (let* α0 : alloc.string.String.t :=
                              M.read
                                (assistants_extra.anthropic.ApiErrorType.Get_message
                                  error) in
                            M.alloc
                              (core.result.Result.Err
                                (assistants_extra.anthropic.ApiError.NotFoundError
                                  α0))) :
                            M
                              (M.Val
                                (core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t));
                          fun γ =>
                            (let* α0 : alloc.string.String.t :=
                              M.read
                                (assistants_extra.anthropic.ApiErrorType.Get_message
                                  error) in
                            M.alloc
                              (core.result.Result.Err
                                (assistants_extra.anthropic.ApiError.RateLimitError
                                  α0))) :
                            M
                              (M.Val
                                (core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t));
                          fun γ =>
                            (let* α0 : alloc.string.String.t :=
                              M.read
                                (assistants_extra.anthropic.ApiErrorType.Get_message
                                  error) in
                            M.alloc
                              (core.result.Result.Err
                                (assistants_extra.anthropic.ApiError.ApiError
                                  α0))) :
                            M
                              (M.Val
                                (core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t));
                          fun γ =>
                            (let* α0 : alloc.string.String.t :=
                              M.read
                                (assistants_extra.anthropic.ApiErrorType.Get_message
                                  error) in
                            M.alloc
                              (core.result.Result.Err
                                (assistants_extra.anthropic.ApiError.OverloadedError
                                  α0))) :
                            M
                              (M.Val
                                (core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t));
                          fun γ =>
                            (let* α0 : alloc.string.String.t :=
                              M.read
                                (assistants_extra.anthropic.ApiErrorType.Get_message
                                  error) in
                            M.alloc
                              (core.result.Result.Err
                                (assistants_extra.anthropic.ApiError.UnknownError
                                  α0))) :
                            M
                              (M.Val
                                (core.result.Result.t
                                  assistants_extra.anthropic.ResponseBody.t
                                  assistants_extra.anthropic.ApiError.t))
                        ]
                    | _ => M.break_match
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          assistants_extra.anthropic.ResponseBody.t
                          assistants_extra.anthropic.ApiError.t))
                ] in
            M.read (use α0)) :
            M
              (core.result.Result.t
                assistants_extra.anthropic.ResponseBody.t
                assistants_extra.anthropic.ApiError.t)
        ]) :
      M
        (core.result.Result.t
          assistants_extra.anthropic.ResponseBody.t
          assistants_extra.anthropic.ApiError.t)).

Module openai.
  Module  ApiErrorDetail.
  Section ApiErrorDetail.
    Record t : Set := {
      message : alloc.string.String.t;
      type : alloc.string.String.t;
      param : core.option.Option.t serde_json.value.Value.t;
      code : core.option.Option.t serde_json.value.Value.t;
    }.
    
    Definition Get_message :=
      Ref.map
        (fun α => Some α.(message))
        (fun β α => Some (α <| message := β |>)).
    Definition Get_type :=
      Ref.map (fun α => Some α.(type)) (fun β α => Some (α <| type := β |>)).
    Definition Get_param :=
      Ref.map (fun α => Some α.(param)) (fun β α => Some (α <| param := β |>)).
    Definition Get_code :=
      Ref.map (fun α => Some α.(code)) (fun β α => Some (α <| code := β |>)).
  End ApiErrorDetail.
  End ApiErrorDetail.
  
  Module  Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorDetail_t.
  Section Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorDetail_t.
    Definition Self : Set := assistants_extra.openai.ApiErrorDetail.t.
    
    (*
    Debug
    *)
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter.t)
        : M ltac:(core.fmt.Result) :=
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
      let* α1 : ref str.t := M.read (mk_str "ApiErrorDetail") in
      let* α2 : ref str.t := M.read (mk_str "message") in
      let* α3 : ref assistants_extra.openai.ApiErrorDetail.t := M.read self in
      let* α4 : ref str.t := M.read (mk_str "type") in
      let* α5 : ref assistants_extra.openai.ApiErrorDetail.t := M.read self in
      let* α6 : ref str.t := M.read (mk_str "param") in
      let* α7 : ref assistants_extra.openai.ApiErrorDetail.t := M.read self in
      let* α8 : ref str.t := M.read (mk_str "code") in
      let* α9 : ref assistants_extra.openai.ApiErrorDetail.t := M.read self in
      let* α10 : M.Val (ref (core.option.Option.t serde_json.value.Value.t)) :=
        M.alloc
          (borrow
            (assistants_extra.openai.ApiErrorDetail.Get_code (deref α9))) in
      M.call
        (core.fmt.Formatter.t::["debug_struct_field4_finish"]
          α0
          α1
          α2
          (pointer_coercion
            "Unsize"
            (borrow
              (assistants_extra.openai.ApiErrorDetail.Get_message (deref α3))))
          α4
          (pointer_coercion
            "Unsize"
            (borrow
              (assistants_extra.openai.ApiErrorDetail.Get_type (deref α5))))
          α6
          (pointer_coercion
            "Unsize"
            (borrow
              (assistants_extra.openai.ApiErrorDetail.Get_param (deref α7))))
          α8
          (pointer_coercion "Unsize" (borrow α10))).
    
    Global Instance AssociatedFunction_fmt :
      Notations.DoubleColon Self "fmt" := {
      Notations.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorDetail_t.
  End Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorDetail_t.
  
  Module  ApiErrorResponse.
  Section ApiErrorResponse.
    Record t : Set := {
      error : assistants_extra.openai.ApiErrorDetail.t;
    }.
    
    Definition Get_error :=
      Ref.map (fun α => Some α.(error)) (fun β α => Some (α <| error := β |>)).
  End ApiErrorResponse.
  End ApiErrorResponse.
  
  Module  Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorResponse_t.
  Section Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorResponse_t.
    Definition Self : Set := assistants_extra.openai.ApiErrorResponse.t.
    
    (*
    Debug
    *)
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter.t)
        : M ltac:(core.fmt.Result) :=
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
      let* α1 : ref str.t := M.read (mk_str "ApiErrorResponse") in
      let* α2 : ref str.t := M.read (mk_str "error") in
      let* α3 : ref assistants_extra.openai.ApiErrorResponse.t := M.read self in
      let* α4 : M.Val (ref assistants_extra.openai.ApiErrorDetail.t) :=
        M.alloc
          (borrow
            (assistants_extra.openai.ApiErrorResponse.Get_error (deref α3))) in
      M.call
        (core.fmt.Formatter.t::["debug_struct_field1_finish"]
          α0
          α1
          α2
          (pointer_coercion "Unsize" (borrow α4))).
    
    Global Instance AssociatedFunction_fmt :
      Notations.DoubleColon Self "fmt" := {
      Notations.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorResponse_t.
  End Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorResponse_t.
  
  Module  Message.
  Section Message.
    Record t : Set := {
      role : alloc.string.String.t;
      content : alloc.string.String.t;
    }.
    
    Definition Get_role :=
      Ref.map (fun α => Some α.(role)) (fun β α => Some (α <| role := β |>)).
    Definition Get_content :=
      Ref.map
        (fun α => Some α.(content))
        (fun β α => Some (α <| content := β |>)).
  End Message.
  End Message.
  
  Module  Impl_core_fmt_Debug_for_assistants_extra_openai_Message_t.
  Section Impl_core_fmt_Debug_for_assistants_extra_openai_Message_t.
    Definition Self : Set := assistants_extra.openai.Message.t.
    
    (*
    Debug
    *)
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter.t)
        : M ltac:(core.fmt.Result) :=
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
      let* α1 : ref str.t := M.read (mk_str "Message") in
      let* α2 : ref str.t := M.read (mk_str "role") in
      let* α3 : ref assistants_extra.openai.Message.t := M.read self in
      let* α4 : ref str.t := M.read (mk_str "content") in
      let* α5 : ref assistants_extra.openai.Message.t := M.read self in
      let* α6 : M.Val (ref alloc.string.String.t) :=
        M.alloc
          (borrow (assistants_extra.openai.Message.Get_content (deref α5))) in
      M.call
        (core.fmt.Formatter.t::["debug_struct_field2_finish"]
          α0
          α1
          α2
          (pointer_coercion
            "Unsize"
            (borrow (assistants_extra.openai.Message.Get_role (deref α3))))
          α4
          (pointer_coercion "Unsize" (borrow α6))).
    
    Global Instance AssociatedFunction_fmt :
      Notations.DoubleColon Self "fmt" := {
      Notations.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_assistants_extra_openai_Message_t.
  End Impl_core_fmt_Debug_for_assistants_extra_openai_Message_t.
  
  Module  Impl_core_clone_Clone_for_assistants_extra_openai_Message_t.
  Section Impl_core_clone_Clone_for_assistants_extra_openai_Message_t.
    Definition Self : Set := assistants_extra.openai.Message.t.
    
    (*
    Clone
    *)
    Definition clone (self : ref Self) : M assistants_extra.openai.Message.t :=
      let* self := M.alloc self in
      let* α0 : (ref alloc.string.String.t) -> M alloc.string.String.t :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self := alloc.string.String.t)
            (Trait := ℐ))) in
      let* α1 : ref assistants_extra.openai.Message.t := M.read self in
      let* α2 : alloc.string.String.t :=
        M.call
          (α0 (borrow (assistants_extra.openai.Message.Get_role (deref α1)))) in
      let* α3 : (ref alloc.string.String.t) -> M alloc.string.String.t :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self := alloc.string.String.t)
            (Trait := ℐ))) in
      let* α4 : ref assistants_extra.openai.Message.t := M.read self in
      let* α5 : alloc.string.String.t :=
        M.call
          (α3
            (borrow
              (assistants_extra.openai.Message.Get_content (deref α4)))) in
      M.pure
        {|
          assistants_extra.openai.Message.role := α2;
          assistants_extra.openai.Message.content := α5;
        |}.
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_assistants_extra_openai_Message_t.
  End Impl_core_clone_Clone_for_assistants_extra_openai_Message_t.
  
  Module  Choice.
  Section Choice.
    Record t : Set := {
      message : assistants_extra.openai.Message.t;
      finish_reason : alloc.string.String.t;
    }.
    
    Definition Get_message :=
      Ref.map
        (fun α => Some α.(message))
        (fun β α => Some (α <| message := β |>)).
    Definition Get_finish_reason :=
      Ref.map
        (fun α => Some α.(finish_reason))
        (fun β α => Some (α <| finish_reason := β |>)).
  End Choice.
  End Choice.
  
  Module  Impl_core_fmt_Debug_for_assistants_extra_openai_Choice_t.
  Section Impl_core_fmt_Debug_for_assistants_extra_openai_Choice_t.
    Definition Self : Set := assistants_extra.openai.Choice.t.
    
    (*
    Debug
    *)
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter.t)
        : M ltac:(core.fmt.Result) :=
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
      let* α1 : ref str.t := M.read (mk_str "Choice") in
      let* α2 : ref str.t := M.read (mk_str "message") in
      let* α3 : ref assistants_extra.openai.Choice.t := M.read self in
      let* α4 : ref str.t := M.read (mk_str "finish_reason") in
      let* α5 : ref assistants_extra.openai.Choice.t := M.read self in
      let* α6 : M.Val (ref alloc.string.String.t) :=
        M.alloc
          (borrow
            (assistants_extra.openai.Choice.Get_finish_reason (deref α5))) in
      M.call
        (core.fmt.Formatter.t::["debug_struct_field2_finish"]
          α0
          α1
          α2
          (pointer_coercion
            "Unsize"
            (borrow (assistants_extra.openai.Choice.Get_message (deref α3))))
          α4
          (pointer_coercion "Unsize" (borrow α6))).
    
    Global Instance AssociatedFunction_fmt :
      Notations.DoubleColon Self "fmt" := {
      Notations.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_assistants_extra_openai_Choice_t.
  End Impl_core_fmt_Debug_for_assistants_extra_openai_Choice_t.
  
  Module  Usage.
  Section Usage.
    Record t : Set := {
      prompt_tokens : i32.t;
      total_tokens : i32.t;
      completion_tokens : i32.t;
    }.
    
    Definition Get_prompt_tokens :=
      Ref.map
        (fun α => Some α.(prompt_tokens))
        (fun β α => Some (α <| prompt_tokens := β |>)).
    Definition Get_total_tokens :=
      Ref.map
        (fun α => Some α.(total_tokens))
        (fun β α => Some (α <| total_tokens := β |>)).
    Definition Get_completion_tokens :=
      Ref.map
        (fun α => Some α.(completion_tokens))
        (fun β α => Some (α <| completion_tokens := β |>)).
  End Usage.
  End Usage.
  
  Module  Impl_core_fmt_Debug_for_assistants_extra_openai_Usage_t.
  Section Impl_core_fmt_Debug_for_assistants_extra_openai_Usage_t.
    Definition Self : Set := assistants_extra.openai.Usage.t.
    
    (*
    Debug
    *)
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter.t)
        : M ltac:(core.fmt.Result) :=
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
      let* α1 : ref str.t := M.read (mk_str "Usage") in
      let* α2 : ref str.t := M.read (mk_str "prompt_tokens") in
      let* α3 : ref assistants_extra.openai.Usage.t := M.read self in
      let* α4 : ref str.t := M.read (mk_str "total_tokens") in
      let* α5 : ref assistants_extra.openai.Usage.t := M.read self in
      let* α6 : ref str.t := M.read (mk_str "completion_tokens") in
      let* α7 : ref assistants_extra.openai.Usage.t := M.read self in
      let* α8 : M.Val (ref i32.t) :=
        M.alloc
          (borrow
            (assistants_extra.openai.Usage.Get_completion_tokens (deref α7))) in
      M.call
        (core.fmt.Formatter.t::["debug_struct_field3_finish"]
          α0
          α1
          α2
          (pointer_coercion
            "Unsize"
            (borrow
              (assistants_extra.openai.Usage.Get_prompt_tokens (deref α3))))
          α4
          (pointer_coercion
            "Unsize"
            (borrow
              (assistants_extra.openai.Usage.Get_total_tokens (deref α5))))
          α6
          (pointer_coercion "Unsize" (borrow α8))).
    
    Global Instance AssociatedFunction_fmt :
      Notations.DoubleColon Self "fmt" := {
      Notations.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_assistants_extra_openai_Usage_t.
  End Impl_core_fmt_Debug_for_assistants_extra_openai_Usage_t.
  
  Module  ChatCompletion.
  Section ChatCompletion.
    Record t : Set := {
      id : alloc.string.String.t;
      object : alloc.string.String.t;
      created : i64.t;
      model : alloc.string.String.t;
      choices :
        alloc.vec.Vec.t
          assistants_extra.openai.Choice.t
          alloc.vec.Vec.Default.A;
      usage : assistants_extra.openai.Usage.t;
    }.
    
    Definition Get_id :=
      Ref.map (fun α => Some α.(id)) (fun β α => Some (α <| id := β |>)).
    Definition Get_object :=
      Ref.map
        (fun α => Some α.(object))
        (fun β α => Some (α <| object := β |>)).
    Definition Get_created :=
      Ref.map
        (fun α => Some α.(created))
        (fun β α => Some (α <| created := β |>)).
    Definition Get_model :=
      Ref.map (fun α => Some α.(model)) (fun β α => Some (α <| model := β |>)).
    Definition Get_choices :=
      Ref.map
        (fun α => Some α.(choices))
        (fun β α => Some (α <| choices := β |>)).
    Definition Get_usage :=
      Ref.map (fun α => Some α.(usage)) (fun β α => Some (α <| usage := β |>)).
  End ChatCompletion.
  End ChatCompletion.
  
  Module  Impl_core_fmt_Debug_for_assistants_extra_openai_ChatCompletion_t.
  Section Impl_core_fmt_Debug_for_assistants_extra_openai_ChatCompletion_t.
    Definition Self : Set := assistants_extra.openai.ChatCompletion.t.
    
    (*
    Debug
    *)
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter.t)
        : M ltac:(core.fmt.Result) :=
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* names : M.Val (ref (array (ref str.t))) :=
        let* α0 : ref str.t := M.read (mk_str "id") in
        let* α1 : ref str.t := M.read (mk_str "object") in
        let* α2 : ref str.t := M.read (mk_str "created") in
        let* α3 : ref str.t := M.read (mk_str "model") in
        let* α4 : ref str.t := M.read (mk_str "choices") in
        let* α5 : ref str.t := M.read (mk_str "usage") in
        let* α6 : M.Val (array (ref str.t)) :=
          M.alloc [ α0; α1; α2; α3; α4; α5 ] in
        M.alloc (borrow α6) in
      let* values : M.Val (ref (slice (ref (dyn [core.fmt.Debug.Trait])))) :=
        let* α0 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
        let* α1 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
        let* α2 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
        let* α3 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
        let* α4 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
        let* α5 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
        let* α6 : M.Val (ref assistants_extra.openai.Usage.t) :=
          M.alloc
            (borrow
              (assistants_extra.openai.ChatCompletion.Get_usage (deref α5))) in
        let* α7 : M.Val (array (ref (dyn [core.fmt.Debug.Trait]))) :=
          M.alloc
            [
              pointer_coercion
                "Unsize"
                (borrow
                  (assistants_extra.openai.ChatCompletion.Get_id (deref α0)));
              pointer_coercion
                "Unsize"
                (borrow
                  (assistants_extra.openai.ChatCompletion.Get_object
                    (deref α1)));
              pointer_coercion
                "Unsize"
                (borrow
                  (assistants_extra.openai.ChatCompletion.Get_created
                    (deref α2)));
              pointer_coercion
                "Unsize"
                (borrow
                  (assistants_extra.openai.ChatCompletion.Get_model
                    (deref α3)));
              pointer_coercion
                "Unsize"
                (borrow
                  (assistants_extra.openai.ChatCompletion.Get_choices
                    (deref α4)));
              pointer_coercion "Unsize" (borrow α6)
            ] in
        M.alloc (pointer_coercion "Unsize" (borrow α7)) in
      let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
      let* α1 : ref str.t := M.read (mk_str "ChatCompletion") in
      let* α2 : ref (array (ref str.t)) := M.read names in
      let* α3 : ref (slice (ref (dyn [core.fmt.Debug.Trait]))) :=
        M.read values in
      let* α4 : core.result.Result.t unit core.fmt.Error.t :=
        M.call
          (core.fmt.Formatter.t::["debug_struct_fields_finish"]
            α0
            α1
            (pointer_coercion "Unsize" α2)
            α3) in
      let* α0 : M.Val (core.result.Result.t unit core.fmt.Error.t) :=
        M.alloc α4 in
      M.read α0.
    
    Global Instance AssociatedFunction_fmt :
      Notations.DoubleColon Self "fmt" := {
      Notations.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_assistants_extra_openai_ChatCompletion_t.
  End Impl_core_fmt_Debug_for_assistants_extra_openai_ChatCompletion_t.
  
  Ltac OpenAIResponse T :=
    exact (core.result.Result.t T assistants_extra.openai.OpenAIApiError.t).
  
  Module OpenAIApiError.
    Inductive t : Set :=
    | Reqwest (_ : reqwest.error.Error.t)
    | ApiError (_ : assistants_extra.openai.ApiErrorResponse.t)
    | JSONDeserialize (_ : serde_json.error.Error.t)
    | StreamError (_ : alloc.string.String.t)
    | InvalidArgument (_ : alloc.string.String.t).
    
    Definition Get_Reqwest_0 :=
      Ref.map
        (fun α => match α with | Reqwest α0 => Some α0 | _ => None end)
        (fun β α =>
          match α with | Reqwest _ => Some (Reqwest β) | _ => None end).
    
    Definition Get_ApiError_0 :=
      Ref.map
        (fun α => match α with | ApiError α0 => Some α0 | _ => None end)
        (fun β α =>
          match α with | ApiError _ => Some (ApiError β) | _ => None end).
    
    Definition Get_JSONDeserialize_0 :=
      Ref.map
        (fun α => match α with | JSONDeserialize α0 => Some α0 | _ => None end)
        (fun β α =>
          match α with
          | JSONDeserialize _ => Some (JSONDeserialize β)
          | _ => None
          end).
    
    Definition Get_StreamError_0 :=
      Ref.map
        (fun α => match α with | StreamError α0 => Some α0 | _ => None end)
        (fun β α =>
          match α with | StreamError _ => Some (StreamError β) | _ => None end).
    
    Definition Get_InvalidArgument_0 :=
      Ref.map
        (fun α => match α with | InvalidArgument α0 => Some α0 | _ => None end)
        (fun β α =>
          match α with
          | InvalidArgument _ => Some (InvalidArgument β)
          | _ => None
          end).
  End OpenAIApiError.
  
  Module  Impl_core_fmt_Debug_for_assistants_extra_openai_OpenAIApiError_t.
  Section Impl_core_fmt_Debug_for_assistants_extra_openai_OpenAIApiError_t.
    Definition Self : Set := assistants_extra.openai.OpenAIApiError.t.
    
    (*
    Debug
    *)
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter.t)
        : M ltac:(core.fmt.Result) :=
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 : M.Val (core.result.Result.t unit core.fmt.Error.t) :=
        match_operator
          self
          [
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.openai.OpenAIApiError.Reqwest _ =>
                let γ1_0 :=
                  assistants_extra.openai.OpenAIApiError.Get_Reqwest_0 γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "Reqwest") in
                let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.openai.OpenAIApiError.ApiError _ =>
                let γ1_0 :=
                  assistants_extra.openai.OpenAIApiError.Get_ApiError_0 γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "ApiError") in
                let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.openai.OpenAIApiError.JSONDeserialize _ =>
                let γ1_0 :=
                  assistants_extra.openai.OpenAIApiError.Get_JSONDeserialize_0
                    γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "JSONDeserialize") in
                let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.openai.OpenAIApiError.StreamError _ =>
                let γ1_0 :=
                  assistants_extra.openai.OpenAIApiError.Get_StreamError_0 γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "StreamError") in
                let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.openai.OpenAIApiError.InvalidArgument _ =>
                let γ1_0 :=
                  assistants_extra.openai.OpenAIApiError.Get_InvalidArgument_0
                    γ in
                let* __self_0 := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "InvalidArgument") in
                let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call
                    (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      α0
                      α1
                      (pointer_coercion "Unsize" (borrow __self_0))) in
                M.alloc α2
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t))
          ] in
      M.read α0.
    
    Global Instance AssociatedFunction_fmt :
      Notations.DoubleColon Self "fmt" := {
      Notations.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_assistants_extra_openai_OpenAIApiError_t.
  End Impl_core_fmt_Debug_for_assistants_extra_openai_OpenAIApiError_t.
  
  Module  Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_openai_OpenAIApiError_t.
  Section Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_openai_OpenAIApiError_t.
    Definition Self : Set := assistants_extra.openai.OpenAIApiError.t.
    
    (*
        fn from(err: reqwest::Error) -> OpenAIApiError {
            OpenAIApiError::Reqwest(err)
        }
    *)
    Definition from
        (err : reqwest.error.Error.t)
        : M assistants_extra.openai.OpenAIApiError.t :=
      let* err := M.alloc err in
      let* α0 : reqwest.error.Error.t := M.read err in
      M.pure (assistants_extra.openai.OpenAIApiError.Reqwest α0).
    
    Global Instance AssociatedFunction_from :
      Notations.DoubleColon Self "from" := {
      Notations.double_colon := from;
    }.
    
    Global Instance ℐ :
      core.convert.From.Trait Self (T := reqwest.error.Error.t) := {
      core.convert.From.from := from;
    }.
  End Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_openai_OpenAIApiError_t.
  End Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_openai_OpenAIApiError_t.
  
  Module  Impl_core_error_Error_for_assistants_extra_openai_OpenAIApiError_t.
  Section Impl_core_error_Error_for_assistants_extra_openai_OpenAIApiError_t.
    Definition Self : Set := assistants_extra.openai.OpenAIApiError.t.
    
    Global Instance ℐ : core.error.Error.Required.Trait Self := {
      core.error.Error.source := Datatypes.None;
      core.error.Error.type_id := Datatypes.None;
      core.error.Error.description := Datatypes.None;
      core.error.Error.cause := Datatypes.None;
      core.error.Error.provide := Datatypes.None;
    }.
  End Impl_core_error_Error_for_assistants_extra_openai_OpenAIApiError_t.
  End Impl_core_error_Error_for_assistants_extra_openai_OpenAIApiError_t.
  
  Module  Impl_core_fmt_Display_for_assistants_extra_openai_OpenAIApiError_t.
  Section Impl_core_fmt_Display_for_assistants_extra_openai_OpenAIApiError_t.
    Definition Self : Set := assistants_extra.openai.OpenAIApiError.t.
    
    (*
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            match self {
                OpenAIApiError::Reqwest(err) => write!(f, "Reqwest Error: {}", err),
                OpenAIApiError::ApiError(err) => write!(f, "API Error: {}", err.error.message),
                OpenAIApiError::JSONDeserialize(err) => write!(f, "Deserialization Error: {}", err),
                OpenAIApiError::StreamError(err) => write!(f, "Stream Error: {}", err),
                OpenAIApiError::InvalidArgument(err) => write!(f, "Invalid Argument: {}", err),
            }
        }
    *)
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter.t)
        : M ltac:(core.fmt.Result) :=
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 : M.Val (core.result.Result.t unit core.fmt.Error.t) :=
        match_operator
          self
          [
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.openai.OpenAIApiError.Reqwest _ =>
                let γ1_0 :=
                  assistants_extra.openai.OpenAIApiError.Get_Reqwest_0 γ in
                let* err := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "Reqwest Error: ") in
                let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
                let* α3 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"] (borrow err)) in
                let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α3 ] in
                let* α5 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
                M.alloc α6
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.openai.OpenAIApiError.ApiError _ =>
                let γ1_0 :=
                  assistants_extra.openai.OpenAIApiError.Get_ApiError_0 γ in
                let* err := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "API Error: ") in
                let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
                let* α3 : ref assistants_extra.openai.ApiErrorResponse.t :=
                  M.read err in
                let* α4 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"]
                      (borrow
                        (assistants_extra.openai.ApiErrorDetail.Get_message
                          (assistants_extra.openai.ApiErrorResponse.Get_error
                            (deref α3))))) in
                let* α5 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α4 ] in
                let* α6 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α5))) in
                let* α7 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call (core.fmt.Formatter.t::["write_fmt"] α0 α6) in
                M.alloc α7
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.openai.OpenAIApiError.JSONDeserialize _ =>
                let γ1_0 :=
                  assistants_extra.openai.OpenAIApiError.Get_JSONDeserialize_0
                    γ in
                let* err := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t :=
                  M.read (mk_str "Deserialization Error: ") in
                let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
                let* α3 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"] (borrow err)) in
                let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α3 ] in
                let* α5 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
                M.alloc α6
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.openai.OpenAIApiError.StreamError _ =>
                let γ1_0 :=
                  assistants_extra.openai.OpenAIApiError.Get_StreamError_0 γ in
                let* err := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "Stream Error: ") in
                let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
                let* α3 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"] (borrow err)) in
                let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α3 ] in
                let* α5 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
                M.alloc α6
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t));
            fun γ =>
              (let* γ :=
                let* α0 := M.read γ in
                M.pure (deref α0) in
              let* α0 := M.read γ in
              match α0 with
              | assistants_extra.openai.OpenAIApiError.InvalidArgument _ =>
                let γ1_0 :=
                  assistants_extra.openai.OpenAIApiError.Get_InvalidArgument_0
                    γ in
                let* err := M.alloc (borrow γ1_0) in
                let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
                let* α1 : ref str.t := M.read (mk_str "Invalid Argument: ") in
                let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
                let* α3 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"] (borrow err)) in
                let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α3 ] in
                let* α5 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α2))
                      (pointer_coercion "Unsize" (borrow α4))) in
                let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                  M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
                M.alloc α6
              | _ => M.break_match
              end) :
              M (M.Val (core.result.Result.t unit core.fmt.Error.t))
          ] in
      M.read α0.
    
    Global Instance AssociatedFunction_fmt :
      Notations.DoubleColon Self "fmt" := {
      Notations.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Display.Trait Self := {
      core.fmt.Display.fmt := fmt;
    }.
  End Impl_core_fmt_Display_for_assistants_extra_openai_OpenAIApiError_t.
  End Impl_core_fmt_Display_for_assistants_extra_openai_OpenAIApiError_t.
  
  (*
  pub async fn call_openai_api(
      mut prompt: String,
      max_tokens_to_sample: i32,
      model: Option<String>,
      temperature: Option<f32>,
      stop_sequences: Option<Vec<String>>,
      top_p: Option<f32>,
  ) -> Result<ChatCompletion, OpenAIApiError> {
      let url = "https://api.openai.com/v1/chat/completions";
      let default_model = "gpt-3.5-turbo".to_string();
      let model = model.unwrap_or_else(|| default_model.clone());
  
      let api_key = std::env::var("OPENAI_API_KEY").expect("OPENAI_API_KEY must be set");
      let mut headers = HeaderMap::new();
      headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
      let auth_value = match HeaderValue::from_str(&format!("Bearer {}", api_key)) {
          Ok(v) => v,
          Err(_) => {
              return Err(OpenAIApiError::InvalidArgument(
                  "Invalid API Key".to_string(),
              ))
          }
      };
      headers.insert("Authorization", auth_value);
      let mut body: HashMap<&str, serde_json::Value> = HashMap::new();
      body.insert("model", serde_json::json!(model));
      body.insert(
          "messages",
          serde_json::json!(vec![Message {
              role: "user".to_string(),
              content: prompt
          }]),
      );
      body.insert("max_tokens", serde_json::json!(max_tokens_to_sample));
      body.insert("temperature", serde_json::json!(temperature.unwrap_or(1.0)));
      body.insert("stream", serde_json::json!(false));
  
      if let Some(stop_sequences) = stop_sequences {
          body.insert("stop", serde_json::json!(stop_sequences));
      }
      if let Some(top_p) = top_p {
          body.insert("top_p", serde_json::json!(top_p));
      }
  
      let client = reqwest::Client::new();
      let res = client.post(url).headers(headers).json(&body).send().await?;
      let raw_res = res.text().await?;
      let api_res: Result<ChatCompletion, _> = serde_json::from_str(&raw_res);
  
      match api_res {
          Ok(res_body) => Ok(res_body),
          Err(err) => Err(OpenAIApiError::JSONDeserialize(err)),
      }
  }
  *)
  Definition call_openai_api
      (prompt : alloc.string.String.t)
      (max_tokens_to_sample : i32.t)
      (model : core.option.Option.t alloc.string.String.t)
      (temperature : core.option.Option.t f32.t)
      (stop_sequences
        :
        core.option.Option.t
          (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A))
      (top_p : core.option.Option.t f32.t)
      : M OpaqueDef :=
    let* prompt := M.alloc prompt in
    let* max_tokens_to_sample := M.alloc max_tokens_to_sample in
    let* model := M.alloc model in
    let* temperature := M.alloc temperature in
    let* stop_sequences := M.alloc stop_sequences in
    let* top_p := M.alloc top_p in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* prompt : M.Val alloc.string.String.t := M.copy prompt in
              let* max_tokens_to_sample : M.Val i32.t :=
                M.copy max_tokens_to_sample in
              let* model : M.Val (core.option.Option.t alloc.string.String.t) :=
                M.copy model in
              let* temperature : M.Val (core.option.Option.t f32.t) :=
                M.copy temperature in
              let* stop_sequences :
                  M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        alloc.string.String.t
                        alloc.alloc.Global.t)) :=
                M.copy stop_sequences in
              let* top_p : M.Val (core.option.Option.t f32.t) := M.copy top_p in
              let* url : M.Val (ref str.t) :=
                M.copy (mk_str "https://api.openai.com/v1/chat/completions") in
              let* default_model : M.Val alloc.string.String.t :=
                let* α0 : (ref str.t) -> M alloc.string.String.t :=
                  ltac:(M.get_method (fun ℐ =>
                    alloc.string.ToString.to_string
                      (Self := str.t)
                      (Trait := ℐ))) in
                let* α1 : ref str.t := M.read (mk_str "gpt-3.5-turbo") in
                let* α2 : alloc.string.String.t := M.call (α0 α1) in
                M.alloc α2 in
              let* model : M.Val alloc.string.String.t :=
                let* α0 : core.option.Option.t alloc.string.String.t :=
                  M.read model in
                let* α1 : alloc.string.String.t :=
                  M.call
                    ((core.option.Option.t
                          alloc.string.String.t)::["unwrap_or_else"]
                      α0
                      (fun (α0 : unit) =>
                        (let* α0 := M.alloc α0 in
                        match_operator
                          α0
                          [
                            fun γ =>
                              (let* α0 :
                                  (ref alloc.string.String.t) ->
                                    M alloc.string.String.t :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.clone.Clone.clone
                                    (Self := alloc.string.String.t)
                                    (Trait := ℐ))) in
                              M.call (α0 (borrow default_model))) :
                              M alloc.string.String.t
                          ]) :
                        M alloc.string.String.t)) in
                M.alloc α1 in
              let* api_key : M.Val alloc.string.String.t :=
                let* α0 : ref str.t := M.read (mk_str "OPENAI_API_KEY") in
                let* α1 :
                    core.result.Result.t
                      alloc.string.String.t
                      std.env.VarError.t :=
                  M.call (std.env.var α0) in
                let* α2 : ref str.t :=
                  M.read (mk_str "OPENAI_API_KEY must be set") in
                let* α3 : alloc.string.String.t :=
                  M.call
                    ((core.result.Result.t
                          alloc.string.String.t
                          std.env.VarError.t)::["expect"]
                      α1
                      α2) in
                M.alloc α3 in
              let* headers :
                  M.Val
                    (http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t) :=
                let* α0 :
                    http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["new"] in
                M.alloc α0 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : http.header.name.HeaderName.t :=
                  M.read http.header.name.CONTENT_TYPE in
                let* α1 : ref str.t := M.read (mk_str "application/json") in
                let* α2 : http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.value.HeaderValue.t::["from_static"] α1) in
                let* α3 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α2) in
                M.alloc α3 in
              let* auth_value : M.Val http.header.value.HeaderValue.t :=
                let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.deref.Deref.deref
                      (Self := alloc.string.String.t)
                      (Trait := ℐ))) in
                let* res : M.Val alloc.string.String.t :=
                  let* α0 : ref str.t := M.read (mk_str "Bearer ") in
                  let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
                  let* α2 : core.fmt.rt.Argument.t :=
                    M.call
                      (core.fmt.rt.Argument.t::["new_display"]
                        (borrow api_key)) in
                  let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                    M.alloc [ α2 ] in
                  let* α4 : core.fmt.Arguments.t :=
                    M.call
                      (core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α1))
                        (pointer_coercion "Unsize" (borrow α3))) in
                  let* α5 : alloc.string.String.t :=
                    M.call (alloc.fmt.format α4) in
                  M.alloc α5 in
                let* α1 : ref str.t := M.call (α0 (borrow res)) in
                let* α2 :
                    core.result.Result.t
                      http.header.value.HeaderValue.t
                      http.header.value.InvalidHeaderValue.t :=
                  M.call (http.header.value.HeaderValue.t::["from_str"] α1) in
                let* α3 :
                    M.Val
                      (core.result.Result.t
                        http.header.value.HeaderValue.t
                        http.header.value.InvalidHeaderValue.t) :=
                  M.alloc α2 in
                let* α4 : M.Val http.header.value.HeaderValue.t :=
                  match_operator
                    α3
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.result.Result.Ok _ =>
                          let γ0_0 := core.result.Result.Get_Ok_0 γ in
                          let* v := M.copy γ0_0 in
                          M.pure v
                        | _ => M.break_match
                        end) :
                        M (M.Val http.header.value.HeaderValue.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.result.Result.Err _ =>
                          let γ0_0 := core.result.Result.Get_Err_0 γ in
                          let* α0 : (ref str.t) -> M alloc.string.String.t :=
                            ltac:(M.get_method (fun ℐ =>
                              alloc.string.ToString.to_string
                                (Self := str.t)
                                (Trait := ℐ))) in
                          let* α1 : ref str.t :=
                            M.read (mk_str "Invalid API Key") in
                          let* α2 : alloc.string.String.t := M.call (α0 α1) in
                          let* α3 : M.Val never.t :=
                            return_
                              (core.result.Result.Err
                                (assistants_extra.openai.OpenAIApiError.InvalidArgument
                                  α2)) in
                          let* α4 := M.read α3 in
                          let* α5 : http.header.value.HeaderValue.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val http.header.value.HeaderValue.t)
                    ] in
                M.copy α4 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : ref str.t := M.read (mk_str "Authorization") in
                let* α1 : http.header.value.HeaderValue.t :=
                  M.read auth_value in
                let* α2 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α1) in
                M.alloc α2 in
              let* body :
                  M.Val
                    (std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t) :=
                let* α0 :
                    std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t :=
                  M.call
                    (std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["new"] in
                M.alloc α0 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "model") in
                let* α1 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow model)) in
                let* α2 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α1) in
                let* α3 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "messages") in
                let* α1 : (ref str.t) -> M alloc.string.String.t :=
                  ltac:(M.get_method (fun ℐ =>
                    alloc.string.ToString.to_string
                      (Self := str.t)
                      (Trait := ℐ))) in
                let* α2 : ref str.t := M.read (mk_str "user") in
                let* α3 : alloc.string.String.t := M.call (α1 α2) in
                let* α4 : alloc.string.String.t := M.read prompt in
                let* α5 : M.Val (array assistants_extra.openai.Message.t) :=
                  M.alloc
                    [
                      {|
                        assistants_extra.openai.Message.role := α3;
                        assistants_extra.openai.Message.content := α4;
                      |}
                    ] in
                let* α6 :
                    M.Val
                      (alloc.boxed.Box.t
                        (array assistants_extra.openai.Message.t)
                        alloc.alloc.Global.t) :=
                  M.call
                    ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                      α5) in
                let* α7 :
                    alloc.boxed.Box.t
                      (array assistants_extra.openai.Message.t)
                      alloc.alloc.Global.t :=
                  M.read α6 in
                let* α8 :
                    alloc.vec.Vec.t
                      assistants_extra.openai.Message.t
                      alloc.alloc.Global.t :=
                  M.call
                    ((slice assistants_extra.openai.Message.t)::["into_vec"]
                      (pointer_coercion "Unsize" α7)) in
                let* α9 :
                    M.Val
                      (alloc.vec.Vec.t
                        assistants_extra.openai.Message.t
                        alloc.alloc.Global.t) :=
                  M.alloc α8 in
                let* α10 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow α9)) in
                let* α11 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α10) in
                let* α12 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α11) in
                M.alloc α12 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "max_tokens") in
                let* α1 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call
                    (serde_json.value.to_value (borrow max_tokens_to_sample)) in
                let* α2 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α1) in
                let* α3 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "temperature") in
                let* α1 : core.option.Option.t f32.t := M.read temperature in
                let* α2 : f32.t := M.read (UnsupportedLiteral : M.Val f32.t) in
                let* α3 : f32.t :=
                  M.call ((core.option.Option.t f32.t)::["unwrap_or"] α1 α2) in
                let* α4 : M.Val f32.t := M.alloc α3 in
                let* α5 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow α4)) in
                let* α6 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α5) in
                let* α7 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α6) in
                M.alloc α7 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "stream") in
                let* α1 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      (serde_json.value.Value.Bool false)) in
                M.alloc α1 in
              let* _ : M.Val unit :=
                match_operator
                  stop_sequences
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* stop_sequences := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t := M.read (mk_str "stop") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call
                              (serde_json.value.to_value
                                (borrow stop_sequences)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* _ : M.Val unit :=
                match_operator
                  top_p
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* top_p := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t := M.read (mk_str "top_p") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call (serde_json.value.to_value (borrow top_p)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* client : M.Val reqwest.async_impl.client.Client.t :=
                let* α0 : reqwest.async_impl.client.Client.t :=
                  M.call reqwest.async_impl.client.Client.t::["new"] in
                M.alloc α0 in
              let* res : M.Val reqwest.async_impl.response.Response.t :=
                let* α0 :
                    (core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          reqwest.async_impl.response.Response.t
                          reqwest.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 : _ -> M _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.future.into_future.IntoFuture.into_future
                      (Self := _)
                      (Trait := ℐ))) in
                let* α2 : ref str.t := M.read url in
                let* α3 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.client.Client.t::["post"]
                      (borrow client)
                      α2) in
                let* α4 :
                    http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t :=
                  M.read headers in
                let* α5 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["headers"]
                      α3
                      α4) in
                let* α6 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["json"]
                      α5
                      (borrow body)) in
                let* α7 : _ :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["send"]
                      α6) in
                let* α8 : _ := M.call (α1 α7) in
                let* α9 : M.Val _ := M.alloc α8 in
                let* α10 :
                    M.Val
                      (core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t) :=
                  match_operator
                    α9
                    [
                      fun γ =>
                        (let* __awaitee := M.copy γ in
                        M.loop
                          (let* _ : M.Val unit :=
                            let* α0 :
                                (core.pin.Pin.t (mut_ref _)) ->
                                  (mut_ref core.task.wake.Context.t) ->
                                  M (core.task.poll.Poll.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.future.future.Future.poll
                                  (Self := _)
                                  (Trait := ℐ))) in
                            let* α1 : core.pin.Pin.t (mut_ref _) :=
                              M.call
                                ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                  (borrow_mut __awaitee)) in
                            let* α2 : core.future.ResumeTy.t :=
                              M.read _task_context in
                            let* α3 : mut_ref core.task.wake.Context.t :=
                              M.call (core.future.get_context α2) in
                            let* α4 :
                                core.task.poll.Poll.t
                                  (core.result.Result.t
                                    reqwest.async_impl.response.Response.t
                                    reqwest.error.Error.t) :=
                              M.call (α0 α1 α3) in
                            let* α5 :
                                M.Val
                                  (core.task.poll.Poll.t
                                    (core.result.Result.t
                                      reqwest.async_impl.response.Response.t
                                      reqwest.error.Error.t)) :=
                              M.alloc α4 in
                            match_operator
                              α5
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Ready _ =>
                                    let γ0_0 :=
                                      core.task.poll.Poll.Get_Ready_0 γ in
                                    let* result := M.copy γ0_0 in
                                    let* α0 : M.Val never.t := M.break in
                                    let* α1 := M.read α0 in
                                    let* α2 : unit := never_to_any α1 in
                                    M.alloc α2
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit);
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Pending => M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit)
                              ] in
                          let* _ : M.Val unit :=
                            let* α0 : M.Val unit := M.alloc tt in
                            let* α1 : M.Val core.future.ResumeTy.t :=
                              yield α0 in
                            let* α2 : core.future.ResumeTy.t := M.read α1 in
                            assign _task_context α2 in
                          M.alloc tt)) :
                        M
                          (M.Val
                            (core.result.Result.t
                              reqwest.async_impl.response.Response.t
                              reqwest.error.Error.t))
                    ] in
                let* α11 :
                    core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t :=
                  M.read α10 in
                let* α12 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      reqwest.async_impl.response.Response.t :=
                  M.call (α0 α11) in
                let* α13 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          reqwest.error.Error.t)
                        reqwest.async_impl.response.Response.t) :=
                  M.alloc α12 in
                let* α14 : M.Val reqwest.async_impl.response.Response.t :=
                  match_operator
                    α13
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    reqwest.error.Error.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                assistants_extra.openai.OpenAIApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : reqwest.async_impl.response.Response.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val reqwest.async_impl.response.Response.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val reqwest.async_impl.response.Response.t)
                    ] in
                M.copy α14 in
              let* raw_res : M.Val alloc.string.String.t :=
                let* α0 :
                    (core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          alloc.string.String.t
                          reqwest.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 : _ -> M _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.future.into_future.IntoFuture.into_future
                      (Self := _)
                      (Trait := ℐ))) in
                let* α2 : reqwest.async_impl.response.Response.t :=
                  M.read res in
                let* α3 : _ :=
                  M.call
                    (reqwest.async_impl.response.Response.t::["text"] α2) in
                let* α4 : _ := M.call (α1 α3) in
                let* α5 : M.Val _ := M.alloc α4 in
                let* α6 :
                    M.Val
                      (core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t) :=
                  match_operator
                    α5
                    [
                      fun γ =>
                        (let* __awaitee := M.copy γ in
                        M.loop
                          (let* _ : M.Val unit :=
                            let* α0 :
                                (core.pin.Pin.t (mut_ref _)) ->
                                  (mut_ref core.task.wake.Context.t) ->
                                  M (core.task.poll.Poll.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.future.future.Future.poll
                                  (Self := _)
                                  (Trait := ℐ))) in
                            let* α1 : core.pin.Pin.t (mut_ref _) :=
                              M.call
                                ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                  (borrow_mut __awaitee)) in
                            let* α2 : core.future.ResumeTy.t :=
                              M.read _task_context in
                            let* α3 : mut_ref core.task.wake.Context.t :=
                              M.call (core.future.get_context α2) in
                            let* α4 :
                                core.task.poll.Poll.t
                                  (core.result.Result.t
                                    alloc.string.String.t
                                    reqwest.error.Error.t) :=
                              M.call (α0 α1 α3) in
                            let* α5 :
                                M.Val
                                  (core.task.poll.Poll.t
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      reqwest.error.Error.t)) :=
                              M.alloc α4 in
                            match_operator
                              α5
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Ready _ =>
                                    let γ0_0 :=
                                      core.task.poll.Poll.Get_Ready_0 γ in
                                    let* result := M.copy γ0_0 in
                                    let* α0 : M.Val never.t := M.break in
                                    let* α1 := M.read α0 in
                                    let* α2 : unit := never_to_any α1 in
                                    M.alloc α2
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit);
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Pending => M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit)
                              ] in
                          let* _ : M.Val unit :=
                            let* α0 : M.Val unit := M.alloc tt in
                            let* α1 : M.Val core.future.ResumeTy.t :=
                              yield α0 in
                            let* α2 : core.future.ResumeTy.t := M.read α1 in
                            assign _task_context α2 in
                          M.alloc tt)) :
                        M
                          (M.Val
                            (core.result.Result.t
                              alloc.string.String.t
                              reqwest.error.Error.t))
                    ] in
                let* α7 :
                    core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t :=
                  M.read α6 in
                let* α8 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      alloc.string.String.t :=
                  M.call (α0 α7) in
                let* α9 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          reqwest.error.Error.t)
                        alloc.string.String.t) :=
                  M.alloc α8 in
                let* α10 : M.Val alloc.string.String.t :=
                  match_operator
                    α9
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    reqwest.error.Error.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                assistants_extra.openai.OpenAIApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ] in
                M.copy α10 in
              let* api_res :
                  M.Val
                    (core.result.Result.t
                      assistants_extra.openai.ChatCompletion.t
                      serde_json.error.Error.t) :=
                let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.deref.Deref.deref
                      (Self := alloc.string.String.t)
                      (Trait := ℐ))) in
                let* α1 : ref str.t := M.call (α0 (borrow raw_res)) in
                let* α2 :
                    core.result.Result.t
                      assistants_extra.openai.ChatCompletion.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.de.from_str α1) in
                M.alloc α2 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      assistants_extra.openai.ChatCompletion.t
                      assistants_extra.openai.OpenAIApiError.t) :=
                match_operator
                  api_res
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Ok _ =>
                        let γ0_0 := core.result.Result.Get_Ok_0 γ in
                        let* res_body := M.copy γ0_0 in
                        let* α0 : assistants_extra.openai.ChatCompletion.t :=
                          M.read res_body in
                        M.alloc (core.result.Result.Ok α0)
                      | _ => M.break_match
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            assistants_extra.openai.OpenAIApiError.t));
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Err _ =>
                        let γ0_0 := core.result.Result.Get_Err_0 γ in
                        let* err := M.copy γ0_0 in
                        let* α0 : serde_json.error.Error.t := M.read err in
                        M.alloc
                          (core.result.Result.Err
                            (assistants_extra.openai.OpenAIApiError.JSONDeserialize
                              α0))
                      | _ => M.break_match
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            assistants_extra.openai.OpenAIApiError.t))
                  ] in
              M.read (use α0)) :
              M
                (core.result.Result.t
                  assistants_extra.openai.ChatCompletion.t
                  assistants_extra.openai.OpenAIApiError.t)
          ]) :
        M
          (core.result.Result.t
            assistants_extra.openai.ChatCompletion.t
            assistants_extra.openai.OpenAIApiError.t)).
  
  (*
  pub async fn call_open_source_openai_api(
      prompt: String,
      max_tokens_to_sample: i32,
      model: String, // model is required for open-source API
      temperature: Option<f32>,
      stop_sequences: Option<Vec<String>>,
      top_p: Option<f32>,
      url: String, // url is required for open-source API
  ) -> Result<ChatCompletion, OpenAIApiError> {
      let mut headers = HeaderMap::new();
      headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
  
      // If the deployed LLM need API key, you can add it here.
      let api_key = std::env::var("MODEL_API_KEY").unwrap_or_else(|_| "".to_string());
      headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
      let auth_value = match HeaderValue::from_str(&format!("Bearer {}", api_key)) {
          Ok(v) => v,
          Err(_) => {
              return Err(OpenAIApiError::InvalidArgument(
                  "Invalid API Key".to_string(),
              ))
          }
      };
      headers.insert("Authorization", auth_value);
  
      let mut body: HashMap<&str, serde_json::Value> = HashMap::new();
      body.insert("model", serde_json::json!(model));
      // TODO: prompt template https://huggingface.co/Open-Orca/Mistral-7B-OpenOrca#prompt-template
      body.insert(
          "messages",
          serde_json::json!(vec![Message {
              role: "user".to_string(),
              content: prompt
          }]),
      );
      body.insert("max_tokens", serde_json::json!(max_tokens_to_sample));
      body.insert("temperature", serde_json::json!(temperature.unwrap_or(1.0)));
      body.insert("stream", serde_json::json!(false));
  
      if let Some(stop_sequences) = stop_sequences {
          body.insert("stop", serde_json::json!(stop_sequences));
      }
      if let Some(top_p) = top_p {
          body.insert("top_p", serde_json::json!(top_p));
      }
  
      let client = reqwest::Client::new();
      let res = client.post(url).headers(headers).json(&body).send().await?;
      let status = res.status();
      let raw_res = res.text().await?;
  
      if !status.is_success() {
          return Err(OpenAIApiError::ApiError(ApiErrorResponse {
              error: ApiErrorDetail {
                  message: format!(
                      "API request failed with status: {}. Response body: {}",
                      status, raw_res
                  ),
                  r#type: "API Request Error".to_string(),
                  param: None,
                  code: None,
              },
          }));
      }
  
      let api_res: Result<ChatCompletion, _> = serde_json::from_str(&raw_res);
  
      match api_res {
          Ok(res_body) => Ok(res_body),
          Err(err) => Err(OpenAIApiError::JSONDeserialize(err)),
      }
  }
  *)
  Definition call_open_source_openai_api
      (prompt : alloc.string.String.t)
      (max_tokens_to_sample : i32.t)
      (model : alloc.string.String.t)
      (temperature : core.option.Option.t f32.t)
      (stop_sequences
        :
        core.option.Option.t
          (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A))
      (top_p : core.option.Option.t f32.t)
      (url : alloc.string.String.t)
      : M OpaqueDef :=
    let* prompt := M.alloc prompt in
    let* max_tokens_to_sample := M.alloc max_tokens_to_sample in
    let* model := M.alloc model in
    let* temperature := M.alloc temperature in
    let* stop_sequences := M.alloc stop_sequences in
    let* top_p := M.alloc top_p in
    let* url := M.alloc url in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* prompt : M.Val alloc.string.String.t := M.copy prompt in
              let* max_tokens_to_sample : M.Val i32.t :=
                M.copy max_tokens_to_sample in
              let* model : M.Val alloc.string.String.t := M.copy model in
              let* temperature : M.Val (core.option.Option.t f32.t) :=
                M.copy temperature in
              let* stop_sequences :
                  M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        alloc.string.String.t
                        alloc.alloc.Global.t)) :=
                M.copy stop_sequences in
              let* top_p : M.Val (core.option.Option.t f32.t) := M.copy top_p in
              let* url : M.Val alloc.string.String.t := M.copy url in
              let* headers :
                  M.Val
                    (http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t) :=
                let* α0 :
                    http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["new"] in
                M.alloc α0 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : http.header.name.HeaderName.t :=
                  M.read http.header.name.CONTENT_TYPE in
                let* α1 : ref str.t := M.read (mk_str "application/json") in
                let* α2 : http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.value.HeaderValue.t::["from_static"] α1) in
                let* α3 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α2) in
                M.alloc α3 in
              let* api_key : M.Val alloc.string.String.t :=
                let* α0 : ref str.t := M.read (mk_str "MODEL_API_KEY") in
                let* α1 :
                    core.result.Result.t
                      alloc.string.String.t
                      std.env.VarError.t :=
                  M.call (std.env.var α0) in
                let* α2 : alloc.string.String.t :=
                  M.call
                    ((core.result.Result.t
                          alloc.string.String.t
                          std.env.VarError.t)::["unwrap_or_else"]
                      α1
                      (fun (α0 : std.env.VarError.t) =>
                        (let* α0 := M.alloc α0 in
                        match_operator
                          α0
                          [
                            fun γ =>
                              (let* α0 :
                                  (ref str.t) -> M alloc.string.String.t :=
                                ltac:(M.get_method (fun ℐ =>
                                  alloc.string.ToString.to_string
                                    (Self := str.t)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "") in
                              M.call (α0 α1)) :
                              M alloc.string.String.t
                          ]) :
                        M alloc.string.String.t)) in
                M.alloc α2 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : http.header.name.HeaderName.t :=
                  M.read http.header.name.CONTENT_TYPE in
                let* α1 : ref str.t := M.read (mk_str "application/json") in
                let* α2 : http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.value.HeaderValue.t::["from_static"] α1) in
                let* α3 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α2) in
                M.alloc α3 in
              let* auth_value : M.Val http.header.value.HeaderValue.t :=
                let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.deref.Deref.deref
                      (Self := alloc.string.String.t)
                      (Trait := ℐ))) in
                let* res : M.Val alloc.string.String.t :=
                  let* α0 : ref str.t := M.read (mk_str "Bearer ") in
                  let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
                  let* α2 : core.fmt.rt.Argument.t :=
                    M.call
                      (core.fmt.rt.Argument.t::["new_display"]
                        (borrow api_key)) in
                  let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                    M.alloc [ α2 ] in
                  let* α4 : core.fmt.Arguments.t :=
                    M.call
                      (core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α1))
                        (pointer_coercion "Unsize" (borrow α3))) in
                  let* α5 : alloc.string.String.t :=
                    M.call (alloc.fmt.format α4) in
                  M.alloc α5 in
                let* α1 : ref str.t := M.call (α0 (borrow res)) in
                let* α2 :
                    core.result.Result.t
                      http.header.value.HeaderValue.t
                      http.header.value.InvalidHeaderValue.t :=
                  M.call (http.header.value.HeaderValue.t::["from_str"] α1) in
                let* α3 :
                    M.Val
                      (core.result.Result.t
                        http.header.value.HeaderValue.t
                        http.header.value.InvalidHeaderValue.t) :=
                  M.alloc α2 in
                let* α4 : M.Val http.header.value.HeaderValue.t :=
                  match_operator
                    α3
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.result.Result.Ok _ =>
                          let γ0_0 := core.result.Result.Get_Ok_0 γ in
                          let* v := M.copy γ0_0 in
                          M.pure v
                        | _ => M.break_match
                        end) :
                        M (M.Val http.header.value.HeaderValue.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.result.Result.Err _ =>
                          let γ0_0 := core.result.Result.Get_Err_0 γ in
                          let* α0 : (ref str.t) -> M alloc.string.String.t :=
                            ltac:(M.get_method (fun ℐ =>
                              alloc.string.ToString.to_string
                                (Self := str.t)
                                (Trait := ℐ))) in
                          let* α1 : ref str.t :=
                            M.read (mk_str "Invalid API Key") in
                          let* α2 : alloc.string.String.t := M.call (α0 α1) in
                          let* α3 : M.Val never.t :=
                            return_
                              (core.result.Result.Err
                                (assistants_extra.openai.OpenAIApiError.InvalidArgument
                                  α2)) in
                          let* α4 := M.read α3 in
                          let* α5 : http.header.value.HeaderValue.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val http.header.value.HeaderValue.t)
                    ] in
                M.copy α4 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : ref str.t := M.read (mk_str "Authorization") in
                let* α1 : http.header.value.HeaderValue.t :=
                  M.read auth_value in
                let* α2 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α1) in
                M.alloc α2 in
              let* body :
                  M.Val
                    (std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t) :=
                let* α0 :
                    std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t :=
                  M.call
                    (std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["new"] in
                M.alloc α0 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "model") in
                let* α1 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow model)) in
                let* α2 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α1) in
                let* α3 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "messages") in
                let* α1 : (ref str.t) -> M alloc.string.String.t :=
                  ltac:(M.get_method (fun ℐ =>
                    alloc.string.ToString.to_string
                      (Self := str.t)
                      (Trait := ℐ))) in
                let* α2 : ref str.t := M.read (mk_str "user") in
                let* α3 : alloc.string.String.t := M.call (α1 α2) in
                let* α4 : alloc.string.String.t := M.read prompt in
                let* α5 : M.Val (array assistants_extra.openai.Message.t) :=
                  M.alloc
                    [
                      {|
                        assistants_extra.openai.Message.role := α3;
                        assistants_extra.openai.Message.content := α4;
                      |}
                    ] in
                let* α6 :
                    M.Val
                      (alloc.boxed.Box.t
                        (array assistants_extra.openai.Message.t)
                        alloc.alloc.Global.t) :=
                  M.call
                    ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                      α5) in
                let* α7 :
                    alloc.boxed.Box.t
                      (array assistants_extra.openai.Message.t)
                      alloc.alloc.Global.t :=
                  M.read α6 in
                let* α8 :
                    alloc.vec.Vec.t
                      assistants_extra.openai.Message.t
                      alloc.alloc.Global.t :=
                  M.call
                    ((slice assistants_extra.openai.Message.t)::["into_vec"]
                      (pointer_coercion "Unsize" α7)) in
                let* α9 :
                    M.Val
                      (alloc.vec.Vec.t
                        assistants_extra.openai.Message.t
                        alloc.alloc.Global.t) :=
                  M.alloc α8 in
                let* α10 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow α9)) in
                let* α11 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α10) in
                let* α12 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α11) in
                M.alloc α12 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "max_tokens") in
                let* α1 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call
                    (serde_json.value.to_value (borrow max_tokens_to_sample)) in
                let* α2 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α1) in
                let* α3 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "temperature") in
                let* α1 : core.option.Option.t f32.t := M.read temperature in
                let* α2 : f32.t := M.read (UnsupportedLiteral : M.Val f32.t) in
                let* α3 : f32.t :=
                  M.call ((core.option.Option.t f32.t)::["unwrap_or"] α1 α2) in
                let* α4 : M.Val f32.t := M.alloc α3 in
                let* α5 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow α4)) in
                let* α6 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α5) in
                let* α7 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α6) in
                M.alloc α7 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "stream") in
                let* α1 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      (serde_json.value.Value.Bool false)) in
                M.alloc α1 in
              let* _ : M.Val unit :=
                match_operator
                  stop_sequences
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* stop_sequences := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t := M.read (mk_str "stop") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call
                              (serde_json.value.to_value
                                (borrow stop_sequences)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* _ : M.Val unit :=
                match_operator
                  top_p
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* top_p := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t := M.read (mk_str "top_p") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call (serde_json.value.to_value (borrow top_p)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* client : M.Val reqwest.async_impl.client.Client.t :=
                let* α0 : reqwest.async_impl.client.Client.t :=
                  M.call reqwest.async_impl.client.Client.t::["new"] in
                M.alloc α0 in
              let* res : M.Val reqwest.async_impl.response.Response.t :=
                let* α0 :
                    (core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          reqwest.async_impl.response.Response.t
                          reqwest.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 : _ -> M _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.future.into_future.IntoFuture.into_future
                      (Self := _)
                      (Trait := ℐ))) in
                let* α2 : alloc.string.String.t := M.read url in
                let* α3 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.client.Client.t::["post"]
                      (borrow client)
                      α2) in
                let* α4 :
                    http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t :=
                  M.read headers in
                let* α5 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["headers"]
                      α3
                      α4) in
                let* α6 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["json"]
                      α5
                      (borrow body)) in
                let* α7 : _ :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["send"]
                      α6) in
                let* α8 : _ := M.call (α1 α7) in
                let* α9 : M.Val _ := M.alloc α8 in
                let* α10 :
                    M.Val
                      (core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t) :=
                  match_operator
                    α9
                    [
                      fun γ =>
                        (let* __awaitee := M.copy γ in
                        M.loop
                          (let* _ : M.Val unit :=
                            let* α0 :
                                (core.pin.Pin.t (mut_ref _)) ->
                                  (mut_ref core.task.wake.Context.t) ->
                                  M (core.task.poll.Poll.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.future.future.Future.poll
                                  (Self := _)
                                  (Trait := ℐ))) in
                            let* α1 : core.pin.Pin.t (mut_ref _) :=
                              M.call
                                ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                  (borrow_mut __awaitee)) in
                            let* α2 : core.future.ResumeTy.t :=
                              M.read _task_context in
                            let* α3 : mut_ref core.task.wake.Context.t :=
                              M.call (core.future.get_context α2) in
                            let* α4 :
                                core.task.poll.Poll.t
                                  (core.result.Result.t
                                    reqwest.async_impl.response.Response.t
                                    reqwest.error.Error.t) :=
                              M.call (α0 α1 α3) in
                            let* α5 :
                                M.Val
                                  (core.task.poll.Poll.t
                                    (core.result.Result.t
                                      reqwest.async_impl.response.Response.t
                                      reqwest.error.Error.t)) :=
                              M.alloc α4 in
                            match_operator
                              α5
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Ready _ =>
                                    let γ0_0 :=
                                      core.task.poll.Poll.Get_Ready_0 γ in
                                    let* result := M.copy γ0_0 in
                                    let* α0 : M.Val never.t := M.break in
                                    let* α1 := M.read α0 in
                                    let* α2 : unit := never_to_any α1 in
                                    M.alloc α2
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit);
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Pending => M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit)
                              ] in
                          let* _ : M.Val unit :=
                            let* α0 : M.Val unit := M.alloc tt in
                            let* α1 : M.Val core.future.ResumeTy.t :=
                              yield α0 in
                            let* α2 : core.future.ResumeTy.t := M.read α1 in
                            assign _task_context α2 in
                          M.alloc tt)) :
                        M
                          (M.Val
                            (core.result.Result.t
                              reqwest.async_impl.response.Response.t
                              reqwest.error.Error.t))
                    ] in
                let* α11 :
                    core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t :=
                  M.read α10 in
                let* α12 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      reqwest.async_impl.response.Response.t :=
                  M.call (α0 α11) in
                let* α13 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          reqwest.error.Error.t)
                        reqwest.async_impl.response.Response.t) :=
                  M.alloc α12 in
                let* α14 : M.Val reqwest.async_impl.response.Response.t :=
                  match_operator
                    α13
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    reqwest.error.Error.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                assistants_extra.openai.OpenAIApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : reqwest.async_impl.response.Response.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val reqwest.async_impl.response.Response.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val reqwest.async_impl.response.Response.t)
                    ] in
                M.copy α14 in
              let* status : M.Val http.status.StatusCode.t :=
                let* α0 : http.status.StatusCode.t :=
                  M.call
                    (reqwest.async_impl.response.Response.t::["status"]
                      (borrow res)) in
                M.alloc α0 in
              let* raw_res : M.Val alloc.string.String.t :=
                let* α0 :
                    (core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          alloc.string.String.t
                          reqwest.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 : _ -> M _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.future.into_future.IntoFuture.into_future
                      (Self := _)
                      (Trait := ℐ))) in
                let* α2 : reqwest.async_impl.response.Response.t :=
                  M.read res in
                let* α3 : _ :=
                  M.call
                    (reqwest.async_impl.response.Response.t::["text"] α2) in
                let* α4 : _ := M.call (α1 α3) in
                let* α5 : M.Val _ := M.alloc α4 in
                let* α6 :
                    M.Val
                      (core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t) :=
                  match_operator
                    α5
                    [
                      fun γ =>
                        (let* __awaitee := M.copy γ in
                        M.loop
                          (let* _ : M.Val unit :=
                            let* α0 :
                                (core.pin.Pin.t (mut_ref _)) ->
                                  (mut_ref core.task.wake.Context.t) ->
                                  M (core.task.poll.Poll.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.future.future.Future.poll
                                  (Self := _)
                                  (Trait := ℐ))) in
                            let* α1 : core.pin.Pin.t (mut_ref _) :=
                              M.call
                                ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                  (borrow_mut __awaitee)) in
                            let* α2 : core.future.ResumeTy.t :=
                              M.read _task_context in
                            let* α3 : mut_ref core.task.wake.Context.t :=
                              M.call (core.future.get_context α2) in
                            let* α4 :
                                core.task.poll.Poll.t
                                  (core.result.Result.t
                                    alloc.string.String.t
                                    reqwest.error.Error.t) :=
                              M.call (α0 α1 α3) in
                            let* α5 :
                                M.Val
                                  (core.task.poll.Poll.t
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      reqwest.error.Error.t)) :=
                              M.alloc α4 in
                            match_operator
                              α5
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Ready _ =>
                                    let γ0_0 :=
                                      core.task.poll.Poll.Get_Ready_0 γ in
                                    let* result := M.copy γ0_0 in
                                    let* α0 : M.Val never.t := M.break in
                                    let* α1 := M.read α0 in
                                    let* α2 : unit := never_to_any α1 in
                                    M.alloc α2
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit);
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Pending => M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit)
                              ] in
                          let* _ : M.Val unit :=
                            let* α0 : M.Val unit := M.alloc tt in
                            let* α1 : M.Val core.future.ResumeTy.t :=
                              yield α0 in
                            let* α2 : core.future.ResumeTy.t := M.read α1 in
                            assign _task_context α2 in
                          M.alloc tt)) :
                        M
                          (M.Val
                            (core.result.Result.t
                              alloc.string.String.t
                              reqwest.error.Error.t))
                    ] in
                let* α7 :
                    core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t :=
                  M.read α6 in
                let* α8 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      alloc.string.String.t :=
                  M.call (α0 α7) in
                let* α9 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          reqwest.error.Error.t)
                        alloc.string.String.t) :=
                  M.alloc α8 in
                let* α10 : M.Val alloc.string.String.t :=
                  match_operator
                    α9
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    reqwest.error.Error.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                assistants_extra.openai.OpenAIApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ] in
                M.copy α10 in
              let* _ : M.Val unit :=
                let* α0 : bool.t :=
                  M.call
                    (http.status.StatusCode.t::["is_success"]
                      (borrow status)) in
                let* α1 : M.Val bool.t := M.alloc (UnOp.not α0) in
                let* α2 : bool.t := M.read (use α1) in
                if α2 then
                  let* res : M.Val alloc.string.String.t :=
                    let* α0 : ref str.t :=
                      M.read (mk_str "API request failed with status: ") in
                    let* α1 : ref str.t :=
                      M.read (mk_str ". Response body: ") in
                    let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
                    let* α3 : core.fmt.rt.Argument.t :=
                      M.call
                        (core.fmt.rt.Argument.t::["new_display"]
                          (borrow status)) in
                    let* α4 : core.fmt.rt.Argument.t :=
                      M.call
                        (core.fmt.rt.Argument.t::["new_display"]
                          (borrow raw_res)) in
                    let* α5 : M.Val (array core.fmt.rt.Argument.t) :=
                      M.alloc [ α3; α4 ] in
                    let* α6 : core.fmt.Arguments.t :=
                      M.call
                        (core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion "Unsize" (borrow α2))
                          (pointer_coercion "Unsize" (borrow α5))) in
                    let* α7 : alloc.string.String.t :=
                      M.call (alloc.fmt.format α6) in
                    M.alloc α7 in
                  let* α0 : alloc.string.String.t := M.read res in
                  let* α1 : (ref str.t) -> M alloc.string.String.t :=
                    ltac:(M.get_method (fun ℐ =>
                      alloc.string.ToString.to_string
                        (Self := str.t)
                        (Trait := ℐ))) in
                  let* α2 : ref str.t := M.read (mk_str "API Request Error") in
                  let* α3 : alloc.string.String.t := M.call (α1 α2) in
                  let* α4 : M.Val never.t :=
                    return_
                      (core.result.Result.Err
                        (assistants_extra.openai.OpenAIApiError.ApiError
                          {|
                            assistants_extra.openai.ApiErrorResponse.error :=
                              {|
                                assistants_extra.openai.ApiErrorDetail.message :=
                                  α0;
                                assistants_extra.openai.ApiErrorDetail.type :=
                                  α3;
                                assistants_extra.openai.ApiErrorDetail.param :=
                                  core.option.Option.None;
                                assistants_extra.openai.ApiErrorDetail.code :=
                                  core.option.Option.None;
                              |};
                          |})) in
                  let* α5 := M.read α4 in
                  let* α6 : unit := never_to_any α5 in
                  M.alloc α6
                else
                  M.alloc tt in
              let* api_res :
                  M.Val
                    (core.result.Result.t
                      assistants_extra.openai.ChatCompletion.t
                      serde_json.error.Error.t) :=
                let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.deref.Deref.deref
                      (Self := alloc.string.String.t)
                      (Trait := ℐ))) in
                let* α1 : ref str.t := M.call (α0 (borrow raw_res)) in
                let* α2 :
                    core.result.Result.t
                      assistants_extra.openai.ChatCompletion.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.de.from_str α1) in
                M.alloc α2 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      assistants_extra.openai.ChatCompletion.t
                      assistants_extra.openai.OpenAIApiError.t) :=
                match_operator
                  api_res
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Ok _ =>
                        let γ0_0 := core.result.Result.Get_Ok_0 γ in
                        let* res_body := M.copy γ0_0 in
                        let* α0 : assistants_extra.openai.ChatCompletion.t :=
                          M.read res_body in
                        M.alloc (core.result.Result.Ok α0)
                      | _ => M.break_match
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            assistants_extra.openai.OpenAIApiError.t));
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Err _ =>
                        let γ0_0 := core.result.Result.Get_Err_0 γ in
                        let* err := M.copy γ0_0 in
                        let* α0 : serde_json.error.Error.t := M.read err in
                        M.alloc
                          (core.result.Result.Err
                            (assistants_extra.openai.OpenAIApiError.JSONDeserialize
                              α0))
                      | _ => M.break_match
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            assistants_extra.openai.OpenAIApiError.t))
                  ] in
              M.read (use α0)) :
              M
                (core.result.Result.t
                  assistants_extra.openai.ChatCompletion.t
                  assistants_extra.openai.OpenAIApiError.t)
          ]) :
        M
          (core.result.Result.t
            assistants_extra.openai.ChatCompletion.t
            assistants_extra.openai.OpenAIApiError.t)).
  
  (*
  pub async fn call_openai_api_with_messages(
      messages: Vec<Message>,
      max_tokens_to_sample: i32,
      model: Option<String>,
      temperature: Option<f32>,
      stop_sequences: Option<Vec<String>>,
      top_p: Option<f32>,
  ) -> Result<ChatCompletion, OpenAIApiError> {
      let url = "https://api.openai.com/v1/chat/completions";
      let default_model = "gpt-3.5-turbo".to_string();
      let model = model.unwrap_or_else(|| default_model.clone());
  
      let api_key = std::env::var("OPENAI_API_KEY").expect("OPENAI_API_KEY must be set");
      let mut headers = HeaderMap::new();
      headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
      let auth_value = match HeaderValue::from_str(&format!("Bearer {}", api_key)) {
          Ok(v) => v,
          Err(_) => {
              return Err(OpenAIApiError::InvalidArgument(
                  "Invalid API Key".to_string(),
              ))
          }
      };
      headers.insert("Authorization", auth_value);
      let mut body: HashMap<&str, serde_json::Value> = HashMap::new();
      body.insert("model", serde_json::json!(model));
      body.insert("messages", serde_json::json!(messages));
      body.insert("max_tokens", serde_json::json!(max_tokens_to_sample));
      body.insert("temperature", serde_json::json!(temperature.unwrap_or(1.0)));
      body.insert("stream", serde_json::json!(false));
  
      if let Some(stop_sequences) = stop_sequences {
          body.insert("stop", serde_json::json!(stop_sequences));
      }
      if let Some(top_p) = top_p {
          body.insert("top_p", serde_json::json!(top_p));
      }
  
      let client = reqwest::Client::new();
      let res = client.post(url).headers(headers).json(&body).send().await?;
      let raw_res = res.text().await?;
      let api_res: Result<ChatCompletion, _> = serde_json::from_str(&raw_res);
  
      match api_res {
          Ok(res_body) => Ok(res_body),
          Err(err) => Err(OpenAIApiError::JSONDeserialize(err)),
      }
  }
  *)
  Definition call_openai_api_with_messages
      (messages
        :
        alloc.vec.Vec.t
          assistants_extra.openai.Message.t
          alloc.vec.Vec.Default.A)
      (max_tokens_to_sample : i32.t)
      (model : core.option.Option.t alloc.string.String.t)
      (temperature : core.option.Option.t f32.t)
      (stop_sequences
        :
        core.option.Option.t
          (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A))
      (top_p : core.option.Option.t f32.t)
      : M OpaqueDef :=
    let* messages := M.alloc messages in
    let* max_tokens_to_sample := M.alloc max_tokens_to_sample in
    let* model := M.alloc model in
    let* temperature := M.alloc temperature in
    let* stop_sequences := M.alloc stop_sequences in
    let* top_p := M.alloc top_p in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* messages :
                  M.Val
                    (alloc.vec.Vec.t
                      assistants_extra.openai.Message.t
                      alloc.alloc.Global.t) :=
                M.copy messages in
              let* max_tokens_to_sample : M.Val i32.t :=
                M.copy max_tokens_to_sample in
              let* model : M.Val (core.option.Option.t alloc.string.String.t) :=
                M.copy model in
              let* temperature : M.Val (core.option.Option.t f32.t) :=
                M.copy temperature in
              let* stop_sequences :
                  M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        alloc.string.String.t
                        alloc.alloc.Global.t)) :=
                M.copy stop_sequences in
              let* top_p : M.Val (core.option.Option.t f32.t) := M.copy top_p in
              let* url : M.Val (ref str.t) :=
                M.copy (mk_str "https://api.openai.com/v1/chat/completions") in
              let* default_model : M.Val alloc.string.String.t :=
                let* α0 : (ref str.t) -> M alloc.string.String.t :=
                  ltac:(M.get_method (fun ℐ =>
                    alloc.string.ToString.to_string
                      (Self := str.t)
                      (Trait := ℐ))) in
                let* α1 : ref str.t := M.read (mk_str "gpt-3.5-turbo") in
                let* α2 : alloc.string.String.t := M.call (α0 α1) in
                M.alloc α2 in
              let* model : M.Val alloc.string.String.t :=
                let* α0 : core.option.Option.t alloc.string.String.t :=
                  M.read model in
                let* α1 : alloc.string.String.t :=
                  M.call
                    ((core.option.Option.t
                          alloc.string.String.t)::["unwrap_or_else"]
                      α0
                      (fun (α0 : unit) =>
                        (let* α0 := M.alloc α0 in
                        match_operator
                          α0
                          [
                            fun γ =>
                              (let* α0 :
                                  (ref alloc.string.String.t) ->
                                    M alloc.string.String.t :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.clone.Clone.clone
                                    (Self := alloc.string.String.t)
                                    (Trait := ℐ))) in
                              M.call (α0 (borrow default_model))) :
                              M alloc.string.String.t
                          ]) :
                        M alloc.string.String.t)) in
                M.alloc α1 in
              let* api_key : M.Val alloc.string.String.t :=
                let* α0 : ref str.t := M.read (mk_str "OPENAI_API_KEY") in
                let* α1 :
                    core.result.Result.t
                      alloc.string.String.t
                      std.env.VarError.t :=
                  M.call (std.env.var α0) in
                let* α2 : ref str.t :=
                  M.read (mk_str "OPENAI_API_KEY must be set") in
                let* α3 : alloc.string.String.t :=
                  M.call
                    ((core.result.Result.t
                          alloc.string.String.t
                          std.env.VarError.t)::["expect"]
                      α1
                      α2) in
                M.alloc α3 in
              let* headers :
                  M.Val
                    (http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t) :=
                let* α0 :
                    http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["new"] in
                M.alloc α0 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : http.header.name.HeaderName.t :=
                  M.read http.header.name.CONTENT_TYPE in
                let* α1 : ref str.t := M.read (mk_str "application/json") in
                let* α2 : http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.value.HeaderValue.t::["from_static"] α1) in
                let* α3 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α2) in
                M.alloc α3 in
              let* auth_value : M.Val http.header.value.HeaderValue.t :=
                let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.deref.Deref.deref
                      (Self := alloc.string.String.t)
                      (Trait := ℐ))) in
                let* res : M.Val alloc.string.String.t :=
                  let* α0 : ref str.t := M.read (mk_str "Bearer ") in
                  let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
                  let* α2 : core.fmt.rt.Argument.t :=
                    M.call
                      (core.fmt.rt.Argument.t::["new_display"]
                        (borrow api_key)) in
                  let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                    M.alloc [ α2 ] in
                  let* α4 : core.fmt.Arguments.t :=
                    M.call
                      (core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α1))
                        (pointer_coercion "Unsize" (borrow α3))) in
                  let* α5 : alloc.string.String.t :=
                    M.call (alloc.fmt.format α4) in
                  M.alloc α5 in
                let* α1 : ref str.t := M.call (α0 (borrow res)) in
                let* α2 :
                    core.result.Result.t
                      http.header.value.HeaderValue.t
                      http.header.value.InvalidHeaderValue.t :=
                  M.call (http.header.value.HeaderValue.t::["from_str"] α1) in
                let* α3 :
                    M.Val
                      (core.result.Result.t
                        http.header.value.HeaderValue.t
                        http.header.value.InvalidHeaderValue.t) :=
                  M.alloc α2 in
                let* α4 : M.Val http.header.value.HeaderValue.t :=
                  match_operator
                    α3
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.result.Result.Ok _ =>
                          let γ0_0 := core.result.Result.Get_Ok_0 γ in
                          let* v := M.copy γ0_0 in
                          M.pure v
                        | _ => M.break_match
                        end) :
                        M (M.Val http.header.value.HeaderValue.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.result.Result.Err _ =>
                          let γ0_0 := core.result.Result.Get_Err_0 γ in
                          let* α0 : (ref str.t) -> M alloc.string.String.t :=
                            ltac:(M.get_method (fun ℐ =>
                              alloc.string.ToString.to_string
                                (Self := str.t)
                                (Trait := ℐ))) in
                          let* α1 : ref str.t :=
                            M.read (mk_str "Invalid API Key") in
                          let* α2 : alloc.string.String.t := M.call (α0 α1) in
                          let* α3 : M.Val never.t :=
                            return_
                              (core.result.Result.Err
                                (assistants_extra.openai.OpenAIApiError.InvalidArgument
                                  α2)) in
                          let* α4 := M.read α3 in
                          let* α5 : http.header.value.HeaderValue.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val http.header.value.HeaderValue.t)
                    ] in
                M.copy α4 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : ref str.t := M.read (mk_str "Authorization") in
                let* α1 : http.header.value.HeaderValue.t :=
                  M.read auth_value in
                let* α2 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α1) in
                M.alloc α2 in
              let* body :
                  M.Val
                    (std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t) :=
                let* α0 :
                    std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t :=
                  M.call
                    (std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["new"] in
                M.alloc α0 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "model") in
                let* α1 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow model)) in
                let* α2 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α1) in
                let* α3 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "messages") in
                let* α1 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow messages)) in
                let* α2 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α1) in
                let* α3 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "max_tokens") in
                let* α1 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call
                    (serde_json.value.to_value (borrow max_tokens_to_sample)) in
                let* α2 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α1) in
                let* α3 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "temperature") in
                let* α1 : core.option.Option.t f32.t := M.read temperature in
                let* α2 : f32.t := M.read (UnsupportedLiteral : M.Val f32.t) in
                let* α3 : f32.t :=
                  M.call ((core.option.Option.t f32.t)::["unwrap_or"] α1 α2) in
                let* α4 : M.Val f32.t := M.alloc α3 in
                let* α5 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow α4)) in
                let* α6 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α5) in
                let* α7 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α6) in
                M.alloc α7 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "stream") in
                let* α1 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      (serde_json.value.Value.Bool false)) in
                M.alloc α1 in
              let* _ : M.Val unit :=
                match_operator
                  stop_sequences
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* stop_sequences := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t := M.read (mk_str "stop") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call
                              (serde_json.value.to_value
                                (borrow stop_sequences)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* _ : M.Val unit :=
                match_operator
                  top_p
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* top_p := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t := M.read (mk_str "top_p") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call (serde_json.value.to_value (borrow top_p)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* client : M.Val reqwest.async_impl.client.Client.t :=
                let* α0 : reqwest.async_impl.client.Client.t :=
                  M.call reqwest.async_impl.client.Client.t::["new"] in
                M.alloc α0 in
              let* res : M.Val reqwest.async_impl.response.Response.t :=
                let* α0 :
                    (core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          reqwest.async_impl.response.Response.t
                          reqwest.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 : _ -> M _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.future.into_future.IntoFuture.into_future
                      (Self := _)
                      (Trait := ℐ))) in
                let* α2 : ref str.t := M.read url in
                let* α3 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.client.Client.t::["post"]
                      (borrow client)
                      α2) in
                let* α4 :
                    http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t :=
                  M.read headers in
                let* α5 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["headers"]
                      α3
                      α4) in
                let* α6 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["json"]
                      α5
                      (borrow body)) in
                let* α7 : _ :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["send"]
                      α6) in
                let* α8 : _ := M.call (α1 α7) in
                let* α9 : M.Val _ := M.alloc α8 in
                let* α10 :
                    M.Val
                      (core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t) :=
                  match_operator
                    α9
                    [
                      fun γ =>
                        (let* __awaitee := M.copy γ in
                        M.loop
                          (let* _ : M.Val unit :=
                            let* α0 :
                                (core.pin.Pin.t (mut_ref _)) ->
                                  (mut_ref core.task.wake.Context.t) ->
                                  M (core.task.poll.Poll.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.future.future.Future.poll
                                  (Self := _)
                                  (Trait := ℐ))) in
                            let* α1 : core.pin.Pin.t (mut_ref _) :=
                              M.call
                                ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                  (borrow_mut __awaitee)) in
                            let* α2 : core.future.ResumeTy.t :=
                              M.read _task_context in
                            let* α3 : mut_ref core.task.wake.Context.t :=
                              M.call (core.future.get_context α2) in
                            let* α4 :
                                core.task.poll.Poll.t
                                  (core.result.Result.t
                                    reqwest.async_impl.response.Response.t
                                    reqwest.error.Error.t) :=
                              M.call (α0 α1 α3) in
                            let* α5 :
                                M.Val
                                  (core.task.poll.Poll.t
                                    (core.result.Result.t
                                      reqwest.async_impl.response.Response.t
                                      reqwest.error.Error.t)) :=
                              M.alloc α4 in
                            match_operator
                              α5
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Ready _ =>
                                    let γ0_0 :=
                                      core.task.poll.Poll.Get_Ready_0 γ in
                                    let* result := M.copy γ0_0 in
                                    let* α0 : M.Val never.t := M.break in
                                    let* α1 := M.read α0 in
                                    let* α2 : unit := never_to_any α1 in
                                    M.alloc α2
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit);
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Pending => M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit)
                              ] in
                          let* _ : M.Val unit :=
                            let* α0 : M.Val unit := M.alloc tt in
                            let* α1 : M.Val core.future.ResumeTy.t :=
                              yield α0 in
                            let* α2 : core.future.ResumeTy.t := M.read α1 in
                            assign _task_context α2 in
                          M.alloc tt)) :
                        M
                          (M.Val
                            (core.result.Result.t
                              reqwest.async_impl.response.Response.t
                              reqwest.error.Error.t))
                    ] in
                let* α11 :
                    core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t :=
                  M.read α10 in
                let* α12 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      reqwest.async_impl.response.Response.t :=
                  M.call (α0 α11) in
                let* α13 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          reqwest.error.Error.t)
                        reqwest.async_impl.response.Response.t) :=
                  M.alloc α12 in
                let* α14 : M.Val reqwest.async_impl.response.Response.t :=
                  match_operator
                    α13
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    reqwest.error.Error.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                assistants_extra.openai.OpenAIApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : reqwest.async_impl.response.Response.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val reqwest.async_impl.response.Response.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val reqwest.async_impl.response.Response.t)
                    ] in
                M.copy α14 in
              let* raw_res : M.Val alloc.string.String.t :=
                let* α0 :
                    (core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          alloc.string.String.t
                          reqwest.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 : _ -> M _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.future.into_future.IntoFuture.into_future
                      (Self := _)
                      (Trait := ℐ))) in
                let* α2 : reqwest.async_impl.response.Response.t :=
                  M.read res in
                let* α3 : _ :=
                  M.call
                    (reqwest.async_impl.response.Response.t::["text"] α2) in
                let* α4 : _ := M.call (α1 α3) in
                let* α5 : M.Val _ := M.alloc α4 in
                let* α6 :
                    M.Val
                      (core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t) :=
                  match_operator
                    α5
                    [
                      fun γ =>
                        (let* __awaitee := M.copy γ in
                        M.loop
                          (let* _ : M.Val unit :=
                            let* α0 :
                                (core.pin.Pin.t (mut_ref _)) ->
                                  (mut_ref core.task.wake.Context.t) ->
                                  M (core.task.poll.Poll.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.future.future.Future.poll
                                  (Self := _)
                                  (Trait := ℐ))) in
                            let* α1 : core.pin.Pin.t (mut_ref _) :=
                              M.call
                                ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                  (borrow_mut __awaitee)) in
                            let* α2 : core.future.ResumeTy.t :=
                              M.read _task_context in
                            let* α3 : mut_ref core.task.wake.Context.t :=
                              M.call (core.future.get_context α2) in
                            let* α4 :
                                core.task.poll.Poll.t
                                  (core.result.Result.t
                                    alloc.string.String.t
                                    reqwest.error.Error.t) :=
                              M.call (α0 α1 α3) in
                            let* α5 :
                                M.Val
                                  (core.task.poll.Poll.t
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      reqwest.error.Error.t)) :=
                              M.alloc α4 in
                            match_operator
                              α5
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Ready _ =>
                                    let γ0_0 :=
                                      core.task.poll.Poll.Get_Ready_0 γ in
                                    let* result := M.copy γ0_0 in
                                    let* α0 : M.Val never.t := M.break in
                                    let* α1 := M.read α0 in
                                    let* α2 : unit := never_to_any α1 in
                                    M.alloc α2
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit);
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Pending => M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit)
                              ] in
                          let* _ : M.Val unit :=
                            let* α0 : M.Val unit := M.alloc tt in
                            let* α1 : M.Val core.future.ResumeTy.t :=
                              yield α0 in
                            let* α2 : core.future.ResumeTy.t := M.read α1 in
                            assign _task_context α2 in
                          M.alloc tt)) :
                        M
                          (M.Val
                            (core.result.Result.t
                              alloc.string.String.t
                              reqwest.error.Error.t))
                    ] in
                let* α7 :
                    core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t :=
                  M.read α6 in
                let* α8 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      alloc.string.String.t :=
                  M.call (α0 α7) in
                let* α9 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          reqwest.error.Error.t)
                        alloc.string.String.t) :=
                  M.alloc α8 in
                let* α10 : M.Val alloc.string.String.t :=
                  match_operator
                    α9
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    reqwest.error.Error.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                assistants_extra.openai.OpenAIApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ] in
                M.copy α10 in
              let* api_res :
                  M.Val
                    (core.result.Result.t
                      assistants_extra.openai.ChatCompletion.t
                      serde_json.error.Error.t) :=
                let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.deref.Deref.deref
                      (Self := alloc.string.String.t)
                      (Trait := ℐ))) in
                let* α1 : ref str.t := M.call (α0 (borrow raw_res)) in
                let* α2 :
                    core.result.Result.t
                      assistants_extra.openai.ChatCompletion.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.de.from_str α1) in
                M.alloc α2 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      assistants_extra.openai.ChatCompletion.t
                      assistants_extra.openai.OpenAIApiError.t) :=
                match_operator
                  api_res
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Ok _ =>
                        let γ0_0 := core.result.Result.Get_Ok_0 γ in
                        let* res_body := M.copy γ0_0 in
                        let* α0 : assistants_extra.openai.ChatCompletion.t :=
                          M.read res_body in
                        M.alloc (core.result.Result.Ok α0)
                      | _ => M.break_match
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            assistants_extra.openai.OpenAIApiError.t));
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Err _ =>
                        let γ0_0 := core.result.Result.Get_Err_0 γ in
                        let* err := M.copy γ0_0 in
                        let* α0 : serde_json.error.Error.t := M.read err in
                        M.alloc
                          (core.result.Result.Err
                            (assistants_extra.openai.OpenAIApiError.JSONDeserialize
                              α0))
                      | _ => M.break_match
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            assistants_extra.openai.OpenAIApiError.t))
                  ] in
              M.read (use α0)) :
              M
                (core.result.Result.t
                  assistants_extra.openai.ChatCompletion.t
                  assistants_extra.openai.OpenAIApiError.t)
          ]) :
        M
          (core.result.Result.t
            assistants_extra.openai.ChatCompletion.t
            assistants_extra.openai.OpenAIApiError.t)).
  
  (*
  pub async fn call_open_source_openai_api_with_messages(
      messages: Vec<Message>,
      max_tokens_to_sample: i32,
      model: String, // model is required for open-source API
      temperature: Option<f32>,
      stop_sequences: Option<Vec<String>>,
      top_p: Option<f32>,
      url: String, // url is required for open-source API
  ) -> Result<ChatCompletion, OpenAIApiError> {
      let mut headers = HeaderMap::new();
      headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
  
      // If the deployed LLM need API key, you can add it here.
      let api_key = std::env::var("MODEL_API_KEY").unwrap_or_else(|_| "".to_string());
      headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
      let auth_value = match HeaderValue::from_str(&format!("Bearer {}", api_key)) {
          Ok(v) => v,
          Err(_) => {
              return Err(OpenAIApiError::InvalidArgument(
                  "Invalid API Key".to_string(),
              ))
          }
      };
      headers.insert("Authorization", auth_value);
  
      let mut body: HashMap<&str, serde_json::Value> = HashMap::new();
      body.insert("model", serde_json::json!(model));
      body.insert("messages", serde_json::json!(messages));
      body.insert("max_tokens", serde_json::json!(max_tokens_to_sample));
      body.insert("temperature", serde_json::json!(temperature.unwrap_or(1.0)));
      body.insert("stream", serde_json::json!(false));
  
      if let Some(stop_sequences) = stop_sequences {
          body.insert("stop", serde_json::json!(stop_sequences));
      }
      if let Some(top_p) = top_p {
          body.insert("top_p", serde_json::json!(top_p));
      }
  
      let client = reqwest::Client::new();
      let res = client.post(url).headers(headers).json(&body).send().await?;
      let status = res.status();
      let raw_res = res.text().await?;
  
      if !status.is_success() {
          return Err(OpenAIApiError::ApiError(ApiErrorResponse {
              error: ApiErrorDetail {
                  message: format!("API request failed with status {}: {}", status, raw_res),
                  r#type: "API Request Error".to_string(),
                  param: None,
                  code: None,
              },
          }));
      }
  
      let api_res: Result<ChatCompletion, _> = serde_json::from_str(&raw_res);
  
      match api_res {
          Ok(res_body) => Ok(res_body),
          Err(err) => Err(OpenAIApiError::JSONDeserialize(err)),
      }
  }
  *)
  Definition call_open_source_openai_api_with_messages
      (messages
        :
        alloc.vec.Vec.t
          assistants_extra.openai.Message.t
          alloc.vec.Vec.Default.A)
      (max_tokens_to_sample : i32.t)
      (model : alloc.string.String.t)
      (temperature : core.option.Option.t f32.t)
      (stop_sequences
        :
        core.option.Option.t
          (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A))
      (top_p : core.option.Option.t f32.t)
      (url : alloc.string.String.t)
      : M OpaqueDef :=
    let* messages := M.alloc messages in
    let* max_tokens_to_sample := M.alloc max_tokens_to_sample in
    let* model := M.alloc model in
    let* temperature := M.alloc temperature in
    let* stop_sequences := M.alloc stop_sequences in
    let* top_p := M.alloc top_p in
    let* url := M.alloc url in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* messages :
                  M.Val
                    (alloc.vec.Vec.t
                      assistants_extra.openai.Message.t
                      alloc.alloc.Global.t) :=
                M.copy messages in
              let* max_tokens_to_sample : M.Val i32.t :=
                M.copy max_tokens_to_sample in
              let* model : M.Val alloc.string.String.t := M.copy model in
              let* temperature : M.Val (core.option.Option.t f32.t) :=
                M.copy temperature in
              let* stop_sequences :
                  M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        alloc.string.String.t
                        alloc.alloc.Global.t)) :=
                M.copy stop_sequences in
              let* top_p : M.Val (core.option.Option.t f32.t) := M.copy top_p in
              let* url : M.Val alloc.string.String.t := M.copy url in
              let* headers :
                  M.Val
                    (http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t) :=
                let* α0 :
                    http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["new"] in
                M.alloc α0 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : http.header.name.HeaderName.t :=
                  M.read http.header.name.CONTENT_TYPE in
                let* α1 : ref str.t := M.read (mk_str "application/json") in
                let* α2 : http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.value.HeaderValue.t::["from_static"] α1) in
                let* α3 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α2) in
                M.alloc α3 in
              let* api_key : M.Val alloc.string.String.t :=
                let* α0 : ref str.t := M.read (mk_str "MODEL_API_KEY") in
                let* α1 :
                    core.result.Result.t
                      alloc.string.String.t
                      std.env.VarError.t :=
                  M.call (std.env.var α0) in
                let* α2 : alloc.string.String.t :=
                  M.call
                    ((core.result.Result.t
                          alloc.string.String.t
                          std.env.VarError.t)::["unwrap_or_else"]
                      α1
                      (fun (α0 : std.env.VarError.t) =>
                        (let* α0 := M.alloc α0 in
                        match_operator
                          α0
                          [
                            fun γ =>
                              (let* α0 :
                                  (ref str.t) -> M alloc.string.String.t :=
                                ltac:(M.get_method (fun ℐ =>
                                  alloc.string.ToString.to_string
                                    (Self := str.t)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "") in
                              M.call (α0 α1)) :
                              M alloc.string.String.t
                          ]) :
                        M alloc.string.String.t)) in
                M.alloc α2 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : http.header.name.HeaderName.t :=
                  M.read http.header.name.CONTENT_TYPE in
                let* α1 : ref str.t := M.read (mk_str "application/json") in
                let* α2 : http.header.value.HeaderValue.t :=
                  M.call
                    (http.header.value.HeaderValue.t::["from_static"] α1) in
                let* α3 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α2) in
                M.alloc α3 in
              let* auth_value : M.Val http.header.value.HeaderValue.t :=
                let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.deref.Deref.deref
                      (Self := alloc.string.String.t)
                      (Trait := ℐ))) in
                let* res : M.Val alloc.string.String.t :=
                  let* α0 : ref str.t := M.read (mk_str "Bearer ") in
                  let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
                  let* α2 : core.fmt.rt.Argument.t :=
                    M.call
                      (core.fmt.rt.Argument.t::["new_display"]
                        (borrow api_key)) in
                  let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                    M.alloc [ α2 ] in
                  let* α4 : core.fmt.Arguments.t :=
                    M.call
                      (core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α1))
                        (pointer_coercion "Unsize" (borrow α3))) in
                  let* α5 : alloc.string.String.t :=
                    M.call (alloc.fmt.format α4) in
                  M.alloc α5 in
                let* α1 : ref str.t := M.call (α0 (borrow res)) in
                let* α2 :
                    core.result.Result.t
                      http.header.value.HeaderValue.t
                      http.header.value.InvalidHeaderValue.t :=
                  M.call (http.header.value.HeaderValue.t::["from_str"] α1) in
                let* α3 :
                    M.Val
                      (core.result.Result.t
                        http.header.value.HeaderValue.t
                        http.header.value.InvalidHeaderValue.t) :=
                  M.alloc α2 in
                let* α4 : M.Val http.header.value.HeaderValue.t :=
                  match_operator
                    α3
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.result.Result.Ok _ =>
                          let γ0_0 := core.result.Result.Get_Ok_0 γ in
                          let* v := M.copy γ0_0 in
                          M.pure v
                        | _ => M.break_match
                        end) :
                        M (M.Val http.header.value.HeaderValue.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.result.Result.Err _ =>
                          let γ0_0 := core.result.Result.Get_Err_0 γ in
                          let* α0 : (ref str.t) -> M alloc.string.String.t :=
                            ltac:(M.get_method (fun ℐ =>
                              alloc.string.ToString.to_string
                                (Self := str.t)
                                (Trait := ℐ))) in
                          let* α1 : ref str.t :=
                            M.read (mk_str "Invalid API Key") in
                          let* α2 : alloc.string.String.t := M.call (α0 α1) in
                          let* α3 : M.Val never.t :=
                            return_
                              (core.result.Result.Err
                                (assistants_extra.openai.OpenAIApiError.InvalidArgument
                                  α2)) in
                          let* α4 := M.read α3 in
                          let* α5 : http.header.value.HeaderValue.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val http.header.value.HeaderValue.t)
                    ] in
                M.copy α4 in
              let* _ :
                  M.Val
                    (core.option.Option.t http.header.value.HeaderValue.t) :=
                let* α0 : ref str.t := M.read (mk_str "Authorization") in
                let* α1 : http.header.value.HeaderValue.t :=
                  M.read auth_value in
                let* α2 :
                    core.option.Option.t http.header.value.HeaderValue.t :=
                  M.call
                    ((http.header.map.HeaderMap.t
                          http.header.value.HeaderValue.t)::["insert"]
                      (borrow_mut headers)
                      α0
                      α1) in
                M.alloc α2 in
              let* body :
                  M.Val
                    (std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t) :=
                let* α0 :
                    std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t :=
                  M.call
                    (std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["new"] in
                M.alloc α0 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "model") in
                let* α1 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow model)) in
                let* α2 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α1) in
                let* α3 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "messages") in
                let* α1 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow messages)) in
                let* α2 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α1) in
                let* α3 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "max_tokens") in
                let* α1 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call
                    (serde_json.value.to_value (borrow max_tokens_to_sample)) in
                let* α2 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α1) in
                let* α3 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α2) in
                M.alloc α3 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "temperature") in
                let* α1 : core.option.Option.t f32.t := M.read temperature in
                let* α2 : f32.t := M.read (UnsupportedLiteral : M.Val f32.t) in
                let* α3 : f32.t :=
                  M.call ((core.option.Option.t f32.t)::["unwrap_or"] α1 α2) in
                let* α4 : M.Val f32.t := M.alloc α3 in
                let* α5 :
                    core.result.Result.t
                      serde_json.value.Value.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.value.to_value (borrow α4)) in
                let* α6 : serde_json.value.Value.t :=
                  M.call
                    ((core.result.Result.t
                          serde_json.value.Value.t
                          serde_json.error.Error.t)::["unwrap"]
                      α5) in
                let* α7 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      α6) in
                M.alloc α7 in
              let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
                let* α0 : ref str.t := M.read (mk_str "stream") in
                let* α1 : core.option.Option.t serde_json.value.Value.t :=
                  M.call
                    ((std.collections.hash.map.HashMap.t
                          (ref str.t)
                          serde_json.value.Value.t
                          std.hash.random.RandomState.t)::["insert"]
                      (borrow_mut body)
                      α0
                      (serde_json.value.Value.Bool false)) in
                M.alloc α1 in
              let* _ : M.Val unit :=
                match_operator
                  stop_sequences
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* stop_sequences := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t := M.read (mk_str "stop") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call
                              (serde_json.value.to_value
                                (borrow stop_sequences)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* _ : M.Val unit :=
                match_operator
                  top_p
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.option.Option.Some _ =>
                        let γ0_0 := core.option.Option.Get_Some_0 γ in
                        let* top_p := M.copy γ0_0 in
                        let* _ :
                            M.Val
                              (core.option.Option.t serde_json.value.Value.t) :=
                          let* α0 : ref str.t := M.read (mk_str "top_p") in
                          let* α1 :
                              core.result.Result.t
                                serde_json.value.Value.t
                                serde_json.error.Error.t :=
                            M.call (serde_json.value.to_value (borrow top_p)) in
                          let* α2 : serde_json.value.Value.t :=
                            M.call
                              ((core.result.Result.t
                                    serde_json.value.Value.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 :
                              core.option.Option.t serde_json.value.Value.t :=
                            M.call
                              ((std.collections.hash.map.HashMap.t
                                    (ref str.t)
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)::["insert"]
                                (borrow_mut body)
                                α0
                                α2) in
                          M.alloc α3 in
                        M.alloc tt
                      | _ => M.break_match
                      end) :
                      M (M.Val unit);
                    fun γ => (M.alloc tt) : M (M.Val unit)
                  ] in
              let* client : M.Val reqwest.async_impl.client.Client.t :=
                let* α0 : reqwest.async_impl.client.Client.t :=
                  M.call reqwest.async_impl.client.Client.t::["new"] in
                M.alloc α0 in
              let* res : M.Val reqwest.async_impl.response.Response.t :=
                let* α0 :
                    (core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          reqwest.async_impl.response.Response.t
                          reqwest.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 : _ -> M _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.future.into_future.IntoFuture.into_future
                      (Self := _)
                      (Trait := ℐ))) in
                let* α2 : alloc.string.String.t := M.read url in
                let* α3 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.client.Client.t::["post"]
                      (borrow client)
                      α2) in
                let* α4 :
                    http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t :=
                  M.read headers in
                let* α5 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["headers"]
                      α3
                      α4) in
                let* α6 : reqwest.async_impl.request.RequestBuilder.t :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["json"]
                      α5
                      (borrow body)) in
                let* α7 : _ :=
                  M.call
                    (reqwest.async_impl.request.RequestBuilder.t::["send"]
                      α6) in
                let* α8 : _ := M.call (α1 α7) in
                let* α9 : M.Val _ := M.alloc α8 in
                let* α10 :
                    M.Val
                      (core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t) :=
                  match_operator
                    α9
                    [
                      fun γ =>
                        (let* __awaitee := M.copy γ in
                        M.loop
                          (let* _ : M.Val unit :=
                            let* α0 :
                                (core.pin.Pin.t (mut_ref _)) ->
                                  (mut_ref core.task.wake.Context.t) ->
                                  M (core.task.poll.Poll.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.future.future.Future.poll
                                  (Self := _)
                                  (Trait := ℐ))) in
                            let* α1 : core.pin.Pin.t (mut_ref _) :=
                              M.call
                                ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                  (borrow_mut __awaitee)) in
                            let* α2 : core.future.ResumeTy.t :=
                              M.read _task_context in
                            let* α3 : mut_ref core.task.wake.Context.t :=
                              M.call (core.future.get_context α2) in
                            let* α4 :
                                core.task.poll.Poll.t
                                  (core.result.Result.t
                                    reqwest.async_impl.response.Response.t
                                    reqwest.error.Error.t) :=
                              M.call (α0 α1 α3) in
                            let* α5 :
                                M.Val
                                  (core.task.poll.Poll.t
                                    (core.result.Result.t
                                      reqwest.async_impl.response.Response.t
                                      reqwest.error.Error.t)) :=
                              M.alloc α4 in
                            match_operator
                              α5
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Ready _ =>
                                    let γ0_0 :=
                                      core.task.poll.Poll.Get_Ready_0 γ in
                                    let* result := M.copy γ0_0 in
                                    let* α0 : M.Val never.t := M.break in
                                    let* α1 := M.read α0 in
                                    let* α2 : unit := never_to_any α1 in
                                    M.alloc α2
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit);
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Pending => M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit)
                              ] in
                          let* _ : M.Val unit :=
                            let* α0 : M.Val unit := M.alloc tt in
                            let* α1 : M.Val core.future.ResumeTy.t :=
                              yield α0 in
                            let* α2 : core.future.ResumeTy.t := M.read α1 in
                            assign _task_context α2 in
                          M.alloc tt)) :
                        M
                          (M.Val
                            (core.result.Result.t
                              reqwest.async_impl.response.Response.t
                              reqwest.error.Error.t))
                    ] in
                let* α11 :
                    core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t :=
                  M.read α10 in
                let* α12 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      reqwest.async_impl.response.Response.t :=
                  M.call (α0 α11) in
                let* α13 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          reqwest.error.Error.t)
                        reqwest.async_impl.response.Response.t) :=
                  M.alloc α12 in
                let* α14 : M.Val reqwest.async_impl.response.Response.t :=
                  match_operator
                    α13
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    reqwest.error.Error.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                assistants_extra.openai.OpenAIApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : reqwest.async_impl.response.Response.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val reqwest.async_impl.response.Response.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val reqwest.async_impl.response.Response.t)
                    ] in
                M.copy α14 in
              let* status : M.Val http.status.StatusCode.t :=
                let* α0 : http.status.StatusCode.t :=
                  M.call
                    (reqwest.async_impl.response.Response.t::["status"]
                      (borrow res)) in
                M.alloc α0 in
              let* raw_res : M.Val alloc.string.String.t :=
                let* α0 :
                    (core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t)
                      ->
                      M (core.ops.control_flow.ControlFlow.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result.t
                          alloc.string.String.t
                          reqwest.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 : _ -> M _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.future.into_future.IntoFuture.into_future
                      (Self := _)
                      (Trait := ℐ))) in
                let* α2 : reqwest.async_impl.response.Response.t :=
                  M.read res in
                let* α3 : _ :=
                  M.call
                    (reqwest.async_impl.response.Response.t::["text"] α2) in
                let* α4 : _ := M.call (α1 α3) in
                let* α5 : M.Val _ := M.alloc α4 in
                let* α6 :
                    M.Val
                      (core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t) :=
                  match_operator
                    α5
                    [
                      fun γ =>
                        (let* __awaitee := M.copy γ in
                        M.loop
                          (let* _ : M.Val unit :=
                            let* α0 :
                                (core.pin.Pin.t (mut_ref _)) ->
                                  (mut_ref core.task.wake.Context.t) ->
                                  M (core.task.poll.Poll.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.future.future.Future.poll
                                  (Self := _)
                                  (Trait := ℐ))) in
                            let* α1 : core.pin.Pin.t (mut_ref _) :=
                              M.call
                                ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                  (borrow_mut __awaitee)) in
                            let* α2 : core.future.ResumeTy.t :=
                              M.read _task_context in
                            let* α3 : mut_ref core.task.wake.Context.t :=
                              M.call (core.future.get_context α2) in
                            let* α4 :
                                core.task.poll.Poll.t
                                  (core.result.Result.t
                                    alloc.string.String.t
                                    reqwest.error.Error.t) :=
                              M.call (α0 α1 α3) in
                            let* α5 :
                                M.Val
                                  (core.task.poll.Poll.t
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      reqwest.error.Error.t)) :=
                              M.alloc α4 in
                            match_operator
                              α5
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Ready _ =>
                                    let γ0_0 :=
                                      core.task.poll.Poll.Get_Ready_0 γ in
                                    let* result := M.copy γ0_0 in
                                    let* α0 : M.Val never.t := M.break in
                                    let* α1 := M.read α0 in
                                    let* α2 : unit := never_to_any α1 in
                                    M.alloc α2
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit);
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Pending => M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit)
                              ] in
                          let* _ : M.Val unit :=
                            let* α0 : M.Val unit := M.alloc tt in
                            let* α1 : M.Val core.future.ResumeTy.t :=
                              yield α0 in
                            let* α2 : core.future.ResumeTy.t := M.read α1 in
                            assign _task_context α2 in
                          M.alloc tt)) :
                        M
                          (M.Val
                            (core.result.Result.t
                              alloc.string.String.t
                              reqwest.error.Error.t))
                    ] in
                let* α7 :
                    core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t :=
                  M.read α6 in
                let* α8 :
                    core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      alloc.string.String.t :=
                  M.call (α0 α7) in
                let* α9 :
                    M.Val
                      (core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t
                          core.convert.Infallible.t
                          reqwest.error.Error.t)
                        alloc.string.String.t) :=
                  M.alloc α8 in
                let* α10 : M.Val alloc.string.String.t :=
                  match_operator
                    α9
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    reqwest.error.Error.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                assistants_extra.openai.OpenAIApiError.t :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ] in
                M.copy α10 in
              let* _ : M.Val unit :=
                let* α0 : bool.t :=
                  M.call
                    (http.status.StatusCode.t::["is_success"]
                      (borrow status)) in
                let* α1 : M.Val bool.t := M.alloc (UnOp.not α0) in
                let* α2 : bool.t := M.read (use α1) in
                if α2 then
                  let* res : M.Val alloc.string.String.t :=
                    let* α0 : ref str.t :=
                      M.read (mk_str "API request failed with status ") in
                    let* α1 : ref str.t := M.read (mk_str ": ") in
                    let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
                    let* α3 : core.fmt.rt.Argument.t :=
                      M.call
                        (core.fmt.rt.Argument.t::["new_display"]
                          (borrow status)) in
                    let* α4 : core.fmt.rt.Argument.t :=
                      M.call
                        (core.fmt.rt.Argument.t::["new_display"]
                          (borrow raw_res)) in
                    let* α5 : M.Val (array core.fmt.rt.Argument.t) :=
                      M.alloc [ α3; α4 ] in
                    let* α6 : core.fmt.Arguments.t :=
                      M.call
                        (core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion "Unsize" (borrow α2))
                          (pointer_coercion "Unsize" (borrow α5))) in
                    let* α7 : alloc.string.String.t :=
                      M.call (alloc.fmt.format α6) in
                    M.alloc α7 in
                  let* α0 : alloc.string.String.t := M.read res in
                  let* α1 : (ref str.t) -> M alloc.string.String.t :=
                    ltac:(M.get_method (fun ℐ =>
                      alloc.string.ToString.to_string
                        (Self := str.t)
                        (Trait := ℐ))) in
                  let* α2 : ref str.t := M.read (mk_str "API Request Error") in
                  let* α3 : alloc.string.String.t := M.call (α1 α2) in
                  let* α4 : M.Val never.t :=
                    return_
                      (core.result.Result.Err
                        (assistants_extra.openai.OpenAIApiError.ApiError
                          {|
                            assistants_extra.openai.ApiErrorResponse.error :=
                              {|
                                assistants_extra.openai.ApiErrorDetail.message :=
                                  α0;
                                assistants_extra.openai.ApiErrorDetail.type :=
                                  α3;
                                assistants_extra.openai.ApiErrorDetail.param :=
                                  core.option.Option.None;
                                assistants_extra.openai.ApiErrorDetail.code :=
                                  core.option.Option.None;
                              |};
                          |})) in
                  let* α5 := M.read α4 in
                  let* α6 : unit := never_to_any α5 in
                  M.alloc α6
                else
                  M.alloc tt in
              let* api_res :
                  M.Val
                    (core.result.Result.t
                      assistants_extra.openai.ChatCompletion.t
                      serde_json.error.Error.t) :=
                let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.deref.Deref.deref
                      (Self := alloc.string.String.t)
                      (Trait := ℐ))) in
                let* α1 : ref str.t := M.call (α0 (borrow raw_res)) in
                let* α2 :
                    core.result.Result.t
                      assistants_extra.openai.ChatCompletion.t
                      serde_json.error.Error.t :=
                  M.call (serde_json.de.from_str α1) in
                M.alloc α2 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      assistants_extra.openai.ChatCompletion.t
                      assistants_extra.openai.OpenAIApiError.t) :=
                match_operator
                  api_res
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Ok _ =>
                        let γ0_0 := core.result.Result.Get_Ok_0 γ in
                        let* res_body := M.copy γ0_0 in
                        let* α0 : assistants_extra.openai.ChatCompletion.t :=
                          M.read res_body in
                        M.alloc (core.result.Result.Ok α0)
                      | _ => M.break_match
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            assistants_extra.openai.OpenAIApiError.t));
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Err _ =>
                        let γ0_0 := core.result.Result.Get_Err_0 γ in
                        let* err := M.copy γ0_0 in
                        let* α0 : serde_json.error.Error.t := M.read err in
                        M.alloc
                          (core.result.Result.Err
                            (assistants_extra.openai.OpenAIApiError.JSONDeserialize
                              α0))
                      | _ => M.break_match
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            assistants_extra.openai.OpenAIApiError.t))
                  ] in
              M.read (use α0)) :
              M
                (core.result.Result.t
                  assistants_extra.openai.ChatCompletion.t
                  assistants_extra.openai.OpenAIApiError.t)
          ]) :
        M
          (core.result.Result.t
            assistants_extra.openai.ChatCompletion.t
            assistants_extra.openai.OpenAIApiError.t)).
End openai.

Module  ApiErrorDetail.
Section ApiErrorDetail.
  Record t : Set := {
    message : alloc.string.String.t;
    type : alloc.string.String.t;
    param : core.option.Option.t serde_json.value.Value.t;
    code : core.option.Option.t serde_json.value.Value.t;
  }.
  
  Definition Get_message :=
    Ref.map
      (fun α => Some α.(message))
      (fun β α => Some (α <| message := β |>)).
  Definition Get_type :=
    Ref.map (fun α => Some α.(type)) (fun β α => Some (α <| type := β |>)).
  Definition Get_param :=
    Ref.map (fun α => Some α.(param)) (fun β α => Some (α <| param := β |>)).
  Definition Get_code :=
    Ref.map (fun α => Some α.(code)) (fun β α => Some (α <| code := β |>)).
End ApiErrorDetail.
End ApiErrorDetail.

Module  Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorDetail_t.
Section Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorDetail_t.
  Definition Self : Set := assistants_extra.openai.ApiErrorDetail.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "ApiErrorDetail") in
    let* α2 : ref str.t := M.read (mk_str "message") in
    let* α3 : ref assistants_extra.openai.ApiErrorDetail.t := M.read self in
    let* α4 : ref str.t := M.read (mk_str "type") in
    let* α5 : ref assistants_extra.openai.ApiErrorDetail.t := M.read self in
    let* α6 : ref str.t := M.read (mk_str "param") in
    let* α7 : ref assistants_extra.openai.ApiErrorDetail.t := M.read self in
    let* α8 : ref str.t := M.read (mk_str "code") in
    let* α9 : ref assistants_extra.openai.ApiErrorDetail.t := M.read self in
    let* α10 : M.Val (ref (core.option.Option.t serde_json.value.Value.t)) :=
      M.alloc
        (borrow (assistants_extra.openai.ApiErrorDetail.Get_code (deref α9))) in
    M.call
      (core.fmt.Formatter.t::["debug_struct_field4_finish"]
        α0
        α1
        α2
        (pointer_coercion
          "Unsize"
          (borrow
            (assistants_extra.openai.ApiErrorDetail.Get_message (deref α3))))
        α4
        (pointer_coercion
          "Unsize"
          (borrow (assistants_extra.openai.ApiErrorDetail.Get_type (deref α5))))
        α6
        (pointer_coercion
          "Unsize"
          (borrow
            (assistants_extra.openai.ApiErrorDetail.Get_param (deref α7))))
        α8
        (pointer_coercion "Unsize" (borrow α10))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorDetail_t.
End Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorDetail_t.

Module  Impl_serde_de_Deserialize_for_assistants_extra_openai_ApiErrorDetail_t.
Section Impl_serde_de_Deserialize_for_assistants_extra_openai_ApiErrorDetail_t.
  Definition Self : Set := assistants_extra.openai.ApiErrorDetail.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_extra.openai._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_extra.openai._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "ApiErrorDetail") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_extra.openai._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_extra.openai._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_extra.openai._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_extra_openai_ApiErrorDetail_t.
End Impl_serde_de_Deserialize_for_assistants_extra_openai_ApiErrorDetail_t.

Module __Field.
  Inductive t : Set :=
  | __field0
  | __field1
  | __field2
  | __field3
  | __ignore.
End __Field.

Module  Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
  Definition Self : Set :=
    assistants_extra.openai._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.openai._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field3)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field3)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field2)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field3)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.

Module  Impl_serde_de_Deserialize_for_assistants_extra_openai___deserialize___Field_t.
Section Impl_serde_de_Deserialize_for_assistants_extra_openai___deserialize___Field_t.
  Definition Self : Set := assistants_extra.openai._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          assistants_extra.openai._.deserialize.__FieldVisitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_identifier
          (Self := __D)
          (V := assistants_extra.openai._.deserialize.__FieldVisitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    M.call (α0 α1 assistants_extra.openai._.deserialize.__FieldVisitor.Build).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_extra_openai___deserialize___Field_t.
End Impl_serde_de_Deserialize_for_assistants_extra_openai___deserialize___Field_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker : core.marker.PhantomData.t assistants_extra.openai.ApiErrorDetail.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
  Definition Self : Set := assistants_extra.openai._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.openai.ApiErrorDetail.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct ApiErrorDetail") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.ApiErrorDetail.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.ApiErrorDetail.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.ApiErrorDetail.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ApiErrorDetail with 4 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.ApiErrorDetail.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.ApiErrorDetail.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.ApiErrorDetail.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ApiErrorDetail with 4 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field2 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t
                  (core.option.Option.t serde_json.value.Value.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t serde_json.value.Value.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t serde_json.value.Value.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := core.option.Option.t serde_json.value.Value.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t
                (core.option.Option.t serde_json.value.Value.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t
                (core.option.Option.t serde_json.value.Value.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  (core.option.Option.t serde_json.value.Value.t))) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t
                (core.option.Option.t serde_json.value.Value.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.ApiErrorDetail.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.ApiErrorDetail.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.ApiErrorDetail.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        (core.option.Option.t serde_json.value.Value.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t serde_json.value.Value.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t serde_json.value.Value.t)))
            ] in
        let* α6 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 2) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ApiErrorDetail with 4 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : core.option.Option.t serde_json.value.Value.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t))
            ] in
        M.copy α6 in
      let* __field3 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t
                  (core.option.Option.t serde_json.value.Value.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t serde_json.value.Value.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t serde_json.value.Value.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := core.option.Option.t serde_json.value.Value.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t
                (core.option.Option.t serde_json.value.Value.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t
                (core.option.Option.t serde_json.value.Value.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  (core.option.Option.t serde_json.value.Value.t))) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t
                (core.option.Option.t serde_json.value.Value.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.ApiErrorDetail.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.ApiErrorDetail.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.ApiErrorDetail.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        (core.option.Option.t serde_json.value.Value.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t serde_json.value.Value.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t serde_json.value.Value.t)))
            ] in
        let* α6 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 3) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ApiErrorDetail with 4 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : core.option.Option.t serde_json.value.Value.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t))
            ] in
        M.copy α6 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α2 : core.option.Option.t serde_json.value.Value.t :=
        M.read __field2 in
      let* α3 : core.option.Option.t serde_json.value.Value.t :=
        M.read __field3 in
      let* α0 :
          M.Val
            (core.result.Result.t assistants_extra.openai.ApiErrorDetail.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.openai.ApiErrorDetail.message := α0;
              assistants_extra.openai.ApiErrorDetail.type := α1;
              assistants_extra.openai.ApiErrorDetail.param := α2;
              assistants_extra.openai.ApiErrorDetail.code := α3;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field1 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field2 :
          M.Val
            (core.option.Option.t
              (core.option.Option.t serde_json.value.Value.t)) :=
        M.alloc core.option.Option.None in
      let* __field3 :
          M.Val
            (core.option.Option.t
              (core.option.Option.t serde_json.value.Value.t)) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_extra.openai._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.openai._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.openai._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_extra.openai._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_extra.openai._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_extra.openai.ApiErrorDetail.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_extra.openai.ApiErrorDetail.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_extra.openai.ApiErrorDetail.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_extra.openai._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.openai._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.openai._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field0
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "message") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.ApiErrorDetail.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.ApiErrorDetail.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.ApiErrorDetail.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field1
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "type") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.ApiErrorDetail.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.ApiErrorDetail.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.ApiErrorDetail.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field2
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (core.option.Option.t
                                        serde_json.value.Value.t))::["is_some"]
                                  (borrow __field2)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "param") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (core.option.Option.t
                                      serde_json.value.Value.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (core.option.Option.t
                                        serde_json.value.Value.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (core.option.Option.t
                                        serde_json.value.Value.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    core.option.Option.t
                                      serde_json.value.Value.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (core.option.Option.t
                                    serde_json.value.Value.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (core.option.Option.t
                                    serde_json.value.Value.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (core.option.Option.t
                                      serde_json.value.Value.t)) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  (core.option.Option.t
                                    serde_json.value.Value.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.ApiErrorDetail.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.ApiErrorDetail.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.ApiErrorDetail.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          core.option.Option.t
                                            serde_json.value.Value.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          serde_json.value.Value.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          serde_json.value.Value.t))
                                ] in
                            let* α6 :
                                core.option.Option.t serde_json.value.Value.t :=
                              M.read α5 in
                            assign __field2 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field3
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (core.option.Option.t
                                        serde_json.value.Value.t))::["is_some"]
                                  (borrow __field3)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "code") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (core.option.Option.t
                                      serde_json.value.Value.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (core.option.Option.t
                                        serde_json.value.Value.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (core.option.Option.t
                                        serde_json.value.Value.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    core.option.Option.t
                                      serde_json.value.Value.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (core.option.Option.t
                                    serde_json.value.Value.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (core.option.Option.t
                                    serde_json.value.Value.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (core.option.Option.t
                                      serde_json.value.Value.t)) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  (core.option.Option.t
                                    serde_json.value.Value.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.ApiErrorDetail.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.ApiErrorDetail.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.ApiErrorDetail.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          core.option.Option.t
                                            serde_json.value.Value.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          serde_json.value.Value.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          serde_json.value.Value.t))
                                ] in
                            let* α6 :
                                core.option.Option.t serde_json.value.Value.t :=
                              M.read α5 in
                            assign __field3 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_extra.openai.ApiErrorDetail.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_extra.openai.ApiErrorDetail.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_extra.openai.ApiErrorDetail.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "message") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ApiErrorDetail.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ApiErrorDetail.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ApiErrorDetail.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "type") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ApiErrorDetail.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ApiErrorDetail.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ApiErrorDetail.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field2 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
        let* α0 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
          match_operator
            __field2
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field2 := M.copy γ0_0 in
                  M.pure __field2
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          (core.option.Option.t serde_json.value.Value.t)
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (core.option.Option.t serde_json.value.Value.t)
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "param") in
                  let* α2 :
                      core.result.Result.t
                        (core.option.Option.t serde_json.value.Value.t)
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (core.option.Option.t serde_json.value.Value.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (core.option.Option.t serde_json.value.Value.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ApiErrorDetail.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ApiErrorDetail.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ApiErrorDetail.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              core.option.Option.t serde_json.value.Value.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (core.option.Option.t serde_json.value.Value.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (core.option.Option.t serde_json.value.Value.t))
                    ]
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t))
            ] in
        M.copy α0 in
      let* __field3 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
        let* α0 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
          match_operator
            __field3
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field3 := M.copy γ0_0 in
                  M.pure __field3
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          (core.option.Option.t serde_json.value.Value.t)
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (core.option.Option.t serde_json.value.Value.t)
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "code") in
                  let* α2 :
                      core.result.Result.t
                        (core.option.Option.t serde_json.value.Value.t)
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (core.option.Option.t serde_json.value.Value.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (core.option.Option.t serde_json.value.Value.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ApiErrorDetail.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ApiErrorDetail.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ApiErrorDetail.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              core.option.Option.t serde_json.value.Value.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (core.option.Option.t serde_json.value.Value.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (core.option.Option.t serde_json.value.Value.t))
                    ]
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t))
            ] in
        M.copy α0 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α2 : core.option.Option.t serde_json.value.Value.t :=
        M.read __field2 in
      let* α3 : core.option.Option.t serde_json.value.Value.t :=
        M.read __field3 in
      let* α0 :
          M.Val
            (core.result.Result.t assistants_extra.openai.ApiErrorDetail.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.openai.ApiErrorDetail.message := α0;
              assistants_extra.openai.ApiErrorDetail.type := α1;
              assistants_extra.openai.ApiErrorDetail.param := α2;
              assistants_extra.openai.ApiErrorDetail.code := α3;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "message") in
    let* α1 : ref str.t := M.read (mk_str "type") in
    let* α2 : ref str.t := M.read (mk_str "param") in
    let* α3 : ref str.t := M.read (mk_str "code") in
    let* α4 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2; α3 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α4))).

Module  ApiErrorResponse.
Section ApiErrorResponse.
  Record t : Set := {
    error : assistants_extra.openai.ApiErrorDetail.t;
  }.
  
  Definition Get_error :=
    Ref.map (fun α => Some α.(error)) (fun β α => Some (α <| error := β |>)).
End ApiErrorResponse.
End ApiErrorResponse.

Module  Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorResponse_t.
Section Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorResponse_t.
  Definition Self : Set := assistants_extra.openai.ApiErrorResponse.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "ApiErrorResponse") in
    let* α2 : ref str.t := M.read (mk_str "error") in
    let* α3 : ref assistants_extra.openai.ApiErrorResponse.t := M.read self in
    let* α4 : M.Val (ref assistants_extra.openai.ApiErrorDetail.t) :=
      M.alloc
        (borrow
          (assistants_extra.openai.ApiErrorResponse.Get_error (deref α3))) in
    M.call
      (core.fmt.Formatter.t::["debug_struct_field1_finish"]
        α0
        α1
        α2
        (pointer_coercion "Unsize" (borrow α4))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorResponse_t.
End Impl_core_fmt_Debug_for_assistants_extra_openai_ApiErrorResponse_t.

Module  Impl_serde_de_Deserialize_for_assistants_extra_openai_ApiErrorResponse_t.
Section Impl_serde_de_Deserialize_for_assistants_extra_openai_ApiErrorResponse_t.
  Definition Self : Set := assistants_extra.openai.ApiErrorResponse.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_extra.openai._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_extra.openai._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "ApiErrorResponse") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_extra.openai._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_extra.openai._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_extra.openai._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_extra_openai_ApiErrorResponse_t.
End Impl_serde_de_Deserialize_for_assistants_extra_openai_ApiErrorResponse_t.

Module  Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
  Definition Self : Set :=
    assistants_extra.openai._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.openai._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker :
      core.marker.PhantomData.t assistants_extra.openai.ApiErrorResponse.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
  Definition Self : Set := assistants_extra.openai._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.openai.ApiErrorResponse.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct ApiErrorResponse") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val assistants_extra.openai.ApiErrorDetail.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t assistants_extra.openai.ApiErrorDetail.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    assistants_extra.openai.ApiErrorDetail.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    assistants_extra.openai.ApiErrorDetail.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := assistants_extra.openai.ApiErrorDetail.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t assistants_extra.openai.ApiErrorDetail.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t assistants_extra.openai.ApiErrorDetail.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_extra.openai.ApiErrorDetail.t)) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t assistants_extra.openai.ApiErrorDetail.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.ApiErrorResponse.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.ApiErrorResponse.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.ApiErrorResponse.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        assistants_extra.openai.ApiErrorDetail.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      assistants_extra.openai.ApiErrorDetail.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      assistants_extra.openai.ApiErrorDetail.t))
            ] in
        let* α6 : M.Val assistants_extra.openai.ApiErrorDetail.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val assistants_extra.openai.ApiErrorDetail.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ApiErrorResponse with 1 element")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : assistants_extra.openai.ApiErrorDetail.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val assistants_extra.openai.ApiErrorDetail.t)
            ] in
        M.copy α6 in
      let* α0 : assistants_extra.openai.ApiErrorDetail.t := M.read __field0 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_extra.openai.ApiErrorResponse.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            {| assistants_extra.openai.ApiErrorResponse.error := α0; |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 :
          M.Val
            (core.option.Option.t assistants_extra.openai.ApiErrorDetail.t) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_extra.openai._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.openai._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.openai._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_extra.openai._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_extra.openai._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_extra.openai.ApiErrorResponse.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_extra.openai.ApiErrorResponse.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_extra.openai.ApiErrorResponse.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_extra.openai._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.openai._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.openai._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field0
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      assistants_extra.openai.ApiErrorDetail.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "error") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    assistants_extra.openai.ApiErrorDetail.t
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      assistants_extra.openai.ApiErrorDetail.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      assistants_extra.openai.ApiErrorDetail.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    assistants_extra.openai.ApiErrorDetail.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  assistants_extra.openai.ApiErrorDetail.t
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  assistants_extra.openai.ApiErrorDetail.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    assistants_extra.openai.ApiErrorDetail.t) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  assistants_extra.openai.ApiErrorDetail.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.ApiErrorResponse.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.ApiErrorResponse.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.ApiErrorResponse.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          assistants_extra.openai.ApiErrorDetail.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        assistants_extra.openai.ApiErrorDetail.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        assistants_extra.openai.ApiErrorDetail.t)
                                ] in
                            let* α6 :
                                assistants_extra.openai.ApiErrorDetail.t :=
                              M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_extra.openai.ApiErrorResponse.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_extra.openai.ApiErrorResponse.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_extra.openai.ApiErrorResponse.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val assistants_extra.openai.ApiErrorDetail.t :=
        let* α0 : M.Val assistants_extra.openai.ApiErrorDetail.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val assistants_extra.openai.ApiErrorDetail.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          assistants_extra.openai.ApiErrorDetail.t
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.ApiErrorDetail.t
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "error") in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.ApiErrorDetail.t
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        assistants_extra.openai.ApiErrorDetail.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          assistants_extra.openai.ApiErrorDetail.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ApiErrorResponse.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ApiErrorResponse.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ApiErrorResponse.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : assistants_extra.openai.ApiErrorDetail.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val assistants_extra.openai.ApiErrorDetail.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val assistants_extra.openai.ApiErrorDetail.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val assistants_extra.openai.ApiErrorDetail.t)
            ] in
        M.copy α0 in
      let* α0 : assistants_extra.openai.ApiErrorDetail.t := M.read __field0 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_extra.openai.ApiErrorResponse.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            {| assistants_extra.openai.ApiErrorResponse.error := α0; |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.

Module  Message.
Section Message.
  Record t : Set := {
    role : alloc.string.String.t;
    content : alloc.string.String.t;
  }.
  
  Definition Get_role :=
    Ref.map (fun α => Some α.(role)) (fun β α => Some (α <| role := β |>)).
  Definition Get_content :=
    Ref.map
      (fun α => Some α.(content))
      (fun β α => Some (α <| content := β |>)).
End Message.
End Message.

Module  Impl_core_fmt_Debug_for_assistants_extra_openai_Message_t.
Section Impl_core_fmt_Debug_for_assistants_extra_openai_Message_t.
  Definition Self : Set := assistants_extra.openai.Message.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "Message") in
    let* α2 : ref str.t := M.read (mk_str "role") in
    let* α3 : ref assistants_extra.openai.Message.t := M.read self in
    let* α4 : ref str.t := M.read (mk_str "content") in
    let* α5 : ref assistants_extra.openai.Message.t := M.read self in
    let* α6 : M.Val (ref alloc.string.String.t) :=
      M.alloc
        (borrow (assistants_extra.openai.Message.Get_content (deref α5))) in
    M.call
      (core.fmt.Formatter.t::["debug_struct_field2_finish"]
        α0
        α1
        α2
        (pointer_coercion
          "Unsize"
          (borrow (assistants_extra.openai.Message.Get_role (deref α3))))
        α4
        (pointer_coercion "Unsize" (borrow α6))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_assistants_extra_openai_Message_t.
End Impl_core_fmt_Debug_for_assistants_extra_openai_Message_t.

Module  Impl_serde_de_Deserialize_for_assistants_extra_openai_Message_t.
Section Impl_serde_de_Deserialize_for_assistants_extra_openai_Message_t.
  Definition Self : Set := assistants_extra.openai.Message.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_extra.openai._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_extra.openai._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "Message") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_extra.openai._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_extra.openai._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_extra.openai._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_extra_openai_Message_t.
End Impl_serde_de_Deserialize_for_assistants_extra_openai_Message_t.

Module  Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
  Definition Self : Set :=
    assistants_extra.openai._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.openai._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker : core.marker.PhantomData.t assistants_extra.openai.Message.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
  Definition Self : Set := assistants_extra.openai._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.openai.Message.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct Message") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.Message.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.Message.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.Message.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct Message with 2 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.Message.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.Message.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.Message.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct Message with 2 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α0 :
          M.Val (core.result.Result.t assistants_extra.openai.Message.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.openai.Message.role := α0;
              assistants_extra.openai.Message.content := α1;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field1 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_extra.openai._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.openai._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.openai._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_extra.openai._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_extra.openai._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_extra.openai.Message.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_extra.openai.Message.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_extra.openai.Message.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_extra.openai._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.openai._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.openai._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field0
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "role") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.Message.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.Message.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.Message.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field1
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "content") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.Message.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.Message.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.Message.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_extra.openai.Message.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_extra.openai.Message.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_extra.openai.Message.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "role") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.Message.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.Message.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.Message.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "content") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.Message.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.Message.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.Message.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α0 :
          M.Val (core.result.Result.t assistants_extra.openai.Message.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.openai.Message.role := α0;
              assistants_extra.openai.Message.content := α1;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "role") in
    let* α1 : ref str.t := M.read (mk_str "content") in
    let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α2))).

Module  Impl_serde_ser_Serialize_for_assistants_extra_openai_Message_t.
Section Impl_serde_ser_Serialize_for_assistants_extra_openai_Message_t.
  Definition Self : Set := assistants_extra.openai.Message.t.
  
  (*
  Serialize
  *)
  Definition serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S}
      (self : ref Self)
      (__serializer : __S)
      : M (core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) :=
    let* self := M.alloc self in
    let* __serializer := M.alloc __serializer in
    let return_ :=
      M.return_
        (R := core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) in
    M.catch_return
      (let* __serde_state : M.Val _ :=
        let* α0 :
            (core.result.Result.t _ _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t _ _)
              (Trait := ℐ))) in
        let* α1 :
            __S -> (ref str.t) -> usize.t -> M (core.result.Result.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.Serializer.serialize_struct
              (Self := __S)
              (Trait := ℐ))) in
        let* α2 : __S := M.read __serializer in
        let* α3 : ref str.t := M.read (mk_str "Message") in
        let* α4 : usize.t :=
          BinOp.Panic.add (rust_cast false) ((Integer.of_Z 1) : usize.t) in
        let* α5 : usize.t := BinOp.Panic.add α4 ((Integer.of_Z 1) : usize.t) in
        let* α6 : core.result.Result.t _ _ := M.call (α1 α2 α3 α5) in
        let* α7 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              _ :=
          M.call (α0 α6) in
        let* α8 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                _) :=
          M.alloc α7 in
        let* α9 : M.Val _ :=
          match_operator
            α8
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self := core.result.Result.t _ _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : _ := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val _);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val _)
            ] in
        M.copy α9 in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "role") in
        let* α3 : ref assistants_extra.openai.Message.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow (assistants_extra.openai.Message.Get_role (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "content") in
        let* α3 : ref assistants_extra.openai.Message.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.openai.Message.Get_content (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* α0 : _ -> M (core.result.Result.t _ _) :=
        ltac:(M.get_method (fun ℐ =>
          serde.ser.SerializeStruct.end_ (Self := _) (Trait := ℐ))) in
      let* α1 : _ := M.read __serde_state in
      let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
      let* α0 : M.Val (core.result.Result.t _ _) := M.alloc α2 in
      M.read α0).
  
  Global Instance AssociatedFunction_serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :
    Notations.DoubleColon Self "serialize" := {
    Notations.double_colon := serialize (__S := __S);
  }.
  
  Global Instance ℐ : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :=
      serialize (__S := __S);
  }.
End Impl_serde_ser_Serialize_for_assistants_extra_openai_Message_t.
End Impl_serde_ser_Serialize_for_assistants_extra_openai_Message_t.

Module  Impl_core_clone_Clone_for_assistants_extra_openai_Message_t.
Section Impl_core_clone_Clone_for_assistants_extra_openai_Message_t.
  Definition Self : Set := assistants_extra.openai.Message.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M assistants_extra.openai.Message.t :=
    let* self := M.alloc self in
    let* α0 : (ref alloc.string.String.t) -> M alloc.string.String.t :=
      ltac:(M.get_method (fun ℐ =>
        core.clone.Clone.clone (Self := alloc.string.String.t) (Trait := ℐ))) in
    let* α1 : ref assistants_extra.openai.Message.t := M.read self in
    let* α2 : alloc.string.String.t :=
      M.call
        (α0 (borrow (assistants_extra.openai.Message.Get_role (deref α1)))) in
    let* α3 : (ref alloc.string.String.t) -> M alloc.string.String.t :=
      ltac:(M.get_method (fun ℐ =>
        core.clone.Clone.clone (Self := alloc.string.String.t) (Trait := ℐ))) in
    let* α4 : ref assistants_extra.openai.Message.t := M.read self in
    let* α5 : alloc.string.String.t :=
      M.call
        (α3
          (borrow (assistants_extra.openai.Message.Get_content (deref α4)))) in
    M.pure
      {|
        assistants_extra.openai.Message.role := α2;
        assistants_extra.openai.Message.content := α5;
      |}.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_assistants_extra_openai_Message_t.
End Impl_core_clone_Clone_for_assistants_extra_openai_Message_t.

Module  Choice.
Section Choice.
  Record t : Set := {
    message : assistants_extra.openai.Message.t;
    finish_reason : alloc.string.String.t;
  }.
  
  Definition Get_message :=
    Ref.map
      (fun α => Some α.(message))
      (fun β α => Some (α <| message := β |>)).
  Definition Get_finish_reason :=
    Ref.map
      (fun α => Some α.(finish_reason))
      (fun β α => Some (α <| finish_reason := β |>)).
End Choice.
End Choice.

Module  Impl_core_fmt_Debug_for_assistants_extra_openai_Choice_t.
Section Impl_core_fmt_Debug_for_assistants_extra_openai_Choice_t.
  Definition Self : Set := assistants_extra.openai.Choice.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "Choice") in
    let* α2 : ref str.t := M.read (mk_str "message") in
    let* α3 : ref assistants_extra.openai.Choice.t := M.read self in
    let* α4 : ref str.t := M.read (mk_str "finish_reason") in
    let* α5 : ref assistants_extra.openai.Choice.t := M.read self in
    let* α6 : M.Val (ref alloc.string.String.t) :=
      M.alloc
        (borrow
          (assistants_extra.openai.Choice.Get_finish_reason (deref α5))) in
    M.call
      (core.fmt.Formatter.t::["debug_struct_field2_finish"]
        α0
        α1
        α2
        (pointer_coercion
          "Unsize"
          (borrow (assistants_extra.openai.Choice.Get_message (deref α3))))
        α4
        (pointer_coercion "Unsize" (borrow α6))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_assistants_extra_openai_Choice_t.
End Impl_core_fmt_Debug_for_assistants_extra_openai_Choice_t.

Module  Impl_serde_de_Deserialize_for_assistants_extra_openai_Choice_t.
Section Impl_serde_de_Deserialize_for_assistants_extra_openai_Choice_t.
  Definition Self : Set := assistants_extra.openai.Choice.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_extra.openai._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_extra.openai._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "Choice") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_extra.openai._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_extra.openai._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_extra.openai._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_extra_openai_Choice_t.
End Impl_serde_de_Deserialize_for_assistants_extra_openai_Choice_t.

Module  Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
  Definition Self : Set :=
    assistants_extra.openai._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.openai._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              let γ1_10 := [10] γ in
              let γ1_11 := [11] γ in
              let γ1_12 := [12] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker : core.marker.PhantomData.t assistants_extra.openai.Choice.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
  Definition Self : Set := assistants_extra.openai._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.openai.Choice.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct Choice") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val assistants_extra.openai.Message.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t assistants_extra.openai.Message.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t assistants_extra.openai.Message.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t assistants_extra.openai.Message.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := assistants_extra.openai.Message.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t assistants_extra.openai.Message.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t assistants_extra.openai.Message.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t assistants_extra.openai.Message.t)) :=
          M.alloc α3 in
        let* α5 :
            M.Val (core.option.Option.t assistants_extra.openai.Message.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.Choice.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.Choice.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_extra.openai.Choice.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t assistants_extra.openai.Message.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t assistants_extra.openai.Message.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t assistants_extra.openai.Message.t))
            ] in
        let* α6 : M.Val assistants_extra.openai.Message.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val assistants_extra.openai.Message.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow (mk_str "struct Choice with 2 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : assistants_extra.openai.Message.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val assistants_extra.openai.Message.t)
            ] in
        M.copy α6 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.Choice.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.Choice.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_extra.openai.Choice.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow (mk_str "struct Choice with 2 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* α0 : assistants_extra.openai.Message.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α0 :
          M.Val (core.result.Result.t assistants_extra.openai.Choice.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.openai.Choice.message := α0;
              assistants_extra.openai.Choice.finish_reason := α1;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 :
          M.Val (core.option.Option.t assistants_extra.openai.Message.t) :=
        M.alloc core.option.Option.None in
      let* __field1 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_extra.openai._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.openai._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.openai._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_extra.openai._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_extra.openai._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_extra.openai.Choice.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_extra.openai.Choice.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_extra.openai.Choice.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_extra.openai._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.openai._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.openai._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field0
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      assistants_extra.openai.Message.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "message") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    assistants_extra.openai.Message.t
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      assistants_extra.openai.Message.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      assistants_extra.openai.Message.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := assistants_extra.openai.Message.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  assistants_extra.openai.Message.t
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  assistants_extra.openai.Message.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    assistants_extra.openai.Message.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val assistants_extra.openai.Message.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.Choice.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.Choice.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.Choice.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          assistants_extra.openai.Message.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val assistants_extra.openai.Message.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val assistants_extra.openai.Message.t)
                                ] in
                            let* α6 : assistants_extra.openai.Message.t :=
                              M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field1
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "finish_reason") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.Choice.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.Choice.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.Choice.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_extra.openai.Choice.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_extra.openai.Choice.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_extra.openai.Choice.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val assistants_extra.openai.Message.t :=
        let* α0 : M.Val assistants_extra.openai.Message.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val assistants_extra.openai.Message.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t assistants_extra.openai.Message.t _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.Message.t
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "message") in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.Message.t
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        assistants_extra.openai.Message.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          assistants_extra.openai.Message.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.Choice.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.Choice.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.Choice.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : assistants_extra.openai.Message.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val assistants_extra.openai.Message.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val assistants_extra.openai.Message.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val assistants_extra.openai.Message.t)
            ] in
        M.copy α0 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "finish_reason") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.Choice.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.Choice.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.Choice.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* α0 : assistants_extra.openai.Message.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α0 :
          M.Val (core.result.Result.t assistants_extra.openai.Choice.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.openai.Choice.message := α0;
              assistants_extra.openai.Choice.finish_reason := α1;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "message") in
    let* α1 : ref str.t := M.read (mk_str "finish_reason") in
    let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α2))).

Module  Impl_serde_ser_Serialize_for_assistants_extra_openai_Choice_t.
Section Impl_serde_ser_Serialize_for_assistants_extra_openai_Choice_t.
  Definition Self : Set := assistants_extra.openai.Choice.t.
  
  (*
  Serialize
  *)
  Definition serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S}
      (self : ref Self)
      (__serializer : __S)
      : M (core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) :=
    let* self := M.alloc self in
    let* __serializer := M.alloc __serializer in
    let return_ :=
      M.return_
        (R := core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) in
    M.catch_return
      (let* __serde_state : M.Val _ :=
        let* α0 :
            (core.result.Result.t _ _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t _ _)
              (Trait := ℐ))) in
        let* α1 :
            __S -> (ref str.t) -> usize.t -> M (core.result.Result.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.Serializer.serialize_struct
              (Self := __S)
              (Trait := ℐ))) in
        let* α2 : __S := M.read __serializer in
        let* α3 : ref str.t := M.read (mk_str "Choice") in
        let* α4 : usize.t :=
          BinOp.Panic.add (rust_cast false) ((Integer.of_Z 1) : usize.t) in
        let* α5 : usize.t := BinOp.Panic.add α4 ((Integer.of_Z 1) : usize.t) in
        let* α6 : core.result.Result.t _ _ := M.call (α1 α2 α3 α5) in
        let* α7 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              _ :=
          M.call (α0 α6) in
        let* α8 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                _) :=
          M.alloc α7 in
        let* α9 : M.Val _ :=
          match_operator
            α8
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self := core.result.Result.t _ _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : _ := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val _);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val _)
            ] in
        M.copy α9 in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref assistants_extra.openai.Message.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := assistants_extra.openai.Message.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "message") in
        let* α3 : ref assistants_extra.openai.Choice.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.openai.Choice.Get_message (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "finish_reason") in
        let* α3 : ref assistants_extra.openai.Choice.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.openai.Choice.Get_finish_reason
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* α0 : _ -> M (core.result.Result.t _ _) :=
        ltac:(M.get_method (fun ℐ =>
          serde.ser.SerializeStruct.end_ (Self := _) (Trait := ℐ))) in
      let* α1 : _ := M.read __serde_state in
      let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
      let* α0 : M.Val (core.result.Result.t _ _) := M.alloc α2 in
      M.read α0).
  
  Global Instance AssociatedFunction_serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :
    Notations.DoubleColon Self "serialize" := {
    Notations.double_colon := serialize (__S := __S);
  }.
  
  Global Instance ℐ : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :=
      serialize (__S := __S);
  }.
End Impl_serde_ser_Serialize_for_assistants_extra_openai_Choice_t.
End Impl_serde_ser_Serialize_for_assistants_extra_openai_Choice_t.

Module  Usage.
Section Usage.
  Record t : Set := {
    prompt_tokens : i32.t;
    total_tokens : i32.t;
    completion_tokens : i32.t;
  }.
  
  Definition Get_prompt_tokens :=
    Ref.map
      (fun α => Some α.(prompt_tokens))
      (fun β α => Some (α <| prompt_tokens := β |>)).
  Definition Get_total_tokens :=
    Ref.map
      (fun α => Some α.(total_tokens))
      (fun β α => Some (α <| total_tokens := β |>)).
  Definition Get_completion_tokens :=
    Ref.map
      (fun α => Some α.(completion_tokens))
      (fun β α => Some (α <| completion_tokens := β |>)).
End Usage.
End Usage.

Module  Impl_core_fmt_Debug_for_assistants_extra_openai_Usage_t.
Section Impl_core_fmt_Debug_for_assistants_extra_openai_Usage_t.
  Definition Self : Set := assistants_extra.openai.Usage.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "Usage") in
    let* α2 : ref str.t := M.read (mk_str "prompt_tokens") in
    let* α3 : ref assistants_extra.openai.Usage.t := M.read self in
    let* α4 : ref str.t := M.read (mk_str "total_tokens") in
    let* α5 : ref assistants_extra.openai.Usage.t := M.read self in
    let* α6 : ref str.t := M.read (mk_str "completion_tokens") in
    let* α7 : ref assistants_extra.openai.Usage.t := M.read self in
    let* α8 : M.Val (ref i32.t) :=
      M.alloc
        (borrow
          (assistants_extra.openai.Usage.Get_completion_tokens (deref α7))) in
    M.call
      (core.fmt.Formatter.t::["debug_struct_field3_finish"]
        α0
        α1
        α2
        (pointer_coercion
          "Unsize"
          (borrow (assistants_extra.openai.Usage.Get_prompt_tokens (deref α3))))
        α4
        (pointer_coercion
          "Unsize"
          (borrow (assistants_extra.openai.Usage.Get_total_tokens (deref α5))))
        α6
        (pointer_coercion "Unsize" (borrow α8))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_assistants_extra_openai_Usage_t.
End Impl_core_fmt_Debug_for_assistants_extra_openai_Usage_t.

Module  Impl_serde_de_Deserialize_for_assistants_extra_openai_Usage_t.
Section Impl_serde_de_Deserialize_for_assistants_extra_openai_Usage_t.
  Definition Self : Set := assistants_extra.openai.Usage.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_extra.openai._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_extra.openai._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "Usage") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_extra.openai._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_extra.openai._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_extra.openai._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_extra_openai_Usage_t.
End Impl_serde_de_Deserialize_for_assistants_extra_openai_Usage_t.

Module  Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
  Definition Self : Set :=
    assistants_extra.openai._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.openai._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              let γ1_10 := [10] γ in
              let γ1_11 := [11] γ in
              let γ1_12 := [12] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              let γ1_10 := [10] γ in
              let γ1_11 := [11] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              let γ1_10 := [10] γ in
              let γ1_11 := [11] γ in
              let γ1_12 := [12] γ in
              let γ1_13 := [13] γ in
              let γ1_14 := [14] γ in
              let γ1_15 := [15] γ in
              let γ1_16 := [16] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field2)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker : core.marker.PhantomData.t assistants_extra.openai.Usage.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
  Definition Self : Set := assistants_extra.openai._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.openai.Usage.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct Usage") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val i32.t :=
        let* α0 :
            (core.result.Result.t (core.option.Option.t i32.t) _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t (core.option.Option.t i32.t) _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M (core.result.Result.t (core.option.Option.t i32.t) _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := i32.t)
              (Trait := ℐ))) in
        let* α2 : core.result.Result.t (core.option.Option.t i32.t) _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t i32.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t i32.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t i32.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.Usage.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.Usage.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_extra.openai.Usage.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t i32.t := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t))
            ] in
        let* α6 : M.Val i32.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val i32.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow (mk_str "struct Usage with 3 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : i32.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val i32.t)
            ] in
        M.copy α6 in
      let* __field1 : M.Val i32.t :=
        let* α0 :
            (core.result.Result.t (core.option.Option.t i32.t) _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t (core.option.Option.t i32.t) _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M (core.result.Result.t (core.option.Option.t i32.t) _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := i32.t)
              (Trait := ℐ))) in
        let* α2 : core.result.Result.t (core.option.Option.t i32.t) _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t i32.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t i32.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t i32.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.Usage.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.Usage.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_extra.openai.Usage.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t i32.t := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t))
            ] in
        let* α6 : M.Val i32.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val i32.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow (mk_str "struct Usage with 3 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : i32.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val i32.t)
            ] in
        M.copy α6 in
      let* __field2 : M.Val i32.t :=
        let* α0 :
            (core.result.Result.t (core.option.Option.t i32.t) _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t (core.option.Option.t i32.t) _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M (core.result.Result.t (core.option.Option.t i32.t) _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := i32.t)
              (Trait := ℐ))) in
        let* α2 : core.result.Result.t (core.option.Option.t i32.t) _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t i32.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t i32.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t i32.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.Usage.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.Usage.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_extra.openai.Usage.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t i32.t := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t))
            ] in
        let* α6 : M.Val i32.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val i32.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 2) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow (mk_str "struct Usage with 3 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : i32.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val i32.t)
            ] in
        M.copy α6 in
      let* α0 : i32.t := M.read __field0 in
      let* α1 : i32.t := M.read __field1 in
      let* α2 : i32.t := M.read __field2 in
      let* α0 :
          M.Val (core.result.Result.t assistants_extra.openai.Usage.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.openai.Usage.prompt_tokens := α0;
              assistants_extra.openai.Usage.total_tokens := α1;
              assistants_extra.openai.Usage.completion_tokens := α2;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val (core.option.Option.t i32.t) :=
        M.alloc core.option.Option.None in
      let* __field1 : M.Val (core.option.Option.t i32.t) :=
        M.alloc core.option.Option.None in
      let* __field2 : M.Val (core.option.Option.t i32.t) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_extra.openai._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.openai._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.openai._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_extra.openai._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_extra.openai._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_extra.openai.Usage.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_extra.openai.Usage.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_extra.openai.Usage.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_extra.openai._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.openai._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.openai._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field0
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t i32.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "prompt_tokens") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t i32.t _) ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self := core.result.Result.t i32.t _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M (core.result.Result.t i32.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := i32.t)
                                  (Trait := ℐ))) in
                            let* α2 : core.result.Result.t i32.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  i32.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    i32.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val i32.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.Usage.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.Usage.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.Usage.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : i32.t := never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val i32.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val i32.t)
                                ] in
                            let* α6 : i32.t := M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field1
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t i32.t)::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "total_tokens") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t i32.t _) ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self := core.result.Result.t i32.t _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M (core.result.Result.t i32.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := i32.t)
                                  (Trait := ℐ))) in
                            let* α2 : core.result.Result.t i32.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  i32.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    i32.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val i32.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.Usage.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.Usage.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.Usage.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : i32.t := never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val i32.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val i32.t)
                                ] in
                            let* α6 : i32.t := M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field2
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t i32.t)::["is_some"]
                                  (borrow __field2)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "completion_tokens") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t i32.t _) ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self := core.result.Result.t i32.t _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M (core.result.Result.t i32.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := i32.t)
                                  (Trait := ℐ))) in
                            let* α2 : core.result.Result.t i32.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  i32.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    i32.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val i32.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.Usage.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.Usage.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.Usage.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : i32.t := never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val i32.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val i32.t)
                                ] in
                            let* α6 : i32.t := M.read α5 in
                            assign __field2 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_extra.openai.Usage.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_extra.openai.Usage.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_extra.openai.Usage.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val i32.t :=
        let* α0 : M.Val i32.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val i32.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t i32.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t i32.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "prompt_tokens") in
                  let* α2 : core.result.Result.t i32.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        i32.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          i32.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.Usage.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.Usage.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.Usage.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : i32.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val i32.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val i32.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val i32.t)
            ] in
        M.copy α0 in
      let* __field1 : M.Val i32.t :=
        let* α0 : M.Val i32.t :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M (M.Val i32.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t i32.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t i32.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "total_tokens") in
                  let* α2 : core.result.Result.t i32.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        i32.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          i32.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.Usage.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.Usage.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.Usage.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : i32.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val i32.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val i32.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val i32.t)
            ] in
        M.copy α0 in
      let* __field2 : M.Val i32.t :=
        let* α0 : M.Val i32.t :=
          match_operator
            __field2
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field2 := M.copy γ0_0 in
                  M.pure __field2
                | _ => M.break_match
                end) :
                M (M.Val i32.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t i32.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t i32.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "completion_tokens") in
                  let* α2 : core.result.Result.t i32.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        i32.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          i32.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.Usage.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.Usage.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.Usage.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : i32.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val i32.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val i32.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val i32.t)
            ] in
        M.copy α0 in
      let* α0 : i32.t := M.read __field0 in
      let* α1 : i32.t := M.read __field1 in
      let* α2 : i32.t := M.read __field2 in
      let* α0 :
          M.Val (core.result.Result.t assistants_extra.openai.Usage.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.openai.Usage.prompt_tokens := α0;
              assistants_extra.openai.Usage.total_tokens := α1;
              assistants_extra.openai.Usage.completion_tokens := α2;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "prompt_tokens") in
    let* α1 : ref str.t := M.read (mk_str "total_tokens") in
    let* α2 : ref str.t := M.read (mk_str "completion_tokens") in
    let* α3 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α3))).

Module  Impl_serde_ser_Serialize_for_assistants_extra_openai_Usage_t.
Section Impl_serde_ser_Serialize_for_assistants_extra_openai_Usage_t.
  Definition Self : Set := assistants_extra.openai.Usage.t.
  
  (*
  Serialize
  *)
  Definition serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S}
      (self : ref Self)
      (__serializer : __S)
      : M (core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) :=
    let* self := M.alloc self in
    let* __serializer := M.alloc __serializer in
    let return_ :=
      M.return_
        (R := core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) in
    M.catch_return
      (let* __serde_state : M.Val _ :=
        let* α0 :
            (core.result.Result.t _ _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t _ _)
              (Trait := ℐ))) in
        let* α1 :
            __S -> (ref str.t) -> usize.t -> M (core.result.Result.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.Serializer.serialize_struct
              (Self := __S)
              (Trait := ℐ))) in
        let* α2 : __S := M.read __serializer in
        let* α3 : ref str.t := M.read (mk_str "Usage") in
        let* α4 : usize.t :=
          BinOp.Panic.add (rust_cast false) ((Integer.of_Z 1) : usize.t) in
        let* α5 : usize.t := BinOp.Panic.add α4 ((Integer.of_Z 1) : usize.t) in
        let* α6 : usize.t := BinOp.Panic.add α5 ((Integer.of_Z 1) : usize.t) in
        let* α7 : core.result.Result.t _ _ := M.call (α1 α2 α3 α6) in
        let* α8 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              _ :=
          M.call (α0 α7) in
        let* α9 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                _) :=
          M.alloc α8 in
        let* α10 : M.Val _ :=
          match_operator
            α9
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self := core.result.Result.t _ _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : _ := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val _);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val _)
            ] in
        M.copy α10 in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref i32.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := i32.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "prompt_tokens") in
        let* α3 : ref assistants_extra.openai.Usage.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.openai.Usage.Get_prompt_tokens
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref i32.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := i32.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "total_tokens") in
        let* α3 : ref assistants_extra.openai.Usage.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.openai.Usage.Get_total_tokens (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref i32.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := i32.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "completion_tokens") in
        let* α3 : ref assistants_extra.openai.Usage.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.openai.Usage.Get_completion_tokens
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* α0 : _ -> M (core.result.Result.t _ _) :=
        ltac:(M.get_method (fun ℐ =>
          serde.ser.SerializeStruct.end_ (Self := _) (Trait := ℐ))) in
      let* α1 : _ := M.read __serde_state in
      let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
      let* α0 : M.Val (core.result.Result.t _ _) := M.alloc α2 in
      M.read α0).
  
  Global Instance AssociatedFunction_serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :
    Notations.DoubleColon Self "serialize" := {
    Notations.double_colon := serialize (__S := __S);
  }.
  
  Global Instance ℐ : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :=
      serialize (__S := __S);
  }.
End Impl_serde_ser_Serialize_for_assistants_extra_openai_Usage_t.
End Impl_serde_ser_Serialize_for_assistants_extra_openai_Usage_t.

Module  ChatCompletion.
Section ChatCompletion.
  Record t : Set := {
    id : alloc.string.String.t;
    object : alloc.string.String.t;
    created : i64.t;
    model : alloc.string.String.t;
    choices :
      alloc.vec.Vec.t assistants_extra.openai.Choice.t alloc.vec.Vec.Default.A;
    usage : assistants_extra.openai.Usage.t;
  }.
  
  Definition Get_id :=
    Ref.map (fun α => Some α.(id)) (fun β α => Some (α <| id := β |>)).
  Definition Get_object :=
    Ref.map (fun α => Some α.(object)) (fun β α => Some (α <| object := β |>)).
  Definition Get_created :=
    Ref.map
      (fun α => Some α.(created))
      (fun β α => Some (α <| created := β |>)).
  Definition Get_model :=
    Ref.map (fun α => Some α.(model)) (fun β α => Some (α <| model := β |>)).
  Definition Get_choices :=
    Ref.map
      (fun α => Some α.(choices))
      (fun β α => Some (α <| choices := β |>)).
  Definition Get_usage :=
    Ref.map (fun α => Some α.(usage)) (fun β α => Some (α <| usage := β |>)).
End ChatCompletion.
End ChatCompletion.

Module  Impl_core_fmt_Debug_for_assistants_extra_openai_ChatCompletion_t.
Section Impl_core_fmt_Debug_for_assistants_extra_openai_ChatCompletion_t.
  Definition Self : Set := assistants_extra.openai.ChatCompletion.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* names : M.Val (ref (array (ref str.t))) :=
      let* α0 : ref str.t := M.read (mk_str "id") in
      let* α1 : ref str.t := M.read (mk_str "object") in
      let* α2 : ref str.t := M.read (mk_str "created") in
      let* α3 : ref str.t := M.read (mk_str "model") in
      let* α4 : ref str.t := M.read (mk_str "choices") in
      let* α5 : ref str.t := M.read (mk_str "usage") in
      let* α6 : M.Val (array (ref str.t)) :=
        M.alloc [ α0; α1; α2; α3; α4; α5 ] in
      M.alloc (borrow α6) in
    let* values : M.Val (ref (slice (ref (dyn [core.fmt.Debug.Trait])))) :=
      let* α0 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
      let* α1 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
      let* α2 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
      let* α3 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
      let* α4 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
      let* α5 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
      let* α6 : M.Val (ref assistants_extra.openai.Usage.t) :=
        M.alloc
          (borrow
            (assistants_extra.openai.ChatCompletion.Get_usage (deref α5))) in
      let* α7 : M.Val (array (ref (dyn [core.fmt.Debug.Trait]))) :=
        M.alloc
          [
            pointer_coercion
              "Unsize"
              (borrow
                (assistants_extra.openai.ChatCompletion.Get_id (deref α0)));
            pointer_coercion
              "Unsize"
              (borrow
                (assistants_extra.openai.ChatCompletion.Get_object (deref α1)));
            pointer_coercion
              "Unsize"
              (borrow
                (assistants_extra.openai.ChatCompletion.Get_created
                  (deref α2)));
            pointer_coercion
              "Unsize"
              (borrow
                (assistants_extra.openai.ChatCompletion.Get_model (deref α3)));
            pointer_coercion
              "Unsize"
              (borrow
                (assistants_extra.openai.ChatCompletion.Get_choices
                  (deref α4)));
            pointer_coercion "Unsize" (borrow α6)
          ] in
      M.alloc (pointer_coercion "Unsize" (borrow α7)) in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "ChatCompletion") in
    let* α2 : ref (array (ref str.t)) := M.read names in
    let* α3 : ref (slice (ref (dyn [core.fmt.Debug.Trait]))) := M.read values in
    let* α4 : core.result.Result.t unit core.fmt.Error.t :=
      M.call
        (core.fmt.Formatter.t::["debug_struct_fields_finish"]
          α0
          α1
          (pointer_coercion "Unsize" α2)
          α3) in
    let* α0 : M.Val (core.result.Result.t unit core.fmt.Error.t) :=
      M.alloc α4 in
    M.read α0.
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_assistants_extra_openai_ChatCompletion_t.
End Impl_core_fmt_Debug_for_assistants_extra_openai_ChatCompletion_t.

Module  Impl_serde_de_Deserialize_for_assistants_extra_openai_ChatCompletion_t.
Section Impl_serde_de_Deserialize_for_assistants_extra_openai_ChatCompletion_t.
  Definition Self : Set := assistants_extra.openai.ChatCompletion.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_extra.openai._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_extra.openai._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "ChatCompletion") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_extra.openai._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_extra.openai._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_extra.openai._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_extra_openai_ChatCompletion_t.
End Impl_serde_de_Deserialize_for_assistants_extra_openai_ChatCompletion_t.

Module __Field.
  Inductive t : Set :=
  | __field0
  | __field1
  | __field2
  | __field3
  | __field4
  | __field5
  | __ignore.
End __Field.

Module  Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
  Definition Self : Set :=
    assistants_extra.openai._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.openai._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field3)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field4)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field5)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field3)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field4)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__field5)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_extra.openai._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field2)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field3)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field4)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_extra.openai._.deserialize.__Field.__field5)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_extra.openai._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_extra.openai._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___FieldVisitor_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker : core.marker.PhantomData.t assistants_extra.openai.ChatCompletion.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
  Definition Self : Set := assistants_extra.openai._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_extra.openai.ChatCompletion.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct ChatCompletion") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.ChatCompletion.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ChatCompletion with 6 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.ChatCompletion.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ChatCompletion with 6 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field2 : M.Val i64.t :=
        let* α0 :
            (core.result.Result.t (core.option.Option.t i64.t) _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t (core.option.Option.t i64.t) _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M (core.result.Result.t (core.option.Option.t i64.t) _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := i64.t)
              (Trait := ℐ))) in
        let* α2 : core.result.Result.t (core.option.Option.t i64.t) _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t i64.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t i64.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t i64.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.ChatCompletion.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t i64.t := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i64.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i64.t))
            ] in
        let* α6 : M.Val i64.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val i64.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 2) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ChatCompletion with 6 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : i64.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val i64.t)
            ] in
        M.copy α6 in
      let* __field3 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.ChatCompletion.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 3) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ChatCompletion with 6 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field4 :
          M.Val
            (alloc.vec.Vec.t
              assistants_extra.openai.Choice.t
              alloc.alloc.Global.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t
                  (alloc.vec.Vec.t
                    assistants_extra.openai.Choice.t
                    alloc.alloc.Global.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      assistants_extra.openai.Choice.t
                      alloc.alloc.Global.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      assistants_extra.openai.Choice.t
                      alloc.alloc.Global.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T :=
                alloc.vec.Vec.t
                  assistants_extra.openai.Choice.t
                  alloc.alloc.Global.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t
                (alloc.vec.Vec.t
                  assistants_extra.openai.Choice.t
                  alloc.alloc.Global.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t
                (alloc.vec.Vec.t
                  assistants_extra.openai.Choice.t
                  alloc.alloc.Global.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  (alloc.vec.Vec.t
                    assistants_extra.openai.Choice.t
                    alloc.alloc.Global.t))) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t
                (alloc.vec.Vec.t
                  assistants_extra.openai.Choice.t
                  alloc.alloc.Global.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.ChatCompletion.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        (alloc.vec.Vec.t
                          assistants_extra.openai.Choice.t
                          alloc.alloc.Global.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        assistants_extra.openai.Choice.t
                        alloc.alloc.Global.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        assistants_extra.openai.Choice.t
                        alloc.alloc.Global.t)))
            ] in
        let* α6 :
            M.Val
              (alloc.vec.Vec.t
                assistants_extra.openai.Choice.t
                alloc.alloc.Global.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      assistants_extra.openai.Choice.t
                      alloc.alloc.Global.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 4) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ChatCompletion with 6 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 :
                      alloc.vec.Vec.t
                        assistants_extra.openai.Choice.t
                        alloc.alloc.Global.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      assistants_extra.openai.Choice.t
                      alloc.alloc.Global.t))
            ] in
        M.copy α6 in
      let* __field5 : M.Val assistants_extra.openai.Usage.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t assistants_extra.openai.Usage.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t assistants_extra.openai.Usage.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t assistants_extra.openai.Usage.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := assistants_extra.openai.Usage.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t assistants_extra.openai.Usage.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t assistants_extra.openai.Usage.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t assistants_extra.openai.Usage.t)) :=
          M.alloc α3 in
        let* α5 :
            M.Val (core.option.Option.t assistants_extra.openai.Usage.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_extra.openai.ChatCompletion.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t assistants_extra.openai.Usage.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t assistants_extra.openai.Usage.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t assistants_extra.openai.Usage.t))
            ] in
        let* α6 : M.Val assistants_extra.openai.Usage.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val assistants_extra.openai.Usage.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 5) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ChatCompletion with 6 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : assistants_extra.openai.Usage.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val assistants_extra.openai.Usage.t)
            ] in
        M.copy α6 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α2 : i64.t := M.read __field2 in
      let* α3 : alloc.string.String.t := M.read __field3 in
      let* α4 :
          alloc.vec.Vec.t
            assistants_extra.openai.Choice.t
            alloc.alloc.Global.t :=
        M.read __field4 in
      let* α5 : assistants_extra.openai.Usage.t := M.read __field5 in
      let* α0 :
          M.Val
            (core.result.Result.t assistants_extra.openai.ChatCompletion.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.openai.ChatCompletion.id := α0;
              assistants_extra.openai.ChatCompletion.object := α1;
              assistants_extra.openai.ChatCompletion.created := α2;
              assistants_extra.openai.ChatCompletion.model := α3;
              assistants_extra.openai.ChatCompletion.choices := α4;
              assistants_extra.openai.ChatCompletion.usage := α5;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field1 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field2 : M.Val (core.option.Option.t i64.t) :=
        M.alloc core.option.Option.None in
      let* __field3 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field4 :
          M.Val
            (core.option.Option.t
              (alloc.vec.Vec.t
                assistants_extra.openai.Choice.t
                alloc.alloc.Global.t)) :=
        M.alloc core.option.Option.None in
      let* __field5 :
          M.Val (core.option.Option.t assistants_extra.openai.Usage.t) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_extra.openai._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.openai._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_extra.openai._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_extra.openai._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_extra.openai._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_extra.openai._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_extra.openai.ChatCompletion.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_extra.openai.ChatCompletion.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_extra.openai.ChatCompletion.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_extra.openai._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.openai._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_extra.openai._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field0
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "id") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.ChatCompletion.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.ChatCompletion.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.ChatCompletion.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field1
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "object") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.ChatCompletion.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.ChatCompletion.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.ChatCompletion.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field2
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t i64.t)::["is_some"]
                                  (borrow __field2)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "created") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t i64.t _) ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self := core.result.Result.t i64.t _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M (core.result.Result.t i64.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := i64.t)
                                  (Trait := ℐ))) in
                            let* α2 : core.result.Result.t i64.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  i64.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    i64.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val i64.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.ChatCompletion.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.ChatCompletion.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.ChatCompletion.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : i64.t := never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val i64.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val i64.t)
                                ] in
                            let* α6 : i64.t := M.read α5 in
                            assign __field2 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field3
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field3)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "model") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.ChatCompletion.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.ChatCompletion.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.ChatCompletion.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field3 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field4
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (alloc.vec.Vec.t
                                        assistants_extra.openai.Choice.t
                                        alloc.alloc.Global.t))::["is_some"]
                                  (borrow __field4)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "choices") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (alloc.vec.Vec.t
                                      assistants_extra.openai.Choice.t
                                      alloc.alloc.Global.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (alloc.vec.Vec.t
                                        assistants_extra.openai.Choice.t
                                        alloc.alloc.Global.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (alloc.vec.Vec.t
                                        assistants_extra.openai.Choice.t
                                        alloc.alloc.Global.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    alloc.vec.Vec.t
                                      assistants_extra.openai.Choice.t
                                      alloc.alloc.Global.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (alloc.vec.Vec.t
                                    assistants_extra.openai.Choice.t
                                    alloc.alloc.Global.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (alloc.vec.Vec.t
                                    assistants_extra.openai.Choice.t
                                    alloc.alloc.Global.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (alloc.vec.Vec.t
                                      assistants_extra.openai.Choice.t
                                      alloc.alloc.Global.t)) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  (alloc.vec.Vec.t
                                    assistants_extra.openai.Choice.t
                                    alloc.alloc.Global.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.ChatCompletion.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.ChatCompletion.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.ChatCompletion.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          alloc.vec.Vec.t
                                            assistants_extra.openai.Choice.t
                                            alloc.alloc.Global.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (alloc.vec.Vec.t
                                          assistants_extra.openai.Choice.t
                                          alloc.alloc.Global.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (alloc.vec.Vec.t
                                          assistants_extra.openai.Choice.t
                                          alloc.alloc.Global.t))
                                ] in
                            let* α6 :
                                alloc.vec.Vec.t
                                  assistants_extra.openai.Choice.t
                                  alloc.alloc.Global.t :=
                              M.read α5 in
                            assign __field4 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_extra.openai._.deserialize.__Field.__field5
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      assistants_extra.openai.Usage.t)::["is_some"]
                                  (borrow __field5)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "usage") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    assistants_extra.openai.Usage.t
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      assistants_extra.openai.Usage.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      assistants_extra.openai.Usage.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := assistants_extra.openai.Usage.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  assistants_extra.openai.Usage.t
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  assistants_extra.openai.Usage.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    assistants_extra.openai.Usage.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val assistants_extra.openai.Usage.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_extra.openai.ChatCompletion.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_extra.openai.ChatCompletion.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_extra.openai.ChatCompletion.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          assistants_extra.openai.Usage.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val assistants_extra.openai.Usage.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val assistants_extra.openai.Usage.t)
                                ] in
                            let* α6 : assistants_extra.openai.Usage.t :=
                              M.read α5 in
                            assign __field5 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_extra.openai.ChatCompletion.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_extra.openai.ChatCompletion.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_extra.openai.ChatCompletion.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "id") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "object") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field2 : M.Val i64.t :=
        let* α0 : M.Val i64.t :=
          match_operator
            __field2
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field2 := M.copy γ0_0 in
                  M.pure __field2
                | _ => M.break_match
                end) :
                M (M.Val i64.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t i64.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t i64.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "created") in
                  let* α2 : core.result.Result.t i64.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        i64.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          i64.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : i64.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val i64.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val i64.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val i64.t)
            ] in
        M.copy α0 in
      let* __field3 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field3
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field3 := M.copy γ0_0 in
                  M.pure __field3
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "model") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field4 :
          M.Val
            (alloc.vec.Vec.t
              assistants_extra.openai.Choice.t
              alloc.alloc.Global.t) :=
        let* α0 :
            M.Val
              (alloc.vec.Vec.t
                assistants_extra.openai.Choice.t
                alloc.alloc.Global.t) :=
          match_operator
            __field4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field4 := M.copy γ0_0 in
                  M.pure __field4
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      assistants_extra.openai.Choice.t
                      alloc.alloc.Global.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          (alloc.vec.Vec.t
                            assistants_extra.openai.Choice.t
                            alloc.alloc.Global.t)
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (alloc.vec.Vec.t
                              assistants_extra.openai.Choice.t
                              alloc.alloc.Global.t)
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "choices") in
                  let* α2 :
                      core.result.Result.t
                        (alloc.vec.Vec.t
                          assistants_extra.openai.Choice.t
                          alloc.alloc.Global.t)
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (alloc.vec.Vec.t
                          assistants_extra.openai.Choice.t
                          alloc.alloc.Global.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (alloc.vec.Vec.t
                            assistants_extra.openai.Choice.t
                            alloc.alloc.Global.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              alloc.vec.Vec.t
                                assistants_extra.openai.Choice.t
                                alloc.alloc.Global.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (alloc.vec.Vec.t
                              assistants_extra.openai.Choice.t
                              alloc.alloc.Global.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (alloc.vec.Vec.t
                              assistants_extra.openai.Choice.t
                              alloc.alloc.Global.t))
                    ]
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      assistants_extra.openai.Choice.t
                      alloc.alloc.Global.t))
            ] in
        M.copy α0 in
      let* __field5 : M.Val assistants_extra.openai.Usage.t :=
        let* α0 : M.Val assistants_extra.openai.Usage.t :=
          match_operator
            __field5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field5 := M.copy γ0_0 in
                  M.pure __field5
                | _ => M.break_match
                end) :
                M (M.Val assistants_extra.openai.Usage.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t assistants_extra.openai.Usage.t _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            assistants_extra.openai.Usage.t
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "usage") in
                  let* α2 :
                      core.result.Result.t assistants_extra.openai.Usage.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        assistants_extra.openai.Usage.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          assistants_extra.openai.Usage.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : assistants_extra.openai.Usage.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val assistants_extra.openai.Usage.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val assistants_extra.openai.Usage.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val assistants_extra.openai.Usage.t)
            ] in
        M.copy α0 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α2 : i64.t := M.read __field2 in
      let* α3 : alloc.string.String.t := M.read __field3 in
      let* α4 :
          alloc.vec.Vec.t
            assistants_extra.openai.Choice.t
            alloc.alloc.Global.t :=
        M.read __field4 in
      let* α5 : assistants_extra.openai.Usage.t := M.read __field5 in
      let* α0 :
          M.Val
            (core.result.Result.t assistants_extra.openai.ChatCompletion.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_extra.openai.ChatCompletion.id := α0;
              assistants_extra.openai.ChatCompletion.object := α1;
              assistants_extra.openai.ChatCompletion.created := α2;
              assistants_extra.openai.ChatCompletion.model := α3;
              assistants_extra.openai.ChatCompletion.choices := α4;
              assistants_extra.openai.ChatCompletion.usage := α5;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_extra_openai___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "id") in
    let* α1 : ref str.t := M.read (mk_str "object") in
    let* α2 : ref str.t := M.read (mk_str "created") in
    let* α3 : ref str.t := M.read (mk_str "model") in
    let* α4 : ref str.t := M.read (mk_str "choices") in
    let* α5 : ref str.t := M.read (mk_str "usage") in
    let* α6 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2; α3; α4; α5 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α6))).

Module  Impl_serde_ser_Serialize_for_assistants_extra_openai_ChatCompletion_t.
Section Impl_serde_ser_Serialize_for_assistants_extra_openai_ChatCompletion_t.
  Definition Self : Set := assistants_extra.openai.ChatCompletion.t.
  
  (*
  Serialize
  *)
  Definition serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S}
      (self : ref Self)
      (__serializer : __S)
      : M (core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) :=
    let* self := M.alloc self in
    let* __serializer := M.alloc __serializer in
    let return_ :=
      M.return_
        (R := core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) in
    M.catch_return
      (let* __serde_state : M.Val _ :=
        let* α0 :
            (core.result.Result.t _ _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t _ _)
              (Trait := ℐ))) in
        let* α1 :
            __S -> (ref str.t) -> usize.t -> M (core.result.Result.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.Serializer.serialize_struct
              (Self := __S)
              (Trait := ℐ))) in
        let* α2 : __S := M.read __serializer in
        let* α3 : ref str.t := M.read (mk_str "ChatCompletion") in
        let* α4 : usize.t :=
          BinOp.Panic.add (rust_cast false) ((Integer.of_Z 1) : usize.t) in
        let* α5 : usize.t := BinOp.Panic.add α4 ((Integer.of_Z 1) : usize.t) in
        let* α6 : usize.t := BinOp.Panic.add α5 ((Integer.of_Z 1) : usize.t) in
        let* α7 : usize.t := BinOp.Panic.add α6 ((Integer.of_Z 1) : usize.t) in
        let* α8 : usize.t := BinOp.Panic.add α7 ((Integer.of_Z 1) : usize.t) in
        let* α9 : usize.t := BinOp.Panic.add α8 ((Integer.of_Z 1) : usize.t) in
        let* α10 : core.result.Result.t _ _ := M.call (α1 α2 α3 α9) in
        let* α11 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              _ :=
          M.call (α0 α10) in
        let* α12 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                _) :=
          M.alloc α11 in
        let* α13 : M.Val _ :=
          match_operator
            α12
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self := core.result.Result.t _ _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : _ := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val _);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val _)
            ] in
        M.copy α13 in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "id") in
        let* α3 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.openai.ChatCompletion.Get_id (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "object") in
        let* α3 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.openai.ChatCompletion.Get_object
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref i64.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := i64.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "created") in
        let* α3 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.openai.ChatCompletion.Get_created
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "model") in
        let* α3 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.openai.ChatCompletion.Get_model
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref
                (alloc.vec.Vec.t
                  assistants_extra.openai.Choice.t
                  alloc.alloc.Global.t))
              ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T :=
                alloc.vec.Vec.t
                  assistants_extra.openai.Choice.t
                  alloc.alloc.Global.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "choices") in
        let* α3 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.openai.ChatCompletion.Get_choices
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref assistants_extra.openai.Usage.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := assistants_extra.openai.Usage.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "usage") in
        let* α3 : ref assistants_extra.openai.ChatCompletion.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_extra.openai.ChatCompletion.Get_usage
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* α0 : _ -> M (core.result.Result.t _ _) :=
        ltac:(M.get_method (fun ℐ =>
          serde.ser.SerializeStruct.end_ (Self := _) (Trait := ℐ))) in
      let* α1 : _ := M.read __serde_state in
      let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
      let* α0 : M.Val (core.result.Result.t _ _) := M.alloc α2 in
      M.read α0).
  
  Global Instance AssociatedFunction_serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :
    Notations.DoubleColon Self "serialize" := {
    Notations.double_colon := serialize (__S := __S);
  }.
  
  Global Instance ℐ : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :=
      serialize (__S := __S);
  }.
End Impl_serde_ser_Serialize_for_assistants_extra_openai_ChatCompletion_t.
End Impl_serde_ser_Serialize_for_assistants_extra_openai_ChatCompletion_t.

Ltac OpenAIResponse T :=
  exact (core.result.Result.t T assistants_extra.openai.OpenAIApiError.t).

Module OpenAIApiError.
  Inductive t : Set :=
  | Reqwest (_ : reqwest.error.Error.t)
  | ApiError (_ : assistants_extra.openai.ApiErrorResponse.t)
  | JSONDeserialize (_ : serde_json.error.Error.t)
  | StreamError (_ : alloc.string.String.t)
  | InvalidArgument (_ : alloc.string.String.t).
  
  Definition Get_Reqwest_0 :=
    Ref.map
      (fun α => match α with | Reqwest α0 => Some α0 | _ => None end)
      (fun β α => match α with | Reqwest _ => Some (Reqwest β) | _ => None end).
  
  Definition Get_ApiError_0 :=
    Ref.map
      (fun α => match α with | ApiError α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | ApiError _ => Some (ApiError β) | _ => None end).
  
  Definition Get_JSONDeserialize_0 :=
    Ref.map
      (fun α => match α with | JSONDeserialize α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with
        | JSONDeserialize _ => Some (JSONDeserialize β)
        | _ => None
        end).
  
  Definition Get_StreamError_0 :=
    Ref.map
      (fun α => match α with | StreamError α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | StreamError _ => Some (StreamError β) | _ => None end).
  
  Definition Get_InvalidArgument_0 :=
    Ref.map
      (fun α => match α with | InvalidArgument α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with
        | InvalidArgument _ => Some (InvalidArgument β)
        | _ => None
        end).
End OpenAIApiError.

Module  Impl_core_fmt_Debug_for_assistants_extra_openai_OpenAIApiError_t.
Section Impl_core_fmt_Debug_for_assistants_extra_openai_OpenAIApiError_t.
  Definition Self : Set := assistants_extra.openai.OpenAIApiError.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : M.Val (core.result.Result.t unit core.fmt.Error.t) :=
      match_operator
        self
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.openai.OpenAIApiError.Reqwest _ =>
              let γ1_0 :=
                assistants_extra.openai.OpenAIApiError.Get_Reqwest_0 γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "Reqwest") in
              let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                    α0
                    α1
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α2
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.openai.OpenAIApiError.ApiError _ =>
              let γ1_0 :=
                assistants_extra.openai.OpenAIApiError.Get_ApiError_0 γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "ApiError") in
              let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                    α0
                    α1
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α2
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.openai.OpenAIApiError.JSONDeserialize _ =>
              let γ1_0 :=
                assistants_extra.openai.OpenAIApiError.Get_JSONDeserialize_0
                  γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "JSONDeserialize") in
              let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                    α0
                    α1
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α2
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.openai.OpenAIApiError.StreamError _ =>
              let γ1_0 :=
                assistants_extra.openai.OpenAIApiError.Get_StreamError_0 γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "StreamError") in
              let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                    α0
                    α1
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α2
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.openai.OpenAIApiError.InvalidArgument _ =>
              let γ1_0 :=
                assistants_extra.openai.OpenAIApiError.Get_InvalidArgument_0
                  γ in
              let* __self_0 := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "InvalidArgument") in
              let* α2 : core.result.Result.t unit core.fmt.Error.t :=
                M.call
                  (core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                    α0
                    α1
                    (pointer_coercion "Unsize" (borrow __self_0))) in
              M.alloc α2
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_assistants_extra_openai_OpenAIApiError_t.
End Impl_core_fmt_Debug_for_assistants_extra_openai_OpenAIApiError_t.

Module  Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_openai_OpenAIApiError_t.
Section Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_openai_OpenAIApiError_t.
  Definition Self : Set := assistants_extra.openai.OpenAIApiError.t.
  
  (*
      fn from(err: reqwest::Error) -> OpenAIApiError {
          OpenAIApiError::Reqwest(err)
      }
  *)
  Definition from
      (err : reqwest.error.Error.t)
      : M assistants_extra.openai.OpenAIApiError.t :=
    let* err := M.alloc err in
    let* α0 : reqwest.error.Error.t := M.read err in
    M.pure (assistants_extra.openai.OpenAIApiError.Reqwest α0).
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait Self (T := reqwest.error.Error.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_openai_OpenAIApiError_t.
End Impl_core_convert_From_reqwest_error_Error_t_for_assistants_extra_openai_OpenAIApiError_t.

Module  Impl_core_error_Error_for_assistants_extra_openai_OpenAIApiError_t.
Section Impl_core_error_Error_for_assistants_extra_openai_OpenAIApiError_t.
  Definition Self : Set := assistants_extra.openai.OpenAIApiError.t.
  
  Global Instance ℐ : core.error.Error.Required.Trait Self := {
    core.error.Error.source := Datatypes.None;
    core.error.Error.type_id := Datatypes.None;
    core.error.Error.description := Datatypes.None;
    core.error.Error.cause := Datatypes.None;
    core.error.Error.provide := Datatypes.None;
  }.
End Impl_core_error_Error_for_assistants_extra_openai_OpenAIApiError_t.
End Impl_core_error_Error_for_assistants_extra_openai_OpenAIApiError_t.

Module  Impl_core_fmt_Display_for_assistants_extra_openai_OpenAIApiError_t.
Section Impl_core_fmt_Display_for_assistants_extra_openai_OpenAIApiError_t.
  Definition Self : Set := assistants_extra.openai.OpenAIApiError.t.
  
  (*
      fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
          match self {
              OpenAIApiError::Reqwest(err) => write!(f, "Reqwest Error: {}", err),
              OpenAIApiError::ApiError(err) => write!(f, "API Error: {}", err.error.message),
              OpenAIApiError::JSONDeserialize(err) => write!(f, "Deserialization Error: {}", err),
              OpenAIApiError::StreamError(err) => write!(f, "Stream Error: {}", err),
              OpenAIApiError::InvalidArgument(err) => write!(f, "Invalid Argument: {}", err),
          }
      }
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : M.Val (core.result.Result.t unit core.fmt.Error.t) :=
      match_operator
        self
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.openai.OpenAIApiError.Reqwest _ =>
              let γ1_0 :=
                assistants_extra.openai.OpenAIApiError.Get_Reqwest_0 γ in
              let* err := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "Reqwest Error: ") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
              let* α3 : core.fmt.rt.Argument.t :=
                M.call (core.fmt.rt.Argument.t::["new_display"] (borrow err)) in
              let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α3 ] in
              let* α5 : core.fmt.Arguments.t :=
                M.call
                  (core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α4))) in
              let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
              M.alloc α6
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.openai.OpenAIApiError.ApiError _ =>
              let γ1_0 :=
                assistants_extra.openai.OpenAIApiError.Get_ApiError_0 γ in
              let* err := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "API Error: ") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
              let* α3 : ref assistants_extra.openai.ApiErrorResponse.t :=
                M.read err in
              let* α4 : core.fmt.rt.Argument.t :=
                M.call
                  (core.fmt.rt.Argument.t::["new_display"]
                    (borrow
                      (assistants_extra.openai.ApiErrorDetail.Get_message
                        (assistants_extra.openai.ApiErrorResponse.Get_error
                          (deref α3))))) in
              let* α5 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α4 ] in
              let* α6 : core.fmt.Arguments.t :=
                M.call
                  (core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α5))) in
              let* α7 : core.result.Result.t unit core.fmt.Error.t :=
                M.call (core.fmt.Formatter.t::["write_fmt"] α0 α6) in
              M.alloc α7
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.openai.OpenAIApiError.JSONDeserialize _ =>
              let γ1_0 :=
                assistants_extra.openai.OpenAIApiError.Get_JSONDeserialize_0
                  γ in
              let* err := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t :=
                M.read (mk_str "Deserialization Error: ") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
              let* α3 : core.fmt.rt.Argument.t :=
                M.call (core.fmt.rt.Argument.t::["new_display"] (borrow err)) in
              let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α3 ] in
              let* α5 : core.fmt.Arguments.t :=
                M.call
                  (core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α4))) in
              let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
              M.alloc α6
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.openai.OpenAIApiError.StreamError _ =>
              let γ1_0 :=
                assistants_extra.openai.OpenAIApiError.Get_StreamError_0 γ in
              let* err := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "Stream Error: ") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
              let* α3 : core.fmt.rt.Argument.t :=
                M.call (core.fmt.rt.Argument.t::["new_display"] (borrow err)) in
              let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α3 ] in
              let* α5 : core.fmt.Arguments.t :=
                M.call
                  (core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α4))) in
              let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
              M.alloc α6
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | assistants_extra.openai.OpenAIApiError.InvalidArgument _ =>
              let γ1_0 :=
                assistants_extra.openai.OpenAIApiError.Get_InvalidArgument_0
                  γ in
              let* err := M.alloc (borrow γ1_0) in
              let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
              let* α1 : ref str.t := M.read (mk_str "Invalid Argument: ") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α1 ] in
              let* α3 : core.fmt.rt.Argument.t :=
                M.call (core.fmt.rt.Argument.t::["new_display"] (borrow err)) in
              let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α3 ] in
              let* α5 : core.fmt.Arguments.t :=
                M.call
                  (core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion "Unsize" (borrow α2))
                    (pointer_coercion "Unsize" (borrow α4))) in
              let* α6 : core.result.Result.t unit core.fmt.Error.t :=
                M.call (core.fmt.Formatter.t::["write_fmt"] α0 α5) in
              M.alloc α6
            | _ => M.break_match
            end) :
            M (M.Val (core.result.Result.t unit core.fmt.Error.t))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt := fmt;
  }.
End Impl_core_fmt_Display_for_assistants_extra_openai_OpenAIApiError_t.
End Impl_core_fmt_Display_for_assistants_extra_openai_OpenAIApiError_t.

(*
pub async fn call_openai_api(
    mut prompt: String,
    max_tokens_to_sample: i32,
    model: Option<String>,
    temperature: Option<f32>,
    stop_sequences: Option<Vec<String>>,
    top_p: Option<f32>,
) -> Result<ChatCompletion, OpenAIApiError> {
    let url = "https://api.openai.com/v1/chat/completions";
    let default_model = "gpt-3.5-turbo".to_string();
    let model = model.unwrap_or_else(|| default_model.clone());

    let api_key = std::env::var("OPENAI_API_KEY").expect("OPENAI_API_KEY must be set");
    let mut headers = HeaderMap::new();
    headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
    let auth_value = match HeaderValue::from_str(&format!("Bearer {}", api_key)) {
        Ok(v) => v,
        Err(_) => {
            return Err(OpenAIApiError::InvalidArgument(
                "Invalid API Key".to_string(),
            ))
        }
    };
    headers.insert("Authorization", auth_value);
    let mut body: HashMap<&str, serde_json::Value> = HashMap::new();
    body.insert("model", serde_json::json!(model));
    body.insert(
        "messages",
        serde_json::json!(vec![Message {
            role: "user".to_string(),
            content: prompt
        }]),
    );
    body.insert("max_tokens", serde_json::json!(max_tokens_to_sample));
    body.insert("temperature", serde_json::json!(temperature.unwrap_or(1.0)));
    body.insert("stream", serde_json::json!(false));

    if let Some(stop_sequences) = stop_sequences {
        body.insert("stop", serde_json::json!(stop_sequences));
    }
    if let Some(top_p) = top_p {
        body.insert("top_p", serde_json::json!(top_p));
    }

    let client = reqwest::Client::new();
    let res = client.post(url).headers(headers).json(&body).send().await?;
    let raw_res = res.text().await?;
    let api_res: Result<ChatCompletion, _> = serde_json::from_str(&raw_res);

    match api_res {
        Ok(res_body) => Ok(res_body),
        Err(err) => Err(OpenAIApiError::JSONDeserialize(err)),
    }
}
*)
Definition call_openai_api
    (prompt : alloc.string.String.t)
    (max_tokens_to_sample : i32.t)
    (model : core.option.Option.t alloc.string.String.t)
    (temperature : core.option.Option.t f32.t)
    (stop_sequences
      :
      core.option.Option.t
        (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A))
    (top_p : core.option.Option.t f32.t)
    : M OpaqueDef :=
  let* prompt := M.alloc prompt in
  let* max_tokens_to_sample := M.alloc max_tokens_to_sample in
  let* model := M.alloc model in
  let* temperature := M.alloc temperature in
  let* stop_sequences := M.alloc stop_sequences in
  let* top_p := M.alloc top_p in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* prompt : M.Val alloc.string.String.t := M.copy prompt in
            let* max_tokens_to_sample : M.Val i32.t :=
              M.copy max_tokens_to_sample in
            let* model : M.Val (core.option.Option.t alloc.string.String.t) :=
              M.copy model in
            let* temperature : M.Val (core.option.Option.t f32.t) :=
              M.copy temperature in
            let* stop_sequences :
                M.Val
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      alloc.string.String.t
                      alloc.alloc.Global.t)) :=
              M.copy stop_sequences in
            let* top_p : M.Val (core.option.Option.t f32.t) := M.copy top_p in
            let* url : M.Val (ref str.t) :=
              M.copy (mk_str "https://api.openai.com/v1/chat/completions") in
            let* default_model : M.Val alloc.string.String.t :=
              let* α0 : (ref str.t) -> M alloc.string.String.t :=
                ltac:(M.get_method (fun ℐ =>
                  alloc.string.ToString.to_string
                    (Self := str.t)
                    (Trait := ℐ))) in
              let* α1 : ref str.t := M.read (mk_str "gpt-3.5-turbo") in
              let* α2 : alloc.string.String.t := M.call (α0 α1) in
              M.alloc α2 in
            let* model : M.Val alloc.string.String.t :=
              let* α0 : core.option.Option.t alloc.string.String.t :=
                M.read model in
              let* α1 : alloc.string.String.t :=
                M.call
                  ((core.option.Option.t
                        alloc.string.String.t)::["unwrap_or_else"]
                    α0
                    (fun (α0 : unit) =>
                      (let* α0 := M.alloc α0 in
                      match_operator
                        α0
                        [
                          fun γ =>
                            (let* α0 :
                                (ref alloc.string.String.t) ->
                                  M alloc.string.String.t :=
                              ltac:(M.get_method (fun ℐ =>
                                core.clone.Clone.clone
                                  (Self := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            M.call (α0 (borrow default_model))) :
                            M alloc.string.String.t
                        ]) :
                      M alloc.string.String.t)) in
              M.alloc α1 in
            let* api_key : M.Val alloc.string.String.t :=
              let* α0 : ref str.t := M.read (mk_str "OPENAI_API_KEY") in
              let* α1 :
                  core.result.Result.t
                    alloc.string.String.t
                    std.env.VarError.t :=
                M.call (std.env.var α0) in
              let* α2 : ref str.t :=
                M.read (mk_str "OPENAI_API_KEY must be set") in
              let* α3 : alloc.string.String.t :=
                M.call
                  ((core.result.Result.t
                        alloc.string.String.t
                        std.env.VarError.t)::["expect"]
                    α1
                    α2) in
              M.alloc α3 in
            let* headers :
                M.Val
                  (http.header.map.HeaderMap.t
                    http.header.value.HeaderValue.t) :=
              let* α0 :
                  http.header.map.HeaderMap.t http.header.value.HeaderValue.t :=
                M.call
                  (http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t)::["new"] in
              M.alloc α0 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : http.header.name.HeaderName.t :=
                M.read http.header.name.CONTENT_TYPE in
              let* α1 : ref str.t := M.read (mk_str "application/json") in
              let* α2 : http.header.value.HeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_static"] α1) in
              let* α3 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α2) in
              M.alloc α3 in
            let* auth_value : M.Val http.header.value.HeaderValue.t :=
              let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.deref.Deref.deref
                    (Self := alloc.string.String.t)
                    (Trait := ℐ))) in
              let* res : M.Val alloc.string.String.t :=
                let* α0 : ref str.t := M.read (mk_str "Bearer ") in
                let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
                let* α2 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"]
                      (borrow api_key)) in
                let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α2 ] in
                let* α4 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α1))
                      (pointer_coercion "Unsize" (borrow α3))) in
                let* α5 : alloc.string.String.t :=
                  M.call (alloc.fmt.format α4) in
                M.alloc α5 in
              let* α1 : ref str.t := M.call (α0 (borrow res)) in
              let* α2 :
                  core.result.Result.t
                    http.header.value.HeaderValue.t
                    http.header.value.InvalidHeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_str"] α1) in
              let* α3 :
                  M.Val
                    (core.result.Result.t
                      http.header.value.HeaderValue.t
                      http.header.value.InvalidHeaderValue.t) :=
                M.alloc α2 in
              let* α4 : M.Val http.header.value.HeaderValue.t :=
                match_operator
                  α3
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Ok _ =>
                        let γ0_0 := core.result.Result.Get_Ok_0 γ in
                        let* v := M.copy γ0_0 in
                        M.pure v
                      | _ => M.break_match
                      end) :
                      M (M.Val http.header.value.HeaderValue.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Err _ =>
                        let γ0_0 := core.result.Result.Get_Err_0 γ in
                        let* α0 : (ref str.t) -> M alloc.string.String.t :=
                          ltac:(M.get_method (fun ℐ =>
                            alloc.string.ToString.to_string
                              (Self := str.t)
                              (Trait := ℐ))) in
                        let* α1 : ref str.t :=
                          M.read (mk_str "Invalid API Key") in
                        let* α2 : alloc.string.String.t := M.call (α0 α1) in
                        let* α3 : M.Val never.t :=
                          return_
                            (core.result.Result.Err
                              (assistants_extra.openai.OpenAIApiError.InvalidArgument
                                α2)) in
                        let* α4 := M.read α3 in
                        let* α5 : http.header.value.HeaderValue.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val http.header.value.HeaderValue.t)
                  ] in
              M.copy α4 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : ref str.t := M.read (mk_str "Authorization") in
              let* α1 : http.header.value.HeaderValue.t := M.read auth_value in
              let* α2 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α1) in
              M.alloc α2 in
            let* body :
                M.Val
                  (std.collections.hash.map.HashMap.t
                    (ref str.t)
                    serde_json.value.Value.t
                    std.hash.random.RandomState.t) :=
              let* α0 :
                  std.collections.hash.map.HashMap.t
                    (ref str.t)
                    serde_json.value.Value.t
                    std.hash.random.RandomState.t :=
                M.call
                  (std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t)::["new"] in
              M.alloc α0 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "model") in
              let* α1 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow model)) in
              let* α2 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α1) in
              let* α3 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "messages") in
              let* α1 : (ref str.t) -> M alloc.string.String.t :=
                ltac:(M.get_method (fun ℐ =>
                  alloc.string.ToString.to_string
                    (Self := str.t)
                    (Trait := ℐ))) in
              let* α2 : ref str.t := M.read (mk_str "user") in
              let* α3 : alloc.string.String.t := M.call (α1 α2) in
              let* α4 : alloc.string.String.t := M.read prompt in
              let* α5 : M.Val (array assistants_extra.openai.Message.t) :=
                M.alloc
                  [
                    {|
                      assistants_extra.openai.Message.role := α3;
                      assistants_extra.openai.Message.content := α4;
                    |}
                  ] in
              let* α6 :
                  M.Val
                    (alloc.boxed.Box.t
                      (array assistants_extra.openai.Message.t)
                      alloc.alloc.Global.t) :=
                M.call
                  ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                    α5) in
              let* α7 :
                  alloc.boxed.Box.t
                    (array assistants_extra.openai.Message.t)
                    alloc.alloc.Global.t :=
                M.read α6 in
              let* α8 :
                  alloc.vec.Vec.t
                    assistants_extra.openai.Message.t
                    alloc.alloc.Global.t :=
                M.call
                  ((slice assistants_extra.openai.Message.t)::["into_vec"]
                    (pointer_coercion "Unsize" α7)) in
              let* α9 :
                  M.Val
                    (alloc.vec.Vec.t
                      assistants_extra.openai.Message.t
                      alloc.alloc.Global.t) :=
                M.alloc α8 in
              let* α10 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow α9)) in
              let* α11 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α10) in
              let* α12 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α11) in
              M.alloc α12 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "max_tokens") in
              let* α1 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call
                  (serde_json.value.to_value (borrow max_tokens_to_sample)) in
              let* α2 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α1) in
              let* α3 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "temperature") in
              let* α1 : core.option.Option.t f32.t := M.read temperature in
              let* α2 : f32.t := M.read (UnsupportedLiteral : M.Val f32.t) in
              let* α3 : f32.t :=
                M.call ((core.option.Option.t f32.t)::["unwrap_or"] α1 α2) in
              let* α4 : M.Val f32.t := M.alloc α3 in
              let* α5 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow α4)) in
              let* α6 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α5) in
              let* α7 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α6) in
              M.alloc α7 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "stream") in
              let* α1 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    (serde_json.value.Value.Bool false)) in
              M.alloc α1 in
            let* _ : M.Val unit :=
              match_operator
                stop_sequences
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* stop_sequences := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t := M.read (mk_str "stop") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call
                            (serde_json.value.to_value
                              (borrow stop_sequences)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* _ : M.Val unit :=
              match_operator
                top_p
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* top_p := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t := M.read (mk_str "top_p") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call (serde_json.value.to_value (borrow top_p)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* client : M.Val reqwest.async_impl.client.Client.t :=
              let* α0 : reqwest.async_impl.client.Client.t :=
                M.call reqwest.async_impl.client.Client.t::["new"] in
              M.alloc α0 in
            let* res : M.Val reqwest.async_impl.response.Response.t :=
              let* α0 :
                  (core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : _ -> M _ :=
                ltac:(M.get_method (fun ℐ =>
                  core.future.into_future.IntoFuture.into_future
                    (Self := _)
                    (Trait := ℐ))) in
              let* α2 : ref str.t := M.read url in
              let* α3 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.client.Client.t::["post"]
                    (borrow client)
                    α2) in
              let* α4 :
                  http.header.map.HeaderMap.t http.header.value.HeaderValue.t :=
                M.read headers in
              let* α5 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["headers"]
                    α3
                    α4) in
              let* α6 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["json"]
                    α5
                    (borrow body)) in
              let* α7 : _ :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["send"] α6) in
              let* α8 : _ := M.call (α1 α7) in
              let* α9 : M.Val _ := M.alloc α8 in
              let* α10 :
                  M.Val
                    (core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t) :=
                match_operator
                  α9
                  [
                    fun γ =>
                      (let* __awaitee := M.copy γ in
                      M.loop
                        (let* _ : M.Val unit :=
                          let* α0 :
                              (core.pin.Pin.t (mut_ref _)) ->
                                (mut_ref core.task.wake.Context.t) ->
                                M (core.task.poll.Poll.t _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.future.Future.poll
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 : core.pin.Pin.t (mut_ref _) :=
                            M.call
                              ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                (borrow_mut __awaitee)) in
                          let* α2 : core.future.ResumeTy.t :=
                            M.read _task_context in
                          let* α3 : mut_ref core.task.wake.Context.t :=
                            M.call (core.future.get_context α2) in
                          let* α4 :
                              core.task.poll.Poll.t
                                (core.result.Result.t
                                  reqwest.async_impl.response.Response.t
                                  reqwest.error.Error.t) :=
                            M.call (α0 α1 α3) in
                          let* α5 :
                              M.Val
                                (core.task.poll.Poll.t
                                  (core.result.Result.t
                                    reqwest.async_impl.response.Response.t
                                    reqwest.error.Error.t)) :=
                            M.alloc α4 in
                          match_operator
                            α5
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Ready _ =>
                                  let γ0_0 :=
                                    core.task.poll.Poll.Get_Ready_0 γ in
                                  let* result := M.copy γ0_0 in
                                  let* α0 : M.Val never.t := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2
                                | _ => M.break_match
                                end) :
                                M (M.Val unit);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Pending => M.alloc tt
                                | _ => M.break_match
                                end) :
                                M (M.Val unit)
                            ] in
                        let* _ : M.Val unit :=
                          let* α0 : M.Val unit := M.alloc tt in
                          let* α1 : M.Val core.future.ResumeTy.t := yield α0 in
                          let* α2 : core.future.ResumeTy.t := M.read α1 in
                          assign _task_context α2 in
                        M.alloc tt)) :
                      M
                        (M.Val
                          (core.result.Result.t
                            reqwest.async_impl.response.Response.t
                            reqwest.error.Error.t))
                  ] in
              let* α11 :
                  core.result.Result.t
                    reqwest.async_impl.response.Response.t
                    reqwest.error.Error.t :=
                M.read α10 in
              let* α12 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      reqwest.error.Error.t)
                    reqwest.async_impl.response.Response.t :=
                M.call (α0 α11) in
              let* α13 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      reqwest.async_impl.response.Response.t) :=
                M.alloc α12 in
              let* α14 : M.Val reqwest.async_impl.response.Response.t :=
                match_operator
                  α13
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              reqwest.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              assistants_extra.openai.ChatCompletion.t
                              assistants_extra.openai.OpenAIApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : reqwest.async_impl.response.Response.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val reqwest.async_impl.response.Response.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val reqwest.async_impl.response.Response.t)
                  ] in
              M.copy α14 in
            let* raw_res : M.Val alloc.string.String.t :=
              let* α0 :
                  (core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : _ -> M _ :=
                ltac:(M.get_method (fun ℐ =>
                  core.future.into_future.IntoFuture.into_future
                    (Self := _)
                    (Trait := ℐ))) in
              let* α2 : reqwest.async_impl.response.Response.t := M.read res in
              let* α3 : _ :=
                M.call (reqwest.async_impl.response.Response.t::["text"] α2) in
              let* α4 : _ := M.call (α1 α3) in
              let* α5 : M.Val _ := M.alloc α4 in
              let* α6 :
                  M.Val
                    (core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t) :=
                match_operator
                  α5
                  [
                    fun γ =>
                      (let* __awaitee := M.copy γ in
                      M.loop
                        (let* _ : M.Val unit :=
                          let* α0 :
                              (core.pin.Pin.t (mut_ref _)) ->
                                (mut_ref core.task.wake.Context.t) ->
                                M (core.task.poll.Poll.t _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.future.Future.poll
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 : core.pin.Pin.t (mut_ref _) :=
                            M.call
                              ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                (borrow_mut __awaitee)) in
                          let* α2 : core.future.ResumeTy.t :=
                            M.read _task_context in
                          let* α3 : mut_ref core.task.wake.Context.t :=
                            M.call (core.future.get_context α2) in
                          let* α4 :
                              core.task.poll.Poll.t
                                (core.result.Result.t
                                  alloc.string.String.t
                                  reqwest.error.Error.t) :=
                            M.call (α0 α1 α3) in
                          let* α5 :
                              M.Val
                                (core.task.poll.Poll.t
                                  (core.result.Result.t
                                    alloc.string.String.t
                                    reqwest.error.Error.t)) :=
                            M.alloc α4 in
                          match_operator
                            α5
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Ready _ =>
                                  let γ0_0 :=
                                    core.task.poll.Poll.Get_Ready_0 γ in
                                  let* result := M.copy γ0_0 in
                                  let* α0 : M.Val never.t := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2
                                | _ => M.break_match
                                end) :
                                M (M.Val unit);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Pending => M.alloc tt
                                | _ => M.break_match
                                end) :
                                M (M.Val unit)
                            ] in
                        let* _ : M.Val unit :=
                          let* α0 : M.Val unit := M.alloc tt in
                          let* α1 : M.Val core.future.ResumeTy.t := yield α0 in
                          let* α2 : core.future.ResumeTy.t := M.read α1 in
                          assign _task_context α2 in
                        M.alloc tt)) :
                      M
                        (M.Val
                          (core.result.Result.t
                            alloc.string.String.t
                            reqwest.error.Error.t))
                  ] in
              let* α7 :
                  core.result.Result.t
                    alloc.string.String.t
                    reqwest.error.Error.t :=
                M.read α6 in
              let* α8 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      reqwest.error.Error.t)
                    alloc.string.String.t :=
                M.call (α0 α7) in
              let* α9 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      alloc.string.String.t) :=
                M.alloc α8 in
              let* α10 : M.Val alloc.string.String.t :=
                match_operator
                  α9
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              reqwest.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              assistants_extra.openai.ChatCompletion.t
                              assistants_extra.openai.OpenAIApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : alloc.string.String.t := never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val alloc.string.String.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val alloc.string.String.t)
                  ] in
              M.copy α10 in
            let* api_res :
                M.Val
                  (core.result.Result.t
                    assistants_extra.openai.ChatCompletion.t
                    serde_json.error.Error.t) :=
              let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.deref.Deref.deref
                    (Self := alloc.string.String.t)
                    (Trait := ℐ))) in
              let* α1 : ref str.t := M.call (α0 (borrow raw_res)) in
              let* α2 :
                  core.result.Result.t
                    assistants_extra.openai.ChatCompletion.t
                    serde_json.error.Error.t :=
                M.call (serde_json.de.from_str α1) in
              M.alloc α2 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    assistants_extra.openai.ChatCompletion.t
                    assistants_extra.openai.OpenAIApiError.t) :=
              match_operator
                api_res
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.result.Result.Ok _ =>
                      let γ0_0 := core.result.Result.Get_Ok_0 γ in
                      let* res_body := M.copy γ0_0 in
                      let* α0 : assistants_extra.openai.ChatCompletion.t :=
                        M.read res_body in
                      M.alloc (core.result.Result.Ok α0)
                    | _ => M.break_match
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          assistants_extra.openai.ChatCompletion.t
                          assistants_extra.openai.OpenAIApiError.t));
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.result.Result.Err _ =>
                      let γ0_0 := core.result.Result.Get_Err_0 γ in
                      let* err := M.copy γ0_0 in
                      let* α0 : serde_json.error.Error.t := M.read err in
                      M.alloc
                        (core.result.Result.Err
                          (assistants_extra.openai.OpenAIApiError.JSONDeserialize
                            α0))
                    | _ => M.break_match
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          assistants_extra.openai.ChatCompletion.t
                          assistants_extra.openai.OpenAIApiError.t))
                ] in
            M.read (use α0)) :
            M
              (core.result.Result.t
                assistants_extra.openai.ChatCompletion.t
                assistants_extra.openai.OpenAIApiError.t)
        ]) :
      M
        (core.result.Result.t
          assistants_extra.openai.ChatCompletion.t
          assistants_extra.openai.OpenAIApiError.t)).

(*
pub async fn call_open_source_openai_api(
    prompt: String,
    max_tokens_to_sample: i32,
    model: String, // model is required for open-source API
    temperature: Option<f32>,
    stop_sequences: Option<Vec<String>>,
    top_p: Option<f32>,
    url: String, // url is required for open-source API
) -> Result<ChatCompletion, OpenAIApiError> {
    let mut headers = HeaderMap::new();
    headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));

    // If the deployed LLM need API key, you can add it here.
    let api_key = std::env::var("MODEL_API_KEY").unwrap_or_else(|_| "".to_string());
    headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
    let auth_value = match HeaderValue::from_str(&format!("Bearer {}", api_key)) {
        Ok(v) => v,
        Err(_) => {
            return Err(OpenAIApiError::InvalidArgument(
                "Invalid API Key".to_string(),
            ))
        }
    };
    headers.insert("Authorization", auth_value);

    let mut body: HashMap<&str, serde_json::Value> = HashMap::new();
    body.insert("model", serde_json::json!(model));
    // TODO: prompt template https://huggingface.co/Open-Orca/Mistral-7B-OpenOrca#prompt-template
    body.insert(
        "messages",
        serde_json::json!(vec![Message {
            role: "user".to_string(),
            content: prompt
        }]),
    );
    body.insert("max_tokens", serde_json::json!(max_tokens_to_sample));
    body.insert("temperature", serde_json::json!(temperature.unwrap_or(1.0)));
    body.insert("stream", serde_json::json!(false));

    if let Some(stop_sequences) = stop_sequences {
        body.insert("stop", serde_json::json!(stop_sequences));
    }
    if let Some(top_p) = top_p {
        body.insert("top_p", serde_json::json!(top_p));
    }

    let client = reqwest::Client::new();
    let res = client.post(url).headers(headers).json(&body).send().await?;
    let status = res.status();
    let raw_res = res.text().await?;

    if !status.is_success() {
        return Err(OpenAIApiError::ApiError(ApiErrorResponse {
            error: ApiErrorDetail {
                message: format!(
                    "API request failed with status: {}. Response body: {}",
                    status, raw_res
                ),
                r#type: "API Request Error".to_string(),
                param: None,
                code: None,
            },
        }));
    }

    let api_res: Result<ChatCompletion, _> = serde_json::from_str(&raw_res);

    match api_res {
        Ok(res_body) => Ok(res_body),
        Err(err) => Err(OpenAIApiError::JSONDeserialize(err)),
    }
}
*)
Definition call_open_source_openai_api
    (prompt : alloc.string.String.t)
    (max_tokens_to_sample : i32.t)
    (model : alloc.string.String.t)
    (temperature : core.option.Option.t f32.t)
    (stop_sequences
      :
      core.option.Option.t
        (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A))
    (top_p : core.option.Option.t f32.t)
    (url : alloc.string.String.t)
    : M OpaqueDef :=
  let* prompt := M.alloc prompt in
  let* max_tokens_to_sample := M.alloc max_tokens_to_sample in
  let* model := M.alloc model in
  let* temperature := M.alloc temperature in
  let* stop_sequences := M.alloc stop_sequences in
  let* top_p := M.alloc top_p in
  let* url := M.alloc url in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* prompt : M.Val alloc.string.String.t := M.copy prompt in
            let* max_tokens_to_sample : M.Val i32.t :=
              M.copy max_tokens_to_sample in
            let* model : M.Val alloc.string.String.t := M.copy model in
            let* temperature : M.Val (core.option.Option.t f32.t) :=
              M.copy temperature in
            let* stop_sequences :
                M.Val
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      alloc.string.String.t
                      alloc.alloc.Global.t)) :=
              M.copy stop_sequences in
            let* top_p : M.Val (core.option.Option.t f32.t) := M.copy top_p in
            let* url : M.Val alloc.string.String.t := M.copy url in
            let* headers :
                M.Val
                  (http.header.map.HeaderMap.t
                    http.header.value.HeaderValue.t) :=
              let* α0 :
                  http.header.map.HeaderMap.t http.header.value.HeaderValue.t :=
                M.call
                  (http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t)::["new"] in
              M.alloc α0 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : http.header.name.HeaderName.t :=
                M.read http.header.name.CONTENT_TYPE in
              let* α1 : ref str.t := M.read (mk_str "application/json") in
              let* α2 : http.header.value.HeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_static"] α1) in
              let* α3 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α2) in
              M.alloc α3 in
            let* api_key : M.Val alloc.string.String.t :=
              let* α0 : ref str.t := M.read (mk_str "MODEL_API_KEY") in
              let* α1 :
                  core.result.Result.t
                    alloc.string.String.t
                    std.env.VarError.t :=
                M.call (std.env.var α0) in
              let* α2 : alloc.string.String.t :=
                M.call
                  ((core.result.Result.t
                        alloc.string.String.t
                        std.env.VarError.t)::["unwrap_or_else"]
                    α1
                    (fun (α0 : std.env.VarError.t) =>
                      (let* α0 := M.alloc α0 in
                      match_operator
                        α0
                        [
                          fun γ =>
                            (let* α0 : (ref str.t) -> M alloc.string.String.t :=
                              ltac:(M.get_method (fun ℐ =>
                                alloc.string.ToString.to_string
                                  (Self := str.t)
                                  (Trait := ℐ))) in
                            let* α1 : ref str.t := M.read (mk_str "") in
                            M.call (α0 α1)) :
                            M alloc.string.String.t
                        ]) :
                      M alloc.string.String.t)) in
              M.alloc α2 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : http.header.name.HeaderName.t :=
                M.read http.header.name.CONTENT_TYPE in
              let* α1 : ref str.t := M.read (mk_str "application/json") in
              let* α2 : http.header.value.HeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_static"] α1) in
              let* α3 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α2) in
              M.alloc α3 in
            let* auth_value : M.Val http.header.value.HeaderValue.t :=
              let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.deref.Deref.deref
                    (Self := alloc.string.String.t)
                    (Trait := ℐ))) in
              let* res : M.Val alloc.string.String.t :=
                let* α0 : ref str.t := M.read (mk_str "Bearer ") in
                let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
                let* α2 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"]
                      (borrow api_key)) in
                let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α2 ] in
                let* α4 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α1))
                      (pointer_coercion "Unsize" (borrow α3))) in
                let* α5 : alloc.string.String.t :=
                  M.call (alloc.fmt.format α4) in
                M.alloc α5 in
              let* α1 : ref str.t := M.call (α0 (borrow res)) in
              let* α2 :
                  core.result.Result.t
                    http.header.value.HeaderValue.t
                    http.header.value.InvalidHeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_str"] α1) in
              let* α3 :
                  M.Val
                    (core.result.Result.t
                      http.header.value.HeaderValue.t
                      http.header.value.InvalidHeaderValue.t) :=
                M.alloc α2 in
              let* α4 : M.Val http.header.value.HeaderValue.t :=
                match_operator
                  α3
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Ok _ =>
                        let γ0_0 := core.result.Result.Get_Ok_0 γ in
                        let* v := M.copy γ0_0 in
                        M.pure v
                      | _ => M.break_match
                      end) :
                      M (M.Val http.header.value.HeaderValue.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Err _ =>
                        let γ0_0 := core.result.Result.Get_Err_0 γ in
                        let* α0 : (ref str.t) -> M alloc.string.String.t :=
                          ltac:(M.get_method (fun ℐ =>
                            alloc.string.ToString.to_string
                              (Self := str.t)
                              (Trait := ℐ))) in
                        let* α1 : ref str.t :=
                          M.read (mk_str "Invalid API Key") in
                        let* α2 : alloc.string.String.t := M.call (α0 α1) in
                        let* α3 : M.Val never.t :=
                          return_
                            (core.result.Result.Err
                              (assistants_extra.openai.OpenAIApiError.InvalidArgument
                                α2)) in
                        let* α4 := M.read α3 in
                        let* α5 : http.header.value.HeaderValue.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val http.header.value.HeaderValue.t)
                  ] in
              M.copy α4 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : ref str.t := M.read (mk_str "Authorization") in
              let* α1 : http.header.value.HeaderValue.t := M.read auth_value in
              let* α2 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α1) in
              M.alloc α2 in
            let* body :
                M.Val
                  (std.collections.hash.map.HashMap.t
                    (ref str.t)
                    serde_json.value.Value.t
                    std.hash.random.RandomState.t) :=
              let* α0 :
                  std.collections.hash.map.HashMap.t
                    (ref str.t)
                    serde_json.value.Value.t
                    std.hash.random.RandomState.t :=
                M.call
                  (std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t)::["new"] in
              M.alloc α0 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "model") in
              let* α1 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow model)) in
              let* α2 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α1) in
              let* α3 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "messages") in
              let* α1 : (ref str.t) -> M alloc.string.String.t :=
                ltac:(M.get_method (fun ℐ =>
                  alloc.string.ToString.to_string
                    (Self := str.t)
                    (Trait := ℐ))) in
              let* α2 : ref str.t := M.read (mk_str "user") in
              let* α3 : alloc.string.String.t := M.call (α1 α2) in
              let* α4 : alloc.string.String.t := M.read prompt in
              let* α5 : M.Val (array assistants_extra.openai.Message.t) :=
                M.alloc
                  [
                    {|
                      assistants_extra.openai.Message.role := α3;
                      assistants_extra.openai.Message.content := α4;
                    |}
                  ] in
              let* α6 :
                  M.Val
                    (alloc.boxed.Box.t
                      (array assistants_extra.openai.Message.t)
                      alloc.alloc.Global.t) :=
                M.call
                  ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                    α5) in
              let* α7 :
                  alloc.boxed.Box.t
                    (array assistants_extra.openai.Message.t)
                    alloc.alloc.Global.t :=
                M.read α6 in
              let* α8 :
                  alloc.vec.Vec.t
                    assistants_extra.openai.Message.t
                    alloc.alloc.Global.t :=
                M.call
                  ((slice assistants_extra.openai.Message.t)::["into_vec"]
                    (pointer_coercion "Unsize" α7)) in
              let* α9 :
                  M.Val
                    (alloc.vec.Vec.t
                      assistants_extra.openai.Message.t
                      alloc.alloc.Global.t) :=
                M.alloc α8 in
              let* α10 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow α9)) in
              let* α11 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α10) in
              let* α12 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α11) in
              M.alloc α12 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "max_tokens") in
              let* α1 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call
                  (serde_json.value.to_value (borrow max_tokens_to_sample)) in
              let* α2 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α1) in
              let* α3 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "temperature") in
              let* α1 : core.option.Option.t f32.t := M.read temperature in
              let* α2 : f32.t := M.read (UnsupportedLiteral : M.Val f32.t) in
              let* α3 : f32.t :=
                M.call ((core.option.Option.t f32.t)::["unwrap_or"] α1 α2) in
              let* α4 : M.Val f32.t := M.alloc α3 in
              let* α5 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow α4)) in
              let* α6 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α5) in
              let* α7 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α6) in
              M.alloc α7 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "stream") in
              let* α1 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    (serde_json.value.Value.Bool false)) in
              M.alloc α1 in
            let* _ : M.Val unit :=
              match_operator
                stop_sequences
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* stop_sequences := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t := M.read (mk_str "stop") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call
                            (serde_json.value.to_value
                              (borrow stop_sequences)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* _ : M.Val unit :=
              match_operator
                top_p
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* top_p := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t := M.read (mk_str "top_p") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call (serde_json.value.to_value (borrow top_p)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* client : M.Val reqwest.async_impl.client.Client.t :=
              let* α0 : reqwest.async_impl.client.Client.t :=
                M.call reqwest.async_impl.client.Client.t::["new"] in
              M.alloc α0 in
            let* res : M.Val reqwest.async_impl.response.Response.t :=
              let* α0 :
                  (core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : _ -> M _ :=
                ltac:(M.get_method (fun ℐ =>
                  core.future.into_future.IntoFuture.into_future
                    (Self := _)
                    (Trait := ℐ))) in
              let* α2 : alloc.string.String.t := M.read url in
              let* α3 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.client.Client.t::["post"]
                    (borrow client)
                    α2) in
              let* α4 :
                  http.header.map.HeaderMap.t http.header.value.HeaderValue.t :=
                M.read headers in
              let* α5 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["headers"]
                    α3
                    α4) in
              let* α6 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["json"]
                    α5
                    (borrow body)) in
              let* α7 : _ :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["send"] α6) in
              let* α8 : _ := M.call (α1 α7) in
              let* α9 : M.Val _ := M.alloc α8 in
              let* α10 :
                  M.Val
                    (core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t) :=
                match_operator
                  α9
                  [
                    fun γ =>
                      (let* __awaitee := M.copy γ in
                      M.loop
                        (let* _ : M.Val unit :=
                          let* α0 :
                              (core.pin.Pin.t (mut_ref _)) ->
                                (mut_ref core.task.wake.Context.t) ->
                                M (core.task.poll.Poll.t _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.future.Future.poll
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 : core.pin.Pin.t (mut_ref _) :=
                            M.call
                              ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                (borrow_mut __awaitee)) in
                          let* α2 : core.future.ResumeTy.t :=
                            M.read _task_context in
                          let* α3 : mut_ref core.task.wake.Context.t :=
                            M.call (core.future.get_context α2) in
                          let* α4 :
                              core.task.poll.Poll.t
                                (core.result.Result.t
                                  reqwest.async_impl.response.Response.t
                                  reqwest.error.Error.t) :=
                            M.call (α0 α1 α3) in
                          let* α5 :
                              M.Val
                                (core.task.poll.Poll.t
                                  (core.result.Result.t
                                    reqwest.async_impl.response.Response.t
                                    reqwest.error.Error.t)) :=
                            M.alloc α4 in
                          match_operator
                            α5
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Ready _ =>
                                  let γ0_0 :=
                                    core.task.poll.Poll.Get_Ready_0 γ in
                                  let* result := M.copy γ0_0 in
                                  let* α0 : M.Val never.t := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2
                                | _ => M.break_match
                                end) :
                                M (M.Val unit);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Pending => M.alloc tt
                                | _ => M.break_match
                                end) :
                                M (M.Val unit)
                            ] in
                        let* _ : M.Val unit :=
                          let* α0 : M.Val unit := M.alloc tt in
                          let* α1 : M.Val core.future.ResumeTy.t := yield α0 in
                          let* α2 : core.future.ResumeTy.t := M.read α1 in
                          assign _task_context α2 in
                        M.alloc tt)) :
                      M
                        (M.Val
                          (core.result.Result.t
                            reqwest.async_impl.response.Response.t
                            reqwest.error.Error.t))
                  ] in
              let* α11 :
                  core.result.Result.t
                    reqwest.async_impl.response.Response.t
                    reqwest.error.Error.t :=
                M.read α10 in
              let* α12 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      reqwest.error.Error.t)
                    reqwest.async_impl.response.Response.t :=
                M.call (α0 α11) in
              let* α13 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      reqwest.async_impl.response.Response.t) :=
                M.alloc α12 in
              let* α14 : M.Val reqwest.async_impl.response.Response.t :=
                match_operator
                  α13
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              reqwest.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              assistants_extra.openai.ChatCompletion.t
                              assistants_extra.openai.OpenAIApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : reqwest.async_impl.response.Response.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val reqwest.async_impl.response.Response.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val reqwest.async_impl.response.Response.t)
                  ] in
              M.copy α14 in
            let* status : M.Val http.status.StatusCode.t :=
              let* α0 : http.status.StatusCode.t :=
                M.call
                  (reqwest.async_impl.response.Response.t::["status"]
                    (borrow res)) in
              M.alloc α0 in
            let* raw_res : M.Val alloc.string.String.t :=
              let* α0 :
                  (core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : _ -> M _ :=
                ltac:(M.get_method (fun ℐ =>
                  core.future.into_future.IntoFuture.into_future
                    (Self := _)
                    (Trait := ℐ))) in
              let* α2 : reqwest.async_impl.response.Response.t := M.read res in
              let* α3 : _ :=
                M.call (reqwest.async_impl.response.Response.t::["text"] α2) in
              let* α4 : _ := M.call (α1 α3) in
              let* α5 : M.Val _ := M.alloc α4 in
              let* α6 :
                  M.Val
                    (core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t) :=
                match_operator
                  α5
                  [
                    fun γ =>
                      (let* __awaitee := M.copy γ in
                      M.loop
                        (let* _ : M.Val unit :=
                          let* α0 :
                              (core.pin.Pin.t (mut_ref _)) ->
                                (mut_ref core.task.wake.Context.t) ->
                                M (core.task.poll.Poll.t _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.future.Future.poll
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 : core.pin.Pin.t (mut_ref _) :=
                            M.call
                              ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                (borrow_mut __awaitee)) in
                          let* α2 : core.future.ResumeTy.t :=
                            M.read _task_context in
                          let* α3 : mut_ref core.task.wake.Context.t :=
                            M.call (core.future.get_context α2) in
                          let* α4 :
                              core.task.poll.Poll.t
                                (core.result.Result.t
                                  alloc.string.String.t
                                  reqwest.error.Error.t) :=
                            M.call (α0 α1 α3) in
                          let* α5 :
                              M.Val
                                (core.task.poll.Poll.t
                                  (core.result.Result.t
                                    alloc.string.String.t
                                    reqwest.error.Error.t)) :=
                            M.alloc α4 in
                          match_operator
                            α5
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Ready _ =>
                                  let γ0_0 :=
                                    core.task.poll.Poll.Get_Ready_0 γ in
                                  let* result := M.copy γ0_0 in
                                  let* α0 : M.Val never.t := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2
                                | _ => M.break_match
                                end) :
                                M (M.Val unit);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Pending => M.alloc tt
                                | _ => M.break_match
                                end) :
                                M (M.Val unit)
                            ] in
                        let* _ : M.Val unit :=
                          let* α0 : M.Val unit := M.alloc tt in
                          let* α1 : M.Val core.future.ResumeTy.t := yield α0 in
                          let* α2 : core.future.ResumeTy.t := M.read α1 in
                          assign _task_context α2 in
                        M.alloc tt)) :
                      M
                        (M.Val
                          (core.result.Result.t
                            alloc.string.String.t
                            reqwest.error.Error.t))
                  ] in
              let* α7 :
                  core.result.Result.t
                    alloc.string.String.t
                    reqwest.error.Error.t :=
                M.read α6 in
              let* α8 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      reqwest.error.Error.t)
                    alloc.string.String.t :=
                M.call (α0 α7) in
              let* α9 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      alloc.string.String.t) :=
                M.alloc α8 in
              let* α10 : M.Val alloc.string.String.t :=
                match_operator
                  α9
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              reqwest.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              assistants_extra.openai.ChatCompletion.t
                              assistants_extra.openai.OpenAIApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : alloc.string.String.t := never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val alloc.string.String.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val alloc.string.String.t)
                  ] in
              M.copy α10 in
            let* _ : M.Val unit :=
              let* α0 : bool.t :=
                M.call
                  (http.status.StatusCode.t::["is_success"] (borrow status)) in
              let* α1 : M.Val bool.t := M.alloc (UnOp.not α0) in
              let* α2 : bool.t := M.read (use α1) in
              if α2 then
                let* res : M.Val alloc.string.String.t :=
                  let* α0 : ref str.t :=
                    M.read (mk_str "API request failed with status: ") in
                  let* α1 : ref str.t := M.read (mk_str ". Response body: ") in
                  let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
                  let* α3 : core.fmt.rt.Argument.t :=
                    M.call
                      (core.fmt.rt.Argument.t::["new_display"]
                        (borrow status)) in
                  let* α4 : core.fmt.rt.Argument.t :=
                    M.call
                      (core.fmt.rt.Argument.t::["new_display"]
                        (borrow raw_res)) in
                  let* α5 : M.Val (array core.fmt.rt.Argument.t) :=
                    M.alloc [ α3; α4 ] in
                  let* α6 : core.fmt.Arguments.t :=
                    M.call
                      (core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α2))
                        (pointer_coercion "Unsize" (borrow α5))) in
                  let* α7 : alloc.string.String.t :=
                    M.call (alloc.fmt.format α6) in
                  M.alloc α7 in
                let* α0 : alloc.string.String.t := M.read res in
                let* α1 : (ref str.t) -> M alloc.string.String.t :=
                  ltac:(M.get_method (fun ℐ =>
                    alloc.string.ToString.to_string
                      (Self := str.t)
                      (Trait := ℐ))) in
                let* α2 : ref str.t := M.read (mk_str "API Request Error") in
                let* α3 : alloc.string.String.t := M.call (α1 α2) in
                let* α4 : M.Val never.t :=
                  return_
                    (core.result.Result.Err
                      (assistants_extra.openai.OpenAIApiError.ApiError
                        {|
                          assistants_extra.openai.ApiErrorResponse.error :=
                            {|
                              assistants_extra.openai.ApiErrorDetail.message :=
                                α0;
                              assistants_extra.openai.ApiErrorDetail.type := α3;
                              assistants_extra.openai.ApiErrorDetail.param :=
                                core.option.Option.None;
                              assistants_extra.openai.ApiErrorDetail.code :=
                                core.option.Option.None;
                            |};
                        |})) in
                let* α5 := M.read α4 in
                let* α6 : unit := never_to_any α5 in
                M.alloc α6
              else
                M.alloc tt in
            let* api_res :
                M.Val
                  (core.result.Result.t
                    assistants_extra.openai.ChatCompletion.t
                    serde_json.error.Error.t) :=
              let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.deref.Deref.deref
                    (Self := alloc.string.String.t)
                    (Trait := ℐ))) in
              let* α1 : ref str.t := M.call (α0 (borrow raw_res)) in
              let* α2 :
                  core.result.Result.t
                    assistants_extra.openai.ChatCompletion.t
                    serde_json.error.Error.t :=
                M.call (serde_json.de.from_str α1) in
              M.alloc α2 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    assistants_extra.openai.ChatCompletion.t
                    assistants_extra.openai.OpenAIApiError.t) :=
              match_operator
                api_res
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.result.Result.Ok _ =>
                      let γ0_0 := core.result.Result.Get_Ok_0 γ in
                      let* res_body := M.copy γ0_0 in
                      let* α0 : assistants_extra.openai.ChatCompletion.t :=
                        M.read res_body in
                      M.alloc (core.result.Result.Ok α0)
                    | _ => M.break_match
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          assistants_extra.openai.ChatCompletion.t
                          assistants_extra.openai.OpenAIApiError.t));
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.result.Result.Err _ =>
                      let γ0_0 := core.result.Result.Get_Err_0 γ in
                      let* err := M.copy γ0_0 in
                      let* α0 : serde_json.error.Error.t := M.read err in
                      M.alloc
                        (core.result.Result.Err
                          (assistants_extra.openai.OpenAIApiError.JSONDeserialize
                            α0))
                    | _ => M.break_match
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          assistants_extra.openai.ChatCompletion.t
                          assistants_extra.openai.OpenAIApiError.t))
                ] in
            M.read (use α0)) :
            M
              (core.result.Result.t
                assistants_extra.openai.ChatCompletion.t
                assistants_extra.openai.OpenAIApiError.t)
        ]) :
      M
        (core.result.Result.t
          assistants_extra.openai.ChatCompletion.t
          assistants_extra.openai.OpenAIApiError.t)).

(*
pub async fn call_openai_api_with_messages(
    messages: Vec<Message>,
    max_tokens_to_sample: i32,
    model: Option<String>,
    temperature: Option<f32>,
    stop_sequences: Option<Vec<String>>,
    top_p: Option<f32>,
) -> Result<ChatCompletion, OpenAIApiError> {
    let url = "https://api.openai.com/v1/chat/completions";
    let default_model = "gpt-3.5-turbo".to_string();
    let model = model.unwrap_or_else(|| default_model.clone());

    let api_key = std::env::var("OPENAI_API_KEY").expect("OPENAI_API_KEY must be set");
    let mut headers = HeaderMap::new();
    headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
    let auth_value = match HeaderValue::from_str(&format!("Bearer {}", api_key)) {
        Ok(v) => v,
        Err(_) => {
            return Err(OpenAIApiError::InvalidArgument(
                "Invalid API Key".to_string(),
            ))
        }
    };
    headers.insert("Authorization", auth_value);
    let mut body: HashMap<&str, serde_json::Value> = HashMap::new();
    body.insert("model", serde_json::json!(model));
    body.insert("messages", serde_json::json!(messages));
    body.insert("max_tokens", serde_json::json!(max_tokens_to_sample));
    body.insert("temperature", serde_json::json!(temperature.unwrap_or(1.0)));
    body.insert("stream", serde_json::json!(false));

    if let Some(stop_sequences) = stop_sequences {
        body.insert("stop", serde_json::json!(stop_sequences));
    }
    if let Some(top_p) = top_p {
        body.insert("top_p", serde_json::json!(top_p));
    }

    let client = reqwest::Client::new();
    let res = client.post(url).headers(headers).json(&body).send().await?;
    let raw_res = res.text().await?;
    let api_res: Result<ChatCompletion, _> = serde_json::from_str(&raw_res);

    match api_res {
        Ok(res_body) => Ok(res_body),
        Err(err) => Err(OpenAIApiError::JSONDeserialize(err)),
    }
}
*)
Definition call_openai_api_with_messages
    (messages
      :
      alloc.vec.Vec.t assistants_extra.openai.Message.t alloc.vec.Vec.Default.A)
    (max_tokens_to_sample : i32.t)
    (model : core.option.Option.t alloc.string.String.t)
    (temperature : core.option.Option.t f32.t)
    (stop_sequences
      :
      core.option.Option.t
        (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A))
    (top_p : core.option.Option.t f32.t)
    : M OpaqueDef :=
  let* messages := M.alloc messages in
  let* max_tokens_to_sample := M.alloc max_tokens_to_sample in
  let* model := M.alloc model in
  let* temperature := M.alloc temperature in
  let* stop_sequences := M.alloc stop_sequences in
  let* top_p := M.alloc top_p in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* messages :
                M.Val
                  (alloc.vec.Vec.t
                    assistants_extra.openai.Message.t
                    alloc.alloc.Global.t) :=
              M.copy messages in
            let* max_tokens_to_sample : M.Val i32.t :=
              M.copy max_tokens_to_sample in
            let* model : M.Val (core.option.Option.t alloc.string.String.t) :=
              M.copy model in
            let* temperature : M.Val (core.option.Option.t f32.t) :=
              M.copy temperature in
            let* stop_sequences :
                M.Val
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      alloc.string.String.t
                      alloc.alloc.Global.t)) :=
              M.copy stop_sequences in
            let* top_p : M.Val (core.option.Option.t f32.t) := M.copy top_p in
            let* url : M.Val (ref str.t) :=
              M.copy (mk_str "https://api.openai.com/v1/chat/completions") in
            let* default_model : M.Val alloc.string.String.t :=
              let* α0 : (ref str.t) -> M alloc.string.String.t :=
                ltac:(M.get_method (fun ℐ =>
                  alloc.string.ToString.to_string
                    (Self := str.t)
                    (Trait := ℐ))) in
              let* α1 : ref str.t := M.read (mk_str "gpt-3.5-turbo") in
              let* α2 : alloc.string.String.t := M.call (α0 α1) in
              M.alloc α2 in
            let* model : M.Val alloc.string.String.t :=
              let* α0 : core.option.Option.t alloc.string.String.t :=
                M.read model in
              let* α1 : alloc.string.String.t :=
                M.call
                  ((core.option.Option.t
                        alloc.string.String.t)::["unwrap_or_else"]
                    α0
                    (fun (α0 : unit) =>
                      (let* α0 := M.alloc α0 in
                      match_operator
                        α0
                        [
                          fun γ =>
                            (let* α0 :
                                (ref alloc.string.String.t) ->
                                  M alloc.string.String.t :=
                              ltac:(M.get_method (fun ℐ =>
                                core.clone.Clone.clone
                                  (Self := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            M.call (α0 (borrow default_model))) :
                            M alloc.string.String.t
                        ]) :
                      M alloc.string.String.t)) in
              M.alloc α1 in
            let* api_key : M.Val alloc.string.String.t :=
              let* α0 : ref str.t := M.read (mk_str "OPENAI_API_KEY") in
              let* α1 :
                  core.result.Result.t
                    alloc.string.String.t
                    std.env.VarError.t :=
                M.call (std.env.var α0) in
              let* α2 : ref str.t :=
                M.read (mk_str "OPENAI_API_KEY must be set") in
              let* α3 : alloc.string.String.t :=
                M.call
                  ((core.result.Result.t
                        alloc.string.String.t
                        std.env.VarError.t)::["expect"]
                    α1
                    α2) in
              M.alloc α3 in
            let* headers :
                M.Val
                  (http.header.map.HeaderMap.t
                    http.header.value.HeaderValue.t) :=
              let* α0 :
                  http.header.map.HeaderMap.t http.header.value.HeaderValue.t :=
                M.call
                  (http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t)::["new"] in
              M.alloc α0 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : http.header.name.HeaderName.t :=
                M.read http.header.name.CONTENT_TYPE in
              let* α1 : ref str.t := M.read (mk_str "application/json") in
              let* α2 : http.header.value.HeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_static"] α1) in
              let* α3 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α2) in
              M.alloc α3 in
            let* auth_value : M.Val http.header.value.HeaderValue.t :=
              let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.deref.Deref.deref
                    (Self := alloc.string.String.t)
                    (Trait := ℐ))) in
              let* res : M.Val alloc.string.String.t :=
                let* α0 : ref str.t := M.read (mk_str "Bearer ") in
                let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
                let* α2 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"]
                      (borrow api_key)) in
                let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α2 ] in
                let* α4 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α1))
                      (pointer_coercion "Unsize" (borrow α3))) in
                let* α5 : alloc.string.String.t :=
                  M.call (alloc.fmt.format α4) in
                M.alloc α5 in
              let* α1 : ref str.t := M.call (α0 (borrow res)) in
              let* α2 :
                  core.result.Result.t
                    http.header.value.HeaderValue.t
                    http.header.value.InvalidHeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_str"] α1) in
              let* α3 :
                  M.Val
                    (core.result.Result.t
                      http.header.value.HeaderValue.t
                      http.header.value.InvalidHeaderValue.t) :=
                M.alloc α2 in
              let* α4 : M.Val http.header.value.HeaderValue.t :=
                match_operator
                  α3
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Ok _ =>
                        let γ0_0 := core.result.Result.Get_Ok_0 γ in
                        let* v := M.copy γ0_0 in
                        M.pure v
                      | _ => M.break_match
                      end) :
                      M (M.Val http.header.value.HeaderValue.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Err _ =>
                        let γ0_0 := core.result.Result.Get_Err_0 γ in
                        let* α0 : (ref str.t) -> M alloc.string.String.t :=
                          ltac:(M.get_method (fun ℐ =>
                            alloc.string.ToString.to_string
                              (Self := str.t)
                              (Trait := ℐ))) in
                        let* α1 : ref str.t :=
                          M.read (mk_str "Invalid API Key") in
                        let* α2 : alloc.string.String.t := M.call (α0 α1) in
                        let* α3 : M.Val never.t :=
                          return_
                            (core.result.Result.Err
                              (assistants_extra.openai.OpenAIApiError.InvalidArgument
                                α2)) in
                        let* α4 := M.read α3 in
                        let* α5 : http.header.value.HeaderValue.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val http.header.value.HeaderValue.t)
                  ] in
              M.copy α4 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : ref str.t := M.read (mk_str "Authorization") in
              let* α1 : http.header.value.HeaderValue.t := M.read auth_value in
              let* α2 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α1) in
              M.alloc α2 in
            let* body :
                M.Val
                  (std.collections.hash.map.HashMap.t
                    (ref str.t)
                    serde_json.value.Value.t
                    std.hash.random.RandomState.t) :=
              let* α0 :
                  std.collections.hash.map.HashMap.t
                    (ref str.t)
                    serde_json.value.Value.t
                    std.hash.random.RandomState.t :=
                M.call
                  (std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t)::["new"] in
              M.alloc α0 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "model") in
              let* α1 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow model)) in
              let* α2 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α1) in
              let* α3 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "messages") in
              let* α1 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow messages)) in
              let* α2 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α1) in
              let* α3 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "max_tokens") in
              let* α1 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call
                  (serde_json.value.to_value (borrow max_tokens_to_sample)) in
              let* α2 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α1) in
              let* α3 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "temperature") in
              let* α1 : core.option.Option.t f32.t := M.read temperature in
              let* α2 : f32.t := M.read (UnsupportedLiteral : M.Val f32.t) in
              let* α3 : f32.t :=
                M.call ((core.option.Option.t f32.t)::["unwrap_or"] α1 α2) in
              let* α4 : M.Val f32.t := M.alloc α3 in
              let* α5 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow α4)) in
              let* α6 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α5) in
              let* α7 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α6) in
              M.alloc α7 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "stream") in
              let* α1 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    (serde_json.value.Value.Bool false)) in
              M.alloc α1 in
            let* _ : M.Val unit :=
              match_operator
                stop_sequences
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* stop_sequences := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t := M.read (mk_str "stop") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call
                            (serde_json.value.to_value
                              (borrow stop_sequences)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* _ : M.Val unit :=
              match_operator
                top_p
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* top_p := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t := M.read (mk_str "top_p") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call (serde_json.value.to_value (borrow top_p)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* client : M.Val reqwest.async_impl.client.Client.t :=
              let* α0 : reqwest.async_impl.client.Client.t :=
                M.call reqwest.async_impl.client.Client.t::["new"] in
              M.alloc α0 in
            let* res : M.Val reqwest.async_impl.response.Response.t :=
              let* α0 :
                  (core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : _ -> M _ :=
                ltac:(M.get_method (fun ℐ =>
                  core.future.into_future.IntoFuture.into_future
                    (Self := _)
                    (Trait := ℐ))) in
              let* α2 : ref str.t := M.read url in
              let* α3 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.client.Client.t::["post"]
                    (borrow client)
                    α2) in
              let* α4 :
                  http.header.map.HeaderMap.t http.header.value.HeaderValue.t :=
                M.read headers in
              let* α5 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["headers"]
                    α3
                    α4) in
              let* α6 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["json"]
                    α5
                    (borrow body)) in
              let* α7 : _ :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["send"] α6) in
              let* α8 : _ := M.call (α1 α7) in
              let* α9 : M.Val _ := M.alloc α8 in
              let* α10 :
                  M.Val
                    (core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t) :=
                match_operator
                  α9
                  [
                    fun γ =>
                      (let* __awaitee := M.copy γ in
                      M.loop
                        (let* _ : M.Val unit :=
                          let* α0 :
                              (core.pin.Pin.t (mut_ref _)) ->
                                (mut_ref core.task.wake.Context.t) ->
                                M (core.task.poll.Poll.t _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.future.Future.poll
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 : core.pin.Pin.t (mut_ref _) :=
                            M.call
                              ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                (borrow_mut __awaitee)) in
                          let* α2 : core.future.ResumeTy.t :=
                            M.read _task_context in
                          let* α3 : mut_ref core.task.wake.Context.t :=
                            M.call (core.future.get_context α2) in
                          let* α4 :
                              core.task.poll.Poll.t
                                (core.result.Result.t
                                  reqwest.async_impl.response.Response.t
                                  reqwest.error.Error.t) :=
                            M.call (α0 α1 α3) in
                          let* α5 :
                              M.Val
                                (core.task.poll.Poll.t
                                  (core.result.Result.t
                                    reqwest.async_impl.response.Response.t
                                    reqwest.error.Error.t)) :=
                            M.alloc α4 in
                          match_operator
                            α5
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Ready _ =>
                                  let γ0_0 :=
                                    core.task.poll.Poll.Get_Ready_0 γ in
                                  let* result := M.copy γ0_0 in
                                  let* α0 : M.Val never.t := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2
                                | _ => M.break_match
                                end) :
                                M (M.Val unit);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Pending => M.alloc tt
                                | _ => M.break_match
                                end) :
                                M (M.Val unit)
                            ] in
                        let* _ : M.Val unit :=
                          let* α0 : M.Val unit := M.alloc tt in
                          let* α1 : M.Val core.future.ResumeTy.t := yield α0 in
                          let* α2 : core.future.ResumeTy.t := M.read α1 in
                          assign _task_context α2 in
                        M.alloc tt)) :
                      M
                        (M.Val
                          (core.result.Result.t
                            reqwest.async_impl.response.Response.t
                            reqwest.error.Error.t))
                  ] in
              let* α11 :
                  core.result.Result.t
                    reqwest.async_impl.response.Response.t
                    reqwest.error.Error.t :=
                M.read α10 in
              let* α12 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      reqwest.error.Error.t)
                    reqwest.async_impl.response.Response.t :=
                M.call (α0 α11) in
              let* α13 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      reqwest.async_impl.response.Response.t) :=
                M.alloc α12 in
              let* α14 : M.Val reqwest.async_impl.response.Response.t :=
                match_operator
                  α13
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              reqwest.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              assistants_extra.openai.ChatCompletion.t
                              assistants_extra.openai.OpenAIApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : reqwest.async_impl.response.Response.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val reqwest.async_impl.response.Response.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val reqwest.async_impl.response.Response.t)
                  ] in
              M.copy α14 in
            let* raw_res : M.Val alloc.string.String.t :=
              let* α0 :
                  (core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : _ -> M _ :=
                ltac:(M.get_method (fun ℐ =>
                  core.future.into_future.IntoFuture.into_future
                    (Self := _)
                    (Trait := ℐ))) in
              let* α2 : reqwest.async_impl.response.Response.t := M.read res in
              let* α3 : _ :=
                M.call (reqwest.async_impl.response.Response.t::["text"] α2) in
              let* α4 : _ := M.call (α1 α3) in
              let* α5 : M.Val _ := M.alloc α4 in
              let* α6 :
                  M.Val
                    (core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t) :=
                match_operator
                  α5
                  [
                    fun γ =>
                      (let* __awaitee := M.copy γ in
                      M.loop
                        (let* _ : M.Val unit :=
                          let* α0 :
                              (core.pin.Pin.t (mut_ref _)) ->
                                (mut_ref core.task.wake.Context.t) ->
                                M (core.task.poll.Poll.t _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.future.Future.poll
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 : core.pin.Pin.t (mut_ref _) :=
                            M.call
                              ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                (borrow_mut __awaitee)) in
                          let* α2 : core.future.ResumeTy.t :=
                            M.read _task_context in
                          let* α3 : mut_ref core.task.wake.Context.t :=
                            M.call (core.future.get_context α2) in
                          let* α4 :
                              core.task.poll.Poll.t
                                (core.result.Result.t
                                  alloc.string.String.t
                                  reqwest.error.Error.t) :=
                            M.call (α0 α1 α3) in
                          let* α5 :
                              M.Val
                                (core.task.poll.Poll.t
                                  (core.result.Result.t
                                    alloc.string.String.t
                                    reqwest.error.Error.t)) :=
                            M.alloc α4 in
                          match_operator
                            α5
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Ready _ =>
                                  let γ0_0 :=
                                    core.task.poll.Poll.Get_Ready_0 γ in
                                  let* result := M.copy γ0_0 in
                                  let* α0 : M.Val never.t := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2
                                | _ => M.break_match
                                end) :
                                M (M.Val unit);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Pending => M.alloc tt
                                | _ => M.break_match
                                end) :
                                M (M.Val unit)
                            ] in
                        let* _ : M.Val unit :=
                          let* α0 : M.Val unit := M.alloc tt in
                          let* α1 : M.Val core.future.ResumeTy.t := yield α0 in
                          let* α2 : core.future.ResumeTy.t := M.read α1 in
                          assign _task_context α2 in
                        M.alloc tt)) :
                      M
                        (M.Val
                          (core.result.Result.t
                            alloc.string.String.t
                            reqwest.error.Error.t))
                  ] in
              let* α7 :
                  core.result.Result.t
                    alloc.string.String.t
                    reqwest.error.Error.t :=
                M.read α6 in
              let* α8 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      reqwest.error.Error.t)
                    alloc.string.String.t :=
                M.call (α0 α7) in
              let* α9 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      alloc.string.String.t) :=
                M.alloc α8 in
              let* α10 : M.Val alloc.string.String.t :=
                match_operator
                  α9
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              reqwest.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              assistants_extra.openai.ChatCompletion.t
                              assistants_extra.openai.OpenAIApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : alloc.string.String.t := never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val alloc.string.String.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val alloc.string.String.t)
                  ] in
              M.copy α10 in
            let* api_res :
                M.Val
                  (core.result.Result.t
                    assistants_extra.openai.ChatCompletion.t
                    serde_json.error.Error.t) :=
              let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.deref.Deref.deref
                    (Self := alloc.string.String.t)
                    (Trait := ℐ))) in
              let* α1 : ref str.t := M.call (α0 (borrow raw_res)) in
              let* α2 :
                  core.result.Result.t
                    assistants_extra.openai.ChatCompletion.t
                    serde_json.error.Error.t :=
                M.call (serde_json.de.from_str α1) in
              M.alloc α2 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    assistants_extra.openai.ChatCompletion.t
                    assistants_extra.openai.OpenAIApiError.t) :=
              match_operator
                api_res
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.result.Result.Ok _ =>
                      let γ0_0 := core.result.Result.Get_Ok_0 γ in
                      let* res_body := M.copy γ0_0 in
                      let* α0 : assistants_extra.openai.ChatCompletion.t :=
                        M.read res_body in
                      M.alloc (core.result.Result.Ok α0)
                    | _ => M.break_match
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          assistants_extra.openai.ChatCompletion.t
                          assistants_extra.openai.OpenAIApiError.t));
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.result.Result.Err _ =>
                      let γ0_0 := core.result.Result.Get_Err_0 γ in
                      let* err := M.copy γ0_0 in
                      let* α0 : serde_json.error.Error.t := M.read err in
                      M.alloc
                        (core.result.Result.Err
                          (assistants_extra.openai.OpenAIApiError.JSONDeserialize
                            α0))
                    | _ => M.break_match
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          assistants_extra.openai.ChatCompletion.t
                          assistants_extra.openai.OpenAIApiError.t))
                ] in
            M.read (use α0)) :
            M
              (core.result.Result.t
                assistants_extra.openai.ChatCompletion.t
                assistants_extra.openai.OpenAIApiError.t)
        ]) :
      M
        (core.result.Result.t
          assistants_extra.openai.ChatCompletion.t
          assistants_extra.openai.OpenAIApiError.t)).

(*
pub async fn call_open_source_openai_api_with_messages(
    messages: Vec<Message>,
    max_tokens_to_sample: i32,
    model: String, // model is required for open-source API
    temperature: Option<f32>,
    stop_sequences: Option<Vec<String>>,
    top_p: Option<f32>,
    url: String, // url is required for open-source API
) -> Result<ChatCompletion, OpenAIApiError> {
    let mut headers = HeaderMap::new();
    headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));

    // If the deployed LLM need API key, you can add it here.
    let api_key = std::env::var("MODEL_API_KEY").unwrap_or_else(|_| "".to_string());
    headers.insert(CONTENT_TYPE, HeaderValue::from_static("application/json"));
    let auth_value = match HeaderValue::from_str(&format!("Bearer {}", api_key)) {
        Ok(v) => v,
        Err(_) => {
            return Err(OpenAIApiError::InvalidArgument(
                "Invalid API Key".to_string(),
            ))
        }
    };
    headers.insert("Authorization", auth_value);

    let mut body: HashMap<&str, serde_json::Value> = HashMap::new();
    body.insert("model", serde_json::json!(model));
    body.insert("messages", serde_json::json!(messages));
    body.insert("max_tokens", serde_json::json!(max_tokens_to_sample));
    body.insert("temperature", serde_json::json!(temperature.unwrap_or(1.0)));
    body.insert("stream", serde_json::json!(false));

    if let Some(stop_sequences) = stop_sequences {
        body.insert("stop", serde_json::json!(stop_sequences));
    }
    if let Some(top_p) = top_p {
        body.insert("top_p", serde_json::json!(top_p));
    }

    let client = reqwest::Client::new();
    let res = client.post(url).headers(headers).json(&body).send().await?;
    let status = res.status();
    let raw_res = res.text().await?;

    if !status.is_success() {
        return Err(OpenAIApiError::ApiError(ApiErrorResponse {
            error: ApiErrorDetail {
                message: format!("API request failed with status {}: {}", status, raw_res),
                r#type: "API Request Error".to_string(),
                param: None,
                code: None,
            },
        }));
    }

    let api_res: Result<ChatCompletion, _> = serde_json::from_str(&raw_res);

    match api_res {
        Ok(res_body) => Ok(res_body),
        Err(err) => Err(OpenAIApiError::JSONDeserialize(err)),
    }
}
*)
Definition call_open_source_openai_api_with_messages
    (messages
      :
      alloc.vec.Vec.t assistants_extra.openai.Message.t alloc.vec.Vec.Default.A)
    (max_tokens_to_sample : i32.t)
    (model : alloc.string.String.t)
    (temperature : core.option.Option.t f32.t)
    (stop_sequences
      :
      core.option.Option.t
        (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A))
    (top_p : core.option.Option.t f32.t)
    (url : alloc.string.String.t)
    : M OpaqueDef :=
  let* messages := M.alloc messages in
  let* max_tokens_to_sample := M.alloc max_tokens_to_sample in
  let* model := M.alloc model in
  let* temperature := M.alloc temperature in
  let* stop_sequences := M.alloc stop_sequences in
  let* top_p := M.alloc top_p in
  let* url := M.alloc url in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* messages :
                M.Val
                  (alloc.vec.Vec.t
                    assistants_extra.openai.Message.t
                    alloc.alloc.Global.t) :=
              M.copy messages in
            let* max_tokens_to_sample : M.Val i32.t :=
              M.copy max_tokens_to_sample in
            let* model : M.Val alloc.string.String.t := M.copy model in
            let* temperature : M.Val (core.option.Option.t f32.t) :=
              M.copy temperature in
            let* stop_sequences :
                M.Val
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      alloc.string.String.t
                      alloc.alloc.Global.t)) :=
              M.copy stop_sequences in
            let* top_p : M.Val (core.option.Option.t f32.t) := M.copy top_p in
            let* url : M.Val alloc.string.String.t := M.copy url in
            let* headers :
                M.Val
                  (http.header.map.HeaderMap.t
                    http.header.value.HeaderValue.t) :=
              let* α0 :
                  http.header.map.HeaderMap.t http.header.value.HeaderValue.t :=
                M.call
                  (http.header.map.HeaderMap.t
                      http.header.value.HeaderValue.t)::["new"] in
              M.alloc α0 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : http.header.name.HeaderName.t :=
                M.read http.header.name.CONTENT_TYPE in
              let* α1 : ref str.t := M.read (mk_str "application/json") in
              let* α2 : http.header.value.HeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_static"] α1) in
              let* α3 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α2) in
              M.alloc α3 in
            let* api_key : M.Val alloc.string.String.t :=
              let* α0 : ref str.t := M.read (mk_str "MODEL_API_KEY") in
              let* α1 :
                  core.result.Result.t
                    alloc.string.String.t
                    std.env.VarError.t :=
                M.call (std.env.var α0) in
              let* α2 : alloc.string.String.t :=
                M.call
                  ((core.result.Result.t
                        alloc.string.String.t
                        std.env.VarError.t)::["unwrap_or_else"]
                    α1
                    (fun (α0 : std.env.VarError.t) =>
                      (let* α0 := M.alloc α0 in
                      match_operator
                        α0
                        [
                          fun γ =>
                            (let* α0 : (ref str.t) -> M alloc.string.String.t :=
                              ltac:(M.get_method (fun ℐ =>
                                alloc.string.ToString.to_string
                                  (Self := str.t)
                                  (Trait := ℐ))) in
                            let* α1 : ref str.t := M.read (mk_str "") in
                            M.call (α0 α1)) :
                            M alloc.string.String.t
                        ]) :
                      M alloc.string.String.t)) in
              M.alloc α2 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : http.header.name.HeaderName.t :=
                M.read http.header.name.CONTENT_TYPE in
              let* α1 : ref str.t := M.read (mk_str "application/json") in
              let* α2 : http.header.value.HeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_static"] α1) in
              let* α3 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α2) in
              M.alloc α3 in
            let* auth_value : M.Val http.header.value.HeaderValue.t :=
              let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.deref.Deref.deref
                    (Self := alloc.string.String.t)
                    (Trait := ℐ))) in
              let* res : M.Val alloc.string.String.t :=
                let* α0 : ref str.t := M.read (mk_str "Bearer ") in
                let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
                let* α2 : core.fmt.rt.Argument.t :=
                  M.call
                    (core.fmt.rt.Argument.t::["new_display"]
                      (borrow api_key)) in
                let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α2 ] in
                let* α4 : core.fmt.Arguments.t :=
                  M.call
                    (core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion "Unsize" (borrow α1))
                      (pointer_coercion "Unsize" (borrow α3))) in
                let* α5 : alloc.string.String.t :=
                  M.call (alloc.fmt.format α4) in
                M.alloc α5 in
              let* α1 : ref str.t := M.call (α0 (borrow res)) in
              let* α2 :
                  core.result.Result.t
                    http.header.value.HeaderValue.t
                    http.header.value.InvalidHeaderValue.t :=
                M.call (http.header.value.HeaderValue.t::["from_str"] α1) in
              let* α3 :
                  M.Val
                    (core.result.Result.t
                      http.header.value.HeaderValue.t
                      http.header.value.InvalidHeaderValue.t) :=
                M.alloc α2 in
              let* α4 : M.Val http.header.value.HeaderValue.t :=
                match_operator
                  α3
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Ok _ =>
                        let γ0_0 := core.result.Result.Get_Ok_0 γ in
                        let* v := M.copy γ0_0 in
                        M.pure v
                      | _ => M.break_match
                      end) :
                      M (M.Val http.header.value.HeaderValue.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.result.Result.Err _ =>
                        let γ0_0 := core.result.Result.Get_Err_0 γ in
                        let* α0 : (ref str.t) -> M alloc.string.String.t :=
                          ltac:(M.get_method (fun ℐ =>
                            alloc.string.ToString.to_string
                              (Self := str.t)
                              (Trait := ℐ))) in
                        let* α1 : ref str.t :=
                          M.read (mk_str "Invalid API Key") in
                        let* α2 : alloc.string.String.t := M.call (α0 α1) in
                        let* α3 : M.Val never.t :=
                          return_
                            (core.result.Result.Err
                              (assistants_extra.openai.OpenAIApiError.InvalidArgument
                                α2)) in
                        let* α4 := M.read α3 in
                        let* α5 : http.header.value.HeaderValue.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val http.header.value.HeaderValue.t)
                  ] in
              M.copy α4 in
            let* _ :
                M.Val (core.option.Option.t http.header.value.HeaderValue.t) :=
              let* α0 : ref str.t := M.read (mk_str "Authorization") in
              let* α1 : http.header.value.HeaderValue.t := M.read auth_value in
              let* α2 : core.option.Option.t http.header.value.HeaderValue.t :=
                M.call
                  ((http.header.map.HeaderMap.t
                        http.header.value.HeaderValue.t)::["insert"]
                    (borrow_mut headers)
                    α0
                    α1) in
              M.alloc α2 in
            let* body :
                M.Val
                  (std.collections.hash.map.HashMap.t
                    (ref str.t)
                    serde_json.value.Value.t
                    std.hash.random.RandomState.t) :=
              let* α0 :
                  std.collections.hash.map.HashMap.t
                    (ref str.t)
                    serde_json.value.Value.t
                    std.hash.random.RandomState.t :=
                M.call
                  (std.collections.hash.map.HashMap.t
                      (ref str.t)
                      serde_json.value.Value.t
                      std.hash.random.RandomState.t)::["new"] in
              M.alloc α0 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "model") in
              let* α1 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow model)) in
              let* α2 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α1) in
              let* α3 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "messages") in
              let* α1 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow messages)) in
              let* α2 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α1) in
              let* α3 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "max_tokens") in
              let* α1 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call
                  (serde_json.value.to_value (borrow max_tokens_to_sample)) in
              let* α2 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α1) in
              let* α3 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α2) in
              M.alloc α3 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "temperature") in
              let* α1 : core.option.Option.t f32.t := M.read temperature in
              let* α2 : f32.t := M.read (UnsupportedLiteral : M.Val f32.t) in
              let* α3 : f32.t :=
                M.call ((core.option.Option.t f32.t)::["unwrap_or"] α1 α2) in
              let* α4 : M.Val f32.t := M.alloc α3 in
              let* α5 :
                  core.result.Result.t
                    serde_json.value.Value.t
                    serde_json.error.Error.t :=
                M.call (serde_json.value.to_value (borrow α4)) in
              let* α6 : serde_json.value.Value.t :=
                M.call
                  ((core.result.Result.t
                        serde_json.value.Value.t
                        serde_json.error.Error.t)::["unwrap"]
                    α5) in
              let* α7 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    α6) in
              M.alloc α7 in
            let* _ : M.Val (core.option.Option.t serde_json.value.Value.t) :=
              let* α0 : ref str.t := M.read (mk_str "stream") in
              let* α1 : core.option.Option.t serde_json.value.Value.t :=
                M.call
                  ((std.collections.hash.map.HashMap.t
                        (ref str.t)
                        serde_json.value.Value.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut body)
                    α0
                    (serde_json.value.Value.Bool false)) in
              M.alloc α1 in
            let* _ : M.Val unit :=
              match_operator
                stop_sequences
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* stop_sequences := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t := M.read (mk_str "stop") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call
                            (serde_json.value.to_value
                              (borrow stop_sequences)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* _ : M.Val unit :=
              match_operator
                top_p
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.option.Option.Some _ =>
                      let γ0_0 := core.option.Option.Get_Some_0 γ in
                      let* top_p := M.copy γ0_0 in
                      let* _ :
                          M.Val
                            (core.option.Option.t serde_json.value.Value.t) :=
                        let* α0 : ref str.t := M.read (mk_str "top_p") in
                        let* α1 :
                            core.result.Result.t
                              serde_json.value.Value.t
                              serde_json.error.Error.t :=
                          M.call (serde_json.value.to_value (borrow top_p)) in
                        let* α2 : serde_json.value.Value.t :=
                          M.call
                            ((core.result.Result.t
                                  serde_json.value.Value.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 :
                            core.option.Option.t serde_json.value.Value.t :=
                          M.call
                            ((std.collections.hash.map.HashMap.t
                                  (ref str.t)
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)::["insert"]
                              (borrow_mut body)
                              α0
                              α2) in
                        M.alloc α3 in
                      M.alloc tt
                    | _ => M.break_match
                    end) :
                    M (M.Val unit);
                  fun γ => (M.alloc tt) : M (M.Val unit)
                ] in
            let* client : M.Val reqwest.async_impl.client.Client.t :=
              let* α0 : reqwest.async_impl.client.Client.t :=
                M.call reqwest.async_impl.client.Client.t::["new"] in
              M.alloc α0 in
            let* res : M.Val reqwest.async_impl.response.Response.t :=
              let* α0 :
                  (core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        reqwest.async_impl.response.Response.t
                        reqwest.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : _ -> M _ :=
                ltac:(M.get_method (fun ℐ =>
                  core.future.into_future.IntoFuture.into_future
                    (Self := _)
                    (Trait := ℐ))) in
              let* α2 : alloc.string.String.t := M.read url in
              let* α3 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.client.Client.t::["post"]
                    (borrow client)
                    α2) in
              let* α4 :
                  http.header.map.HeaderMap.t http.header.value.HeaderValue.t :=
                M.read headers in
              let* α5 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["headers"]
                    α3
                    α4) in
              let* α6 : reqwest.async_impl.request.RequestBuilder.t :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["json"]
                    α5
                    (borrow body)) in
              let* α7 : _ :=
                M.call
                  (reqwest.async_impl.request.RequestBuilder.t::["send"] α6) in
              let* α8 : _ := M.call (α1 α7) in
              let* α9 : M.Val _ := M.alloc α8 in
              let* α10 :
                  M.Val
                    (core.result.Result.t
                      reqwest.async_impl.response.Response.t
                      reqwest.error.Error.t) :=
                match_operator
                  α9
                  [
                    fun γ =>
                      (let* __awaitee := M.copy γ in
                      M.loop
                        (let* _ : M.Val unit :=
                          let* α0 :
                              (core.pin.Pin.t (mut_ref _)) ->
                                (mut_ref core.task.wake.Context.t) ->
                                M (core.task.poll.Poll.t _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.future.Future.poll
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 : core.pin.Pin.t (mut_ref _) :=
                            M.call
                              ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                (borrow_mut __awaitee)) in
                          let* α2 : core.future.ResumeTy.t :=
                            M.read _task_context in
                          let* α3 : mut_ref core.task.wake.Context.t :=
                            M.call (core.future.get_context α2) in
                          let* α4 :
                              core.task.poll.Poll.t
                                (core.result.Result.t
                                  reqwest.async_impl.response.Response.t
                                  reqwest.error.Error.t) :=
                            M.call (α0 α1 α3) in
                          let* α5 :
                              M.Val
                                (core.task.poll.Poll.t
                                  (core.result.Result.t
                                    reqwest.async_impl.response.Response.t
                                    reqwest.error.Error.t)) :=
                            M.alloc α4 in
                          match_operator
                            α5
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Ready _ =>
                                  let γ0_0 :=
                                    core.task.poll.Poll.Get_Ready_0 γ in
                                  let* result := M.copy γ0_0 in
                                  let* α0 : M.Val never.t := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2
                                | _ => M.break_match
                                end) :
                                M (M.Val unit);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Pending => M.alloc tt
                                | _ => M.break_match
                                end) :
                                M (M.Val unit)
                            ] in
                        let* _ : M.Val unit :=
                          let* α0 : M.Val unit := M.alloc tt in
                          let* α1 : M.Val core.future.ResumeTy.t := yield α0 in
                          let* α2 : core.future.ResumeTy.t := M.read α1 in
                          assign _task_context α2 in
                        M.alloc tt)) :
                      M
                        (M.Val
                          (core.result.Result.t
                            reqwest.async_impl.response.Response.t
                            reqwest.error.Error.t))
                  ] in
              let* α11 :
                  core.result.Result.t
                    reqwest.async_impl.response.Response.t
                    reqwest.error.Error.t :=
                M.read α10 in
              let* α12 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      reqwest.error.Error.t)
                    reqwest.async_impl.response.Response.t :=
                M.call (α0 α11) in
              let* α13 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      reqwest.async_impl.response.Response.t) :=
                M.alloc α12 in
              let* α14 : M.Val reqwest.async_impl.response.Response.t :=
                match_operator
                  α13
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              reqwest.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              assistants_extra.openai.ChatCompletion.t
                              assistants_extra.openai.OpenAIApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : reqwest.async_impl.response.Response.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val reqwest.async_impl.response.Response.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val reqwest.async_impl.response.Response.t)
                  ] in
              M.copy α14 in
            let* status : M.Val http.status.StatusCode.t :=
              let* α0 : http.status.StatusCode.t :=
                M.call
                  (reqwest.async_impl.response.Response.t::["status"]
                    (borrow res)) in
              M.alloc α0 in
            let* raw_res : M.Val alloc.string.String.t :=
              let* α0 :
                  (core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        alloc.string.String.t
                        reqwest.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : _ -> M _ :=
                ltac:(M.get_method (fun ℐ =>
                  core.future.into_future.IntoFuture.into_future
                    (Self := _)
                    (Trait := ℐ))) in
              let* α2 : reqwest.async_impl.response.Response.t := M.read res in
              let* α3 : _ :=
                M.call (reqwest.async_impl.response.Response.t::["text"] α2) in
              let* α4 : _ := M.call (α1 α3) in
              let* α5 : M.Val _ := M.alloc α4 in
              let* α6 :
                  M.Val
                    (core.result.Result.t
                      alloc.string.String.t
                      reqwest.error.Error.t) :=
                match_operator
                  α5
                  [
                    fun γ =>
                      (let* __awaitee := M.copy γ in
                      M.loop
                        (let* _ : M.Val unit :=
                          let* α0 :
                              (core.pin.Pin.t (mut_ref _)) ->
                                (mut_ref core.task.wake.Context.t) ->
                                M (core.task.poll.Poll.t _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.future.Future.poll
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 : core.pin.Pin.t (mut_ref _) :=
                            M.call
                              ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                (borrow_mut __awaitee)) in
                          let* α2 : core.future.ResumeTy.t :=
                            M.read _task_context in
                          let* α3 : mut_ref core.task.wake.Context.t :=
                            M.call (core.future.get_context α2) in
                          let* α4 :
                              core.task.poll.Poll.t
                                (core.result.Result.t
                                  alloc.string.String.t
                                  reqwest.error.Error.t) :=
                            M.call (α0 α1 α3) in
                          let* α5 :
                              M.Val
                                (core.task.poll.Poll.t
                                  (core.result.Result.t
                                    alloc.string.String.t
                                    reqwest.error.Error.t)) :=
                            M.alloc α4 in
                          match_operator
                            α5
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Ready _ =>
                                  let γ0_0 :=
                                    core.task.poll.Poll.Get_Ready_0 γ in
                                  let* result := M.copy γ0_0 in
                                  let* α0 : M.Val never.t := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2
                                | _ => M.break_match
                                end) :
                                M (M.Val unit);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.task.poll.Poll.Pending => M.alloc tt
                                | _ => M.break_match
                                end) :
                                M (M.Val unit)
                            ] in
                        let* _ : M.Val unit :=
                          let* α0 : M.Val unit := M.alloc tt in
                          let* α1 : M.Val core.future.ResumeTy.t := yield α0 in
                          let* α2 : core.future.ResumeTy.t := M.read α1 in
                          assign _task_context α2 in
                        M.alloc tt)) :
                      M
                        (M.Val
                          (core.result.Result.t
                            alloc.string.String.t
                            reqwest.error.Error.t))
                  ] in
              let* α7 :
                  core.result.Result.t
                    alloc.string.String.t
                    reqwest.error.Error.t :=
                M.read α6 in
              let* α8 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      reqwest.error.Error.t)
                    alloc.string.String.t :=
                M.call (α0 α7) in
              let* α9 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        reqwest.error.Error.t)
                      alloc.string.String.t) :=
                M.alloc α8 in
              let* α10 : M.Val alloc.string.String.t :=
                match_operator
                  α9
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                reqwest.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t)
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  reqwest.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              reqwest.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              assistants_extra.openai.ChatCompletion.t
                              assistants_extra.openai.OpenAIApiError.t :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : alloc.string.String.t := never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val alloc.string.String.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val alloc.string.String.t)
                  ] in
              M.copy α10 in
            let* _ : M.Val unit :=
              let* α0 : bool.t :=
                M.call
                  (http.status.StatusCode.t::["is_success"] (borrow status)) in
              let* α1 : M.Val bool.t := M.alloc (UnOp.not α0) in
              let* α2 : bool.t := M.read (use α1) in
              if α2 then
                let* res : M.Val alloc.string.String.t :=
                  let* α0 : ref str.t :=
                    M.read (mk_str "API request failed with status ") in
                  let* α1 : ref str.t := M.read (mk_str ": ") in
                  let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
                  let* α3 : core.fmt.rt.Argument.t :=
                    M.call
                      (core.fmt.rt.Argument.t::["new_display"]
                        (borrow status)) in
                  let* α4 : core.fmt.rt.Argument.t :=
                    M.call
                      (core.fmt.rt.Argument.t::["new_display"]
                        (borrow raw_res)) in
                  let* α5 : M.Val (array core.fmt.rt.Argument.t) :=
                    M.alloc [ α3; α4 ] in
                  let* α6 : core.fmt.Arguments.t :=
                    M.call
                      (core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion "Unsize" (borrow α2))
                        (pointer_coercion "Unsize" (borrow α5))) in
                  let* α7 : alloc.string.String.t :=
                    M.call (alloc.fmt.format α6) in
                  M.alloc α7 in
                let* α0 : alloc.string.String.t := M.read res in
                let* α1 : (ref str.t) -> M alloc.string.String.t :=
                  ltac:(M.get_method (fun ℐ =>
                    alloc.string.ToString.to_string
                      (Self := str.t)
                      (Trait := ℐ))) in
                let* α2 : ref str.t := M.read (mk_str "API Request Error") in
                let* α3 : alloc.string.String.t := M.call (α1 α2) in
                let* α4 : M.Val never.t :=
                  return_
                    (core.result.Result.Err
                      (assistants_extra.openai.OpenAIApiError.ApiError
                        {|
                          assistants_extra.openai.ApiErrorResponse.error :=
                            {|
                              assistants_extra.openai.ApiErrorDetail.message :=
                                α0;
                              assistants_extra.openai.ApiErrorDetail.type := α3;
                              assistants_extra.openai.ApiErrorDetail.param :=
                                core.option.Option.None;
                              assistants_extra.openai.ApiErrorDetail.code :=
                                core.option.Option.None;
                            |};
                        |})) in
                let* α5 := M.read α4 in
                let* α6 : unit := never_to_any α5 in
                M.alloc α6
              else
                M.alloc tt in
            let* api_res :
                M.Val
                  (core.result.Result.t
                    assistants_extra.openai.ChatCompletion.t
                    serde_json.error.Error.t) :=
              let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.deref.Deref.deref
                    (Self := alloc.string.String.t)
                    (Trait := ℐ))) in
              let* α1 : ref str.t := M.call (α0 (borrow raw_res)) in
              let* α2 :
                  core.result.Result.t
                    assistants_extra.openai.ChatCompletion.t
                    serde_json.error.Error.t :=
                M.call (serde_json.de.from_str α1) in
              M.alloc α2 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    assistants_extra.openai.ChatCompletion.t
                    assistants_extra.openai.OpenAIApiError.t) :=
              match_operator
                api_res
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.result.Result.Ok _ =>
                      let γ0_0 := core.result.Result.Get_Ok_0 γ in
                      let* res_body := M.copy γ0_0 in
                      let* α0 : assistants_extra.openai.ChatCompletion.t :=
                        M.read res_body in
                      M.alloc (core.result.Result.Ok α0)
                    | _ => M.break_match
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          assistants_extra.openai.ChatCompletion.t
                          assistants_extra.openai.OpenAIApiError.t));
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | core.result.Result.Err _ =>
                      let γ0_0 := core.result.Result.Get_Err_0 γ in
                      let* err := M.copy γ0_0 in
                      let* α0 : serde_json.error.Error.t := M.read err in
                      M.alloc
                        (core.result.Result.Err
                          (assistants_extra.openai.OpenAIApiError.JSONDeserialize
                            α0))
                    | _ => M.break_match
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          assistants_extra.openai.ChatCompletion.t
                          assistants_extra.openai.OpenAIApiError.t))
                ] in
            M.read (use α0)) :
            M
              (core.result.Result.t
                assistants_extra.openai.ChatCompletion.t
                assistants_extra.openai.OpenAIApiError.t)
        ]) :
      M
        (core.result.Result.t
          assistants_extra.openai.ChatCompletion.t
          assistants_extra.openai.OpenAIApiError.t)).

Module llm.
  (*
  pub async fn llm(
      model_name: &str,
      model_url: Option<String>,
      system_prompt: &str,
      user_prompt: &str,
      temperature: Option<f32>,
      mut max_tokens_to_sample: i32,
      stop_sequences: Option<Vec<String>>,
      top_p: Option<f32>,
      top_k: Option<i32>,
      metadata: Option<HashMap<String, String>>,
      context_size: Option<i32>,
  ) -> Result<String, Box<dyn Error>> {
      let messages = vec![
          Message {
              role: "system".to_string(),
              content: system_prompt.to_string(),
          },
          Message {
              role: "user".to_string(),
              content: user_prompt.to_string(),
          },
      ];
  
      if model_name.contains("claude") {
          let instructions = format!(
              "<system>\n{}\n</system>\n<user>\n{}\n</user>",
              system_prompt, user_prompt
          );
          info!("Calling Claude API with instructions: {}", instructions);
          // if max_tokens_to_sample == -1 we just use maximum length based on current prompt
          if max_tokens_to_sample == -1 {
              let bpe = p50k_base().unwrap();
              let tokens = bpe.encode_with_special_tokens(&instructions);
              max_tokens_to_sample = context_size.unwrap_or(4096) - tokens.len() as i32;
          }
  
          call_anthropic_api(
              instructions,
              max_tokens_to_sample,
              Some(model_name.to_string()),
              temperature,
              stop_sequences,
              top_p,
              top_k,
              metadata,
          )
          .await
          .map(|res| res.completion)
          .map_err(|e| {
              error!("Error calling Claude API: {}", e);
              Box::new(e) as Box<dyn Error>
          })
      } else if model_name.contains("gpt") {
          info!("Calling OpenAI API with messages: {:?}", messages);
          if max_tokens_to_sample == -1 {
              let bpe = p50k_base().unwrap();
              let tokens = bpe.encode_with_special_tokens(&serde_json::to_string(&messages).unwrap());
              max_tokens_to_sample = context_size.unwrap_or(4096) - tokens.len() as i32;
          }
          call_openai_api_with_messages(
              messages,
              max_tokens_to_sample,
              Some(model_name.to_string()),
              temperature,
              stop_sequences,
              top_p,
          )
          .await
          .map(|res| res.choices[0].message.content.clone())
          .map_err(|e| {
              error!("Error calling OpenAI API: {}", e);
              Box::new(e) as Box<dyn Error>
          })
      } else if model_name.contains("/") {
          // ! super hacky
          let model_name = model_name.split('/').last().unwrap_or_default();
          let url = model_url.unwrap_or_else(|| {
              std::env::var("MODEL_URL")
                  .unwrap_or_else(|_| String::from("http://localhost:8000/v1/chat/completions"))
          });
          info!(
              "Calling Open Source LLM through OpenAI API with messages: {:?}",
              messages
          );
          if max_tokens_to_sample == -1 {
              let bpe = p50k_base().unwrap();
              let tokens = bpe.encode_with_special_tokens(&serde_json::to_string(&messages).unwrap());
              max_tokens_to_sample = context_size.unwrap_or(4096) - tokens.len() as i32;
              println!("max_tokens_to_sample: {}", max_tokens_to_sample);
          }
          call_open_source_openai_api_with_messages(
              messages,
              max_tokens_to_sample,
              model_name.to_string(),
              temperature,
              stop_sequences,
              top_p,
              url,
          )
          .await
          .map(|res| res.choices[0].message.content.clone())
          .map_err(|e| {
              error!("Error calling Open Source LLM through OpenAI API: {}", e);
              Box::new(e) as Box<dyn Error>
          })
      } else {
          Err(Box::new(std::io::Error::new(
              std::io::ErrorKind::InvalidInput,
              "Unknown model",
          )))
      }
  }
  *)
  Definition llm
      (model_name : ref str.t)
      (model_url : core.option.Option.t alloc.string.String.t)
      (system_prompt : ref str.t)
      (user_prompt : ref str.t)
      (temperature : core.option.Option.t f32.t)
      (max_tokens_to_sample : i32.t)
      (stop_sequences
        :
        core.option.Option.t
          (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A))
      (top_p : core.option.Option.t f32.t)
      (top_k : core.option.Option.t i32.t)
      (metadata
        :
        core.option.Option.t
          (std.collections.hash.map.HashMap.t
            alloc.string.String.t
            alloc.string.String.t
            std.collections.hash.map.HashMap.Default.S))
      (context_size : core.option.Option.t i32.t)
      : M OpaqueDef :=
    let* model_name := M.alloc model_name in
    let* model_url := M.alloc model_url in
    let* system_prompt := M.alloc system_prompt in
    let* user_prompt := M.alloc user_prompt in
    let* temperature := M.alloc temperature in
    let* max_tokens_to_sample := M.alloc max_tokens_to_sample in
    let* stop_sequences := M.alloc stop_sequences in
    let* top_p := M.alloc top_p in
    let* top_k := M.alloc top_k in
    let* metadata := M.alloc metadata in
    let* context_size := M.alloc context_size in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* model_name : M.Val (ref str.t) := M.copy model_name in
              let* model_url :
                  M.Val (core.option.Option.t alloc.string.String.t) :=
                M.copy model_url in
              let* system_prompt : M.Val (ref str.t) := M.copy system_prompt in
              let* user_prompt : M.Val (ref str.t) := M.copy user_prompt in
              let* temperature : M.Val (core.option.Option.t f32.t) :=
                M.copy temperature in
              let* max_tokens_to_sample : M.Val i32.t :=
                M.copy max_tokens_to_sample in
              let* stop_sequences :
                  M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        alloc.string.String.t
                        alloc.alloc.Global.t)) :=
                M.copy stop_sequences in
              let* top_p : M.Val (core.option.Option.t f32.t) := M.copy top_p in
              let* top_k : M.Val (core.option.Option.t i32.t) := M.copy top_k in
              let* metadata :
                  M.Val
                    (core.option.Option.t
                      (std.collections.hash.map.HashMap.t
                        alloc.string.String.t
                        alloc.string.String.t
                        std.hash.random.RandomState.t)) :=
                M.copy metadata in
              let* context_size : M.Val (core.option.Option.t i32.t) :=
                M.copy context_size in
              let* messages :
                  M.Val
                    (alloc.vec.Vec.t
                      assistants_extra.openai.Message.t
                      alloc.alloc.Global.t) :=
                let* α0 : (ref str.t) -> M alloc.string.String.t :=
                  ltac:(M.get_method (fun ℐ =>
                    alloc.string.ToString.to_string
                      (Self := str.t)
                      (Trait := ℐ))) in
                let* α1 : ref str.t := M.read (mk_str "system") in
                let* α2 : alloc.string.String.t := M.call (α0 α1) in
                let* α3 : (ref str.t) -> M alloc.string.String.t :=
                  ltac:(M.get_method (fun ℐ =>
                    alloc.string.ToString.to_string
                      (Self := str.t)
                      (Trait := ℐ))) in
                let* α4 : ref str.t := M.read system_prompt in
                let* α5 : alloc.string.String.t := M.call (α3 α4) in
                let* α6 : (ref str.t) -> M alloc.string.String.t :=
                  ltac:(M.get_method (fun ℐ =>
                    alloc.string.ToString.to_string
                      (Self := str.t)
                      (Trait := ℐ))) in
                let* α7 : ref str.t := M.read (mk_str "user") in
                let* α8 : alloc.string.String.t := M.call (α6 α7) in
                let* α9 : (ref str.t) -> M alloc.string.String.t :=
                  ltac:(M.get_method (fun ℐ =>
                    alloc.string.ToString.to_string
                      (Self := str.t)
                      (Trait := ℐ))) in
                let* α10 : ref str.t := M.read user_prompt in
                let* α11 : alloc.string.String.t := M.call (α9 α10) in
                let* α12 : M.Val (array assistants_extra.openai.Message.t) :=
                  M.alloc
                    [
                      {|
                        assistants_extra.openai.Message.role := α2;
                        assistants_extra.openai.Message.content := α5;
                      |};
                      {|
                        assistants_extra.openai.Message.role := α8;
                        assistants_extra.openai.Message.content := α11;
                      |}
                    ] in
                let* α13 :
                    M.Val
                      (alloc.boxed.Box.t
                        (array assistants_extra.openai.Message.t)
                        alloc.alloc.Global.t) :=
                  M.call
                    ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                      α12) in
                let* α14 :
                    alloc.boxed.Box.t
                      (array assistants_extra.openai.Message.t)
                      alloc.alloc.Global.t :=
                  M.read α13 in
                let* α15 :
                    alloc.vec.Vec.t
                      assistants_extra.openai.Message.t
                      alloc.alloc.Global.t :=
                  M.call
                    ((slice assistants_extra.openai.Message.t)::["into_vec"]
                      (pointer_coercion "Unsize" α14)) in
                M.alloc α15 in
              let* α0 : ref str.t := M.read model_name in
              let* α1 : ref str.t := M.read (mk_str "claude") in
              let* α2 : bool.t := M.call (str.t::["contains"] α0 α1) in
              let* α3 : M.Val bool.t := M.alloc α2 in
              let* α4 : bool.t := M.read (use α3) in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      alloc.string.String.t
                      (alloc.boxed.Box.t
                        (dyn [core.error.Error.Trait])
                        alloc.alloc.Global.t)) :=
                if α4 then
                  let* instructions : M.Val alloc.string.String.t :=
                    let* res : M.Val alloc.string.String.t :=
                      let* α0 : ref str.t := M.read (mk_str "<system>
") in
                      let* α1 : ref str.t :=
                        M.read (mk_str "
</system>
<user>
") in
                      let* α2 : ref str.t := M.read (mk_str "
</user>") in
                      let* α3 : M.Val (array (ref str.t)) :=
                        M.alloc [ α0; α1; α2 ] in
                      let* α4 : core.fmt.rt.Argument.t :=
                        M.call
                          (core.fmt.rt.Argument.t::["new_display"]
                            (borrow system_prompt)) in
                      let* α5 : core.fmt.rt.Argument.t :=
                        M.call
                          (core.fmt.rt.Argument.t::["new_display"]
                            (borrow user_prompt)) in
                      let* α6 : M.Val (array core.fmt.rt.Argument.t) :=
                        M.alloc [ α4; α5 ] in
                      let* α7 : core.fmt.Arguments.t :=
                        M.call
                          (core.fmt.Arguments.t::["new_v1"]
                            (pointer_coercion "Unsize" (borrow α3))
                            (pointer_coercion "Unsize" (borrow α6))) in
                      let* α8 : alloc.string.String.t :=
                        M.call (alloc.fmt.format α7) in
                      M.alloc α8 in
                    M.copy res in
                  let* _ : M.Val unit :=
                    let* lvl : M.Val log.Level.t := M.alloc log.Level.Info in
                    let* α0 :
                        (ref log.Level.t) ->
                          (ref log.LevelFilter.t) ->
                          M bool.t :=
                      ltac:(M.get_method (fun ℐ =>
                        core.cmp.PartialOrd.le
                          (Self := log.Level.t)
                          (Rhs := log.LevelFilter.t)
                          (Trait := ℐ))) in
                    let* α1 : bool.t :=
                      M.call (α0 (borrow lvl) (borrow log.STATIC_MAX_LEVEL)) in
                    let* α2 :
                        (ref log.Level.t) ->
                          (ref log.LevelFilter.t) ->
                          M bool.t :=
                      ltac:(M.get_method (fun ℐ =>
                        core.cmp.PartialOrd.le
                          (Self := log.Level.t)
                          (Rhs := log.LevelFilter.t)
                          (Trait := ℐ))) in
                    let* α3 : log.LevelFilter.t := M.call log.max_level in
                    let* α4 : M.Val log.LevelFilter.t := M.alloc α3 in
                    let* α5 : bool.t := M.call (α2 (borrow lvl) (borrow α4)) in
                    let* α6 : M.Val bool.t := M.alloc (BinOp.Pure.and α1 α5) in
                    let* α7 : bool.t := M.read (use α6) in
                    if α7 then
                      let* _ : M.Val unit :=
                        let* α0 : ref str.t :=
                          M.read
                            (mk_str "Calling Claude API with instructions: ") in
                        let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
                        let* α2 : core.fmt.rt.Argument.t :=
                          M.call
                            (core.fmt.rt.Argument.t::["new_display"]
                              (borrow instructions)) in
                        let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                          M.alloc [ α2 ] in
                        let* α4 : core.fmt.Arguments.t :=
                          M.call
                            (core.fmt.Arguments.t::["new_v1"]
                              (pointer_coercion "Unsize" (borrow α1))
                              (pointer_coercion "Unsize" (borrow α3))) in
                        let* α5 : log.Level.t := M.read lvl in
                        let* α6 : ref str.t :=
                          M.read (mk_str "assistants_extra::llm") in
                        let* α7 : ref str.t :=
                          M.read (mk_str "assistants_extra::llm") in
                        let* α8 : ref str.t :=
                          M.read (mk_str "assistants-extra/src/llm.rs") in
                        let* α9 :
                            M.Val (((ref str.t) * (ref str.t)) * (ref str.t)) :=
                          M.alloc (α6, α7, α8) in
                        let* α10 : unit :=
                          M.call
                            (log.__private_api.log
                              α4
                              α5
                              (borrow α9)
                              ((Integer.of_Z 40) : u32.t)
                              core.option.Option.None) in
                        M.alloc α10 in
                      M.alloc tt
                    else
                      M.alloc tt in
                  let* _ : M.Val unit :=
                    let* α0 : i32.t := M.read max_tokens_to_sample in
                    let* α1 : M.Val bool.t :=
                      M.alloc
                        (BinOp.Pure.eq α0 ((Integer.of_Z (-1)) : i32.t)) in
                    let* α2 : bool.t := M.read (use α1) in
                    if α2 then
                      let* bpe : M.Val tiktoken_rs.vendor_tiktoken.CoreBPE.t :=
                        let* α0 :
                            core.result.Result.t
                              tiktoken_rs.vendor_tiktoken.CoreBPE.t
                              anyhow.Error.t :=
                          M.call
                            tiktoken_rs.tiktoken_ext.openai_public.p50k_base in
                        let* α1 : tiktoken_rs.vendor_tiktoken.CoreBPE.t :=
                          M.call
                            ((core.result.Result.t
                                  tiktoken_rs.vendor_tiktoken.CoreBPE.t
                                  anyhow.Error.t)::["unwrap"]
                              α0) in
                        M.alloc α1 in
                      let* tokens :
                          M.Val
                            (alloc.vec.Vec.t usize.t alloc.alloc.Global.t) :=
                        let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.deref.Deref.deref
                              (Self := alloc.string.String.t)
                              (Trait := ℐ))) in
                        let* α1 : ref str.t :=
                          M.call (α0 (borrow instructions)) in
                        let* α2 :
                            alloc.vec.Vec.t usize.t alloc.alloc.Global.t :=
                          M.call
                            (tiktoken_rs.vendor_tiktoken.CoreBPE.t::["encode_with_special_tokens"]
                              (borrow bpe)
                              α1) in
                        M.alloc α2 in
                      let* _ : M.Val unit :=
                        let* α0 : core.option.Option.t i32.t :=
                          M.read context_size in
                        let* α1 : i32.t :=
                          M.call
                            ((core.option.Option.t i32.t)::["unwrap_or"]
                              α0
                              ((Integer.of_Z 4096) : i32.t)) in
                        let* α2 : usize.t :=
                          M.call
                            ((alloc.vec.Vec.t
                                  usize.t
                                  alloc.alloc.Global.t)::["len"]
                              (borrow tokens)) in
                        let* α3 : i32.t := BinOp.Panic.sub α1 (rust_cast α2) in
                        assign max_tokens_to_sample α3 in
                      M.alloc tt
                    else
                      M.alloc tt in
                  let* α0 : _ -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      core.future.into_future.IntoFuture.into_future
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : alloc.string.String.t := M.read instructions in
                  let* α2 : i32.t := M.read max_tokens_to_sample in
                  let* α3 : (ref str.t) -> M alloc.string.String.t :=
                    ltac:(M.get_method (fun ℐ =>
                      alloc.string.ToString.to_string
                        (Self := str.t)
                        (Trait := ℐ))) in
                  let* α4 : ref str.t := M.read model_name in
                  let* α5 : alloc.string.String.t := M.call (α3 α4) in
                  let* α6 : core.option.Option.t f32.t := M.read temperature in
                  let* α7 :
                      core.option.Option.t
                        (alloc.vec.Vec.t
                          alloc.string.String.t
                          alloc.alloc.Global.t) :=
                    M.read stop_sequences in
                  let* α8 : core.option.Option.t f32.t := M.read top_p in
                  let* α9 : core.option.Option.t i32.t := M.read top_k in
                  let* α10 :
                      core.option.Option.t
                        (std.collections.hash.map.HashMap.t
                          alloc.string.String.t
                          alloc.string.String.t
                          std.hash.random.RandomState.t) :=
                    M.read metadata in
                  let* α11 : _ :=
                    M.call
                      (assistants_extra.anthropic.call_anthropic_api
                        α1
                        α2
                        (core.option.Option.Some α5)
                        α6
                        α7
                        α8
                        α9
                        α10) in
                  let* α12 : _ := M.call (α0 α11) in
                  let* α13 : M.Val _ := M.alloc α12 in
                  let* α14 :
                      M.Val
                        (core.result.Result.t
                          assistants_extra.anthropic.ResponseBody.t
                          assistants_extra.anthropic.ApiError.t) :=
                    match_operator
                      α13
                      [
                        fun γ =>
                          (let* __awaitee := M.copy γ in
                          M.loop
                            (let* _ : M.Val unit :=
                              let* α0 :
                                  (core.pin.Pin.t (mut_ref _)) ->
                                    (mut_ref core.task.wake.Context.t) ->
                                    M (core.task.poll.Poll.t _) :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.future.future.Future.poll
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : core.pin.Pin.t (mut_ref _) :=
                                M.call
                                  ((core.pin.Pin.t
                                        (mut_ref _))::["new_unchecked"]
                                    (borrow_mut __awaitee)) in
                              let* α2 : core.future.ResumeTy.t :=
                                M.read _task_context in
                              let* α3 : mut_ref core.task.wake.Context.t :=
                                M.call (core.future.get_context α2) in
                              let* α4 :
                                  core.task.poll.Poll.t
                                    (core.result.Result.t
                                      assistants_extra.anthropic.ResponseBody.t
                                      assistants_extra.anthropic.ApiError.t) :=
                                M.call (α0 α1 α3) in
                              let* α5 :
                                  M.Val
                                    (core.task.poll.Poll.t
                                      (core.result.Result.t
                                        assistants_extra.anthropic.ResponseBody.t
                                        assistants_extra.anthropic.ApiError.t)) :=
                                M.alloc α4 in
                              match_operator
                                α5
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    | core.task.poll.Poll.Ready _ =>
                                      let γ0_0 :=
                                        core.task.poll.Poll.Get_Ready_0 γ in
                                      let* result := M.copy γ0_0 in
                                      let* α0 : M.Val never.t := M.break in
                                      let* α1 := M.read α0 in
                                      let* α2 : unit := never_to_any α1 in
                                      M.alloc α2
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val unit);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    | core.task.poll.Poll.Pending => M.alloc tt
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val unit)
                                ] in
                            let* _ : M.Val unit :=
                              let* α0 : M.Val unit := M.alloc tt in
                              let* α1 : M.Val core.future.ResumeTy.t :=
                                yield α0 in
                              let* α2 : core.future.ResumeTy.t := M.read α1 in
                              assign _task_context α2 in
                            M.alloc tt)) :
                          M
                            (M.Val
                              (core.result.Result.t
                                assistants_extra.anthropic.ResponseBody.t
                                assistants_extra.anthropic.ApiError.t))
                      ] in
                  let* α15 :
                      core.result.Result.t
                        assistants_extra.anthropic.ResponseBody.t
                        assistants_extra.anthropic.ApiError.t :=
                    M.read α14 in
                  let* α16 :
                      core.result.Result.t
                        alloc.string.String.t
                        assistants_extra.anthropic.ApiError.t :=
                    M.call
                      ((core.result.Result.t
                            assistants_extra.anthropic.ResponseBody.t
                            assistants_extra.anthropic.ApiError.t)::["map"]
                        α15
                        (fun (α0 : assistants_extra.anthropic.ResponseBody.t) =>
                          (let* α0 := M.alloc α0 in
                          match_operator
                            α0
                            [
                              fun γ =>
                                (let* res := M.copy γ in
                                M.read
                                  (assistants_extra.anthropic.ResponseBody.Get_completion
                                    res)) :
                                M alloc.string.String.t
                            ]) :
                          M alloc.string.String.t)) in
                  let* α17 :
                      core.result.Result.t
                        alloc.string.String.t
                        (alloc.boxed.Box.t
                          (dyn [core.error.Error.Trait])
                          alloc.alloc.Global.t) :=
                    M.call
                      ((core.result.Result.t
                            alloc.string.String.t
                            assistants_extra.anthropic.ApiError.t)::["map_err"]
                        α16
                        (fun (α0 : assistants_extra.anthropic.ApiError.t) =>
                          (let* α0 := M.alloc α0 in
                          match_operator
                            α0
                            [
                              fun γ =>
                                (let* e := M.copy γ in
                                let* _ : M.Val unit :=
                                  let* lvl : M.Val log.Level.t :=
                                    M.alloc log.Level.Error in
                                  let* α0 :
                                      (ref log.Level.t) ->
                                        (ref log.LevelFilter.t) ->
                                        M bool.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.cmp.PartialOrd.le
                                        (Self := log.Level.t)
                                        (Rhs := log.LevelFilter.t)
                                        (Trait := ℐ))) in
                                  let* α1 : bool.t :=
                                    M.call
                                      (α0
                                        (borrow lvl)
                                        (borrow log.STATIC_MAX_LEVEL)) in
                                  let* α2 :
                                      (ref log.Level.t) ->
                                        (ref log.LevelFilter.t) ->
                                        M bool.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.cmp.PartialOrd.le
                                        (Self := log.Level.t)
                                        (Rhs := log.LevelFilter.t)
                                        (Trait := ℐ))) in
                                  let* α3 : log.LevelFilter.t :=
                                    M.call log.max_level in
                                  let* α4 : M.Val log.LevelFilter.t :=
                                    M.alloc α3 in
                                  let* α5 : bool.t :=
                                    M.call (α2 (borrow lvl) (borrow α4)) in
                                  let* α6 : M.Val bool.t :=
                                    M.alloc (BinOp.Pure.and α1 α5) in
                                  let* α7 : bool.t := M.read (use α6) in
                                  if α7 then
                                    let* _ : M.Val unit :=
                                      let* α0 : ref str.t :=
                                        M.read
                                          (mk_str
                                            "Error calling Claude API: ") in
                                      let* α1 : M.Val (array (ref str.t)) :=
                                        M.alloc [ α0 ] in
                                      let* α2 : core.fmt.rt.Argument.t :=
                                        M.call
                                          (core.fmt.rt.Argument.t::["new_display"]
                                            (borrow e)) in
                                      let* α3 :
                                          M.Val
                                            (array core.fmt.rt.Argument.t) :=
                                        M.alloc [ α2 ] in
                                      let* α4 : core.fmt.Arguments.t :=
                                        M.call
                                          (core.fmt.Arguments.t::["new_v1"]
                                            (pointer_coercion
                                              "Unsize"
                                              (borrow α1))
                                            (pointer_coercion
                                              "Unsize"
                                              (borrow α3))) in
                                      let* α5 : log.Level.t := M.read lvl in
                                      let* α6 : ref str.t :=
                                        M.read
                                          (mk_str "assistants_extra::llm") in
                                      let* α7 : ref str.t :=
                                        M.read
                                          (mk_str "assistants_extra::llm") in
                                      let* α8 : ref str.t :=
                                        M.read
                                          (mk_str
                                            "assistants-extra/src/llm.rs") in
                                      let* α9 :
                                          M.Val
                                            (((ref str.t) * (ref str.t))
                                            *
                                            (ref str.t)) :=
                                        M.alloc (α6, α7, α8) in
                                      let* α10 : unit :=
                                        M.call
                                          (log.__private_api.log
                                            α4
                                            α5
                                            (borrow α9)
                                            ((Integer.of_Z 61) : u32.t)
                                            core.option.Option.None) in
                                      M.alloc α10 in
                                    M.alloc tt
                                  else
                                    M.alloc tt in
                                let* α0 :
                                    assistants_extra.anthropic.ApiError.t :=
                                  M.read e in
                                let* α1 :
                                    alloc.boxed.Box.t
                                      assistants_extra.anthropic.ApiError.t
                                      alloc.alloc.Global.t :=
                                  M.call
                                    ((alloc.boxed.Box.t
                                          assistants_extra.anthropic.ApiError.t
                                          alloc.alloc.Global.t)::["new"]
                                      α0) in
                                let* α2 :
                                    M.Val
                                      (alloc.boxed.Box.t
                                        (dyn [core.error.Error.Trait])
                                        alloc.alloc.Global.t) :=
                                  M.alloc (pointer_coercion "Unsize" α1) in
                                let* α0 :
                                    alloc.boxed.Box.t
                                      (dyn [core.error.Error.Trait])
                                      alloc.alloc.Global.t :=
                                  M.read (use α2) in
                                M.pure (pointer_coercion "Unsize" α0)) :
                                M
                                  (alloc.boxed.Box.t
                                    (dyn [core.error.Error.Trait])
                                    alloc.alloc.Global.t)
                            ]) :
                          M
                            (alloc.boxed.Box.t
                              (dyn [core.error.Error.Trait])
                              alloc.alloc.Global.t))) in
                  M.alloc α17
                else
                  let* α0 : ref str.t := M.read model_name in
                  let* α1 : ref str.t := M.read (mk_str "gpt") in
                  let* α2 : bool.t := M.call (str.t::["contains"] α0 α1) in
                  let* α3 : M.Val bool.t := M.alloc α2 in
                  let* α4 : bool.t := M.read (use α3) in
                  if α4 then
                    let* _ : M.Val unit :=
                      let* lvl : M.Val log.Level.t := M.alloc log.Level.Info in
                      let* α0 :
                          (ref log.Level.t) ->
                            (ref log.LevelFilter.t) ->
                            M bool.t :=
                        ltac:(M.get_method (fun ℐ =>
                          core.cmp.PartialOrd.le
                            (Self := log.Level.t)
                            (Rhs := log.LevelFilter.t)
                            (Trait := ℐ))) in
                      let* α1 : bool.t :=
                        M.call
                          (α0 (borrow lvl) (borrow log.STATIC_MAX_LEVEL)) in
                      let* α2 :
                          (ref log.Level.t) ->
                            (ref log.LevelFilter.t) ->
                            M bool.t :=
                        ltac:(M.get_method (fun ℐ =>
                          core.cmp.PartialOrd.le
                            (Self := log.Level.t)
                            (Rhs := log.LevelFilter.t)
                            (Trait := ℐ))) in
                      let* α3 : log.LevelFilter.t := M.call log.max_level in
                      let* α4 : M.Val log.LevelFilter.t := M.alloc α3 in
                      let* α5 : bool.t :=
                        M.call (α2 (borrow lvl) (borrow α4)) in
                      let* α6 : M.Val bool.t :=
                        M.alloc (BinOp.Pure.and α1 α5) in
                      let* α7 : bool.t := M.read (use α6) in
                      if α7 then
                        let* _ : M.Val unit :=
                          let* α0 : ref str.t :=
                            M.read
                              (mk_str "Calling OpenAI API with messages: ") in
                          let* α1 : M.Val (array (ref str.t)) :=
                            M.alloc [ α0 ] in
                          let* α2 : core.fmt.rt.Argument.t :=
                            M.call
                              (core.fmt.rt.Argument.t::["new_debug"]
                                (borrow messages)) in
                          let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                            M.alloc [ α2 ] in
                          let* α4 : core.fmt.Arguments.t :=
                            M.call
                              (core.fmt.Arguments.t::["new_v1"]
                                (pointer_coercion "Unsize" (borrow α1))
                                (pointer_coercion "Unsize" (borrow α3))) in
                          let* α5 : log.Level.t := M.read lvl in
                          let* α6 : ref str.t :=
                            M.read (mk_str "assistants_extra::llm") in
                          let* α7 : ref str.t :=
                            M.read (mk_str "assistants_extra::llm") in
                          let* α8 : ref str.t :=
                            M.read (mk_str "assistants-extra/src/llm.rs") in
                          let* α9 :
                              M.Val
                                (((ref str.t) * (ref str.t)) * (ref str.t)) :=
                            M.alloc (α6, α7, α8) in
                          let* α10 : unit :=
                            M.call
                              (log.__private_api.log
                                α4
                                α5
                                (borrow α9)
                                ((Integer.of_Z 65) : u32.t)
                                core.option.Option.None) in
                          M.alloc α10 in
                        M.alloc tt
                      else
                        M.alloc tt in
                    let* _ : M.Val unit :=
                      let* α0 : i32.t := M.read max_tokens_to_sample in
                      let* α1 : M.Val bool.t :=
                        M.alloc
                          (BinOp.Pure.eq α0 ((Integer.of_Z (-1)) : i32.t)) in
                      let* α2 : bool.t := M.read (use α1) in
                      if α2 then
                        let* bpe :
                            M.Val tiktoken_rs.vendor_tiktoken.CoreBPE.t :=
                          let* α0 :
                              core.result.Result.t
                                tiktoken_rs.vendor_tiktoken.CoreBPE.t
                                anyhow.Error.t :=
                            M.call
                              tiktoken_rs.tiktoken_ext.openai_public.p50k_base in
                          let* α1 : tiktoken_rs.vendor_tiktoken.CoreBPE.t :=
                            M.call
                              ((core.result.Result.t
                                    tiktoken_rs.vendor_tiktoken.CoreBPE.t
                                    anyhow.Error.t)::["unwrap"]
                                α0) in
                          M.alloc α1 in
                        let* tokens :
                            M.Val
                              (alloc.vec.Vec.t usize.t alloc.alloc.Global.t) :=
                          let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.deref.Deref.deref
                                (Self := alloc.string.String.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                alloc.string.String.t
                                serde_json.error.Error.t :=
                            M.call
                              (serde_json.ser.to_string (borrow messages)) in
                          let* α2 : alloc.string.String.t :=
                            M.call
                              ((core.result.Result.t
                                    alloc.string.String.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 : M.Val alloc.string.String.t := M.alloc α2 in
                          let* α4 : ref str.t := M.call (α0 (borrow α3)) in
                          let* α5 :
                              alloc.vec.Vec.t usize.t alloc.alloc.Global.t :=
                            M.call
                              (tiktoken_rs.vendor_tiktoken.CoreBPE.t::["encode_with_special_tokens"]
                                (borrow bpe)
                                α4) in
                          M.alloc α5 in
                        let* _ : M.Val unit :=
                          let* α0 : core.option.Option.t i32.t :=
                            M.read context_size in
                          let* α1 : i32.t :=
                            M.call
                              ((core.option.Option.t i32.t)::["unwrap_or"]
                                α0
                                ((Integer.of_Z 4096) : i32.t)) in
                          let* α2 : usize.t :=
                            M.call
                              ((alloc.vec.Vec.t
                                    usize.t
                                    alloc.alloc.Global.t)::["len"]
                                (borrow tokens)) in
                          let* α3 : i32.t :=
                            BinOp.Panic.sub α1 (rust_cast α2) in
                          assign max_tokens_to_sample α3 in
                        M.alloc tt
                      else
                        M.alloc tt in
                    let* α0 : _ -> M _ :=
                      ltac:(M.get_method (fun ℐ =>
                        core.future.into_future.IntoFuture.into_future
                          (Self := _)
                          (Trait := ℐ))) in
                    let* α1 :
                        alloc.vec.Vec.t
                          assistants_extra.openai.Message.t
                          alloc.alloc.Global.t :=
                      M.read messages in
                    let* α2 : i32.t := M.read max_tokens_to_sample in
                    let* α3 : (ref str.t) -> M alloc.string.String.t :=
                      ltac:(M.get_method (fun ℐ =>
                        alloc.string.ToString.to_string
                          (Self := str.t)
                          (Trait := ℐ))) in
                    let* α4 : ref str.t := M.read model_name in
                    let* α5 : alloc.string.String.t := M.call (α3 α4) in
                    let* α6 : core.option.Option.t f32.t :=
                      M.read temperature in
                    let* α7 :
                        core.option.Option.t
                          (alloc.vec.Vec.t
                            alloc.string.String.t
                            alloc.alloc.Global.t) :=
                      M.read stop_sequences in
                    let* α8 : core.option.Option.t f32.t := M.read top_p in
                    let* α9 : _ :=
                      M.call
                        (assistants_extra.openai.call_openai_api_with_messages
                          α1
                          α2
                          (core.option.Option.Some α5)
                          α6
                          α7
                          α8) in
                    let* α10 : _ := M.call (α0 α9) in
                    let* α11 : M.Val _ := M.alloc α10 in
                    let* α12 :
                        M.Val
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            assistants_extra.openai.OpenAIApiError.t) :=
                      match_operator
                        α11
                        [
                          fun γ =>
                            (let* __awaitee := M.copy γ in
                            M.loop
                              (let* _ : M.Val unit :=
                                let* α0 :
                                    (core.pin.Pin.t (mut_ref _)) ->
                                      (mut_ref core.task.wake.Context.t) ->
                                      M (core.task.poll.Poll.t _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.future.future.Future.poll
                                      (Self := _)
                                      (Trait := ℐ))) in
                                let* α1 : core.pin.Pin.t (mut_ref _) :=
                                  M.call
                                    ((core.pin.Pin.t
                                          (mut_ref _))::["new_unchecked"]
                                      (borrow_mut __awaitee)) in
                                let* α2 : core.future.ResumeTy.t :=
                                  M.read _task_context in
                                let* α3 : mut_ref core.task.wake.Context.t :=
                                  M.call (core.future.get_context α2) in
                                let* α4 :
                                    core.task.poll.Poll.t
                                      (core.result.Result.t
                                        assistants_extra.openai.ChatCompletion.t
                                        assistants_extra.openai.OpenAIApiError.t) :=
                                  M.call (α0 α1 α3) in
                                let* α5 :
                                    M.Val
                                      (core.task.poll.Poll.t
                                        (core.result.Result.t
                                          assistants_extra.openai.ChatCompletion.t
                                          assistants_extra.openai.OpenAIApiError.t)) :=
                                  M.alloc α4 in
                                match_operator
                                  α5
                                  [
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | core.task.poll.Poll.Ready _ =>
                                        let γ0_0 :=
                                          core.task.poll.Poll.Get_Ready_0 γ in
                                        let* result := M.copy γ0_0 in
                                        let* α0 : M.Val never.t := M.break in
                                        let* α1 := M.read α0 in
                                        let* α2 : unit := never_to_any α1 in
                                        M.alloc α2
                                      | _ => M.break_match
                                      end) :
                                      M (M.Val unit);
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | core.task.poll.Poll.Pending =>
                                        M.alloc tt
                                      | _ => M.break_match
                                      end) :
                                      M (M.Val unit)
                                  ] in
                              let* _ : M.Val unit :=
                                let* α0 : M.Val unit := M.alloc tt in
                                let* α1 : M.Val core.future.ResumeTy.t :=
                                  yield α0 in
                                let* α2 : core.future.ResumeTy.t := M.read α1 in
                                assign _task_context α2 in
                              M.alloc tt)) :
                            M
                              (M.Val
                                (core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t))
                        ] in
                    let* α13 :
                        core.result.Result.t
                          assistants_extra.openai.ChatCompletion.t
                          assistants_extra.openai.OpenAIApiError.t :=
                      M.read α12 in
                    let* α14 :
                        core.result.Result.t
                          alloc.string.String.t
                          assistants_extra.openai.OpenAIApiError.t :=
                      M.call
                        ((core.result.Result.t
                              assistants_extra.openai.ChatCompletion.t
                              assistants_extra.openai.OpenAIApiError.t)::["map"]
                          α13
                          (fun
                              (α0 : assistants_extra.openai.ChatCompletion.t) =>
                            (let* α0 := M.alloc α0 in
                            match_operator
                              α0
                              [
                                fun γ =>
                                  (let* res := M.copy γ in
                                  let* α0 :
                                      (ref alloc.string.String.t) ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.clone.Clone.clone
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      (ref
                                          (alloc.vec.Vec.t
                                            assistants_extra.openai.Choice.t
                                            alloc.alloc.Global.t))
                                        ->
                                        usize.t ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.index.Index.index
                                        (Self :=
                                          alloc.vec.Vec.t
                                            assistants_extra.openai.Choice.t
                                            alloc.alloc.Global.t)
                                        (Idx := usize.t)
                                        (Trait := ℐ))) in
                                  let* α2 :
                                      ref assistants_extra.openai.Choice.t :=
                                    M.call
                                      (α1
                                        (borrow
                                          (assistants_extra.openai.ChatCompletion.Get_choices
                                            res))
                                        ((Integer.of_Z 0) : usize.t)) in
                                  M.call
                                    (α0
                                      (borrow
                                        (assistants_extra.openai.Message.Get_content
                                          (assistants_extra.openai.Choice.Get_message
                                            (deref α2)))))) :
                                  M alloc.string.String.t
                              ]) :
                            M alloc.string.String.t)) in
                    let* α15 :
                        core.result.Result.t
                          alloc.string.String.t
                          (alloc.boxed.Box.t
                            (dyn [core.error.Error.Trait])
                            alloc.alloc.Global.t) :=
                      M.call
                        ((core.result.Result.t
                              alloc.string.String.t
                              assistants_extra.openai.OpenAIApiError.t)::["map_err"]
                          α14
                          (fun
                              (α0 : assistants_extra.openai.OpenAIApiError.t) =>
                            (let* α0 := M.alloc α0 in
                            match_operator
                              α0
                              [
                                fun γ =>
                                  (let* e := M.copy γ in
                                  let* _ : M.Val unit :=
                                    let* lvl : M.Val log.Level.t :=
                                      M.alloc log.Level.Error in
                                    let* α0 :
                                        (ref log.Level.t) ->
                                          (ref log.LevelFilter.t) ->
                                          M bool.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.cmp.PartialOrd.le
                                          (Self := log.Level.t)
                                          (Rhs := log.LevelFilter.t)
                                          (Trait := ℐ))) in
                                    let* α1 : bool.t :=
                                      M.call
                                        (α0
                                          (borrow lvl)
                                          (borrow log.STATIC_MAX_LEVEL)) in
                                    let* α2 :
                                        (ref log.Level.t) ->
                                          (ref log.LevelFilter.t) ->
                                          M bool.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.cmp.PartialOrd.le
                                          (Self := log.Level.t)
                                          (Rhs := log.LevelFilter.t)
                                          (Trait := ℐ))) in
                                    let* α3 : log.LevelFilter.t :=
                                      M.call log.max_level in
                                    let* α4 : M.Val log.LevelFilter.t :=
                                      M.alloc α3 in
                                    let* α5 : bool.t :=
                                      M.call (α2 (borrow lvl) (borrow α4)) in
                                    let* α6 : M.Val bool.t :=
                                      M.alloc (BinOp.Pure.and α1 α5) in
                                    let* α7 : bool.t := M.read (use α6) in
                                    if α7 then
                                      let* _ : M.Val unit :=
                                        let* α0 : ref str.t :=
                                          M.read
                                            (mk_str
                                              "Error calling OpenAI API: ") in
                                        let* α1 : M.Val (array (ref str.t)) :=
                                          M.alloc [ α0 ] in
                                        let* α2 : core.fmt.rt.Argument.t :=
                                          M.call
                                            (core.fmt.rt.Argument.t::["new_display"]
                                              (borrow e)) in
                                        let* α3 :
                                            M.Val
                                              (array core.fmt.rt.Argument.t) :=
                                          M.alloc [ α2 ] in
                                        let* α4 : core.fmt.Arguments.t :=
                                          M.call
                                            (core.fmt.Arguments.t::["new_v1"]
                                              (pointer_coercion
                                                "Unsize"
                                                (borrow α1))
                                              (pointer_coercion
                                                "Unsize"
                                                (borrow α3))) in
                                        let* α5 : log.Level.t := M.read lvl in
                                        let* α6 : ref str.t :=
                                          M.read
                                            (mk_str "assistants_extra::llm") in
                                        let* α7 : ref str.t :=
                                          M.read
                                            (mk_str "assistants_extra::llm") in
                                        let* α8 : ref str.t :=
                                          M.read
                                            (mk_str
                                              "assistants-extra/src/llm.rs") in
                                        let* α9 :
                                            M.Val
                                              (((ref str.t) * (ref str.t))
                                              *
                                              (ref str.t)) :=
                                          M.alloc (α6, α7, α8) in
                                        let* α10 : unit :=
                                          M.call
                                            (log.__private_api.log
                                              α4
                                              α5
                                              (borrow α9)
                                              ((Integer.of_Z 82) : u32.t)
                                              core.option.Option.None) in
                                        M.alloc α10 in
                                      M.alloc tt
                                    else
                                      M.alloc tt in
                                  let* α0 :
                                      assistants_extra.openai.OpenAIApiError.t :=
                                    M.read e in
                                  let* α1 :
                                      alloc.boxed.Box.t
                                        assistants_extra.openai.OpenAIApiError.t
                                        alloc.alloc.Global.t :=
                                    M.call
                                      ((alloc.boxed.Box.t
                                            assistants_extra.openai.OpenAIApiError.t
                                            alloc.alloc.Global.t)::["new"]
                                        α0) in
                                  let* α2 :
                                      M.Val
                                        (alloc.boxed.Box.t
                                          (dyn [core.error.Error.Trait])
                                          alloc.alloc.Global.t) :=
                                    M.alloc (pointer_coercion "Unsize" α1) in
                                  let* α0 :
                                      alloc.boxed.Box.t
                                        (dyn [core.error.Error.Trait])
                                        alloc.alloc.Global.t :=
                                    M.read (use α2) in
                                  M.pure (pointer_coercion "Unsize" α0)) :
                                  M
                                    (alloc.boxed.Box.t
                                      (dyn [core.error.Error.Trait])
                                      alloc.alloc.Global.t)
                              ]) :
                            M
                              (alloc.boxed.Box.t
                                (dyn [core.error.Error.Trait])
                                alloc.alloc.Global.t))) in
                    M.alloc α15
                  else
                    let* α0 : ref str.t := M.read model_name in
                    let* α1 : ref str.t := M.read (mk_str "/") in
                    let* α2 : bool.t := M.call (str.t::["contains"] α0 α1) in
                    let* α3 : M.Val bool.t := M.alloc α2 in
                    let* α4 : bool.t := M.read (use α3) in
                    if α4 then
                      let* model_name : M.Val (ref str.t) :=
                        let* α0 :
                            (core.str.iter.Split.t char.t) ->
                              M (core.option.Option.t _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.iter.traits.iterator.Iterator.last
                              (Self := core.str.iter.Split.t char.t)
                              (Trait := ℐ))) in
                        let* α1 : ref str.t := M.read model_name in
                        let* α2 : core.str.iter.Split.t char.t :=
                          M.call (str.t::["split"] α1 "/"%char) in
                        let* α3 : core.option.Option.t (ref str.t) :=
                          M.call (α0 α2) in
                        let* α4 : ref str.t :=
                          M.call
                            ((core.option.Option.t
                                  (ref str.t))::["unwrap_or_default"]
                              α3) in
                        M.alloc α4 in
                      let* url : M.Val alloc.string.String.t :=
                        let* α0 : core.option.Option.t alloc.string.String.t :=
                          M.read model_url in
                        let* α1 : alloc.string.String.t :=
                          M.call
                            ((core.option.Option.t
                                  alloc.string.String.t)::["unwrap_or_else"]
                              α0
                              (fun (α0 : unit) =>
                                (let* α0 := M.alloc α0 in
                                match_operator
                                  α0
                                  [
                                    fun γ =>
                                      (let* α0 : ref str.t :=
                                        M.read (mk_str "MODEL_URL") in
                                      let* α1 :
                                          core.result.Result.t
                                            alloc.string.String.t
                                            std.env.VarError.t :=
                                        M.call (std.env.var α0) in
                                      M.call
                                        ((core.result.Result.t
                                              alloc.string.String.t
                                              std.env.VarError.t)::["unwrap_or_else"]
                                          α1
                                          (fun (α0 : std.env.VarError.t) =>
                                            (let* α0 := M.alloc α0 in
                                            match_operator
                                              α0
                                              [
                                                fun γ =>
                                                  (let* α0 :
                                                      (ref str.t) ->
                                                        M
                                                          alloc.string.String.t :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.convert.From.from
                                                        (Self :=
                                                          alloc.string.String.t)
                                                        (T := ref str.t)
                                                        (Trait := ℐ))) in
                                                  let* α1 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "http://localhost:8000/v1/chat/completions") in
                                                  M.call (α0 α1)) :
                                                  M alloc.string.String.t
                                              ]) :
                                            M alloc.string.String.t))) :
                                      M alloc.string.String.t
                                  ]) :
                                M alloc.string.String.t)) in
                        M.alloc α1 in
                      let* _ : M.Val unit :=
                        let* lvl : M.Val log.Level.t :=
                          M.alloc log.Level.Info in
                        let* α0 :
                            (ref log.Level.t) ->
                              (ref log.LevelFilter.t) ->
                              M bool.t :=
                          ltac:(M.get_method (fun ℐ =>
                            core.cmp.PartialOrd.le
                              (Self := log.Level.t)
                              (Rhs := log.LevelFilter.t)
                              (Trait := ℐ))) in
                        let* α1 : bool.t :=
                          M.call
                            (α0 (borrow lvl) (borrow log.STATIC_MAX_LEVEL)) in
                        let* α2 :
                            (ref log.Level.t) ->
                              (ref log.LevelFilter.t) ->
                              M bool.t :=
                          ltac:(M.get_method (fun ℐ =>
                            core.cmp.PartialOrd.le
                              (Self := log.Level.t)
                              (Rhs := log.LevelFilter.t)
                              (Trait := ℐ))) in
                        let* α3 : log.LevelFilter.t := M.call log.max_level in
                        let* α4 : M.Val log.LevelFilter.t := M.alloc α3 in
                        let* α5 : bool.t :=
                          M.call (α2 (borrow lvl) (borrow α4)) in
                        let* α6 : M.Val bool.t :=
                          M.alloc (BinOp.Pure.and α1 α5) in
                        let* α7 : bool.t := M.read (use α6) in
                        if α7 then
                          let* _ : M.Val unit :=
                            let* α0 : ref str.t :=
                              M.read
                                (mk_str
                                  "Calling Open Source LLM through OpenAI API with messages: ") in
                            let* α1 : M.Val (array (ref str.t)) :=
                              M.alloc [ α0 ] in
                            let* α2 : core.fmt.rt.Argument.t :=
                              M.call
                                (core.fmt.rt.Argument.t::["new_debug"]
                                  (borrow messages)) in
                            let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                              M.alloc [ α2 ] in
                            let* α4 : core.fmt.Arguments.t :=
                              M.call
                                (core.fmt.Arguments.t::["new_v1"]
                                  (pointer_coercion "Unsize" (borrow α1))
                                  (pointer_coercion "Unsize" (borrow α3))) in
                            let* α5 : log.Level.t := M.read lvl in
                            let* α6 : ref str.t :=
                              M.read (mk_str "assistants_extra::llm") in
                            let* α7 : ref str.t :=
                              M.read (mk_str "assistants_extra::llm") in
                            let* α8 : ref str.t :=
                              M.read (mk_str "assistants-extra/src/llm.rs") in
                            let* α9 :
                                M.Val
                                  (((ref str.t) * (ref str.t)) * (ref str.t)) :=
                              M.alloc (α6, α7, α8) in
                            let* α10 : unit :=
                              M.call
                                (log.__private_api.log
                                  α4
                                  α5
                                  (borrow α9)
                                  ((Integer.of_Z 92) : u32.t)
                                  core.option.Option.None) in
                            M.alloc α10 in
                          M.alloc tt
                        else
                          M.alloc tt in
                      let* _ : M.Val unit :=
                        let* α0 : i32.t := M.read max_tokens_to_sample in
                        let* α1 : M.Val bool.t :=
                          M.alloc
                            (BinOp.Pure.eq α0 ((Integer.of_Z (-1)) : i32.t)) in
                        let* α2 : bool.t := M.read (use α1) in
                        if α2 then
                          let* bpe :
                              M.Val tiktoken_rs.vendor_tiktoken.CoreBPE.t :=
                            let* α0 :
                                core.result.Result.t
                                  tiktoken_rs.vendor_tiktoken.CoreBPE.t
                                  anyhow.Error.t :=
                              M.call
                                tiktoken_rs.tiktoken_ext.openai_public.p50k_base in
                            let* α1 : tiktoken_rs.vendor_tiktoken.CoreBPE.t :=
                              M.call
                                ((core.result.Result.t
                                      tiktoken_rs.vendor_tiktoken.CoreBPE.t
                                      anyhow.Error.t)::["unwrap"]
                                  α0) in
                            M.alloc α1 in
                          let* tokens :
                              M.Val
                                (alloc.vec.Vec.t
                                  usize.t
                                  alloc.alloc.Global.t) :=
                            let* α0 :
                                (ref alloc.string.String.t) -> M (ref _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.deref.Deref.deref
                                  (Self := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α1 :
                                core.result.Result.t
                                  alloc.string.String.t
                                  serde_json.error.Error.t :=
                              M.call
                                (serde_json.ser.to_string (borrow messages)) in
                            let* α2 : alloc.string.String.t :=
                              M.call
                                ((core.result.Result.t
                                      alloc.string.String.t
                                      serde_json.error.Error.t)::["unwrap"]
                                  α1) in
                            let* α3 : M.Val alloc.string.String.t :=
                              M.alloc α2 in
                            let* α4 : ref str.t := M.call (α0 (borrow α3)) in
                            let* α5 :
                                alloc.vec.Vec.t usize.t alloc.alloc.Global.t :=
                              M.call
                                (tiktoken_rs.vendor_tiktoken.CoreBPE.t::["encode_with_special_tokens"]
                                  (borrow bpe)
                                  α4) in
                            M.alloc α5 in
                          let* _ : M.Val unit :=
                            let* α0 : core.option.Option.t i32.t :=
                              M.read context_size in
                            let* α1 : i32.t :=
                              M.call
                                ((core.option.Option.t i32.t)::["unwrap_or"]
                                  α0
                                  ((Integer.of_Z 4096) : i32.t)) in
                            let* α2 : usize.t :=
                              M.call
                                ((alloc.vec.Vec.t
                                      usize.t
                                      alloc.alloc.Global.t)::["len"]
                                  (borrow tokens)) in
                            let* α3 : i32.t :=
                              BinOp.Panic.sub α1 (rust_cast α2) in
                            assign max_tokens_to_sample α3 in
                          let* _ : M.Val unit :=
                            let* _ : M.Val unit :=
                              let* α0 : ref str.t :=
                                M.read (mk_str "max_tokens_to_sample: ") in
                              let* α1 : ref str.t := M.read (mk_str "
") in
                              let* α2 : M.Val (array (ref str.t)) :=
                                M.alloc [ α0; α1 ] in
                              let* α3 : core.fmt.rt.Argument.t :=
                                M.call
                                  (core.fmt.rt.Argument.t::["new_display"]
                                    (borrow max_tokens_to_sample)) in
                              let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                                M.alloc [ α3 ] in
                              let* α5 : core.fmt.Arguments.t :=
                                M.call
                                  (core.fmt.Arguments.t::["new_v1"]
                                    (pointer_coercion "Unsize" (borrow α2))
                                    (pointer_coercion "Unsize" (borrow α4))) in
                              let* α6 : unit :=
                                M.call (std.io.stdio._print α5) in
                              M.alloc α6 in
                            M.alloc tt in
                          M.alloc tt
                        else
                          M.alloc tt in
                      let* α0 : _ -> M _ :=
                        ltac:(M.get_method (fun ℐ =>
                          core.future.into_future.IntoFuture.into_future
                            (Self := _)
                            (Trait := ℐ))) in
                      let* α1 :
                          alloc.vec.Vec.t
                            assistants_extra.openai.Message.t
                            alloc.alloc.Global.t :=
                        M.read messages in
                      let* α2 : i32.t := M.read max_tokens_to_sample in
                      let* α3 : (ref str.t) -> M alloc.string.String.t :=
                        ltac:(M.get_method (fun ℐ =>
                          alloc.string.ToString.to_string
                            (Self := str.t)
                            (Trait := ℐ))) in
                      let* α4 : ref str.t := M.read model_name in
                      let* α5 : alloc.string.String.t := M.call (α3 α4) in
                      let* α6 : core.option.Option.t f32.t :=
                        M.read temperature in
                      let* α7 :
                          core.option.Option.t
                            (alloc.vec.Vec.t
                              alloc.string.String.t
                              alloc.alloc.Global.t) :=
                        M.read stop_sequences in
                      let* α8 : core.option.Option.t f32.t := M.read top_p in
                      let* α9 : alloc.string.String.t := M.read url in
                      let* α10 : _ :=
                        M.call
                          (assistants_extra.openai.call_open_source_openai_api_with_messages
                            α1
                            α2
                            α5
                            α6
                            α7
                            α8
                            α9) in
                      let* α11 : _ := M.call (α0 α10) in
                      let* α12 : M.Val _ := M.alloc α11 in
                      let* α13 :
                          M.Val
                            (core.result.Result.t
                              assistants_extra.openai.ChatCompletion.t
                              assistants_extra.openai.OpenAIApiError.t) :=
                        match_operator
                          α12
                          [
                            fun γ =>
                              (let* __awaitee := M.copy γ in
                              M.loop
                                (let* _ : M.Val unit :=
                                  let* α0 :
                                      (core.pin.Pin.t (mut_ref _)) ->
                                        (mut_ref core.task.wake.Context.t) ->
                                        M (core.task.poll.Poll.t _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.future.future.Future.poll
                                        (Self := _)
                                        (Trait := ℐ))) in
                                  let* α1 : core.pin.Pin.t (mut_ref _) :=
                                    M.call
                                      ((core.pin.Pin.t
                                            (mut_ref _))::["new_unchecked"]
                                        (borrow_mut __awaitee)) in
                                  let* α2 : core.future.ResumeTy.t :=
                                    M.read _task_context in
                                  let* α3 : mut_ref core.task.wake.Context.t :=
                                    M.call (core.future.get_context α2) in
                                  let* α4 :
                                      core.task.poll.Poll.t
                                        (core.result.Result.t
                                          assistants_extra.openai.ChatCompletion.t
                                          assistants_extra.openai.OpenAIApiError.t) :=
                                    M.call (α0 α1 α3) in
                                  let* α5 :
                                      M.Val
                                        (core.task.poll.Poll.t
                                          (core.result.Result.t
                                            assistants_extra.openai.ChatCompletion.t
                                            assistants_extra.openai.OpenAIApiError.t)) :=
                                    M.alloc α4 in
                                  match_operator
                                    α5
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.task.poll.Poll.Ready _ =>
                                          let γ0_0 :=
                                            core.task.poll.Poll.Get_Ready_0 γ in
                                          let* result := M.copy γ0_0 in
                                          let* α0 : M.Val never.t := M.break in
                                          let* α1 := M.read α0 in
                                          let* α2 : unit := never_to_any α1 in
                                          M.alloc α2
                                        | _ => M.break_match
                                        end) :
                                        M (M.Val unit);
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.task.poll.Poll.Pending =>
                                          M.alloc tt
                                        | _ => M.break_match
                                        end) :
                                        M (M.Val unit)
                                    ] in
                                let* _ : M.Val unit :=
                                  let* α0 : M.Val unit := M.alloc tt in
                                  let* α1 : M.Val core.future.ResumeTy.t :=
                                    yield α0 in
                                  let* α2 : core.future.ResumeTy.t :=
                                    M.read α1 in
                                  assign _task_context α2 in
                                M.alloc tt)) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    assistants_extra.openai.ChatCompletion.t
                                    assistants_extra.openai.OpenAIApiError.t))
                          ] in
                      let* α14 :
                          core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            assistants_extra.openai.OpenAIApiError.t :=
                        M.read α13 in
                      let* α15 :
                          core.result.Result.t
                            alloc.string.String.t
                            assistants_extra.openai.OpenAIApiError.t :=
                        M.call
                          ((core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                assistants_extra.openai.OpenAIApiError.t)::["map"]
                            α14
                            (fun
                                (α0 :
                                  assistants_extra.openai.ChatCompletion.t) =>
                              (let* α0 := M.alloc α0 in
                              match_operator
                                α0
                                [
                                  fun γ =>
                                    (let* res := M.copy γ in
                                    let* α0 :
                                        (ref alloc.string.String.t) ->
                                          M alloc.string.String.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.clone.Clone.clone
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        (ref
                                            (alloc.vec.Vec.t
                                              assistants_extra.openai.Choice.t
                                              alloc.alloc.Global.t))
                                          ->
                                          usize.t ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.index.Index.index
                                          (Self :=
                                            alloc.vec.Vec.t
                                              assistants_extra.openai.Choice.t
                                              alloc.alloc.Global.t)
                                          (Idx := usize.t)
                                          (Trait := ℐ))) in
                                    let* α2 :
                                        ref assistants_extra.openai.Choice.t :=
                                      M.call
                                        (α1
                                          (borrow
                                            (assistants_extra.openai.ChatCompletion.Get_choices
                                              res))
                                          ((Integer.of_Z 0) : usize.t)) in
                                    M.call
                                      (α0
                                        (borrow
                                          (assistants_extra.openai.Message.Get_content
                                            (assistants_extra.openai.Choice.Get_message
                                              (deref α2)))))) :
                                    M alloc.string.String.t
                                ]) :
                              M alloc.string.String.t)) in
                      let* α16 :
                          core.result.Result.t
                            alloc.string.String.t
                            (alloc.boxed.Box.t
                              (dyn [core.error.Error.Trait])
                              alloc.alloc.Global.t) :=
                        M.call
                          ((core.result.Result.t
                                alloc.string.String.t
                                assistants_extra.openai.OpenAIApiError.t)::["map_err"]
                            α15
                            (fun
                                (α0 :
                                  assistants_extra.openai.OpenAIApiError.t) =>
                              (let* α0 := M.alloc α0 in
                              match_operator
                                α0
                                [
                                  fun γ =>
                                    (let* e := M.copy γ in
                                    let* _ : M.Val unit :=
                                      let* lvl : M.Val log.Level.t :=
                                        M.alloc log.Level.Error in
                                      let* α0 :
                                          (ref log.Level.t) ->
                                            (ref log.LevelFilter.t) ->
                                            M bool.t :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.cmp.PartialOrd.le
                                            (Self := log.Level.t)
                                            (Rhs := log.LevelFilter.t)
                                            (Trait := ℐ))) in
                                      let* α1 : bool.t :=
                                        M.call
                                          (α0
                                            (borrow lvl)
                                            (borrow log.STATIC_MAX_LEVEL)) in
                                      let* α2 :
                                          (ref log.Level.t) ->
                                            (ref log.LevelFilter.t) ->
                                            M bool.t :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.cmp.PartialOrd.le
                                            (Self := log.Level.t)
                                            (Rhs := log.LevelFilter.t)
                                            (Trait := ℐ))) in
                                      let* α3 : log.LevelFilter.t :=
                                        M.call log.max_level in
                                      let* α4 : M.Val log.LevelFilter.t :=
                                        M.alloc α3 in
                                      let* α5 : bool.t :=
                                        M.call (α2 (borrow lvl) (borrow α4)) in
                                      let* α6 : M.Val bool.t :=
                                        M.alloc (BinOp.Pure.and α1 α5) in
                                      let* α7 : bool.t := M.read (use α6) in
                                      if α7 then
                                        let* _ : M.Val unit :=
                                          let* α0 : ref str.t :=
                                            M.read
                                              (mk_str
                                                "Error calling Open Source LLM through OpenAI API: ") in
                                          let* α1 : M.Val (array (ref str.t)) :=
                                            M.alloc [ α0 ] in
                                          let* α2 : core.fmt.rt.Argument.t :=
                                            M.call
                                              (core.fmt.rt.Argument.t::["new_display"]
                                                (borrow e)) in
                                          let* α3 :
                                              M.Val
                                                (array
                                                  core.fmt.rt.Argument.t) :=
                                            M.alloc [ α2 ] in
                                          let* α4 : core.fmt.Arguments.t :=
                                            M.call
                                              (core.fmt.Arguments.t::["new_v1"]
                                                (pointer_coercion
                                                  "Unsize"
                                                  (borrow α1))
                                                (pointer_coercion
                                                  "Unsize"
                                                  (borrow α3))) in
                                          let* α5 : log.Level.t := M.read lvl in
                                          let* α6 : ref str.t :=
                                            M.read
                                              (mk_str
                                                "assistants_extra::llm") in
                                          let* α7 : ref str.t :=
                                            M.read
                                              (mk_str
                                                "assistants_extra::llm") in
                                          let* α8 : ref str.t :=
                                            M.read
                                              (mk_str
                                                "assistants-extra/src/llm.rs") in
                                          let* α9 :
                                              M.Val
                                                (((ref str.t) * (ref str.t))
                                                *
                                                (ref str.t)) :=
                                            M.alloc (α6, α7, α8) in
                                          let* α10 : unit :=
                                            M.call
                                              (log.__private_api.log
                                                α4
                                                α5
                                                (borrow α9)
                                                ((Integer.of_Z 114) : u32.t)
                                                core.option.Option.None) in
                                          M.alloc α10 in
                                        M.alloc tt
                                      else
                                        M.alloc tt in
                                    let* α0 :
                                        assistants_extra.openai.OpenAIApiError.t :=
                                      M.read e in
                                    let* α1 :
                                        alloc.boxed.Box.t
                                          assistants_extra.openai.OpenAIApiError.t
                                          alloc.alloc.Global.t :=
                                      M.call
                                        ((alloc.boxed.Box.t
                                              assistants_extra.openai.OpenAIApiError.t
                                              alloc.alloc.Global.t)::["new"]
                                          α0) in
                                    let* α2 :
                                        M.Val
                                          (alloc.boxed.Box.t
                                            (dyn [core.error.Error.Trait])
                                            alloc.alloc.Global.t) :=
                                      M.alloc (pointer_coercion "Unsize" α1) in
                                    let* α0 :
                                        alloc.boxed.Box.t
                                          (dyn [core.error.Error.Trait])
                                          alloc.alloc.Global.t :=
                                      M.read (use α2) in
                                    M.pure (pointer_coercion "Unsize" α0)) :
                                    M
                                      (alloc.boxed.Box.t
                                        (dyn [core.error.Error.Trait])
                                        alloc.alloc.Global.t)
                                ]) :
                              M
                                (alloc.boxed.Box.t
                                  (dyn [core.error.Error.Trait])
                                  alloc.alloc.Global.t))) in
                      M.alloc α16
                    else
                      let* α0 : ref str.t := M.read (mk_str "Unknown model") in
                      let* α1 : std.io.error.Error.t :=
                        M.call
                          (std.io.error.Error.t::["new"]
                            std.io.error.ErrorKind.InvalidInput
                            α0) in
                      let* α2 :
                          alloc.boxed.Box.t
                            std.io.error.Error.t
                            alloc.alloc.Global.t :=
                        M.call
                          ((alloc.boxed.Box.t
                                std.io.error.Error.t
                                alloc.alloc.Global.t)::["new"]
                            α1) in
                      M.alloc
                        (core.result.Result.Err
                          (pointer_coercion "Unsize" α2)) in
              M.read (use α0)) :
              M
                (core.result.Result.t
                  alloc.string.String.t
                  (alloc.boxed.Box.t
                    (dyn [core.error.Error.Trait])
                    alloc.alloc.Global.t))
          ]) :
        M
          (core.result.Result.t
            alloc.string.String.t
            (alloc.boxed.Box.t
              (dyn [core.error.Error.Trait])
              alloc.alloc.Global.t))).
End llm.

(*
pub async fn llm(
    model_name: &str,
    model_url: Option<String>,
    system_prompt: &str,
    user_prompt: &str,
    temperature: Option<f32>,
    mut max_tokens_to_sample: i32,
    stop_sequences: Option<Vec<String>>,
    top_p: Option<f32>,
    top_k: Option<i32>,
    metadata: Option<HashMap<String, String>>,
    context_size: Option<i32>,
) -> Result<String, Box<dyn Error>> {
    let messages = vec![
        Message {
            role: "system".to_string(),
            content: system_prompt.to_string(),
        },
        Message {
            role: "user".to_string(),
            content: user_prompt.to_string(),
        },
    ];

    if model_name.contains("claude") {
        let instructions = format!(
            "<system>\n{}\n</system>\n<user>\n{}\n</user>",
            system_prompt, user_prompt
        );
        info!("Calling Claude API with instructions: {}", instructions);
        // if max_tokens_to_sample == -1 we just use maximum length based on current prompt
        if max_tokens_to_sample == -1 {
            let bpe = p50k_base().unwrap();
            let tokens = bpe.encode_with_special_tokens(&instructions);
            max_tokens_to_sample = context_size.unwrap_or(4096) - tokens.len() as i32;
        }

        call_anthropic_api(
            instructions,
            max_tokens_to_sample,
            Some(model_name.to_string()),
            temperature,
            stop_sequences,
            top_p,
            top_k,
            metadata,
        )
        .await
        .map(|res| res.completion)
        .map_err(|e| {
            error!("Error calling Claude API: {}", e);
            Box::new(e) as Box<dyn Error>
        })
    } else if model_name.contains("gpt") {
        info!("Calling OpenAI API with messages: {:?}", messages);
        if max_tokens_to_sample == -1 {
            let bpe = p50k_base().unwrap();
            let tokens = bpe.encode_with_special_tokens(&serde_json::to_string(&messages).unwrap());
            max_tokens_to_sample = context_size.unwrap_or(4096) - tokens.len() as i32;
        }
        call_openai_api_with_messages(
            messages,
            max_tokens_to_sample,
            Some(model_name.to_string()),
            temperature,
            stop_sequences,
            top_p,
        )
        .await
        .map(|res| res.choices[0].message.content.clone())
        .map_err(|e| {
            error!("Error calling OpenAI API: {}", e);
            Box::new(e) as Box<dyn Error>
        })
    } else if model_name.contains("/") {
        // ! super hacky
        let model_name = model_name.split('/').last().unwrap_or_default();
        let url = model_url.unwrap_or_else(|| {
            std::env::var("MODEL_URL")
                .unwrap_or_else(|_| String::from("http://localhost:8000/v1/chat/completions"))
        });
        info!(
            "Calling Open Source LLM through OpenAI API with messages: {:?}",
            messages
        );
        if max_tokens_to_sample == -1 {
            let bpe = p50k_base().unwrap();
            let tokens = bpe.encode_with_special_tokens(&serde_json::to_string(&messages).unwrap());
            max_tokens_to_sample = context_size.unwrap_or(4096) - tokens.len() as i32;
            println!("max_tokens_to_sample: {}", max_tokens_to_sample);
        }
        call_open_source_openai_api_with_messages(
            messages,
            max_tokens_to_sample,
            model_name.to_string(),
            temperature,
            stop_sequences,
            top_p,
            url,
        )
        .await
        .map(|res| res.choices[0].message.content.clone())
        .map_err(|e| {
            error!("Error calling Open Source LLM through OpenAI API: {}", e);
            Box::new(e) as Box<dyn Error>
        })
    } else {
        Err(Box::new(std::io::Error::new(
            std::io::ErrorKind::InvalidInput,
            "Unknown model",
        )))
    }
}
*)
Definition llm
    (model_name : ref str.t)
    (model_url : core.option.Option.t alloc.string.String.t)
    (system_prompt : ref str.t)
    (user_prompt : ref str.t)
    (temperature : core.option.Option.t f32.t)
    (max_tokens_to_sample : i32.t)
    (stop_sequences
      :
      core.option.Option.t
        (alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A))
    (top_p : core.option.Option.t f32.t)
    (top_k : core.option.Option.t i32.t)
    (metadata
      :
      core.option.Option.t
        (std.collections.hash.map.HashMap.t
          alloc.string.String.t
          alloc.string.String.t
          std.collections.hash.map.HashMap.Default.S))
    (context_size : core.option.Option.t i32.t)
    : M OpaqueDef :=
  let* model_name := M.alloc model_name in
  let* model_url := M.alloc model_url in
  let* system_prompt := M.alloc system_prompt in
  let* user_prompt := M.alloc user_prompt in
  let* temperature := M.alloc temperature in
  let* max_tokens_to_sample := M.alloc max_tokens_to_sample in
  let* stop_sequences := M.alloc stop_sequences in
  let* top_p := M.alloc top_p in
  let* top_k := M.alloc top_k in
  let* metadata := M.alloc metadata in
  let* context_size := M.alloc context_size in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* model_name : M.Val (ref str.t) := M.copy model_name in
            let* model_url :
                M.Val (core.option.Option.t alloc.string.String.t) :=
              M.copy model_url in
            let* system_prompt : M.Val (ref str.t) := M.copy system_prompt in
            let* user_prompt : M.Val (ref str.t) := M.copy user_prompt in
            let* temperature : M.Val (core.option.Option.t f32.t) :=
              M.copy temperature in
            let* max_tokens_to_sample : M.Val i32.t :=
              M.copy max_tokens_to_sample in
            let* stop_sequences :
                M.Val
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      alloc.string.String.t
                      alloc.alloc.Global.t)) :=
              M.copy stop_sequences in
            let* top_p : M.Val (core.option.Option.t f32.t) := M.copy top_p in
            let* top_k : M.Val (core.option.Option.t i32.t) := M.copy top_k in
            let* metadata :
                M.Val
                  (core.option.Option.t
                    (std.collections.hash.map.HashMap.t
                      alloc.string.String.t
                      alloc.string.String.t
                      std.hash.random.RandomState.t)) :=
              M.copy metadata in
            let* context_size : M.Val (core.option.Option.t i32.t) :=
              M.copy context_size in
            let* messages :
                M.Val
                  (alloc.vec.Vec.t
                    assistants_extra.openai.Message.t
                    alloc.alloc.Global.t) :=
              let* α0 : (ref str.t) -> M alloc.string.String.t :=
                ltac:(M.get_method (fun ℐ =>
                  alloc.string.ToString.to_string
                    (Self := str.t)
                    (Trait := ℐ))) in
              let* α1 : ref str.t := M.read (mk_str "system") in
              let* α2 : alloc.string.String.t := M.call (α0 α1) in
              let* α3 : (ref str.t) -> M alloc.string.String.t :=
                ltac:(M.get_method (fun ℐ =>
                  alloc.string.ToString.to_string
                    (Self := str.t)
                    (Trait := ℐ))) in
              let* α4 : ref str.t := M.read system_prompt in
              let* α5 : alloc.string.String.t := M.call (α3 α4) in
              let* α6 : (ref str.t) -> M alloc.string.String.t :=
                ltac:(M.get_method (fun ℐ =>
                  alloc.string.ToString.to_string
                    (Self := str.t)
                    (Trait := ℐ))) in
              let* α7 : ref str.t := M.read (mk_str "user") in
              let* α8 : alloc.string.String.t := M.call (α6 α7) in
              let* α9 : (ref str.t) -> M alloc.string.String.t :=
                ltac:(M.get_method (fun ℐ =>
                  alloc.string.ToString.to_string
                    (Self := str.t)
                    (Trait := ℐ))) in
              let* α10 : ref str.t := M.read user_prompt in
              let* α11 : alloc.string.String.t := M.call (α9 α10) in
              let* α12 : M.Val (array assistants_extra.openai.Message.t) :=
                M.alloc
                  [
                    {|
                      assistants_extra.openai.Message.role := α2;
                      assistants_extra.openai.Message.content := α5;
                    |};
                    {|
                      assistants_extra.openai.Message.role := α8;
                      assistants_extra.openai.Message.content := α11;
                    |}
                  ] in
              let* α13 :
                  M.Val
                    (alloc.boxed.Box.t
                      (array assistants_extra.openai.Message.t)
                      alloc.alloc.Global.t) :=
                M.call
                  ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                    α12) in
              let* α14 :
                  alloc.boxed.Box.t
                    (array assistants_extra.openai.Message.t)
                    alloc.alloc.Global.t :=
                M.read α13 in
              let* α15 :
                  alloc.vec.Vec.t
                    assistants_extra.openai.Message.t
                    alloc.alloc.Global.t :=
                M.call
                  ((slice assistants_extra.openai.Message.t)::["into_vec"]
                    (pointer_coercion "Unsize" α14)) in
              M.alloc α15 in
            let* α0 : ref str.t := M.read model_name in
            let* α1 : ref str.t := M.read (mk_str "claude") in
            let* α2 : bool.t := M.call (str.t::["contains"] α0 α1) in
            let* α3 : M.Val bool.t := M.alloc α2 in
            let* α4 : bool.t := M.read (use α3) in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    alloc.string.String.t
                    (alloc.boxed.Box.t
                      (dyn [core.error.Error.Trait])
                      alloc.alloc.Global.t)) :=
              if α4 then
                let* instructions : M.Val alloc.string.String.t :=
                  let* res : M.Val alloc.string.String.t :=
                    let* α0 : ref str.t := M.read (mk_str "<system>
") in
                    let* α1 : ref str.t :=
                      M.read (mk_str "
</system>
<user>
") in
                    let* α2 : ref str.t := M.read (mk_str "
</user>") in
                    let* α3 : M.Val (array (ref str.t)) :=
                      M.alloc [ α0; α1; α2 ] in
                    let* α4 : core.fmt.rt.Argument.t :=
                      M.call
                        (core.fmt.rt.Argument.t::["new_display"]
                          (borrow system_prompt)) in
                    let* α5 : core.fmt.rt.Argument.t :=
                      M.call
                        (core.fmt.rt.Argument.t::["new_display"]
                          (borrow user_prompt)) in
                    let* α6 : M.Val (array core.fmt.rt.Argument.t) :=
                      M.alloc [ α4; α5 ] in
                    let* α7 : core.fmt.Arguments.t :=
                      M.call
                        (core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion "Unsize" (borrow α3))
                          (pointer_coercion "Unsize" (borrow α6))) in
                    let* α8 : alloc.string.String.t :=
                      M.call (alloc.fmt.format α7) in
                    M.alloc α8 in
                  M.copy res in
                let* _ : M.Val unit :=
                  let* lvl : M.Val log.Level.t := M.alloc log.Level.Info in
                  let* α0 :
                      (ref log.Level.t) ->
                        (ref log.LevelFilter.t) ->
                        M bool.t :=
                    ltac:(M.get_method (fun ℐ =>
                      core.cmp.PartialOrd.le
                        (Self := log.Level.t)
                        (Rhs := log.LevelFilter.t)
                        (Trait := ℐ))) in
                  let* α1 : bool.t :=
                    M.call (α0 (borrow lvl) (borrow log.STATIC_MAX_LEVEL)) in
                  let* α2 :
                      (ref log.Level.t) ->
                        (ref log.LevelFilter.t) ->
                        M bool.t :=
                    ltac:(M.get_method (fun ℐ =>
                      core.cmp.PartialOrd.le
                        (Self := log.Level.t)
                        (Rhs := log.LevelFilter.t)
                        (Trait := ℐ))) in
                  let* α3 : log.LevelFilter.t := M.call log.max_level in
                  let* α4 : M.Val log.LevelFilter.t := M.alloc α3 in
                  let* α5 : bool.t := M.call (α2 (borrow lvl) (borrow α4)) in
                  let* α6 : M.Val bool.t := M.alloc (BinOp.Pure.and α1 α5) in
                  let* α7 : bool.t := M.read (use α6) in
                  if α7 then
                    let* _ : M.Val unit :=
                      let* α0 : ref str.t :=
                        M.read
                          (mk_str "Calling Claude API with instructions: ") in
                      let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
                      let* α2 : core.fmt.rt.Argument.t :=
                        M.call
                          (core.fmt.rt.Argument.t::["new_display"]
                            (borrow instructions)) in
                      let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                        M.alloc [ α2 ] in
                      let* α4 : core.fmt.Arguments.t :=
                        M.call
                          (core.fmt.Arguments.t::["new_v1"]
                            (pointer_coercion "Unsize" (borrow α1))
                            (pointer_coercion "Unsize" (borrow α3))) in
                      let* α5 : log.Level.t := M.read lvl in
                      let* α6 : ref str.t :=
                        M.read (mk_str "assistants_extra::llm") in
                      let* α7 : ref str.t :=
                        M.read (mk_str "assistants_extra::llm") in
                      let* α8 : ref str.t :=
                        M.read (mk_str "assistants-extra/src/llm.rs") in
                      let* α9 :
                          M.Val (((ref str.t) * (ref str.t)) * (ref str.t)) :=
                        M.alloc (α6, α7, α8) in
                      let* α10 : unit :=
                        M.call
                          (log.__private_api.log
                            α4
                            α5
                            (borrow α9)
                            ((Integer.of_Z 40) : u32.t)
                            core.option.Option.None) in
                      M.alloc α10 in
                    M.alloc tt
                  else
                    M.alloc tt in
                let* _ : M.Val unit :=
                  let* α0 : i32.t := M.read max_tokens_to_sample in
                  let* α1 : M.Val bool.t :=
                    M.alloc (BinOp.Pure.eq α0 ((Integer.of_Z (-1)) : i32.t)) in
                  let* α2 : bool.t := M.read (use α1) in
                  if α2 then
                    let* bpe : M.Val tiktoken_rs.vendor_tiktoken.CoreBPE.t :=
                      let* α0 :
                          core.result.Result.t
                            tiktoken_rs.vendor_tiktoken.CoreBPE.t
                            anyhow.Error.t :=
                        M.call
                          tiktoken_rs.tiktoken_ext.openai_public.p50k_base in
                      let* α1 : tiktoken_rs.vendor_tiktoken.CoreBPE.t :=
                        M.call
                          ((core.result.Result.t
                                tiktoken_rs.vendor_tiktoken.CoreBPE.t
                                anyhow.Error.t)::["unwrap"]
                            α0) in
                      M.alloc α1 in
                    let* tokens :
                        M.Val (alloc.vec.Vec.t usize.t alloc.alloc.Global.t) :=
                      let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                        ltac:(M.get_method (fun ℐ =>
                          core.ops.deref.Deref.deref
                            (Self := alloc.string.String.t)
                            (Trait := ℐ))) in
                      let* α1 : ref str.t :=
                        M.call (α0 (borrow instructions)) in
                      let* α2 : alloc.vec.Vec.t usize.t alloc.alloc.Global.t :=
                        M.call
                          (tiktoken_rs.vendor_tiktoken.CoreBPE.t::["encode_with_special_tokens"]
                            (borrow bpe)
                            α1) in
                      M.alloc α2 in
                    let* _ : M.Val unit :=
                      let* α0 : core.option.Option.t i32.t :=
                        M.read context_size in
                      let* α1 : i32.t :=
                        M.call
                          ((core.option.Option.t i32.t)::["unwrap_or"]
                            α0
                            ((Integer.of_Z 4096) : i32.t)) in
                      let* α2 : usize.t :=
                        M.call
                          ((alloc.vec.Vec.t
                                usize.t
                                alloc.alloc.Global.t)::["len"]
                            (borrow tokens)) in
                      let* α3 : i32.t := BinOp.Panic.sub α1 (rust_cast α2) in
                      assign max_tokens_to_sample α3 in
                    M.alloc tt
                  else
                    M.alloc tt in
                let* α0 : _ -> M _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.future.into_future.IntoFuture.into_future
                      (Self := _)
                      (Trait := ℐ))) in
                let* α1 : alloc.string.String.t := M.read instructions in
                let* α2 : i32.t := M.read max_tokens_to_sample in
                let* α3 : (ref str.t) -> M alloc.string.String.t :=
                  ltac:(M.get_method (fun ℐ =>
                    alloc.string.ToString.to_string
                      (Self := str.t)
                      (Trait := ℐ))) in
                let* α4 : ref str.t := M.read model_name in
                let* α5 : alloc.string.String.t := M.call (α3 α4) in
                let* α6 : core.option.Option.t f32.t := M.read temperature in
                let* α7 :
                    core.option.Option.t
                      (alloc.vec.Vec.t
                        alloc.string.String.t
                        alloc.alloc.Global.t) :=
                  M.read stop_sequences in
                let* α8 : core.option.Option.t f32.t := M.read top_p in
                let* α9 : core.option.Option.t i32.t := M.read top_k in
                let* α10 :
                    core.option.Option.t
                      (std.collections.hash.map.HashMap.t
                        alloc.string.String.t
                        alloc.string.String.t
                        std.hash.random.RandomState.t) :=
                  M.read metadata in
                let* α11 : _ :=
                  M.call
                    (assistants_extra.anthropic.call_anthropic_api
                      α1
                      α2
                      (core.option.Option.Some α5)
                      α6
                      α7
                      α8
                      α9
                      α10) in
                let* α12 : _ := M.call (α0 α11) in
                let* α13 : M.Val _ := M.alloc α12 in
                let* α14 :
                    M.Val
                      (core.result.Result.t
                        assistants_extra.anthropic.ResponseBody.t
                        assistants_extra.anthropic.ApiError.t) :=
                  match_operator
                    α13
                    [
                      fun γ =>
                        (let* __awaitee := M.copy γ in
                        M.loop
                          (let* _ : M.Val unit :=
                            let* α0 :
                                (core.pin.Pin.t (mut_ref _)) ->
                                  (mut_ref core.task.wake.Context.t) ->
                                  M (core.task.poll.Poll.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.future.future.Future.poll
                                  (Self := _)
                                  (Trait := ℐ))) in
                            let* α1 : core.pin.Pin.t (mut_ref _) :=
                              M.call
                                ((core.pin.Pin.t (mut_ref _))::["new_unchecked"]
                                  (borrow_mut __awaitee)) in
                            let* α2 : core.future.ResumeTy.t :=
                              M.read _task_context in
                            let* α3 : mut_ref core.task.wake.Context.t :=
                              M.call (core.future.get_context α2) in
                            let* α4 :
                                core.task.poll.Poll.t
                                  (core.result.Result.t
                                    assistants_extra.anthropic.ResponseBody.t
                                    assistants_extra.anthropic.ApiError.t) :=
                              M.call (α0 α1 α3) in
                            let* α5 :
                                M.Val
                                  (core.task.poll.Poll.t
                                    (core.result.Result.t
                                      assistants_extra.anthropic.ResponseBody.t
                                      assistants_extra.anthropic.ApiError.t)) :=
                              M.alloc α4 in
                            match_operator
                              α5
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Ready _ =>
                                    let γ0_0 :=
                                      core.task.poll.Poll.Get_Ready_0 γ in
                                    let* result := M.copy γ0_0 in
                                    let* α0 : M.Val never.t := M.break in
                                    let* α1 := M.read α0 in
                                    let* α2 : unit := never_to_any α1 in
                                    M.alloc α2
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit);
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.task.poll.Poll.Pending => M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit)
                              ] in
                          let* _ : M.Val unit :=
                            let* α0 : M.Val unit := M.alloc tt in
                            let* α1 : M.Val core.future.ResumeTy.t :=
                              yield α0 in
                            let* α2 : core.future.ResumeTy.t := M.read α1 in
                            assign _task_context α2 in
                          M.alloc tt)) :
                        M
                          (M.Val
                            (core.result.Result.t
                              assistants_extra.anthropic.ResponseBody.t
                              assistants_extra.anthropic.ApiError.t))
                    ] in
                let* α15 :
                    core.result.Result.t
                      assistants_extra.anthropic.ResponseBody.t
                      assistants_extra.anthropic.ApiError.t :=
                  M.read α14 in
                let* α16 :
                    core.result.Result.t
                      alloc.string.String.t
                      assistants_extra.anthropic.ApiError.t :=
                  M.call
                    ((core.result.Result.t
                          assistants_extra.anthropic.ResponseBody.t
                          assistants_extra.anthropic.ApiError.t)::["map"]
                      α15
                      (fun (α0 : assistants_extra.anthropic.ResponseBody.t) =>
                        (let* α0 := M.alloc α0 in
                        match_operator
                          α0
                          [
                            fun γ =>
                              (let* res := M.copy γ in
                              M.read
                                (assistants_extra.anthropic.ResponseBody.Get_completion
                                  res)) :
                              M alloc.string.String.t
                          ]) :
                        M alloc.string.String.t)) in
                let* α17 :
                    core.result.Result.t
                      alloc.string.String.t
                      (alloc.boxed.Box.t
                        (dyn [core.error.Error.Trait])
                        alloc.alloc.Global.t) :=
                  M.call
                    ((core.result.Result.t
                          alloc.string.String.t
                          assistants_extra.anthropic.ApiError.t)::["map_err"]
                      α16
                      (fun (α0 : assistants_extra.anthropic.ApiError.t) =>
                        (let* α0 := M.alloc α0 in
                        match_operator
                          α0
                          [
                            fun γ =>
                              (let* e := M.copy γ in
                              let* _ : M.Val unit :=
                                let* lvl : M.Val log.Level.t :=
                                  M.alloc log.Level.Error in
                                let* α0 :
                                    (ref log.Level.t) ->
                                      (ref log.LevelFilter.t) ->
                                      M bool.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.cmp.PartialOrd.le
                                      (Self := log.Level.t)
                                      (Rhs := log.LevelFilter.t)
                                      (Trait := ℐ))) in
                                let* α1 : bool.t :=
                                  M.call
                                    (α0
                                      (borrow lvl)
                                      (borrow log.STATIC_MAX_LEVEL)) in
                                let* α2 :
                                    (ref log.Level.t) ->
                                      (ref log.LevelFilter.t) ->
                                      M bool.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.cmp.PartialOrd.le
                                      (Self := log.Level.t)
                                      (Rhs := log.LevelFilter.t)
                                      (Trait := ℐ))) in
                                let* α3 : log.LevelFilter.t :=
                                  M.call log.max_level in
                                let* α4 : M.Val log.LevelFilter.t :=
                                  M.alloc α3 in
                                let* α5 : bool.t :=
                                  M.call (α2 (borrow lvl) (borrow α4)) in
                                let* α6 : M.Val bool.t :=
                                  M.alloc (BinOp.Pure.and α1 α5) in
                                let* α7 : bool.t := M.read (use α6) in
                                if α7 then
                                  let* _ : M.Val unit :=
                                    let* α0 : ref str.t :=
                                      M.read
                                        (mk_str "Error calling Claude API: ") in
                                    let* α1 : M.Val (array (ref str.t)) :=
                                      M.alloc [ α0 ] in
                                    let* α2 : core.fmt.rt.Argument.t :=
                                      M.call
                                        (core.fmt.rt.Argument.t::["new_display"]
                                          (borrow e)) in
                                    let* α3 :
                                        M.Val (array core.fmt.rt.Argument.t) :=
                                      M.alloc [ α2 ] in
                                    let* α4 : core.fmt.Arguments.t :=
                                      M.call
                                        (core.fmt.Arguments.t::["new_v1"]
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow α1))
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow α3))) in
                                    let* α5 : log.Level.t := M.read lvl in
                                    let* α6 : ref str.t :=
                                      M.read (mk_str "assistants_extra::llm") in
                                    let* α7 : ref str.t :=
                                      M.read (mk_str "assistants_extra::llm") in
                                    let* α8 : ref str.t :=
                                      M.read
                                        (mk_str
                                          "assistants-extra/src/llm.rs") in
                                    let* α9 :
                                        M.Val
                                          (((ref str.t) * (ref str.t))
                                          *
                                          (ref str.t)) :=
                                      M.alloc (α6, α7, α8) in
                                    let* α10 : unit :=
                                      M.call
                                        (log.__private_api.log
                                          α4
                                          α5
                                          (borrow α9)
                                          ((Integer.of_Z 61) : u32.t)
                                          core.option.Option.None) in
                                    M.alloc α10 in
                                  M.alloc tt
                                else
                                  M.alloc tt in
                              let* α0 : assistants_extra.anthropic.ApiError.t :=
                                M.read e in
                              let* α1 :
                                  alloc.boxed.Box.t
                                    assistants_extra.anthropic.ApiError.t
                                    alloc.alloc.Global.t :=
                                M.call
                                  ((alloc.boxed.Box.t
                                        assistants_extra.anthropic.ApiError.t
                                        alloc.alloc.Global.t)::["new"]
                                    α0) in
                              let* α2 :
                                  M.Val
                                    (alloc.boxed.Box.t
                                      (dyn [core.error.Error.Trait])
                                      alloc.alloc.Global.t) :=
                                M.alloc (pointer_coercion "Unsize" α1) in
                              let* α0 :
                                  alloc.boxed.Box.t
                                    (dyn [core.error.Error.Trait])
                                    alloc.alloc.Global.t :=
                                M.read (use α2) in
                              M.pure (pointer_coercion "Unsize" α0)) :
                              M
                                (alloc.boxed.Box.t
                                  (dyn [core.error.Error.Trait])
                                  alloc.alloc.Global.t)
                          ]) :
                        M
                          (alloc.boxed.Box.t
                            (dyn [core.error.Error.Trait])
                            alloc.alloc.Global.t))) in
                M.alloc α17
              else
                let* α0 : ref str.t := M.read model_name in
                let* α1 : ref str.t := M.read (mk_str "gpt") in
                let* α2 : bool.t := M.call (str.t::["contains"] α0 α1) in
                let* α3 : M.Val bool.t := M.alloc α2 in
                let* α4 : bool.t := M.read (use α3) in
                if α4 then
                  let* _ : M.Val unit :=
                    let* lvl : M.Val log.Level.t := M.alloc log.Level.Info in
                    let* α0 :
                        (ref log.Level.t) ->
                          (ref log.LevelFilter.t) ->
                          M bool.t :=
                      ltac:(M.get_method (fun ℐ =>
                        core.cmp.PartialOrd.le
                          (Self := log.Level.t)
                          (Rhs := log.LevelFilter.t)
                          (Trait := ℐ))) in
                    let* α1 : bool.t :=
                      M.call (α0 (borrow lvl) (borrow log.STATIC_MAX_LEVEL)) in
                    let* α2 :
                        (ref log.Level.t) ->
                          (ref log.LevelFilter.t) ->
                          M bool.t :=
                      ltac:(M.get_method (fun ℐ =>
                        core.cmp.PartialOrd.le
                          (Self := log.Level.t)
                          (Rhs := log.LevelFilter.t)
                          (Trait := ℐ))) in
                    let* α3 : log.LevelFilter.t := M.call log.max_level in
                    let* α4 : M.Val log.LevelFilter.t := M.alloc α3 in
                    let* α5 : bool.t := M.call (α2 (borrow lvl) (borrow α4)) in
                    let* α6 : M.Val bool.t := M.alloc (BinOp.Pure.and α1 α5) in
                    let* α7 : bool.t := M.read (use α6) in
                    if α7 then
                      let* _ : M.Val unit :=
                        let* α0 : ref str.t :=
                          M.read
                            (mk_str "Calling OpenAI API with messages: ") in
                        let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
                        let* α2 : core.fmt.rt.Argument.t :=
                          M.call
                            (core.fmt.rt.Argument.t::["new_debug"]
                              (borrow messages)) in
                        let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                          M.alloc [ α2 ] in
                        let* α4 : core.fmt.Arguments.t :=
                          M.call
                            (core.fmt.Arguments.t::["new_v1"]
                              (pointer_coercion "Unsize" (borrow α1))
                              (pointer_coercion "Unsize" (borrow α3))) in
                        let* α5 : log.Level.t := M.read lvl in
                        let* α6 : ref str.t :=
                          M.read (mk_str "assistants_extra::llm") in
                        let* α7 : ref str.t :=
                          M.read (mk_str "assistants_extra::llm") in
                        let* α8 : ref str.t :=
                          M.read (mk_str "assistants-extra/src/llm.rs") in
                        let* α9 :
                            M.Val (((ref str.t) * (ref str.t)) * (ref str.t)) :=
                          M.alloc (α6, α7, α8) in
                        let* α10 : unit :=
                          M.call
                            (log.__private_api.log
                              α4
                              α5
                              (borrow α9)
                              ((Integer.of_Z 65) : u32.t)
                              core.option.Option.None) in
                        M.alloc α10 in
                      M.alloc tt
                    else
                      M.alloc tt in
                  let* _ : M.Val unit :=
                    let* α0 : i32.t := M.read max_tokens_to_sample in
                    let* α1 : M.Val bool.t :=
                      M.alloc
                        (BinOp.Pure.eq α0 ((Integer.of_Z (-1)) : i32.t)) in
                    let* α2 : bool.t := M.read (use α1) in
                    if α2 then
                      let* bpe : M.Val tiktoken_rs.vendor_tiktoken.CoreBPE.t :=
                        let* α0 :
                            core.result.Result.t
                              tiktoken_rs.vendor_tiktoken.CoreBPE.t
                              anyhow.Error.t :=
                          M.call
                            tiktoken_rs.tiktoken_ext.openai_public.p50k_base in
                        let* α1 : tiktoken_rs.vendor_tiktoken.CoreBPE.t :=
                          M.call
                            ((core.result.Result.t
                                  tiktoken_rs.vendor_tiktoken.CoreBPE.t
                                  anyhow.Error.t)::["unwrap"]
                              α0) in
                        M.alloc α1 in
                      let* tokens :
                          M.Val
                            (alloc.vec.Vec.t usize.t alloc.alloc.Global.t) :=
                        let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.deref.Deref.deref
                              (Self := alloc.string.String.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              alloc.string.String.t
                              serde_json.error.Error.t :=
                          M.call (serde_json.ser.to_string (borrow messages)) in
                        let* α2 : alloc.string.String.t :=
                          M.call
                            ((core.result.Result.t
                                  alloc.string.String.t
                                  serde_json.error.Error.t)::["unwrap"]
                              α1) in
                        let* α3 : M.Val alloc.string.String.t := M.alloc α2 in
                        let* α4 : ref str.t := M.call (α0 (borrow α3)) in
                        let* α5 :
                            alloc.vec.Vec.t usize.t alloc.alloc.Global.t :=
                          M.call
                            (tiktoken_rs.vendor_tiktoken.CoreBPE.t::["encode_with_special_tokens"]
                              (borrow bpe)
                              α4) in
                        M.alloc α5 in
                      let* _ : M.Val unit :=
                        let* α0 : core.option.Option.t i32.t :=
                          M.read context_size in
                        let* α1 : i32.t :=
                          M.call
                            ((core.option.Option.t i32.t)::["unwrap_or"]
                              α0
                              ((Integer.of_Z 4096) : i32.t)) in
                        let* α2 : usize.t :=
                          M.call
                            ((alloc.vec.Vec.t
                                  usize.t
                                  alloc.alloc.Global.t)::["len"]
                              (borrow tokens)) in
                        let* α3 : i32.t := BinOp.Panic.sub α1 (rust_cast α2) in
                        assign max_tokens_to_sample α3 in
                      M.alloc tt
                    else
                      M.alloc tt in
                  let* α0 : _ -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      core.future.into_future.IntoFuture.into_future
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 :
                      alloc.vec.Vec.t
                        assistants_extra.openai.Message.t
                        alloc.alloc.Global.t :=
                    M.read messages in
                  let* α2 : i32.t := M.read max_tokens_to_sample in
                  let* α3 : (ref str.t) -> M alloc.string.String.t :=
                    ltac:(M.get_method (fun ℐ =>
                      alloc.string.ToString.to_string
                        (Self := str.t)
                        (Trait := ℐ))) in
                  let* α4 : ref str.t := M.read model_name in
                  let* α5 : alloc.string.String.t := M.call (α3 α4) in
                  let* α6 : core.option.Option.t f32.t := M.read temperature in
                  let* α7 :
                      core.option.Option.t
                        (alloc.vec.Vec.t
                          alloc.string.String.t
                          alloc.alloc.Global.t) :=
                    M.read stop_sequences in
                  let* α8 : core.option.Option.t f32.t := M.read top_p in
                  let* α9 : _ :=
                    M.call
                      (assistants_extra.openai.call_openai_api_with_messages
                        α1
                        α2
                        (core.option.Option.Some α5)
                        α6
                        α7
                        α8) in
                  let* α10 : _ := M.call (α0 α9) in
                  let* α11 : M.Val _ := M.alloc α10 in
                  let* α12 :
                      M.Val
                        (core.result.Result.t
                          assistants_extra.openai.ChatCompletion.t
                          assistants_extra.openai.OpenAIApiError.t) :=
                    match_operator
                      α11
                      [
                        fun γ =>
                          (let* __awaitee := M.copy γ in
                          M.loop
                            (let* _ : M.Val unit :=
                              let* α0 :
                                  (core.pin.Pin.t (mut_ref _)) ->
                                    (mut_ref core.task.wake.Context.t) ->
                                    M (core.task.poll.Poll.t _) :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.future.future.Future.poll
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : core.pin.Pin.t (mut_ref _) :=
                                M.call
                                  ((core.pin.Pin.t
                                        (mut_ref _))::["new_unchecked"]
                                    (borrow_mut __awaitee)) in
                              let* α2 : core.future.ResumeTy.t :=
                                M.read _task_context in
                              let* α3 : mut_ref core.task.wake.Context.t :=
                                M.call (core.future.get_context α2) in
                              let* α4 :
                                  core.task.poll.Poll.t
                                    (core.result.Result.t
                                      assistants_extra.openai.ChatCompletion.t
                                      assistants_extra.openai.OpenAIApiError.t) :=
                                M.call (α0 α1 α3) in
                              let* α5 :
                                  M.Val
                                    (core.task.poll.Poll.t
                                      (core.result.Result.t
                                        assistants_extra.openai.ChatCompletion.t
                                        assistants_extra.openai.OpenAIApiError.t)) :=
                                M.alloc α4 in
                              match_operator
                                α5
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    | core.task.poll.Poll.Ready _ =>
                                      let γ0_0 :=
                                        core.task.poll.Poll.Get_Ready_0 γ in
                                      let* result := M.copy γ0_0 in
                                      let* α0 : M.Val never.t := M.break in
                                      let* α1 := M.read α0 in
                                      let* α2 : unit := never_to_any α1 in
                                      M.alloc α2
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val unit);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    | core.task.poll.Poll.Pending => M.alloc tt
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val unit)
                                ] in
                            let* _ : M.Val unit :=
                              let* α0 : M.Val unit := M.alloc tt in
                              let* α1 : M.Val core.future.ResumeTy.t :=
                                yield α0 in
                              let* α2 : core.future.ResumeTy.t := M.read α1 in
                              assign _task_context α2 in
                            M.alloc tt)) :
                          M
                            (M.Val
                              (core.result.Result.t
                                assistants_extra.openai.ChatCompletion.t
                                assistants_extra.openai.OpenAIApiError.t))
                      ] in
                  let* α13 :
                      core.result.Result.t
                        assistants_extra.openai.ChatCompletion.t
                        assistants_extra.openai.OpenAIApiError.t :=
                    M.read α12 in
                  let* α14 :
                      core.result.Result.t
                        alloc.string.String.t
                        assistants_extra.openai.OpenAIApiError.t :=
                    M.call
                      ((core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            assistants_extra.openai.OpenAIApiError.t)::["map"]
                        α13
                        (fun (α0 : assistants_extra.openai.ChatCompletion.t) =>
                          (let* α0 := M.alloc α0 in
                          match_operator
                            α0
                            [
                              fun γ =>
                                (let* res := M.copy γ in
                                let* α0 :
                                    (ref alloc.string.String.t) ->
                                      M alloc.string.String.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.clone.Clone.clone
                                      (Self := alloc.string.String.t)
                                      (Trait := ℐ))) in
                                let* α1 :
                                    (ref
                                        (alloc.vec.Vec.t
                                          assistants_extra.openai.Choice.t
                                          alloc.alloc.Global.t))
                                      ->
                                      usize.t ->
                                      M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.index.Index.index
                                      (Self :=
                                        alloc.vec.Vec.t
                                          assistants_extra.openai.Choice.t
                                          alloc.alloc.Global.t)
                                      (Idx := usize.t)
                                      (Trait := ℐ))) in
                                let* α2 :
                                    ref assistants_extra.openai.Choice.t :=
                                  M.call
                                    (α1
                                      (borrow
                                        (assistants_extra.openai.ChatCompletion.Get_choices
                                          res))
                                      ((Integer.of_Z 0) : usize.t)) in
                                M.call
                                  (α0
                                    (borrow
                                      (assistants_extra.openai.Message.Get_content
                                        (assistants_extra.openai.Choice.Get_message
                                          (deref α2)))))) :
                                M alloc.string.String.t
                            ]) :
                          M alloc.string.String.t)) in
                  let* α15 :
                      core.result.Result.t
                        alloc.string.String.t
                        (alloc.boxed.Box.t
                          (dyn [core.error.Error.Trait])
                          alloc.alloc.Global.t) :=
                    M.call
                      ((core.result.Result.t
                            alloc.string.String.t
                            assistants_extra.openai.OpenAIApiError.t)::["map_err"]
                        α14
                        (fun (α0 : assistants_extra.openai.OpenAIApiError.t) =>
                          (let* α0 := M.alloc α0 in
                          match_operator
                            α0
                            [
                              fun γ =>
                                (let* e := M.copy γ in
                                let* _ : M.Val unit :=
                                  let* lvl : M.Val log.Level.t :=
                                    M.alloc log.Level.Error in
                                  let* α0 :
                                      (ref log.Level.t) ->
                                        (ref log.LevelFilter.t) ->
                                        M bool.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.cmp.PartialOrd.le
                                        (Self := log.Level.t)
                                        (Rhs := log.LevelFilter.t)
                                        (Trait := ℐ))) in
                                  let* α1 : bool.t :=
                                    M.call
                                      (α0
                                        (borrow lvl)
                                        (borrow log.STATIC_MAX_LEVEL)) in
                                  let* α2 :
                                      (ref log.Level.t) ->
                                        (ref log.LevelFilter.t) ->
                                        M bool.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.cmp.PartialOrd.le
                                        (Self := log.Level.t)
                                        (Rhs := log.LevelFilter.t)
                                        (Trait := ℐ))) in
                                  let* α3 : log.LevelFilter.t :=
                                    M.call log.max_level in
                                  let* α4 : M.Val log.LevelFilter.t :=
                                    M.alloc α3 in
                                  let* α5 : bool.t :=
                                    M.call (α2 (borrow lvl) (borrow α4)) in
                                  let* α6 : M.Val bool.t :=
                                    M.alloc (BinOp.Pure.and α1 α5) in
                                  let* α7 : bool.t := M.read (use α6) in
                                  if α7 then
                                    let* _ : M.Val unit :=
                                      let* α0 : ref str.t :=
                                        M.read
                                          (mk_str
                                            "Error calling OpenAI API: ") in
                                      let* α1 : M.Val (array (ref str.t)) :=
                                        M.alloc [ α0 ] in
                                      let* α2 : core.fmt.rt.Argument.t :=
                                        M.call
                                          (core.fmt.rt.Argument.t::["new_display"]
                                            (borrow e)) in
                                      let* α3 :
                                          M.Val
                                            (array core.fmt.rt.Argument.t) :=
                                        M.alloc [ α2 ] in
                                      let* α4 : core.fmt.Arguments.t :=
                                        M.call
                                          (core.fmt.Arguments.t::["new_v1"]
                                            (pointer_coercion
                                              "Unsize"
                                              (borrow α1))
                                            (pointer_coercion
                                              "Unsize"
                                              (borrow α3))) in
                                      let* α5 : log.Level.t := M.read lvl in
                                      let* α6 : ref str.t :=
                                        M.read
                                          (mk_str "assistants_extra::llm") in
                                      let* α7 : ref str.t :=
                                        M.read
                                          (mk_str "assistants_extra::llm") in
                                      let* α8 : ref str.t :=
                                        M.read
                                          (mk_str
                                            "assistants-extra/src/llm.rs") in
                                      let* α9 :
                                          M.Val
                                            (((ref str.t) * (ref str.t))
                                            *
                                            (ref str.t)) :=
                                        M.alloc (α6, α7, α8) in
                                      let* α10 : unit :=
                                        M.call
                                          (log.__private_api.log
                                            α4
                                            α5
                                            (borrow α9)
                                            ((Integer.of_Z 82) : u32.t)
                                            core.option.Option.None) in
                                      M.alloc α10 in
                                    M.alloc tt
                                  else
                                    M.alloc tt in
                                let* α0 :
                                    assistants_extra.openai.OpenAIApiError.t :=
                                  M.read e in
                                let* α1 :
                                    alloc.boxed.Box.t
                                      assistants_extra.openai.OpenAIApiError.t
                                      alloc.alloc.Global.t :=
                                  M.call
                                    ((alloc.boxed.Box.t
                                          assistants_extra.openai.OpenAIApiError.t
                                          alloc.alloc.Global.t)::["new"]
                                      α0) in
                                let* α2 :
                                    M.Val
                                      (alloc.boxed.Box.t
                                        (dyn [core.error.Error.Trait])
                                        alloc.alloc.Global.t) :=
                                  M.alloc (pointer_coercion "Unsize" α1) in
                                let* α0 :
                                    alloc.boxed.Box.t
                                      (dyn [core.error.Error.Trait])
                                      alloc.alloc.Global.t :=
                                  M.read (use α2) in
                                M.pure (pointer_coercion "Unsize" α0)) :
                                M
                                  (alloc.boxed.Box.t
                                    (dyn [core.error.Error.Trait])
                                    alloc.alloc.Global.t)
                            ]) :
                          M
                            (alloc.boxed.Box.t
                              (dyn [core.error.Error.Trait])
                              alloc.alloc.Global.t))) in
                  M.alloc α15
                else
                  let* α0 : ref str.t := M.read model_name in
                  let* α1 : ref str.t := M.read (mk_str "/") in
                  let* α2 : bool.t := M.call (str.t::["contains"] α0 α1) in
                  let* α3 : M.Val bool.t := M.alloc α2 in
                  let* α4 : bool.t := M.read (use α3) in
                  if α4 then
                    let* model_name : M.Val (ref str.t) :=
                      let* α0 :
                          (core.str.iter.Split.t char.t) ->
                            M (core.option.Option.t _) :=
                        ltac:(M.get_method (fun ℐ =>
                          core.iter.traits.iterator.Iterator.last
                            (Self := core.str.iter.Split.t char.t)
                            (Trait := ℐ))) in
                      let* α1 : ref str.t := M.read model_name in
                      let* α2 : core.str.iter.Split.t char.t :=
                        M.call (str.t::["split"] α1 "/"%char) in
                      let* α3 : core.option.Option.t (ref str.t) :=
                        M.call (α0 α2) in
                      let* α4 : ref str.t :=
                        M.call
                          ((core.option.Option.t
                                (ref str.t))::["unwrap_or_default"]
                            α3) in
                      M.alloc α4 in
                    let* url : M.Val alloc.string.String.t :=
                      let* α0 : core.option.Option.t alloc.string.String.t :=
                        M.read model_url in
                      let* α1 : alloc.string.String.t :=
                        M.call
                          ((core.option.Option.t
                                alloc.string.String.t)::["unwrap_or_else"]
                            α0
                            (fun (α0 : unit) =>
                              (let* α0 := M.alloc α0 in
                              match_operator
                                α0
                                [
                                  fun γ =>
                                    (let* α0 : ref str.t :=
                                      M.read (mk_str "MODEL_URL") in
                                    let* α1 :
                                        core.result.Result.t
                                          alloc.string.String.t
                                          std.env.VarError.t :=
                                      M.call (std.env.var α0) in
                                    M.call
                                      ((core.result.Result.t
                                            alloc.string.String.t
                                            std.env.VarError.t)::["unwrap_or_else"]
                                        α1
                                        (fun (α0 : std.env.VarError.t) =>
                                          (let* α0 := M.alloc α0 in
                                          match_operator
                                            α0
                                            [
                                              fun γ =>
                                                (let* α0 :
                                                    (ref str.t) ->
                                                      M alloc.string.String.t :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.convert.From.from
                                                      (Self :=
                                                        alloc.string.String.t)
                                                      (T := ref str.t)
                                                      (Trait := ℐ))) in
                                                let* α1 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "http://localhost:8000/v1/chat/completions") in
                                                M.call (α0 α1)) :
                                                M alloc.string.String.t
                                            ]) :
                                          M alloc.string.String.t))) :
                                    M alloc.string.String.t
                                ]) :
                              M alloc.string.String.t)) in
                      M.alloc α1 in
                    let* _ : M.Val unit :=
                      let* lvl : M.Val log.Level.t := M.alloc log.Level.Info in
                      let* α0 :
                          (ref log.Level.t) ->
                            (ref log.LevelFilter.t) ->
                            M bool.t :=
                        ltac:(M.get_method (fun ℐ =>
                          core.cmp.PartialOrd.le
                            (Self := log.Level.t)
                            (Rhs := log.LevelFilter.t)
                            (Trait := ℐ))) in
                      let* α1 : bool.t :=
                        M.call
                          (α0 (borrow lvl) (borrow log.STATIC_MAX_LEVEL)) in
                      let* α2 :
                          (ref log.Level.t) ->
                            (ref log.LevelFilter.t) ->
                            M bool.t :=
                        ltac:(M.get_method (fun ℐ =>
                          core.cmp.PartialOrd.le
                            (Self := log.Level.t)
                            (Rhs := log.LevelFilter.t)
                            (Trait := ℐ))) in
                      let* α3 : log.LevelFilter.t := M.call log.max_level in
                      let* α4 : M.Val log.LevelFilter.t := M.alloc α3 in
                      let* α5 : bool.t :=
                        M.call (α2 (borrow lvl) (borrow α4)) in
                      let* α6 : M.Val bool.t :=
                        M.alloc (BinOp.Pure.and α1 α5) in
                      let* α7 : bool.t := M.read (use α6) in
                      if α7 then
                        let* _ : M.Val unit :=
                          let* α0 : ref str.t :=
                            M.read
                              (mk_str
                                "Calling Open Source LLM through OpenAI API with messages: ") in
                          let* α1 : M.Val (array (ref str.t)) :=
                            M.alloc [ α0 ] in
                          let* α2 : core.fmt.rt.Argument.t :=
                            M.call
                              (core.fmt.rt.Argument.t::["new_debug"]
                                (borrow messages)) in
                          let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                            M.alloc [ α2 ] in
                          let* α4 : core.fmt.Arguments.t :=
                            M.call
                              (core.fmt.Arguments.t::["new_v1"]
                                (pointer_coercion "Unsize" (borrow α1))
                                (pointer_coercion "Unsize" (borrow α3))) in
                          let* α5 : log.Level.t := M.read lvl in
                          let* α6 : ref str.t :=
                            M.read (mk_str "assistants_extra::llm") in
                          let* α7 : ref str.t :=
                            M.read (mk_str "assistants_extra::llm") in
                          let* α8 : ref str.t :=
                            M.read (mk_str "assistants-extra/src/llm.rs") in
                          let* α9 :
                              M.Val
                                (((ref str.t) * (ref str.t)) * (ref str.t)) :=
                            M.alloc (α6, α7, α8) in
                          let* α10 : unit :=
                            M.call
                              (log.__private_api.log
                                α4
                                α5
                                (borrow α9)
                                ((Integer.of_Z 92) : u32.t)
                                core.option.Option.None) in
                          M.alloc α10 in
                        M.alloc tt
                      else
                        M.alloc tt in
                    let* _ : M.Val unit :=
                      let* α0 : i32.t := M.read max_tokens_to_sample in
                      let* α1 : M.Val bool.t :=
                        M.alloc
                          (BinOp.Pure.eq α0 ((Integer.of_Z (-1)) : i32.t)) in
                      let* α2 : bool.t := M.read (use α1) in
                      if α2 then
                        let* bpe :
                            M.Val tiktoken_rs.vendor_tiktoken.CoreBPE.t :=
                          let* α0 :
                              core.result.Result.t
                                tiktoken_rs.vendor_tiktoken.CoreBPE.t
                                anyhow.Error.t :=
                            M.call
                              tiktoken_rs.tiktoken_ext.openai_public.p50k_base in
                          let* α1 : tiktoken_rs.vendor_tiktoken.CoreBPE.t :=
                            M.call
                              ((core.result.Result.t
                                    tiktoken_rs.vendor_tiktoken.CoreBPE.t
                                    anyhow.Error.t)::["unwrap"]
                                α0) in
                          M.alloc α1 in
                        let* tokens :
                            M.Val
                              (alloc.vec.Vec.t usize.t alloc.alloc.Global.t) :=
                          let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.deref.Deref.deref
                                (Self := alloc.string.String.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                alloc.string.String.t
                                serde_json.error.Error.t :=
                            M.call
                              (serde_json.ser.to_string (borrow messages)) in
                          let* α2 : alloc.string.String.t :=
                            M.call
                              ((core.result.Result.t
                                    alloc.string.String.t
                                    serde_json.error.Error.t)::["unwrap"]
                                α1) in
                          let* α3 : M.Val alloc.string.String.t := M.alloc α2 in
                          let* α4 : ref str.t := M.call (α0 (borrow α3)) in
                          let* α5 :
                              alloc.vec.Vec.t usize.t alloc.alloc.Global.t :=
                            M.call
                              (tiktoken_rs.vendor_tiktoken.CoreBPE.t::["encode_with_special_tokens"]
                                (borrow bpe)
                                α4) in
                          M.alloc α5 in
                        let* _ : M.Val unit :=
                          let* α0 : core.option.Option.t i32.t :=
                            M.read context_size in
                          let* α1 : i32.t :=
                            M.call
                              ((core.option.Option.t i32.t)::["unwrap_or"]
                                α0
                                ((Integer.of_Z 4096) : i32.t)) in
                          let* α2 : usize.t :=
                            M.call
                              ((alloc.vec.Vec.t
                                    usize.t
                                    alloc.alloc.Global.t)::["len"]
                                (borrow tokens)) in
                          let* α3 : i32.t :=
                            BinOp.Panic.sub α1 (rust_cast α2) in
                          assign max_tokens_to_sample α3 in
                        let* _ : M.Val unit :=
                          let* _ : M.Val unit :=
                            let* α0 : ref str.t :=
                              M.read (mk_str "max_tokens_to_sample: ") in
                            let* α1 : ref str.t := M.read (mk_str "
") in
                            let* α2 : M.Val (array (ref str.t)) :=
                              M.alloc [ α0; α1 ] in
                            let* α3 : core.fmt.rt.Argument.t :=
                              M.call
                                (core.fmt.rt.Argument.t::["new_display"]
                                  (borrow max_tokens_to_sample)) in
                            let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                              M.alloc [ α3 ] in
                            let* α5 : core.fmt.Arguments.t :=
                              M.call
                                (core.fmt.Arguments.t::["new_v1"]
                                  (pointer_coercion "Unsize" (borrow α2))
                                  (pointer_coercion "Unsize" (borrow α4))) in
                            let* α6 : unit := M.call (std.io.stdio._print α5) in
                            M.alloc α6 in
                          M.alloc tt in
                        M.alloc tt
                      else
                        M.alloc tt in
                    let* α0 : _ -> M _ :=
                      ltac:(M.get_method (fun ℐ =>
                        core.future.into_future.IntoFuture.into_future
                          (Self := _)
                          (Trait := ℐ))) in
                    let* α1 :
                        alloc.vec.Vec.t
                          assistants_extra.openai.Message.t
                          alloc.alloc.Global.t :=
                      M.read messages in
                    let* α2 : i32.t := M.read max_tokens_to_sample in
                    let* α3 : (ref str.t) -> M alloc.string.String.t :=
                      ltac:(M.get_method (fun ℐ =>
                        alloc.string.ToString.to_string
                          (Self := str.t)
                          (Trait := ℐ))) in
                    let* α4 : ref str.t := M.read model_name in
                    let* α5 : alloc.string.String.t := M.call (α3 α4) in
                    let* α6 : core.option.Option.t f32.t :=
                      M.read temperature in
                    let* α7 :
                        core.option.Option.t
                          (alloc.vec.Vec.t
                            alloc.string.String.t
                            alloc.alloc.Global.t) :=
                      M.read stop_sequences in
                    let* α8 : core.option.Option.t f32.t := M.read top_p in
                    let* α9 : alloc.string.String.t := M.read url in
                    let* α10 : _ :=
                      M.call
                        (assistants_extra.openai.call_open_source_openai_api_with_messages
                          α1
                          α2
                          α5
                          α6
                          α7
                          α8
                          α9) in
                    let* α11 : _ := M.call (α0 α10) in
                    let* α12 : M.Val _ := M.alloc α11 in
                    let* α13 :
                        M.Val
                          (core.result.Result.t
                            assistants_extra.openai.ChatCompletion.t
                            assistants_extra.openai.OpenAIApiError.t) :=
                      match_operator
                        α12
                        [
                          fun γ =>
                            (let* __awaitee := M.copy γ in
                            M.loop
                              (let* _ : M.Val unit :=
                                let* α0 :
                                    (core.pin.Pin.t (mut_ref _)) ->
                                      (mut_ref core.task.wake.Context.t) ->
                                      M (core.task.poll.Poll.t _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.future.future.Future.poll
                                      (Self := _)
                                      (Trait := ℐ))) in
                                let* α1 : core.pin.Pin.t (mut_ref _) :=
                                  M.call
                                    ((core.pin.Pin.t
                                          (mut_ref _))::["new_unchecked"]
                                      (borrow_mut __awaitee)) in
                                let* α2 : core.future.ResumeTy.t :=
                                  M.read _task_context in
                                let* α3 : mut_ref core.task.wake.Context.t :=
                                  M.call (core.future.get_context α2) in
                                let* α4 :
                                    core.task.poll.Poll.t
                                      (core.result.Result.t
                                        assistants_extra.openai.ChatCompletion.t
                                        assistants_extra.openai.OpenAIApiError.t) :=
                                  M.call (α0 α1 α3) in
                                let* α5 :
                                    M.Val
                                      (core.task.poll.Poll.t
                                        (core.result.Result.t
                                          assistants_extra.openai.ChatCompletion.t
                                          assistants_extra.openai.OpenAIApiError.t)) :=
                                  M.alloc α4 in
                                match_operator
                                  α5
                                  [
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | core.task.poll.Poll.Ready _ =>
                                        let γ0_0 :=
                                          core.task.poll.Poll.Get_Ready_0 γ in
                                        let* result := M.copy γ0_0 in
                                        let* α0 : M.Val never.t := M.break in
                                        let* α1 := M.read α0 in
                                        let* α2 : unit := never_to_any α1 in
                                        M.alloc α2
                                      | _ => M.break_match
                                      end) :
                                      M (M.Val unit);
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | core.task.poll.Poll.Pending =>
                                        M.alloc tt
                                      | _ => M.break_match
                                      end) :
                                      M (M.Val unit)
                                  ] in
                              let* _ : M.Val unit :=
                                let* α0 : M.Val unit := M.alloc tt in
                                let* α1 : M.Val core.future.ResumeTy.t :=
                                  yield α0 in
                                let* α2 : core.future.ResumeTy.t := M.read α1 in
                                assign _task_context α2 in
                              M.alloc tt)) :
                            M
                              (M.Val
                                (core.result.Result.t
                                  assistants_extra.openai.ChatCompletion.t
                                  assistants_extra.openai.OpenAIApiError.t))
                        ] in
                    let* α14 :
                        core.result.Result.t
                          assistants_extra.openai.ChatCompletion.t
                          assistants_extra.openai.OpenAIApiError.t :=
                      M.read α13 in
                    let* α15 :
                        core.result.Result.t
                          alloc.string.String.t
                          assistants_extra.openai.OpenAIApiError.t :=
                      M.call
                        ((core.result.Result.t
                              assistants_extra.openai.ChatCompletion.t
                              assistants_extra.openai.OpenAIApiError.t)::["map"]
                          α14
                          (fun
                              (α0 : assistants_extra.openai.ChatCompletion.t) =>
                            (let* α0 := M.alloc α0 in
                            match_operator
                              α0
                              [
                                fun γ =>
                                  (let* res := M.copy γ in
                                  let* α0 :
                                      (ref alloc.string.String.t) ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.clone.Clone.clone
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      (ref
                                          (alloc.vec.Vec.t
                                            assistants_extra.openai.Choice.t
                                            alloc.alloc.Global.t))
                                        ->
                                        usize.t ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.index.Index.index
                                        (Self :=
                                          alloc.vec.Vec.t
                                            assistants_extra.openai.Choice.t
                                            alloc.alloc.Global.t)
                                        (Idx := usize.t)
                                        (Trait := ℐ))) in
                                  let* α2 :
                                      ref assistants_extra.openai.Choice.t :=
                                    M.call
                                      (α1
                                        (borrow
                                          (assistants_extra.openai.ChatCompletion.Get_choices
                                            res))
                                        ((Integer.of_Z 0) : usize.t)) in
                                  M.call
                                    (α0
                                      (borrow
                                        (assistants_extra.openai.Message.Get_content
                                          (assistants_extra.openai.Choice.Get_message
                                            (deref α2)))))) :
                                  M alloc.string.String.t
                              ]) :
                            M alloc.string.String.t)) in
                    let* α16 :
                        core.result.Result.t
                          alloc.string.String.t
                          (alloc.boxed.Box.t
                            (dyn [core.error.Error.Trait])
                            alloc.alloc.Global.t) :=
                      M.call
                        ((core.result.Result.t
                              alloc.string.String.t
                              assistants_extra.openai.OpenAIApiError.t)::["map_err"]
                          α15
                          (fun
                              (α0 : assistants_extra.openai.OpenAIApiError.t) =>
                            (let* α0 := M.alloc α0 in
                            match_operator
                              α0
                              [
                                fun γ =>
                                  (let* e := M.copy γ in
                                  let* _ : M.Val unit :=
                                    let* lvl : M.Val log.Level.t :=
                                      M.alloc log.Level.Error in
                                    let* α0 :
                                        (ref log.Level.t) ->
                                          (ref log.LevelFilter.t) ->
                                          M bool.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.cmp.PartialOrd.le
                                          (Self := log.Level.t)
                                          (Rhs := log.LevelFilter.t)
                                          (Trait := ℐ))) in
                                    let* α1 : bool.t :=
                                      M.call
                                        (α0
                                          (borrow lvl)
                                          (borrow log.STATIC_MAX_LEVEL)) in
                                    let* α2 :
                                        (ref log.Level.t) ->
                                          (ref log.LevelFilter.t) ->
                                          M bool.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.cmp.PartialOrd.le
                                          (Self := log.Level.t)
                                          (Rhs := log.LevelFilter.t)
                                          (Trait := ℐ))) in
                                    let* α3 : log.LevelFilter.t :=
                                      M.call log.max_level in
                                    let* α4 : M.Val log.LevelFilter.t :=
                                      M.alloc α3 in
                                    let* α5 : bool.t :=
                                      M.call (α2 (borrow lvl) (borrow α4)) in
                                    let* α6 : M.Val bool.t :=
                                      M.alloc (BinOp.Pure.and α1 α5) in
                                    let* α7 : bool.t := M.read (use α6) in
                                    if α7 then
                                      let* _ : M.Val unit :=
                                        let* α0 : ref str.t :=
                                          M.read
                                            (mk_str
                                              "Error calling Open Source LLM through OpenAI API: ") in
                                        let* α1 : M.Val (array (ref str.t)) :=
                                          M.alloc [ α0 ] in
                                        let* α2 : core.fmt.rt.Argument.t :=
                                          M.call
                                            (core.fmt.rt.Argument.t::["new_display"]
                                              (borrow e)) in
                                        let* α3 :
                                            M.Val
                                              (array core.fmt.rt.Argument.t) :=
                                          M.alloc [ α2 ] in
                                        let* α4 : core.fmt.Arguments.t :=
                                          M.call
                                            (core.fmt.Arguments.t::["new_v1"]
                                              (pointer_coercion
                                                "Unsize"
                                                (borrow α1))
                                              (pointer_coercion
                                                "Unsize"
                                                (borrow α3))) in
                                        let* α5 : log.Level.t := M.read lvl in
                                        let* α6 : ref str.t :=
                                          M.read
                                            (mk_str "assistants_extra::llm") in
                                        let* α7 : ref str.t :=
                                          M.read
                                            (mk_str "assistants_extra::llm") in
                                        let* α8 : ref str.t :=
                                          M.read
                                            (mk_str
                                              "assistants-extra/src/llm.rs") in
                                        let* α9 :
                                            M.Val
                                              (((ref str.t) * (ref str.t))
                                              *
                                              (ref str.t)) :=
                                          M.alloc (α6, α7, α8) in
                                        let* α10 : unit :=
                                          M.call
                                            (log.__private_api.log
                                              α4
                                              α5
                                              (borrow α9)
                                              ((Integer.of_Z 114) : u32.t)
                                              core.option.Option.None) in
                                        M.alloc α10 in
                                      M.alloc tt
                                    else
                                      M.alloc tt in
                                  let* α0 :
                                      assistants_extra.openai.OpenAIApiError.t :=
                                    M.read e in
                                  let* α1 :
                                      alloc.boxed.Box.t
                                        assistants_extra.openai.OpenAIApiError.t
                                        alloc.alloc.Global.t :=
                                    M.call
                                      ((alloc.boxed.Box.t
                                            assistants_extra.openai.OpenAIApiError.t
                                            alloc.alloc.Global.t)::["new"]
                                        α0) in
                                  let* α2 :
                                      M.Val
                                        (alloc.boxed.Box.t
                                          (dyn [core.error.Error.Trait])
                                          alloc.alloc.Global.t) :=
                                    M.alloc (pointer_coercion "Unsize" α1) in
                                  let* α0 :
                                      alloc.boxed.Box.t
                                        (dyn [core.error.Error.Trait])
                                        alloc.alloc.Global.t :=
                                    M.read (use α2) in
                                  M.pure (pointer_coercion "Unsize" α0)) :
                                  M
                                    (alloc.boxed.Box.t
                                      (dyn [core.error.Error.Trait])
                                      alloc.alloc.Global.t)
                              ]) :
                            M
                              (alloc.boxed.Box.t
                                (dyn [core.error.Error.Trait])
                                alloc.alloc.Global.t))) in
                    M.alloc α16
                  else
                    let* α0 : ref str.t := M.read (mk_str "Unknown model") in
                    let* α1 : std.io.error.Error.t :=
                      M.call
                        (std.io.error.Error.t::["new"]
                          std.io.error.ErrorKind.InvalidInput
                          α0) in
                    let* α2 :
                        alloc.boxed.Box.t
                          std.io.error.Error.t
                          alloc.alloc.Global.t :=
                      M.call
                        ((alloc.boxed.Box.t
                              std.io.error.Error.t
                              alloc.alloc.Global.t)::["new"]
                          α1) in
                    M.alloc
                      (core.result.Result.Err (pointer_coercion "Unsize" α2)) in
            M.read (use α0)) :
            M
              (core.result.Result.t
                alloc.string.String.t
                (alloc.boxed.Box.t
                  (dyn [core.error.Error.Trait])
                  alloc.alloc.Global.t))
        ]) :
      M
        (core.result.Result.t
          alloc.string.String.t
          (alloc.boxed.Box.t
            (dyn [core.error.Error.Trait])
            alloc.alloc.Global.t))).
