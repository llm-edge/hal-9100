(* Generated by coq-of-rust
Require Import CoqOfRust.CoqOfRust.
 *)

(* Definition foo1 :=   *)
(*   fun γ => *)
(*     (let* _task_context := M.copy γ in *)
(*      let* __arg0 : *)
(*        M.Val *)
(*          (axum.extract.state.State.t *)
(*             assistants_api_communication.models.AppState.t) := *)
(*                 M.copy __arg0 in *)
(*               let* α0 : *)
(*                   M.Val *)
(*                     (core.result.Result.t *)
(*                       (axum.json.Json.t *)
(*                         async_openai.types.assistant.AssistantObject.t) *)
(*                       (http.status.StatusCode.t * alloc.string.String.t)) := *)
(*                 match_operator *)
(*                   __arg0 *)
(*                   [ *)
(*                     fun γ => *)
(*                       (let* α0 := M.read γ in *)
(*                       match α0 with *)
(*                       | axum.extract.state.State.Build_t _ => *)
(*                         let γ0_0 := axum.extract.state.State.Get_0 γ in *)
(*                         let* app_state := M.copy γ0_0 in *)
(*                         let* __arg1 : *)
(*                             M.Val (axum.json.Json.t serde_json.value.Value.t) := *)
(*                           M.copy __arg1 in *)
(*                         match_operator *)
(*                           __arg1 *)
(*                           [ *)
(*                             fun γ => *)
(*                               (let* α0 := M.read γ in *)
(*                               match α0 with *)
(*                               | axum.json.Json.Build_t _ => *)
(*                                 let γ0_0 := axum.json.Json.Get_0 γ in *)
(*                                 let* assistant := M.copy γ0_0 in *)
(*                                 let* tools : *)
(*                                     M.Val *)
(*                                       (alloc.vec.Vec.t *)
(*                                         serde_json.value.Value.t *)
(*                                         alloc.alloc.Global.t) := *)
(*                                   let* α0 : *)
(*                                       (ref *)
(*                                           (alloc.vec.Vec.t *)
(*                                             serde_json.value.Value.t *)
(*                                             alloc.alloc.Global.t)) *)
(*                                         -> *)
(*                                         M (ref _) := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       core.ops.deref.Deref.deref *)
(*                                         (Self := *)
(*                                           alloc.vec.Vec.t *)
(*                                             serde_json.value.Value.t *)
(*                                             alloc.alloc.Global.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α1 : *)
(*                                       (ref serde_json.value.Value.t) -> *)
(*                                         (ref str.t) -> *)
(*                                         M (ref _) := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       core.ops.index.Index.index *)
(*                                         (Self := serde_json.value.Value.t) *)
(*                                         (Idx := ref str.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α2 : ref str.t := *)
(*                                     M.read (mk_str "tools") in *)
(*                                   let* α3 : ref serde_json.value.Value.t := *)
(*                                     M.call (α1 (borrow assistant) α2) in *)
(*                                   let* α4 : *)
(*                                       core.option.Option.t *)
(*                                         (ref *)
(*                                           (alloc.vec.Vec.t *)
(*                                             serde_json.value.Value.t *)
(*                                             alloc.alloc.Global.t)) := *)
(*                                     M.call *)
(*                                       (serde_json.value.Value.t::["as_array"] *)
(*                                         α3) in *)
(*                                   let* α5 : *)
(*                                       alloc.vec.Vec.t *)
(*                                         serde_json.value.Value.t *)
(*                                         alloc.alloc.Global.t := *)
(*                                     M.call *)
(*                                       (alloc.vec.Vec.t *)
(*                                           serde_json.value.Value.t *)
(*                                           alloc.alloc.Global.t)::["new"] in *)
(*                                   let* α6 : *)
(*                                       M.Val *)
(*                                         (alloc.vec.Vec.t *)
(*                                           serde_json.value.Value.t *)
(*                                           alloc.alloc.Global.t) := *)
(*                                     M.alloc α5 in *)
(*                                   let* α7 : *)
(*                                       ref *)
(*                                         (alloc.vec.Vec.t *)
(*                                           serde_json.value.Value.t *)
(*                                           alloc.alloc.Global.t) := *)
(*                                     M.call *)
(*                                       ((core.option.Option.t *)
(*                                             (ref *)
(*                                               (alloc.vec.Vec.t *)
(*                                                 serde_json.value.Value.t *)
(*                                                 alloc.alloc.Global.t)))::["unwrap_or"] *)
(*                                         α4 *)
(*                                         (borrow α6)) in *)
(*                                   let* α8 : *)
(*                                       ref (slice serde_json.value.Value.t) := *)
(*                                     M.call (α0 α7) in *)
(*                                   let* α9 : *)
(*                                       alloc.vec.Vec.t *)
(*                                         serde_json.value.Value.t *)
(*                                         alloc.alloc.Global.t := *)
(*                                     M.call *)
(*                                       ((slice *)
(*                                             serde_json.value.Value.t)::["to_vec"] *)
(*                                         α8) in *)
(*                                   M.alloc α9 in *)
(*                                 let* assistant : *)
(*                                     M.Val *)
(*                                       (core.result.Result.t *)
(*                                         assistants_core.models.Assistant.t *)
(*                                         assistants_core.assistants.AssistantError.t) := *)
(*                                   let* α0 : _ -> M _ := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       core.future.into_future.IntoFuture.into_future *)
(*                                         (Self := _) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α1 : *)
(*                                       (ref *)
(*                                           (alloc.sync.Arc.t *)
(*                                             (sqlx_core.pool.Pool.t *)
(*                                               sqlx_postgres.database.Postgres.t) *)
(*                                             alloc.alloc.Global.t)) *)
(*                                         -> *)
(*                                         M (ref _) := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       core.ops.deref.Deref.deref *)
(*                                         (Self := *)
(*                                           alloc.sync.Arc.t *)
(*                                             (sqlx_core.pool.Pool.t *)
(*                                               sqlx_postgres.database.Postgres.t) *)
(*                                             alloc.alloc.Global.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α2 : *)
(*                                       ref *)
(*                                         (sqlx_core.pool.Pool.t *)
(*                                           sqlx_postgres.database.Postgres.t) := *)
(*                                     M.call *)
(*                                       (α1 *)
(*                                         (borrow *)
(*                                           (assistants_api_communication.models.AppState.Get_pool *)
(*                                             app_state))) in *)
(*                                   let* α3 : M alloc.string.String.t := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       core.default.Default.default *)
(*                                         (Self := alloc.string.String.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α4 : alloc.string.String.t := *)
(*                                     M.call α3 in *)
(*                                   let* α5 : *)
(*                                       (ref str.t) -> M alloc.string.String.t := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       alloc.string.ToString.to_string *)
(*                                         (Self := str.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α6 : *)
(*                                       (ref serde_json.value.Value.t) -> *)
(*                                         (ref str.t) -> *)
(*                                         M (ref _) := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       core.ops.index.Index.index *)
(*                                         (Self := serde_json.value.Value.t) *)
(*                                         (Idx := ref str.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α7 : ref str.t := *)
(*                                     M.read (mk_str "instructions") in *)
(*                                   let* α8 : ref serde_json.value.Value.t := *)
(*                                     M.call (α6 (borrow assistant) α7) in *)
(*                                   let* α9 : core.option.Option.t (ref str.t) := *)
(*                                     M.call *)
(*                                       (serde_json.value.Value.t::["as_str"] *)
(*                                         α8) in *)
(*                                   let* α10 : ref str.t := *)
(*                                     M.call *)
(*                                       ((core.option.Option.t *)
(*                                             (ref str.t))::["unwrap"] *)
(*                                         α9) in *)
(*                                   let* α11 : alloc.string.String.t := *)
(*                                     M.call (α5 α10) in *)
(*                                   let* α12 : *)
(*                                       (ref str.t) -> M alloc.string.String.t := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       alloc.string.ToString.to_string *)
(*                                         (Self := str.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α13 : *)
(*                                       (ref serde_json.value.Value.t) -> *)
(*                                         (ref str.t) -> *)
(*                                         M (ref _) := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       core.ops.index.Index.index *)
(*                                         (Self := serde_json.value.Value.t) *)
(*                                         (Idx := ref str.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α14 : ref str.t := *)
(*                                     M.read (mk_str "name") in *)
(*                                   let* α15 : ref serde_json.value.Value.t := *)
(*                                     M.call (α13 (borrow assistant) α14) in *)
(*                                   let* α16 : core.option.Option.t (ref str.t) := *)
(*                                     M.call *)
(*                                       (serde_json.value.Value.t::["as_str"] *)
(*                                         α15) in *)
(*                                   let* α17 : ref str.t := *)
(*                                     M.call *)
(*                                       ((core.option.Option.t *)
(*                                             (ref str.t))::["unwrap"] *)
(*                                         α16) in *)
(*                                   let* α18 : alloc.string.String.t := *)
(*                                     M.call (α12 α17) in *)
(*                                   let* α19 : *)
(*                                       alloc.vec.Vec.t *)
(*                                         serde_json.value.Value.t *)
(*                                         alloc.alloc.Global.t := *)
(*                                     M.read tools in *)
(*                                   let* α20 : *)
(*                                       assistants_core.assistants.Tools.t := *)
(*                                     M.call *)
(*                                       (assistants_core.assistants.Tools.t::["new"] *)
(*                                         (core.option.Option.Some α19)) in *)
(*                                   let* α21 : *)
(*                                       M.Val *)
(*                                         assistants_core.assistants.Tools.t := *)
(*                                     M.alloc α20 in *)
(*                                   let* α22 : *)
(*                                       core.result.Result.t *)
(*                                         (alloc.vec.Vec.t *)
(*                                           async_openai.types.assistant.AssistantTools.t *)
(*                                           alloc.alloc.Global.t) *)
(*                                         (alloc.boxed.Box.t *)
(*                                           serde_json.error.Error.t *)
(*                                           alloc.alloc.Global.t) := *)
(*                                     M.call *)
(*                                       (assistants_core.assistants.Tools.t::["to_tools"] *)
(*                                         (borrow α21)) in *)
(*                                   let* α23 : *)
(*                                       M.Val *)
(*                                         (core.result.Result.t *)
(*                                           (alloc.vec.Vec.t *)
(*                                             async_openai.types.assistant.AssistantTools.t *)
(*                                             alloc.alloc.Global.t) *)
(*                                           (alloc.boxed.Box.t *)
(*                                             serde_json.error.Error.t *)
(*                                             alloc.alloc.Global.t)) := *)
(*                                     M.alloc α22 in *)
(*                                   let* α24 : *)
(*                                       M.Val *)
(*                                         (alloc.vec.Vec.t *)
(*                                           async_openai.types.assistant.AssistantTools.t *)
(*                                           alloc.alloc.Global.t) := *)
(*                                     match_operator *)
(*                                       α23 *)
(*                                       [ *)
(*                                         fun γ => *)
(*                                           (let* α0 := M.read γ in *)
(*                                           match α0 with *)
(*                                           | core.result.Result.Ok _ => *)
(*                                             let γ0_0 := *)
(*                                               core.result.Result.Get_Ok_0 γ in *)
(*                                             let* tools := M.copy γ0_0 in *)
(*                                             M.pure tools *)
(*                                           | _ => M.break_match *)
(*                                           end) : *)
(*                                           M *)
(*                                             (M.Val *)
(*                                               (alloc.vec.Vec.t *)
(*                                                 async_openai.types.assistant.AssistantTools.t *)
(*                                                 alloc.alloc.Global.t)); *)
(*                                         fun γ => *)
(*                                           (let* α0 := M.read γ in *)
(*                                           match α0 with *)
(*                                           | core.result.Result.Err _ => *)
(*                                             let γ0_0 := *)
(*                                               core.result.Result.Get_Err_0 γ in *)
(*                                             let* e := M.copy γ0_0 in *)
(*                                             let* α0 : *)
(*                                                 http.status.StatusCode.t := *)
(*                                               M.read *)
(*                                                 http.status.INTERNAL_SERVER_ERROR in *)
(*                                             let* α1 : *)
(*                                                 (ref *)
(*                                                     (alloc.boxed.Box.t *)
(*                                                       serde_json.error.Error.t *)
(*                                                       alloc.alloc.Global.t)) *)
(*                                                   -> *)
(*                                                   M alloc.string.String.t := *)
(*                                               ltac:(M.get_method (fun ℐ => *)
(*                                                 alloc.string.ToString.to_string *)
(*                                                   (Self := *)
(*                                                     alloc.boxed.Box.t *)
(*                                                       serde_json.error.Error.t *)
(*                                                       alloc.alloc.Global.t) *)
(*                                                   (Trait := ℐ))) in *)
(*                                             let* α2 : alloc.string.String.t := *)
(*                                               M.call (α1 (borrow e)) in *)
(*                                             let* α3 : M.Val never.t := *)
(*                                               return_ *)
(*                                                 (core.result.Result.Err *)
(*                                                   (α0, α2)) in *)
(*                                             let* α4 := M.read α3 in *)
(*                                             let* α5 : *)
(*                                                 alloc.vec.Vec.t *)
(*                                                   async_openai.types.assistant.AssistantTools.t *)
(*                                                   alloc.alloc.Global.t := *)
(*                                               never_to_any α4 in *)
(*                                             M.alloc α5 *)
(*                                           | _ => M.break_match *)
(*                                           end) : *)
(*                                           M *)
(*                                             (M.Val *)
(*                                               (alloc.vec.Vec.t *)
(*                                                 async_openai.types.assistant.AssistantTools.t *)
(*                                                 alloc.alloc.Global.t)) *)
(*                                       ] in *)
(*                                   let* α25 : *)
(*                                       alloc.vec.Vec.t *)
(*                                         async_openai.types.assistant.AssistantTools.t *)
(*                                         alloc.alloc.Global.t := *)
(*                                     M.read α24 in *)
(*                                   let* α26 : *)
(*                                       (ref str.t) -> M alloc.string.String.t := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       alloc.string.ToString.to_string *)
(*                                         (Self := str.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α27 : *)
(*                                       (ref serde_json.value.Value.t) -> *)
(*                                         (ref str.t) -> *)
(*                                         M (ref _) := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       core.ops.index.Index.index *)
(*                                         (Self := serde_json.value.Value.t) *)
(*                                         (Idx := ref str.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α28 : ref str.t := *)
(*                                     M.read (mk_str "model") in *)
(*                                   let* α29 : ref serde_json.value.Value.t := *)
(*                                     M.call (α27 (borrow assistant) α28) in *)
(*                                   let* α30 : core.option.Option.t (ref str.t) := *)
(*                                     M.call *)
(*                                       (serde_json.value.Value.t::["as_str"] *)
(*                                         α29) in *)
(*                                   let* α31 : ref str.t := *)
(*                                     M.call *)
(*                                       ((core.option.Option.t *)
(*                                             (ref str.t))::["unwrap"] *)
(*                                         α30) in *)
(*                                   let* α32 : alloc.string.String.t := *)
(*                                     M.call (α26 α31) in *)
(*                                   let* α33 : *)
(*                                       (ref serde_json.value.Value.t) -> *)
(*                                         (ref str.t) -> *)
(*                                         M (ref _) := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       core.ops.index.Index.index *)
(*                                         (Self := serde_json.value.Value.t) *)
(*                                         (Idx := ref str.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α34 : ref str.t := *)
(*                                     M.read (mk_str "metadata") in *)
(*                                   let* α35 : ref serde_json.value.Value.t := *)
(*                                     M.call (α33 (borrow assistant) α34) in *)
(*                                   let* α36 : *)
(*                                       core.option.Option.t *)
(*                                         (ref *)
(*                                           (serde_json.map.Map.t *)
(*                                             alloc.string.String.t *)
(*                                             serde_json.value.Value.t)) := *)
(*                                     M.call *)
(*                                       (serde_json.value.Value.t::["as_object"] *)
(*                                         α35) in *)
(*                                   let* α37 : *)
(*                                       M.Val *)
(*                                         (core.option.Option.t *)
(*                                           (ref *)
(*                                             (serde_json.map.Map.t *)
(*                                               alloc.string.String.t *)
(*                                               serde_json.value.Value.t))) := *)
(*                                     M.alloc α36 in *)
(*                                   let* α38 : *)
(*                                       M.Val *)
(*                                         (core.option.Option.t *)
(*                                           (std.collections.hash.map.HashMap.t *)
(*                                             alloc.string.String.t *)
(*                                             serde_json.value.Value.t *)
(*                                             std.hash.random.RandomState.t)) := *)
(*                                     match_operator *)
(*                                       α37 *)
(*                                       [ *)
(*                                         fun γ => *)
(*                                           (let* α0 := M.read γ in *)
(*                                           match α0 with *)
(*                                           | core.option.Option.Some _ => *)
(*                                             let γ0_0 := *)
(*                                               core.option.Option.Get_Some_0 γ in *)
(*                                             let* object := M.copy γ0_0 in *)
(*                                             let* temp_map : *)
(*                                                 M.Val *)
(*                                                   (std.collections.hash.map.HashMap.t *)
(*                                                     alloc.string.String.t *)
(*                                                     serde_json.value.Value.t *)
(*                                                     std.hash.random.RandomState.t) := *)
(*                                               let* α0 : *)
(*                                                   std.collections.hash.map.HashMap.t *)
(*                                                     alloc.string.String.t *)
(*                                                     serde_json.value.Value.t *)
(*                                                     std.hash.random.RandomState.t := *)
(*                                                 M.call *)
(*                                                   (std.collections.hash.map.HashMap.t *)
(*                                                       alloc.string.String.t *)
(*                                                       serde_json.value.Value.t *)
(*                                                       std.hash.random.RandomState.t)::["new"] in *)
(*                                               M.alloc α0 in *)
(*                                             let* _ : M.Val unit := *)
(*                                               let* α0 : *)
(*                                                   (ref *)
(*                                                       (serde_json.map.Map.t *)
(*                                                         alloc.string.String.t *)
(*                                                         serde_json.value.Value.t)) *)
(*                                                     -> *)
(*                                                     M _ := *)
(*                                                 ltac:(M.get_method (fun ℐ => *)
(*                                                   core.iter.traits.collect.IntoIterator.into_iter *)
(*                                                     (Self := *)
(*                                                       ref *)
(*                                                         (serde_json.map.Map.t *)
(*                                                           alloc.string.String.t *)
(*                                                           serde_json.value.Value.t)) *)
(*                                                     (Trait := ℐ))) in *)
(*                                               let* α1 : *)
(*                                                   ref *)
(*                                                     (serde_json.map.Map.t *)
(*                                                       alloc.string.String.t *)
(*                                                       serde_json.value.Value.t) := *)
(*                                                 M.read object in *)
(*                                               let* α2 : serde_json.map.Iter.t := *)
(*                                                 M.call (α0 α1) in *)
(*                                               let* α3 : *)
(*                                                   M.Val serde_json.map.Iter.t := *)
(*                                                 M.alloc α2 in *)
(*                                               let* α4 : M.Val unit := *)
(*                                                 match_operator *)
(*                                                   α3 *)
(*                                                   [ *)
(*                                                     fun γ => *)
(*                                                       (let* iter := M.copy γ in *)
(*                                                       M.loop *)
(*                                                         (let* _ : M.Val unit := *)
(*                                                           let* α0 : *)
(*                                                               (mut_ref *)
(*                                                                   serde_json.map.Iter.t) *)
(*                                                                 -> *)
(*                                                                 M *)
(*                                                                   (core.option.Option.t *)
(*                                                                     _) := *)
(*                                                             ltac:(M.get_method (fun ℐ => *)
(*                                                               core.iter.traits.iterator.Iterator.next *)
(*                                                                 (Self := *)
(*                                                                   serde_json.map.Iter.t) *)
(*                                                                 (Trait := ℐ))) in *)
(*                                                           let* α1 : *)
(*                                                               core.option.Option.t *)
(*                                                                 ((ref *)
(*                                                                   alloc.string.String.t) *)
(*                                                                 * *)
(*                                                                 (ref *)
(*                                                                   serde_json.value.Value.t)) := *)
(*                                                             M.call *)
(*                                                               (α0 *)
(*                                                                 (borrow_mut *)
(*                                                                   iter)) in *)
(*                                                           let* α2 : *)
(*                                                               M.Val *)
(*                                                                 (core.option.Option.t *)
(*                                                                   ((ref *)
(*                                                                     alloc.string.String.t) *)
(*                                                                   * *)
(*                                                                   (ref *)
(*                                                                     serde_json.value.Value.t))) := *)
(*                                                             M.alloc α1 in *)
(*                                                           match_operator *)
(*                                                             α2 *)
(*                                                             [ *)
(*                                                               fun γ => *)
(*                                                                 (let* α0 := *)
(*                                                                   M.read γ in *)
(*                                                                 match α0 with *)
(*                                                                 | *)
(*                                                                     core.option.Option.None *)
(*                                                                     => *)
(*                                                                   let* α0 : *)
(*                                                                       M.Val *)
(*                                                                         never.t := *)
(*                                                                     M.break in *)
(*                                                                   let* α1 := *)
(*                                                                     M.read α0 in *)
(*                                                                   let* α2 : *)
(*                                                                       unit := *)
(*                                                                     never_to_any *)
(*                                                                       α1 in *)
(*                                                                   M.alloc α2 *)
(*                                                                 | _ => *)
(*                                                                   M.break_match *)
(*                                                                 end) : *)
(*                                                                 M (M.Val unit); *)
(*                                                               fun γ => *)
(*                                                                 (let* α0 := *)
(*                                                                   M.read γ in *)
(*                                                                 match α0 with *)
(*                                                                 | *)
(*                                                                     core.option.Option.Some *)
(*                                                                       _ *)
(*                                                                     => *)
(*                                                                   let γ0_0 := *)
(*                                                                     core.option.Option.Get_Some_0 *)
(*                                                                       γ in *)
(*                                                                   let* α0 := *)
(*                                                                     M.read *)
(*                                                                       γ0_0 in *)
(*                                                                   match α0 with *)
(*                                                                   | (_, _) => *)
(*                                                                     let γ1_0 := *)
(*                                                                       Tuple.Access.left *)
(*                                                                         γ0_0 in *)
(*                                                                     let γ1_1 := *)
(*                                                                       Tuple.Access.right *)
(*                                                                         γ0_0 in *)
(*                                                                     let* k := *)
(*                                                                       M.copy *)
(*                                                                         γ1_0 in *)
(*                                                                     let* v := *)
(*                                                                       M.copy *)
(*                                                                         γ1_1 in *)
(*                                                                     let* α0 : *)
(*                                                                         ref *)
(*                                                                           serde_json.value.Value.t := *)
(*                                                                       M.read *)
(*                                                                         v in *)
(*                                                                     let* α1 : *)
(*                                                                         core.option.Option.t *)
(*                                                                           (ref *)
(*                                                                             str.t) := *)
(*                                                                       M.call *)
(*                                                                         (serde_json.value.Value.t::["as_str"] *)
(*                                                                           α0) in *)
(*                                                                     let* α2 : *)
(*                                                                         M.Val *)
(*                                                                           (core.option.Option.t *)
(*                                                                             (ref *)
(*                                                                               str.t)) := *)
(*                                                                       M.alloc *)
(*                                                                         α1 in *)
(*                                                                     match_operator *)
(*                                                                       α2 *)
(*                                                                       [ *)
(*                                                                         fun γ => *)
(*                                                                           (let* *)
(*                                                                                 α0 := *)
(*                                                                             M.read *)
(*                                                                               γ in *)
(*                                                                           match *)
(*                                                                             α0 *)
(*                                                                           with *)
(*                                                                           | *)
(*                                                                               core.option.Option.Some *)
(*                                                                                 _ *)
(*                                                                               => *)
(*                                                                             let *)
(*                                                                                   γ0_0 := *)
(*                                                                               core.option.Option.Get_Some_0 *)
(*                                                                                 γ in *)
(*                                                                             let* *)
(*                                                                                   str_value := *)
(*                                                                               M.copy *)
(*                                                                                 γ0_0 in *)
(*                                                                             let* *)
(*                                                                                   _ : *)
(*                                                                                 M.Val *)
(*                                                                                   (core.option.Option.t *)
(*                                                                                     serde_json.value.Value.t) := *)
(*                                                                               let* *)
(*                                                                                     α0 : *)
(*                                                                                   (ref *)
(*                                                                                       alloc.string.String.t) *)
(*                                                                                     -> *)
(*                                                                                     M *)
(*                                                                                       alloc.string.String.t := *)
(*                                                                                 ltac:(M.get_method (fun ℐ => *)
(*                                                                                   core.clone.Clone.clone *)
(*                                                                                     (Self := *)
(*                                                                                       alloc.string.String.t) *)
(*                                                                                     (Trait := ℐ))) in *)
(*                                                                               let* *)
(*                                                                                     α1 : *)
(*                                                                                   ref *)
(*                                                                                     alloc.string.String.t := *)
(*                                                                                 M.read *)
(*                                                                                   k in *)
(*                                                                               let* *)
(*                                                                                     α2 : *)
(*                                                                                   alloc.string.String.t := *)
(*                                                                                 M.call *)
(*                                                                                   (α0 *)
(*                                                                                     α1) in *)
(*                                                                               let* *)
(*                                                                                     α3 : *)
(*                                                                                   (ref *)
(*                                                                                       str.t) *)
(*                                                                                     -> *)
(*                                                                                     M *)
(*                                                                                       alloc.string.String.t := *)
(*                                                                                 ltac:(M.get_method (fun ℐ => *)
(*                                                                                   alloc.string.ToString.to_string *)
(*                                                                                     (Self := *)
(*                                                                                       str.t) *)
(*                                                                                     (Trait := ℐ))) in *)
(*                                                                               let* *)
(*                                                                                     α4 : *)
(*                                                                                   ref *)
(*                                                                                     str.t := *)
(*                                                                                 M.read *)
(*                                                                                   str_value in *)
(*                                                                               let* *)
(*                                                                                     α5 : *)
(*                                                                                   alloc.string.String.t := *)
(*                                                                                 M.call *)
(*                                                                                   (α3 *)
(*                                                                                     α4) in *)
(*                                                                               let* *)
(*                                                                                     α6 : *)
(*                                                                                   core.option.Option.t *)
(*                                                                                     serde_json.value.Value.t := *)
(*                                                                                 M.call *)
(*                                                                                   ((std.collections.hash.map.HashMap.t *)
(*                                                                                         alloc.string.String.t *)
(*                                                                                         serde_json.value.Value.t *)
(*                                                                                         std.hash.random.RandomState.t)::["insert"] *)
(*                                                                                     (borrow_mut *)
(*                                                                                       temp_map) *)
(*                                                                                     α2 *)
(*                                                                                     (serde_json.value.Value.String *)
(*                                                                                       α5)) in *)
(*                                                                               M.alloc *)
(*                                                                                 α6 in *)
(*                                                                             M.alloc *)
(*                                                                               tt *)
(*                                                                           | _ => *)
(*                                                                             M.break_match *)
(*                                                                           end) : *)
(*                                                                           M *)
(*                                                                             (M.Val *)
(*                                                                               unit); *)
(*                                                                         fun γ => *)
(*                                                                           (let* *)
(*                                                                                 α0 := *)
(*                                                                             M.read *)
(*                                                                               γ in *)
(*                                                                           match *)
(*                                                                             α0 *)
(*                                                                           with *)
(*                                                                           | *)
(*                                                                               core.option.Option.None *)
(*                                                                               => *)
(*                                                                             let* *)
(*                                                                                   α0 : *)
(*                                                                                 http.status.StatusCode.t := *)
(*                                                                               M.read *)
(*                                                                                 http.status.BAD_REQUEST in *)
(*                                                                             let* *)
(*                                                                                   res : *)
(*                                                                                 M.Val *)
(*                                                                                   alloc.string.String.t := *)
(*                                                                               let* *)
(*                                                                                     α0 : *)
(*                                                                                   ref *)
(*                                                                                     str.t := *)
(*                                                                                 M.read *)
(*                                                                                   (mk_str *)
(*                                                                                     "Metadata value for key '") in *)
(*                                                                               let* *)
(*                                                                                     α1 : *)
(*                                                                                   ref *)
(*                                                                                     str.t := *)
(*                                                                                 M.read *)
(*                                                                                   (mk_str *)
(*                                                                                     "' is not a string. All metadata values must be strings.") in *)
(*                                                                               let* *)
(*                                                                                     α2 : *)
(*                                                                                   M.Val *)
(*                                                                                     (array *)
(*                                                                                       (ref *)
(*                                                                                         str.t)) := *)
(*                                                                                 M.alloc *)
(*                                                                                   [ *)
(*                                                                                     α0; *)
(*                                                                                     α1 *)
(*                                                                                   ] in *)
(*                                                                               let* *)
(*                                                                                     α3 : *)
(*                                                                                   core.fmt.rt.Argument.t := *)
(*                                                                                 M.call *)
(*                                                                                   (core.fmt.rt.Argument.t::["new_display"] *)
(*                                                                                     (borrow *)
(*                                                                                       k)) in *)
(*                                                                               let* *)
(*                                                                                     α4 : *)
(*                                                                                   M.Val *)
(*                                                                                     (array *)
(*                                                                                       core.fmt.rt.Argument.t) := *)
(*                                                                                 M.alloc *)
(*                                                                                   [ *)
(*                                                                                     α3 *)
(*                                                                                   ] in *)
(*                                                                               let* *)
(*                                                                                     α5 : *)
(*                                                                                   core.fmt.Arguments.t := *)
(*                                                                                 M.call *)
(*                                                                                   (core.fmt.Arguments.t::["new_v1"] *)
(*                                                                                     (pointer_coercion *)
(*                                                                                       "Unsize" *)
(*                                                                                       (borrow *)
(*                                                                                         α2)) *)
(*                                                                                     (pointer_coercion *)
(*                                                                                       "Unsize" *)
(*                                                                                       (borrow *)
(*                                                                                         α4))) in *)
(*                                                                               let* *)
(*                                                                                     α6 : *)
(*                                                                                   alloc.string.String.t := *)
(*                                                                                 M.call *)
(*                                                                                   (alloc.fmt.format *)
(*                                                                                     α5) in *)
(*                                                                               M.alloc *)
(*                                                                                 α6 in *)
(*                                                                             let* *)
(*                                                                                   α1 : *)
(*                                                                                 alloc.string.String.t := *)
(*                                                                               M.read *)
(*                                                                                 res in *)
(*                                                                             let* *)
(*                                                                                   α2 : *)
(*                                                                                 M.Val *)
(*                                                                                   never.t := *)
(*                                                                               return_ *)
(*                                                                                 (core.result.Result.Err *)
(*                                                                                   (α0, *)
(*                                                                                     α1)) in *)
(*                                                                             let* *)
(*                                                                                   α3 := *)
(*                                                                               M.read *)
(*                                                                                 α2 in *)
(*                                                                             let* *)
(*                                                                                   α4 : *)
(*                                                                                 unit := *)
(*                                                                               never_to_any *)
(*                                                                                 α3 in *)
(*                                                                             M.alloc *)
(*                                                                               α4 *)
(*                                                                           | _ => *)
(*                                                                             M.break_match *)
(*                                                                           end) : *)
(*                                                                           M *)
(*                                                                             (M.Val *)
(*                                                                               unit) *)
(*                                                                       ] *)
(*                                                                   end *)
(*                                                                 | _ => *)
(*                                                                   M.break_match *)
(*                                                                 end) : *)
(*                                                                 M (M.Val unit) *)
(*                                                             ] in *)
(*                                                         M.alloc tt)) : *)
(*                                                       M (M.Val unit) *)
(*                                                   ] in *)
(*                                               M.pure (use α4) in *)
(*                                             let* α0 : *)
(*                                                 std.collections.hash.map.HashMap.t *)
(*                                                   alloc.string.String.t *)
(*                                                   serde_json.value.Value.t *)
(*                                                   std.hash.random.RandomState.t := *)
(*                                               M.read temp_map in *)
(*                                             M.alloc (core.option.Option.Some α0) *)
(*                                           | _ => M.break_match *)
(*                                           end) : *)
(*                                           M *)
(*                                             (M.Val *)
(*                                               (core.option.Option.t *)
(*                                                 (std.collections.hash.map.HashMap.t *)
(*                                                   alloc.string.String.t *)
(*                                                   serde_json.value.Value.t *)
(*                                                   std.hash.random.RandomState.t))); *)
(*                                         fun γ => *)
(*                                           (M.alloc core.option.Option.None) : *)
(*                                           M *)
(*                                             (M.Val *)
(*                                               (core.option.Option.t *)
(*                                                 (std.collections.hash.map.HashMap.t *)
(*                                                   alloc.string.String.t *)
(*                                                   serde_json.value.Value.t *)
(*                                                   std.hash.random.RandomState.t))) *)
(*                                       ] in *)
(*                                   let* α39 : *)
(*                                       core.option.Option.t *)
(*                                         (std.collections.hash.map.HashMap.t *)
(*                                           alloc.string.String.t *)
(*                                           serde_json.value.Value.t *)
(*                                           std.hash.random.RandomState.t) := *)
(*                                     M.read α38 in *)
(*                                   let* α40 : *)
(*                                       (ref serde_json.value.Value.t) -> *)
(*                                         (ref str.t) -> *)
(*                                         M (ref _) := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       core.ops.index.Index.index *)
(*                                         (Self := serde_json.value.Value.t) *)
(*                                         (Idx := ref str.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α41 : ref str.t := *)
(*                                     M.read (mk_str "file_ids") in *)
(*                                   let* α42 : ref serde_json.value.Value.t := *)
(*                                     M.call (α40 (borrow assistant) α41) in *)
(*                                   let* α43 : bool.t := *)
(*                                     M.call *)
(*                                       (serde_json.value.Value.t::["is_array"] *)
(*                                         α42) in *)
(*                                   let* α44 : M.Val bool.t := M.alloc α43 in *)
(*                                   let* α45 : bool.t := M.read (use α44) in *)
(*                                   let* α46 : *)
(*                                       M.Val *)
(*                                         (alloc.vec.Vec.t *)
(*                                           alloc.string.String.t *)
(*                                           alloc.alloc.Global.t) := *)
(*                                     if α45 then *)
(*                                       let* α0 : *)
(*                                           (core.iter.adapters.map.Map.t *)
(*                                               (core.slice.iter.Iter.t *)
(*                                                 serde_json.value.Value.t) *)
(*                                               ((ref serde_json.value.Value.t) -> *)
(*                                                 M alloc.string.String.t)) *)
(*                                             -> *)
(*                                             M *)
(*                                               (alloc.vec.Vec.t *)
(*                                                 alloc.string.String.t *)
(*                                                 alloc.alloc.Global.t) := *)
(*                                         ltac:(M.get_method (fun ℐ => *)
(*                                           core.iter.traits.iterator.Iterator.collect *)
(*                                             (Self := *)
(*                                               core.iter.adapters.map.Map.t *)
(*                                                 (core.slice.iter.Iter.t *)
(*                                                   serde_json.value.Value.t) *)
(*                                                 ((ref serde_json.value.Value.t) *)
(*                                                   -> *)
(*                                                   M alloc.string.String.t)) *)
(*                                             (B := *)
(*                                               alloc.vec.Vec.t *)
(*                                                 alloc.string.String.t *)
(*                                                 alloc.alloc.Global.t) *)
(*                                             (Trait := ℐ))) in *)
(*                                       let* α1 : *)
(*                                           (core.slice.iter.Iter.t *)
(*                                               serde_json.value.Value.t) *)
(*                                             -> *)
(*                                             ((ref serde_json.value.Value.t) -> *)
(*                                               M alloc.string.String.t) *)
(*                                             -> *)
(*                                             M *)
(*                                               (core.iter.adapters.map.Map.t *)
(*                                                 (core.slice.iter.Iter.t *)
(*                                                   serde_json.value.Value.t) *)
(*                                                 ((ref serde_json.value.Value.t) *)
(*                                                   -> *)
(*                                                   M alloc.string.String.t)) := *)
(*                                         ltac:(M.get_method (fun ℐ => *)
(*                                           core.iter.traits.iterator.Iterator.map *)
(*                                             (Self := *)
(*                                               core.slice.iter.Iter.t *)
(*                                                 serde_json.value.Value.t) *)
(*                                             (B := alloc.string.String.t) *)
(*                                             (F := *)
(*                                               (ref serde_json.value.Value.t) -> *)
(*                                                 M alloc.string.String.t) *)
(*                                             (Trait := ℐ))) in *)
(*                                       let* α2 : *)
(*                                           (ref *)
(*                                               (alloc.vec.Vec.t *)
(*                                                 serde_json.value.Value.t *)
(*                                                 alloc.alloc.Global.t)) *)
(*                                             -> *)
(*                                             M (ref _) := *)
(*                                         ltac:(M.get_method (fun ℐ => *)
(*                                           core.ops.deref.Deref.deref *)
(*                                             (Self := *)
(*                                               alloc.vec.Vec.t *)
(*                                                 serde_json.value.Value.t *)
(*                                                 alloc.alloc.Global.t) *)
(*                                             (Trait := ℐ))) in *)
(*                                       let* α3 : *)
(*                                           (ref serde_json.value.Value.t) -> *)
(*                                             (ref str.t) -> *)
(*                                             M (ref _) := *)
(*                                         ltac:(M.get_method (fun ℐ => *)
(*                                           core.ops.index.Index.index *)
(*                                             (Self := serde_json.value.Value.t) *)
(*                                             (Idx := ref str.t) *)
(*                                             (Trait := ℐ))) in *)
(*                                       let* α4 : ref str.t := *)
(*                                         M.read (mk_str "file_ids") in *)
(*                                       let* α5 : ref serde_json.value.Value.t := *)
(*                                         M.call (α3 (borrow assistant) α4) in *)
(*                                       let* α6 : *)
(*                                           core.option.Option.t *)
(*                                             (ref *)
(*                                               (alloc.vec.Vec.t *)
(*                                                 serde_json.value.Value.t *)
(*                                                 alloc.alloc.Global.t)) := *)
(*                                         M.call *)
(*                                           (serde_json.value.Value.t::["as_array"] *)
(*                                             α5) in *)
(*                                       let* α7 : *)
(*                                           ref *)
(*                                             (alloc.vec.Vec.t *)
(*                                               serde_json.value.Value.t *)
(*                                               alloc.alloc.Global.t) := *)
(*                                         M.call *)
(*                                           ((core.option.Option.t *)
(*                                                 (ref *)
(*                                                   (alloc.vec.Vec.t *)
(*                                                     serde_json.value.Value.t *)
(*                                                     alloc.alloc.Global.t)))::["unwrap"] *)
(*                                             α6) in *)
(*                                       let* α8 : *)
(*                                           ref *)
(*                                             (slice serde_json.value.Value.t) := *)
(*                                         M.call (α2 α7) in *)
(*                                       let* α9 : *)
(*                                           core.slice.iter.Iter.t *)
(*                                             serde_json.value.Value.t := *)
(*                                         M.call *)
(*                                           ((slice *)
(*                                                 serde_json.value.Value.t)::["iter"] *)
(*                                             α8) in *)
(*                                       let* α10 : *)
(*                                           core.iter.adapters.map.Map.t *)
(*                                             (core.slice.iter.Iter.t *)
(*                                               serde_json.value.Value.t) *)
(*                                             ((ref serde_json.value.Value.t) -> *)
(*                                               M alloc.string.String.t) := *)
(*                                         M.call *)
(*                                           (α1 *)
(*                                             α9 *)
(*                                             (fun *)
(*                                                 (α0 : *)
(*                                                   ref *)
(*                                                     serde_json.value.Value.t) => *)
(*                                               (let* α0 := M.alloc α0 in *)
(*                                               match_operator *)
(*                                                 α0 *)
(*                                                 [ *)
(*                                                   fun γ => *)
(*                                                     (let* file_id := M.copy γ in *)
(*                                                     let* α0 : *)
(*                                                         (ref str.t) -> *)
(*                                                           M *)
(*                                                             alloc.string.String.t := *)
(*                                                       ltac:(M.get_method (fun ℐ => *)
(*                                                         alloc.string.ToString.to_string *)
(*                                                           (Self := str.t) *)
(*                                                           (Trait := ℐ))) in *)
(*                                                     let* α1 : *)
(*                                                         ref *)
(*                                                           serde_json.value.Value.t := *)
(*                                                       M.read file_id in *)
(*                                                     let* α2 : *)
(*                                                         core.option.Option.t *)
(*                                                           (ref str.t) := *)
(*                                                       M.call *)
(*                                                         (serde_json.value.Value.t::["as_str"] *)
(*                                                           α1) in *)
(*                                                     let* α3 : ref str.t := *)
(*                                                       M.call *)
(*                                                         ((core.option.Option.t *)
(*                                                               (ref *)
(*                                                                 str.t))::["unwrap"] *)
(*                                                           α2) in *)
(*                                                     M.call (α0 α3)) : *)
(*                                                     M alloc.string.String.t *)
(*                                                 ]) : *)
(*                                               M alloc.string.String.t)) in *)
(*                                       let* α11 : *)
(*                                           alloc.vec.Vec.t *)
(*                                             alloc.string.String.t *)
(*                                             alloc.alloc.Global.t := *)
(*                                         M.call (α0 α10) in *)
(*                                       M.alloc α11 *)
(*                                     else *)
(*                                       let* α0 : *)
(*                                           alloc.vec.Vec.t *)
(*                                             alloc.string.String.t *)
(*                                             alloc.alloc.Global.t := *)
(*                                         M.call *)
(*                                           (alloc.vec.Vec.t *)
(*                                               alloc.string.String.t *)
(*                                               alloc.alloc.Global.t)::["new"] in *)
(*                                       M.alloc α0 in *)
(*                                   let* α47 : *)
(*                                       alloc.vec.Vec.t *)
(*                                         alloc.string.String.t *)
(*                                         alloc.alloc.Global.t := *)
(*                                     M.read α46 in *)
(*                                   let* α48 : M alloc.string.String.t := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       core.default.Default.default *)
(*                                         (Self := alloc.string.String.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α49 : alloc.string.String.t := *)
(*                                     M.call α48 in *)
(*                                   let* α50 : M i32.t := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       core.default.Default.default *)
(*                                         (Self := i32.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α51 : i32.t := M.call α50 in *)
(*                                   let* α52 : *)
(*                                       M *)
(*                                         (core.option.Option.t *)
(*                                           alloc.string.String.t) := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       core.default.Default.default *)
(*                                         (Self := *)
(*                                           core.option.Option.t *)
(*                                             alloc.string.String.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α53 : *)
(*                                       core.option.Option.t *)
(*                                         alloc.string.String.t := *)
(*                                     M.call α52 in *)
(*                                   let* α54 : *)
(*                                       (ref uuid.Uuid.t) -> *)
(*                                         M alloc.string.String.t := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       alloc.string.ToString.to_string *)
(*                                         (Self := uuid.Uuid.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α55 : M uuid.Uuid.t := *)
(*                                     ltac:(M.get_method (fun ℐ => *)
(*                                       core.default.Default.default *)
(*                                         (Self := uuid.Uuid.t) *)
(*                                         (Trait := ℐ))) in *)
(*                                   let* α56 : uuid.Uuid.t := M.call α55 in *)
(*                                   let* α57 : M.Val uuid.Uuid.t := M.alloc α56 in *)
(*                                   let* α58 : alloc.string.String.t := *)
(*                                     M.call (α54 (borrow α57)) in *)
(*                                   let* α59 : *)
(*                                       M.Val *)
(*                                         assistants_core.models.Assistant.t := *)
(*                                     M.alloc *)
(*                                       {| *)
(*                                         assistants_core.models.Assistant.inner := *)
(*                                           {| *)
(*                                             async_openai.types.assistant.AssistantObject.id := *)
(*                                               α4; *)
(*                                             async_openai.types.assistant.AssistantObject.instructions := *)
(*                                               core.option.Option.Some α11; *)
(*                                             async_openai.types.assistant.AssistantObject.name := *)
(*                                               core.option.Option.Some α18; *)
(*                                             async_openai.types.assistant.AssistantObject.tools := *)
(*                                               α25; *)
(*                                             async_openai.types.assistant.AssistantObject.model := *)
(*                                               α32; *)
(*                                             async_openai.types.assistant.AssistantObject.metadata := *)
(*                                               α39; *)
(*                                             async_openai.types.assistant.AssistantObject.file_ids := *)
(*                                               α47; *)
(*                                             async_openai.types.assistant.AssistantObject.object := *)
(*                                               α49; *)
(*                                             async_openai.types.assistant.AssistantObject.created_at := *)
(*                                               α51; *)
(*                                             async_openai.types.assistant.AssistantObject.description := *)
(*                                               α53; *)
(*                                           |}; *)
(*                                         assistants_core.models.Assistant.user_id := *)
(*                                           α58; *)
(*                                       |} in *)
(*                                   let* α60 : _ := *)
(*                                     M.call *)
(*                                       (assistants_core.assistants.create_assistant *)
(*                                         α2 *)
(*                                         (borrow α59)) in *)
(*                                   let* α61 : _ := M.call (α0 α60) in *)
(*                                   let* α62 : M.Val _ := M.alloc α61 in *)
(*                                   let* α63 : *)
(*                                       M.Val *)
(*                                         (core.result.Result.t *)
(*                                           assistants_core.models.Assistant.t *)
(*                                           assistants_core.assistants.AssistantError.t) := *)
(*                                     match_operator *)
(*                                       α62 *)
(*                                       [ *)
(*                                         fun γ => *)
(*                                           (let* __awaitee := M.copy γ in *)
(*                                           M.loop *)
(*                                             (let* _ : M.Val unit := *)
(*                                               let* α0 : *)
(*                                                   (core.pin.Pin.t (mut_ref _)) *)
(*                                                     -> *)
(*                                                     (mut_ref *)
(*                                                       core.task.wake.Context.t) *)
(*                                                     -> *)
(*                                                     M *)
(*                                                       (core.task.poll.Poll.t *)
(*                                                         _) := *)
(*                                                 ltac:(M.get_method (fun ℐ => *)
(*                                                   core.future.future.Future.poll *)
(*                                                     (Self := _) *)
(*                                                     (Trait := ℐ))) in *)
(*                                               let* α1 : *)
(*                                                   core.pin.Pin.t (mut_ref _) := *)
(*                                                 M.call *)
(*                                                   ((core.pin.Pin.t *)
(*                                                         (mut_ref *)
(*                                                           _))::["new_unchecked"] *)
(*                                                     (borrow_mut __awaitee)) in *)
(*                                               let* α2 : *)
(*                                                   core.future.ResumeTy.t := *)
(*                                                 M.read _task_context in *)
(*                                               let* α3 : *)
(*                                                   mut_ref *)
(*                                                     core.task.wake.Context.t := *)
(*                                                 M.call *)
(*                                                   (core.future.get_context *)
(*                                                     α2) in *)
(*                                               let* α4 : *)
(*                                                   core.task.poll.Poll.t *)
(*                                                     (core.result.Result.t *)
(*                                                       assistants_core.models.Assistant.t *)
(*                                                       assistants_core.assistants.AssistantError.t) := *)
(*                                                 M.call (α0 α1 α3) in *)
(*                                               let* α5 : *)
(*                                                   M.Val *)
(*                                                     (core.task.poll.Poll.t *)
(*                                                       (core.result.Result.t *)
(*                                                         assistants_core.models.Assistant.t *)
(*                                                         assistants_core.assistants.AssistantError.t)) := *)
(*                                                 M.alloc α4 in *)
(*                                               match_operator *)
(*                                                 α5 *)
(*                                                 [ *)
(*                                                   fun γ => *)
(*                                                     (let* α0 := M.read γ in *)
(*                                                     match α0 with *)
(*                                                     | *)
(*                                                         core.task.poll.Poll.Ready *)
(*                                                           _ *)
(*                                                         => *)
(*                                                       let γ0_0 := *)
(*                                                         core.task.poll.Poll.Get_Ready_0 *)
(*                                                           γ in *)
(*                                                       let* result := *)
(*                                                         M.copy γ0_0 in *)
(*                                                       let* α0 : M.Val never.t := *)
(*                                                         M.break in *)
(*                                                       let* α1 := M.read α0 in *)
(*                                                       let* α2 : unit := *)
(*                                                         never_to_any α1 in *)
(*                                                       M.alloc α2 *)
(*                                                     | _ => M.break_match *)
(*                                                     end) : *)
(*                                                     M (M.Val unit); *)
(*                                                   fun γ => *)
(*                                                     (let* α0 := M.read γ in *)
(*                                                     match α0 with *)
(*                                                     | *)
(*                                                         core.task.poll.Poll.Pending *)
(*                                                         => *)
(*                                                       M.alloc tt *)
(*                                                     | _ => M.break_match *)
(*                                                     end) : *)
(*                                                     M (M.Val unit) *)
(*                                                 ] in *)
(*                                             let* _ : M.Val unit := *)
(*                                               let* α0 : M.Val unit := *)
(*                                                 M.alloc tt in *)
(*                                               let* α1 : *)
(*                                                   M.Val *)
(*                                                     core.future.ResumeTy.t := *)
(*                                                 yield α0 in *)
(*                                               let* α2 : *)
(*                                                   core.future.ResumeTy.t := *)
(*                                                 M.read α1 in *)
(*                                               assign _task_context α2 in *)
(*                                             M.alloc tt)) : *)
(*                                           M *)
(*                                             (M.Val *)
(*                                               (core.result.Result.t *)
(*                                                 assistants_core.models.Assistant.t *)
(*                                                 assistants_core.assistants.AssistantError.t)) *)
(*                                       ] in *)
(*                                   M.copy α63 in *)
(*                                 let* α0 : *)
(*                                     M.Val *)
(*                                       (core.result.Result.t *)
(*                                         (axum.json.Json.t *)
(*                                           async_openai.types.assistant.AssistantObject.t) *)
(*                                         (http.status.StatusCode.t *)
(*                                         * *)
(*                                         alloc.string.String.t)) := *)
(*                                   match_operator *)
(*                                     assistant *)
(*                                     [ *)
(*                                       fun γ => *)
(*                                         (let* α0 := M.read γ in *)
(*                                         match α0 with *)
(*                                         | core.result.Result.Ok _ => *)
(*                                           let γ0_0 := *)
(*                                             core.result.Result.Get_Ok_0 γ in *)
(*                                           let* assistant := M.copy γ0_0 in *)
(*                                           let* α0 : *)
(*                                               async_openai.types.assistant.AssistantObject.t := *)
(*                                             M.read *)
(*                                               (assistants_core.models.Assistant.Get_inner *)
(*                                                 assistant) in *)
(*                                           M.alloc *)
(*                                             (core.result.Result.Ok *)
(*                                               (axum.json.Json.Build_t α0)) *)
(*                                         | _ => M.break_match *)
(*                                         end) : *)
(*                                         M *)
(*                                           (M.Val *)
(*                                             (core.result.Result.t *)
(*                                               (axum.json.Json.t *)
(*                                                 async_openai.types.assistant.AssistantObject.t) *)
(*                                               (http.status.StatusCode.t *)
(*                                               * *)
(*                                               alloc.string.String.t))); *)
(*                                       fun γ => *)
(*                                         (let* α0 := M.read γ in *)
(*                                         match α0 with *)
(*                                         | core.result.Result.Err _ => *)
(*                                           let γ0_0 := *)
(*                                             core.result.Result.Get_Err_0 γ in *)
(*                                           let* e := M.copy γ0_0 in *)
(*                                           let* α0 : http.status.StatusCode.t := *)
(*                                             M.read *)
(*                                               http.status.INTERNAL_SERVER_ERROR in *)
(*                                           let* α1 : *)
(*                                               (ref *)
(*                                                   assistants_core.assistants.AssistantError.t) *)
(*                                                 -> *)
(*                                                 M alloc.string.String.t := *)
(*                                             ltac:(M.get_method (fun ℐ => *)
(*                                               alloc.string.ToString.to_string *)
(*                                                 (Self := *)
(*                                                   assistants_core.assistants.AssistantError.t) *)
(*                                                 (Trait := ℐ))) in *)
(*                                           let* α2 : alloc.string.String.t := *)
(*                                             M.call (α1 (borrow e)) in *)
(*                                           M.alloc *)
(*                                             (core.result.Result.Err (α0, α2)) *)
(*                                         | _ => M.break_match *)
(*                                         end) : *)
(*                                         M *)
(*                                           (M.Val *)
(*                                             (core.result.Result.t *)
(*                                               (axum.json.Json.t *)
(*                                                 async_openai.types.assistant.AssistantObject.t) *)
(*                                               (http.status.StatusCode.t *)
(*                                               * *)
(*                                               alloc.string.String.t))) *)
(*                                     ] in *)
(*                                 M.pure (use α0) *)
(*                               end) : *)
(*                               M *)
(*                                 (M.Val *)
(*                                   (core.result.Result.t *)
(*                                     (axum.json.Json.t *)
(*                                       async_openai.types.assistant.AssistantObject.t) *)
(*                                     (http.status.StatusCode.t *)
(*                                     * *)
(*                                     alloc.string.String.t))) *)
(*                           ] *)
(*                       end) : *)
(*                       M *)
(*                         (M.Val *)
(*                           (core.result.Result.t *)
(*                             (axum.json.Json.t *)
(*                               async_openai.types.assistant.AssistantObject.t) *)
(*                             (http.status.StatusCode.t * alloc.string.String.t))) *)
(*                   ] in *)
(*               M.read α0) : *)
(*               M *)
(*                 (core.result.Result.t *)
(*                   (axum.json.Json.t *)
(*                     async_openai.types.assistant.AssistantObject.t) *)
(*                   (http.status.StatusCode.t * alloc.string.String.t)) *)
Module PhantomData.
  Inductive t (T : Set) : Set := Build.
End PhantomData.

Module extract.
  Module connect_info.
    Module  IntoMakeServiceWithConnectInfo.
    Section IntoMakeServiceWithConnectInfo.
      Context (S C : Set).
      
      Record t : Set := {
        svc : S;
        _connect_info :PhantomData.t C;
      }.
      
      (* Definition Get_svc := *)
      (*   Ref.map (fun α => Some α.(svc)) (fun β α => Some (α <| svc := β |>)). *)
      (* Definition Get__connect_info := *)
      (*   Ref.map *)
      (*     (fun α => Some α.(_connect_info)) *)
      (*     (fun β α => Some (α <| _connect_info := β |>)). *)
    End IntoMakeServiceWithConnectInfo.
    End IntoMakeServiceWithConnectInfo.
    
    Module  Impl_axum_extract_connect_info_IntoMakeServiceWithConnectInfo_t_S_C.
    Section Impl_axum_extract_connect_info_IntoMakeServiceWithConnectInfo_t_S_C.
      Context {S C : Set}.
      
      
    
    Module  Impl_core_fmt_Debug_for_axum_extract_connect_info_IntoMakeServiceWithConnectInfo_t_S_C.
    Section Impl_core_fmt_Debug_for_axum_extract_connect_info_IntoMakeServiceWithConnectInfo_t_S_C.
      Context {S C : Set}.
      
      Context {ℋ_0 : core.fmt.Debug.Trait S}.
      
      Definition Self : Set :=
        axum.extract.connect_info.IntoMakeServiceWithConnectInfo.t S C.
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              f.debug_struct("IntoMakeServiceWithConnectInfo")
                  .field("svc", &self.svc)
                  .finish()
          }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_connect_info_IntoMakeServiceWithConnectInfo_t_S_C.
    End Impl_core_fmt_Debug_for_axum_extract_connect_info_IntoMakeServiceWithConnectInfo_t_S_C.
    
    Module  Impl_core_clone_Clone_for_axum_extract_connect_info_IntoMakeServiceWithConnectInfo_t_S_C.
    Section Impl_core_clone_Clone_for_axum_extract_connect_info_IntoMakeServiceWithConnectInfo_t_S_C.
      Context {S C : Set}.
      
      Context {ℋ_0 : core.clone.Clone.Trait S}.
      
      Definition Self : Set :=
        axum.extract.connect_info.IntoMakeServiceWithConnectInfo.t S C.
      
      (*
          fn clone(&self) -> Self {
              Self {
                  svc: self.svc.clone(),
                  _connect_info: PhantomData,
              }
          }
      *)
      Definition clone (self : ref Self) : M Self :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_axum_extract_connect_info_IntoMakeServiceWithConnectInfo_t_S_C.
    End Impl_core_clone_Clone_for_axum_extract_connect_info_IntoMakeServiceWithConnectInfo_t_S_C.
    
    Module  Connected.
    Section Connected.
      Class Trait (Self : Set) {T : Set} : Type := {
        ℒ_0 :: core.clone.Clone.Trait Self;
        ℒ_1 :: core.marker.Send.Trait Self;
        ℒ_2 :: core.marker.Sync.Trait Self;
        connect_info : T -> M Self;
      }.
      
    End Connected.
    End Connected.
    
    Module  Impl_axum_extract_connect_info_Connected_core_net_socket_addr_SocketAddr_t_for_core_net_socket_addr_SocketAddr_t.
    Section Impl_axum_extract_connect_info_Connected_core_net_socket_addr_SocketAddr_t_for_core_net_socket_addr_SocketAddr_t.
      Definition Self : Set := core.net.socket_addr.SocketAddr.t.
      
      (*
          fn connect_info(remote_addr: SocketAddr) -> Self {
              remote_addr
          }
      *)
      Definition connect_info
          (remote_addr : core.net.socket_addr.SocketAddr.t)
          : M Self :=
        let* remote_addr := M.alloc remote_addr in
        M.read foo.
      
      Global Instance AssociatedFunction_connect_info :
        Notations.DoubleColon Self "connect_info" := {
        Notations.double_colon := connect_info;
      }.
      
      Global Instance ℐ :
        axum.extract.connect_info.Connected.Trait Self
          (T := core.net.socket_addr.SocketAddr.t) := {
        axum.extract.connect_info.Connected.connect_info := connect_info;
      }.
    End Impl_axum_extract_connect_info_Connected_core_net_socket_addr_SocketAddr_t_for_core_net_socket_addr_SocketAddr_t.
    End Impl_axum_extract_connect_info_Connected_core_net_socket_addr_SocketAddr_t_for_core_net_socket_addr_SocketAddr_t.
    
    Module  Impl_tower_service_Service_T_for_axum_extract_connect_info_IntoMakeServiceWithConnectInfo_t_S_C.
    Section Impl_tower_service_Service_T_for_axum_extract_connect_info_IntoMakeServiceWithConnectInfo_t_S_C.
      Context {S C T : Set}.
      
      Context
        {ℋ_0 : core.clone.Clone.Trait S}
        {ℋ_1 : axum.extract.connect_info.Connected.Trait C (T := T)}.
      
      Definition Self : Set :=
        axum.extract.connect_info.IntoMakeServiceWithConnectInfo.t S C.
      
      (*
          type Response = AddExtension<S, ConnectInfo<C>>;
      *)
      Definition Response : Set :=
        axum.extension.AddExtension.t
            S
            (axum.extract.connect_info.ConnectInfo.t C).
      
      (*
          type Error = Infallible;
      *)
      Definition Error : Set := core.convert.Infallible.t.
      
      (*
          type Future = ResponseFuture<S, C>;
      *)
      Definition Future : Set := axum.extract.connect_info.ResponseFuture.t S C.
      
      (*
          fn poll_ready(&mut self, _cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {
              Poll::Ready(Ok(()))
          }
      *)
      Definition poll_ready
          (self : mut_ref Self)
          (_cx : mut_ref core.task.wake.Context.t)
          : M (core.task.poll.Poll.t (core.result.Result.t unit Error)) :=
        let* self := M.alloc self in
        let* _cx := M.alloc _cx in
        M.read foo.
      
      Global Instance AssociatedFunction_poll_ready :
        Notations.DoubleColon Self "poll_ready" := {
        Notations.double_colon := poll_ready;
      }.
      
      (*
          fn call(&mut self, target: T) -> Self::Future {
              let connect_info = ConnectInfo(C::connect_info(target));
              let svc = Extension(connect_info).layer(self.svc.clone());
              ResponseFuture::new(ready(Ok(svc)))
          }
      *)
      Definition call (self : mut_ref Self) (target : T) : M Future :=
        let* self := M.alloc self in
        let* target := M.alloc target in
        M.read foo.
      
      Global Instance AssociatedFunction_call :
        Notations.DoubleColon Self "call" := {
        Notations.double_colon := call;
      }.
      
      Global Instance ℐ : tower_service.Service.Trait Self (Request := T) := {
        tower_service.Service.Response := Response;
        tower_service.Service.Error := Error;
        tower_service.Service.Future := Future;
        tower_service.Service.poll_ready := poll_ready;
        tower_service.Service.call := call;
      }.
    End Impl_tower_service_Service_T_for_axum_extract_connect_info_IntoMakeServiceWithConnectInfo_t_S_C.
    End Impl_tower_service_Service_T_for_axum_extract_connect_info_IntoMakeServiceWithConnectInfo_t_S_C.
    
    Module  ResponseFuture.
    Section ResponseFuture.
      Context (S C : Set).
      
      Record t : Set := {
        future :
          core.future.ready.Ready.t
            (core.result.Result.t
              (axum.extension.AddExtension.t
                S
                (axum.extract.connect_info.ConnectInfo.t C))
              core.convert.Infallible.t);
      }.
      
      Definition Get_future :=
        Ref.map
          (fun α => Some α.(future))
          (fun β α => Some (α <| future := β |>)).
    End ResponseFuture.
    End ResponseFuture.
    
    Module  Impl_axum_extract_connect_info_ResponseFuture_t_S_C.
    Section Impl_axum_extract_connect_info_ResponseFuture_t_S_C.
      Context {S C : Set}.
      
      Definition Self : Set := axum.extract.connect_info.ResponseFuture.t S C.
      
      (*
                  pub(crate) fn new(future: $actual) -> Self {
                      Self { future }
                  }
      *)
      Definition new
          (future
            :
            core.future.ready.Ready.t
              (core.result.Result.t
                (axum.extension.AddExtension.t
                  S
                  (axum.extract.connect_info.ConnectInfo.t C))
                core.convert.Infallible.t))
          : M Self :=
        let* future := M.alloc future in
        M.read foo.
      
      Global Instance AssociatedFunction_new :
        Notations.DoubleColon Self "new" := {
        Notations.double_colon := new;
      }.
    End Impl_axum_extract_connect_info_ResponseFuture_t_S_C.
    End Impl_axum_extract_connect_info_ResponseFuture_t_S_C.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_connect_info_ResponseFuture_t_S_C.
    Section Impl_core_fmt_Debug_for_axum_extract_connect_info_ResponseFuture_t_S_C.
      Context {S C : Set}.
      
      Definition Self : Set := axum.extract.connect_info.ResponseFuture.t S C.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      f.debug_struct(stringify!($name)).finish_non_exhaustive()
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_connect_info_ResponseFuture_t_S_C.
    End Impl_core_fmt_Debug_for_axum_extract_connect_info_ResponseFuture_t_S_C.
    
    Module  Impl_core_future_future_Future_for_axum_extract_connect_info_ResponseFuture_t_S_C.
    Section Impl_core_future_future_Future_for_axum_extract_connect_info_ResponseFuture_t_S_C.
      Context {S C : Set}.
      
      Context
        {ℋ_0 :
          core.future.future.Future.Trait
              (core.future.ready.Ready.t
                (core.result.Result.t
                  (axum.extension.AddExtension.t
                    S
                    (axum.extract.connect_info.ConnectInfo.t C))
                  core.convert.Infallible.t))}.
      
      Definition Self : Set := axum.extract.connect_info.ResponseFuture.t S C.
      
      (*
                  type Output = <$actual as std::future::Future>::Output;
      *)
      Definition Output : Set :=
        core.future.future.Future.Output
            (Self := core.future.ready.Ready.t
              (core.result.Result.t
                (axum.extension.AddExtension.t
                  S
                  (axum.extract.connect_info.ConnectInfo.t C))
                core.convert.Infallible.t))
            (Trait := ltac:(refine _)).
      
      (*
                  fn poll(
                      self: std::pin::Pin<&mut Self>,
                      cx: &mut std::task::Context<'_>,
                  ) -> std::task::Poll<Self::Output> {
                      self.project().future.poll(cx)
                  }
      *)
      Definition poll
          (self : core.pin.Pin.t (mut_ref Self))
          (cx : mut_ref core.task.wake.Context.t)
          : M (core.task.poll.Poll.t Output) :=
        let* self := M.alloc self in
        let* cx := M.alloc cx in
        M.read foo.
      
      Global Instance AssociatedFunction_poll :
        Notations.DoubleColon Self "poll" := {
        Notations.double_colon := poll;
      }.
      
      Global Instance ℐ : core.future.future.Future.Trait Self := {
        core.future.future.Future.Output := Output;
        core.future.future.Future.poll := poll;
      }.
    End Impl_core_future_future_Future_for_axum_extract_connect_info_ResponseFuture_t_S_C.
    End Impl_core_future_future_Future_for_axum_extract_connect_info_ResponseFuture_t_S_C.
    
    Module  ConnectInfo.
    Section ConnectInfo.
      Context {T : Set}.
      
      Record t : Set := {
        x0 : T;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End ConnectInfo.
    End ConnectInfo.
    
    Module  Impl_core_clone_Clone_for_axum_extract_connect_info_ConnectInfo_t_T.
    Section Impl_core_clone_Clone_for_axum_extract_connect_info_ConnectInfo_t_T.
      Context {T : Set}.
      
      Context {ℋ_0 : core.clone.Clone.Trait T}.
      
      Definition Self : Set := axum.extract.connect_info.ConnectInfo.t T.
      
      (*
      Clone
      *)
      Definition clone
          (self : ref Self)
          : M (axum.extract.connect_info.ConnectInfo.t T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_axum_extract_connect_info_ConnectInfo_t_T.
    End Impl_core_clone_Clone_for_axum_extract_connect_info_ConnectInfo_t_T.
    
    Module  Impl_core_marker_Copy_for_axum_extract_connect_info_ConnectInfo_t_T.
    Section Impl_core_marker_Copy_for_axum_extract_connect_info_ConnectInfo_t_T.
      Context {T : Set}.
      
      Context {ℋ_0 : core.marker.Copy.Trait T}.
      
      Definition Self : Set := axum.extract.connect_info.ConnectInfo.t T.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_axum_extract_connect_info_ConnectInfo_t_T.
    End Impl_core_marker_Copy_for_axum_extract_connect_info_ConnectInfo_t_T.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_connect_info_ConnectInfo_t_T.
    Section Impl_core_fmt_Debug_for_axum_extract_connect_info_ConnectInfo_t_T.
      Context {T : Set}.
      
      Context {ℋ_0 : core.fmt.Debug.Trait T}.
      
      Definition Self : Set := axum.extract.connect_info.ConnectInfo.t T.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_connect_info_ConnectInfo_t_T.
    End Impl_core_fmt_Debug_for_axum_extract_connect_info_ConnectInfo_t_T.
    
    Module  Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_connect_info_ConnectInfo_t_T.
    Section Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_connect_info_ConnectInfo_t_T.
      Context {S T : Set}.
      
      Context
        {ℋ_0 : core.marker.Send.Trait S}
        {ℋ_1 : core.marker.Sync.Trait S}
        {ℋ_2 : core.clone.Clone.Trait T}
        {ℋ_3 : core.marker.Send.Trait T}
        {ℋ_4 : core.marker.Sync.Trait T}.
      
      Definition Self : Set := axum.extract.connect_info.ConnectInfo.t T.
      
      (*
          type Rejection = <Extension<Self> as FromRequestParts<S>>::Rejection;
      *)
      Definition Rejection : Set :=
        axum_core.extract.FromRequestParts.Rejection
            (Self := axum.extension.Extension.t Self)
            (Trait := ltac:(refine _)).
      
      (*
          async fn from_request_parts(parts: &mut Parts, state: &S) -> Result<Self, Self::Rejection> {
              match Extension::<Self>::from_request_parts(parts, state).await {
                  Ok(Extension(connect_info)) => Ok(connect_info),
                  Err(err) => match parts.extensions.get::<MockConnectInfo<T>>() {
                      Some(MockConnectInfo(connect_info)) => Ok(Self(connect_info.clone())),
                      None => Err(err),
                  },
              }
          }
      *)
      Definition from_request_parts
          (parts : mut_ref http.request.Parts.t)
          (state : ref S)
          :
            M
              (core.pin.Pin.t
                (alloc.boxed.Box.t
                  (dyn
                    [core.future.future.Future.Trait; core.marker.Send.Trait])
                  alloc.boxed.Box.Default.A)) :=
        let* parts := M.alloc parts in
        let* state := M.alloc state in
        M.read foo.
      
      Global Instance AssociatedFunction_from_request_parts :
        Notations.DoubleColon Self "from_request_parts" := {
        Notations.double_colon := from_request_parts;
      }.
      
      Global Instance ℐ :
        axum_core.extract.FromRequestParts.Trait Self (S := S) := {
        axum_core.extract.FromRequestParts.Rejection := Rejection;
        axum_core.extract.FromRequestParts.from_request_parts :=
          from_request_parts;
      }.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_connect_info_ConnectInfo_t_T.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_connect_info_ConnectInfo_t_T.
    
    Module  Impl_core_ops_deref_Deref_for_axum_extract_connect_info_ConnectInfo_t_T.
    Section Impl_core_ops_deref_Deref_for_axum_extract_connect_info_ConnectInfo_t_T.
      Context {T : Set}.
      
      Definition Self : Set := axum.extract.connect_info.ConnectInfo.t T.
      
      (*
                  type Target = T;
      *)
      Definition Target : Set := T.
      
      (*
                  fn deref(&self) -> &Self::Target {
                      &self.0
                  }
      *)
      Definition deref (self : ref Self) : M (ref Target) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_deref :
        Notations.DoubleColon Self "deref" := {
        Notations.double_colon := deref;
      }.
      
      Global Instance ℐ : core.ops.deref.Deref.Trait Self := {
        core.ops.deref.Deref.Target := Target;
        core.ops.deref.Deref.deref := deref;
      }.
    End Impl_core_ops_deref_Deref_for_axum_extract_connect_info_ConnectInfo_t_T.
    End Impl_core_ops_deref_Deref_for_axum_extract_connect_info_ConnectInfo_t_T.
    
    Module  Impl_core_ops_deref_DerefMut_for_axum_extract_connect_info_ConnectInfo_t_T.
    Section Impl_core_ops_deref_DerefMut_for_axum_extract_connect_info_ConnectInfo_t_T.
      Context {T : Set}.
      
      Definition Self : Set := axum.extract.connect_info.ConnectInfo.t T.
      
      (*
                  fn deref_mut(&mut self) -> &mut Self::Target {
                      &mut self.0
                  }
      *)
      Definition deref_mut (self : mut_ref Self) : M (mut_ref Target) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_deref_mut :
        Notations.DoubleColon Self "deref_mut" := {
        Notations.double_colon := deref_mut;
      }.
      
      Global Instance ℐ : core.ops.deref.DerefMut.Trait Self := {
        core.ops.deref.DerefMut.deref_mut := deref_mut;
      }.
    End Impl_core_ops_deref_DerefMut_for_axum_extract_connect_info_ConnectInfo_t_T.
    End Impl_core_ops_deref_DerefMut_for_axum_extract_connect_info_ConnectInfo_t_T.
    
    Module  MockConnectInfo.
    Section MockConnectInfo.
      Context {T : Set}.
      
      Record t : Set := {
        x0 : T;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End MockConnectInfo.
    End MockConnectInfo.
    
    Module  Impl_core_clone_Clone_for_axum_extract_connect_info_MockConnectInfo_t_T.
    Section Impl_core_clone_Clone_for_axum_extract_connect_info_MockConnectInfo_t_T.
      Context {T : Set}.
      
      Context {ℋ_0 : core.clone.Clone.Trait T}.
      
      Definition Self : Set := axum.extract.connect_info.MockConnectInfo.t T.
      
      (*
      Clone
      *)
      Definition clone
          (self : ref Self)
          : M (axum.extract.connect_info.MockConnectInfo.t T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_axum_extract_connect_info_MockConnectInfo_t_T.
    End Impl_core_clone_Clone_for_axum_extract_connect_info_MockConnectInfo_t_T.
    
    Module  Impl_core_marker_Copy_for_axum_extract_connect_info_MockConnectInfo_t_T.
    Section Impl_core_marker_Copy_for_axum_extract_connect_info_MockConnectInfo_t_T.
      Context {T : Set}.
      
      Context {ℋ_0 : core.marker.Copy.Trait T}.
      
      Definition Self : Set := axum.extract.connect_info.MockConnectInfo.t T.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_axum_extract_connect_info_MockConnectInfo_t_T.
    End Impl_core_marker_Copy_for_axum_extract_connect_info_MockConnectInfo_t_T.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_connect_info_MockConnectInfo_t_T.
    Section Impl_core_fmt_Debug_for_axum_extract_connect_info_MockConnectInfo_t_T.
      Context {T : Set}.
      
      Context {ℋ_0 : core.fmt.Debug.Trait T}.
      
      Definition Self : Set := axum.extract.connect_info.MockConnectInfo.t T.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_connect_info_MockConnectInfo_t_T.
    End Impl_core_fmt_Debug_for_axum_extract_connect_info_MockConnectInfo_t_T.
    
    Module  Impl_tower_layer_Layer_S_for_axum_extract_connect_info_MockConnectInfo_t_T.
    Section Impl_tower_layer_Layer_S_for_axum_extract_connect_info_MockConnectInfo_t_T.
      Context {S T : Set}.
      
      Context
        {ℋ_0 : core.clone.Clone.Trait T}
        {ℋ_1 : core.marker.Send.Trait T}
        {ℋ_2 : core.marker.Sync.Trait T}.
      
      Definition Self : Set := axum.extract.connect_info.MockConnectInfo.t T.
      
      (*
          type Service = <Extension<Self> as Layer<S>>::Service;
      *)
      Definition Service : Set :=
        tower_layer.Layer.Service
            (Self := axum.extension.Extension.t Self)
            (Trait := ltac:(refine _)).
      
      (*
          fn layer(&self, inner: S) -> Self::Service {
              Extension(self.clone()).layer(inner)
          }
      *)
      Definition layer (self : ref Self) (inner : S) : M Service :=
        let* self := M.alloc self in
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_layer :
        Notations.DoubleColon Self "layer" := {
        Notations.double_colon := layer;
      }.
      
      Global Instance ℐ : tower_layer.Layer.Trait Self (S := S) := {
        tower_layer.Layer.Service := Service;
        tower_layer.Layer.layer := layer;
      }.
    End Impl_tower_layer_Layer_S_for_axum_extract_connect_info_MockConnectInfo_t_T.
    End Impl_tower_layer_Layer_S_for_axum_extract_connect_info_MockConnectInfo_t_T.
  End connect_info.
  
  Module path.
    Module de.
      Module  PathDeserializer.
      Section PathDeserializer.
        Record t : Set := {
          url_params :
            ref
              (slice
                ((alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A)
                *
                axum.util.PercentDecodedStr.t));
        }.
        
        Definition Get_url_params :=
          Ref.map
            (fun α => Some α.(url_params))
            (fun β α => Some (α <| url_params := β |>)).
      End PathDeserializer.
      End PathDeserializer.
      
      Module  Impl_axum_extract_path_de_PathDeserializer_t.
      Section Impl_axum_extract_path_de_PathDeserializer_t.
        Definition Self : Set := axum.extract.path.de.PathDeserializer.t.
        
        (*
            pub(crate) fn new(url_params: &'de [(Arc<str>, PercentDecodedStr)]) -> Self {
                PathDeserializer { url_params }
            }
        *)
        Definition new
            (url_params
              :
              ref
                (slice
                  ((alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A)
                  *
                  axum.util.PercentDecodedStr.t)))
            : M Self :=
          let* url_params := M.alloc url_params in
          M.read foo.
        
        Global Instance AssociatedFunction_new :
          Notations.DoubleColon Self "new" := {
          Notations.double_colon := new;
        }.
      End Impl_axum_extract_path_de_PathDeserializer_t.
      End Impl_axum_extract_path_de_PathDeserializer_t.
      
      Module  Impl_serde_de_Deserializer_for_axum_extract_path_de_PathDeserializer_t.
      Section Impl_serde_de_Deserializer_for_axum_extract_path_de_PathDeserializer_t.
        Definition Self : Set := axum.extract.path.de.PathDeserializer.t.
        
        (*
            type Error = PathDeserializationError;
        *)
        Definition Error : Set := axum.extract.path.PathDeserializationError.t.
        
        (*
                fn $trait_fn<V>(self, _: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    Err(PathDeserializationError::unsupported_type(type_name::<
                        V::Value,
                    >()))
                }
        *)
        Definition deserialize_bytes
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (Pattern : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* Pattern := M.alloc Pattern in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_bytes
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_bytes" := {
          Notations.double_colon := deserialize_bytes (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, _: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    Err(PathDeserializationError::unsupported_type(type_name::<
                        V::Value,
                    >()))
                }
        *)
        Definition deserialize_option
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (Pattern : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* Pattern := M.alloc Pattern in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_option
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_option" := {
          Notations.double_colon := deserialize_option (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, _: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    Err(PathDeserializationError::unsupported_type(type_name::<
                        V::Value,
                    >()))
                }
        *)
        Definition deserialize_identifier
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (Pattern : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* Pattern := M.alloc Pattern in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_identifier
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_identifier" := {
          Notations.double_colon := deserialize_identifier (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, _: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    Err(PathDeserializationError::unsupported_type(type_name::<
                        V::Value,
                    >()))
                }
        *)
        Definition deserialize_ignored_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (Pattern : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* Pattern := M.alloc Pattern in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_ignored_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_ignored_any" := {
          Notations.double_colon := deserialize_ignored_any (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_bool
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_bool
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_bool" := {
          Notations.double_colon := deserialize_bool (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_i8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i8" := {
          Notations.double_colon := deserialize_i8 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_i16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i16" := {
          Notations.double_colon := deserialize_i16 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_i32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i32" := {
          Notations.double_colon := deserialize_i32 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_i64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i64" := {
          Notations.double_colon := deserialize_i64 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_i128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i128" := {
          Notations.double_colon := deserialize_i128 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_u8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u8" := {
          Notations.double_colon := deserialize_u8 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_u16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u16" := {
          Notations.double_colon := deserialize_u16 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_u32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u32" := {
          Notations.double_colon := deserialize_u32 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_u64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u64" := {
          Notations.double_colon := deserialize_u64 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_u128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u128" := {
          Notations.double_colon := deserialize_u128 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_f32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_f32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_f32" := {
          Notations.double_colon := deserialize_f32 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_f64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_f64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_f64" := {
          Notations.double_colon := deserialize_f64 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_string
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_string
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_string" := {
          Notations.double_colon := deserialize_string (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_byte_buf
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_byte_buf
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_byte_buf" := {
          Notations.double_colon := deserialize_byte_buf (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    if self.url_params.len() != 1 {
                        return Err(PathDeserializationError::wrong_number_of_parameters()
                            .got(self.url_params.len())
                            .expected(1));
                    }
        
                    let value = self.url_params[0].1.parse().map_err(|_| {
                        PathDeserializationError::new(ErrorKind::ParseError {
                            value: self.url_params[0].1.as_str().to_owned(),
                            expected_type: $ty,
                        })
                    })?;
                    visitor.$visit_fn(value)
                }
        *)
        Definition deserialize_char
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_char
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_char" := {
          Notations.double_colon := deserialize_char (V := V);
        }.
        
        (*
            fn deserialize_any<V>(self, v: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                self.deserialize_str(v)
            }
        *)
        Definition deserialize_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (v : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* v := M.alloc v in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_any" := {
          Notations.double_colon := deserialize_any (V := V);
        }.
        
        (*
            fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                if self.url_params.len() != 1 {
                    return Err(PathDeserializationError::wrong_number_of_parameters()
                        .got(self.url_params.len())
                        .expected(1));
                }
                visitor.visit_borrowed_str(&self.url_params[0].1)
            }
        *)
        Definition deserialize_str
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_str
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_str" := {
          Notations.double_colon := deserialize_str (V := V);
        }.
        
        (*
            fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                visitor.visit_unit()
            }
        *)
        Definition deserialize_unit
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_unit
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_unit" := {
          Notations.double_colon := deserialize_unit (V := V);
        }.
        
        (*
            fn deserialize_unit_struct<V>(
                self,
                _name: &'static str,
                visitor: V,
            ) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                visitor.visit_unit()
            }
        *)
        Definition deserialize_unit_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (_name : ref str.t)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _name := M.alloc _name in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_unit_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_unit_struct" := {
          Notations.double_colon := deserialize_unit_struct (V := V);
        }.
        
        (*
            fn deserialize_newtype_struct<V>(
                self,
                _name: &'static str,
                visitor: V,
            ) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                visitor.visit_newtype_struct(self)
            }
        *)
        Definition deserialize_newtype_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (_name : ref str.t)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _name := M.alloc _name in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_newtype_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_newtype_struct" := {
          Notations.double_colon := deserialize_newtype_struct (V := V);
        }.
        
        (*
            fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                visitor.visit_seq(SeqDeserializer {
                    params: self.url_params,
                    idx: 0,
                })
            }
        *)
        Definition deserialize_seq
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_seq
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_seq" := {
          Notations.double_colon := deserialize_seq (V := V);
        }.
        
        (*
            fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                if self.url_params.len() < len {
                    return Err(PathDeserializationError::wrong_number_of_parameters()
                        .got(self.url_params.len())
                        .expected(len));
                }
                visitor.visit_seq(SeqDeserializer {
                    params: self.url_params,
                    idx: 0,
                })
            }
        *)
        Definition deserialize_tuple
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (len : usize.t)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* len := M.alloc len in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_tuple
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_tuple" := {
          Notations.double_colon := deserialize_tuple (V := V);
        }.
        
        (*
            fn deserialize_tuple_struct<V>(
                self,
                _name: &'static str,
                len: usize,
                visitor: V,
            ) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                if self.url_params.len() < len {
                    return Err(PathDeserializationError::wrong_number_of_parameters()
                        .got(self.url_params.len())
                        .expected(len));
                }
                visitor.visit_seq(SeqDeserializer {
                    params: self.url_params,
                    idx: 0,
                })
            }
        *)
        Definition deserialize_tuple_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (_name : ref str.t)
            (len : usize.t)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _name := M.alloc _name in
          let* len := M.alloc len in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_tuple_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_tuple_struct" := {
          Notations.double_colon := deserialize_tuple_struct (V := V);
        }.
        
        (*
            fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                visitor.visit_map(MapDeserializer {
                    params: self.url_params,
                    value: None,
                    key: None,
                })
            }
        *)
        Definition deserialize_map
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_map
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_map" := {
          Notations.double_colon := deserialize_map (V := V);
        }.
        
        (*
            fn deserialize_struct<V>(
                self,
                _name: &'static str,
                _fields: &'static [&'static str],
                visitor: V,
            ) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                self.deserialize_map(visitor)
            }
        *)
        Definition deserialize_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (_name : ref str.t)
            (_fields : ref (slice (ref str.t)))
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _name := M.alloc _name in
          let* _fields := M.alloc _fields in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_struct" := {
          Notations.double_colon := deserialize_struct (V := V);
        }.
        
        (*
            fn deserialize_enum<V>(
                self,
                _name: &'static str,
                _variants: &'static [&'static str],
                visitor: V,
            ) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                if self.url_params.len() != 1 {
                    return Err(PathDeserializationError::wrong_number_of_parameters()
                        .got(self.url_params.len())
                        .expected(1));
                }
        
                visitor.visit_enum(EnumDeserializer {
                    value: self.url_params[0].1.clone().into_inner(),
                })
            }
        *)
        Definition deserialize_enum
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (_name : ref str.t)
            (_variants : ref (slice (ref str.t)))
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _name := M.alloc _name in
          let* _variants := M.alloc _variants in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_enum
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_enum" := {
          Notations.double_colon := deserialize_enum (V := V);
        }.
        
        Global Instance ℐ : serde.de.Deserializer.Required.Trait Self := {
          serde.de.Deserializer.Error := Error;
          serde.de.Deserializer.deserialize_bytes
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_bytes (V := V);
          serde.de.Deserializer.deserialize_option
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_option (V := V);
          serde.de.Deserializer.deserialize_identifier
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_identifier (V := V);
          serde.de.Deserializer.deserialize_ignored_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_ignored_any (V := V);
          serde.de.Deserializer.deserialize_bool
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_bool (V := V);
          serde.de.Deserializer.deserialize_i8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_i8 (V := V);
          serde.de.Deserializer.deserialize_i16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_i16 (V := V);
          serde.de.Deserializer.deserialize_i32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_i32 (V := V);
          serde.de.Deserializer.deserialize_i64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_i64 (V := V);
          serde.de.Deserializer.deserialize_i128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            Datatypes.Some (deserialize_i128 (V := V));
          serde.de.Deserializer.deserialize_u8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_u8 (V := V);
          serde.de.Deserializer.deserialize_u16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_u16 (V := V);
          serde.de.Deserializer.deserialize_u32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_u32 (V := V);
          serde.de.Deserializer.deserialize_u64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_u64 (V := V);
          serde.de.Deserializer.deserialize_u128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            Datatypes.Some (deserialize_u128 (V := V));
          serde.de.Deserializer.deserialize_f32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_f32 (V := V);
          serde.de.Deserializer.deserialize_f64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_f64 (V := V);
          serde.de.Deserializer.deserialize_string
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_string (V := V);
          serde.de.Deserializer.deserialize_byte_buf
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_byte_buf (V := V);
          serde.de.Deserializer.deserialize_char
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_char (V := V);
          serde.de.Deserializer.deserialize_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_any (V := V);
          serde.de.Deserializer.deserialize_str
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_str (V := V);
          serde.de.Deserializer.deserialize_unit
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_unit (V := V);
          serde.de.Deserializer.deserialize_unit_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_unit_struct (V := V);
          serde.de.Deserializer.deserialize_newtype_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_newtype_struct (V := V);
          serde.de.Deserializer.deserialize_seq
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_seq (V := V);
          serde.de.Deserializer.deserialize_tuple
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_tuple (V := V);
          serde.de.Deserializer.deserialize_tuple_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_tuple_struct (V := V);
          serde.de.Deserializer.deserialize_map
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_map (V := V);
          serde.de.Deserializer.deserialize_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_struct (V := V);
          serde.de.Deserializer.deserialize_enum
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_enum (V := V);
          serde.de.Deserializer.is_human_readable := Datatypes.None;
          serde.de.Deserializer.__deserialize_content := Datatypes.None;
        }.
      End Impl_serde_de_Deserializer_for_axum_extract_path_de_PathDeserializer_t.
      End Impl_serde_de_Deserializer_for_axum_extract_path_de_PathDeserializer_t.
      
      Module  MapDeserializer.
      Section MapDeserializer.
        Record t : Set := {
          params :
            ref
              (slice
                ((alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A)
                *
                axum.util.PercentDecodedStr.t));
          key : core.option.Option.t axum.extract.path.de.KeyOrIdx.t;
          value : core.option.Option.t (ref axum.util.PercentDecodedStr.t);
        }.
        
        Definition Get_params :=
          Ref.map
            (fun α => Some α.(params))
            (fun β α => Some (α <| params := β |>)).
        Definition Get_key :=
          Ref.map (fun α => Some α.(key)) (fun β α => Some (α <| key := β |>)).
        Definition Get_value :=
          Ref.map
            (fun α => Some α.(value))
            (fun β α => Some (α <| value := β |>)).
      End MapDeserializer.
      End MapDeserializer.
      
      Module  Impl_serde_de_MapAccess_for_axum_extract_path_de_MapDeserializer_t.
      Section Impl_serde_de_MapAccess_for_axum_extract_path_de_MapDeserializer_t.
        Definition Self : Set := axum.extract.path.de.MapDeserializer.t.
        
        (*
            type Error = PathDeserializationError;
        *)
        Definition Error : Set := axum.extract.path.PathDeserializationError.t.
        
        (*
            fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>
            where
                K: DeserializeSeed<'de>,
            {
                match self.params.split_first() {
                    Some(((key, value), tail)) => {
                        self.value = Some(value);
                        self.params = tail;
                        self.key = Some(KeyOrIdx::Key(key.clone()));
                        seed.deserialize(KeyDeserializer {
                            key: Arc::clone(key),
                        })
                        .map(Some)
                    }
                    None => Ok(None),
                }
            }
        *)
        Definition next_key_seed
            {K : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait K}
            (self : mut_ref Self)
            (seed : K)
            :
              M
                (core.result.Result.t
                  (core.option.Option.t K::type["Value"].t)
                  Error) :=
          let* self := M.alloc self in
          let* seed := M.alloc seed in
          M.read foo.
        
        Global Instance AssociatedFunction_next_key_seed
            {K : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait K} :
          Notations.DoubleColon Self "next_key_seed" := {
          Notations.double_colon := next_key_seed (K := K);
        }.
        
        (*
            fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>
            where
                V: DeserializeSeed<'de>,
            {
                match self.value.take() {
                    Some(value) => seed.deserialize(ValueDeserializer {
                        key: self.key.take(),
                        value,
                    }),
                    None => Err(PathDeserializationError::custom("value is missing")),
                }
            }
        *)
        Definition next_value_seed
            {V : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait V}
            (self : mut_ref Self)
            (seed : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* seed := M.alloc seed in
          M.read foo.
        
        Global Instance AssociatedFunction_next_value_seed
            {V : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait V} :
          Notations.DoubleColon Self "next_value_seed" := {
          Notations.double_colon := next_value_seed (V := V);
        }.
        
        Global Instance ℐ : serde.de.MapAccess.Required.Trait Self := {
          serde.de.MapAccess.Error := Error;
          serde.de.MapAccess.next_key_seed
            {K : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait K} :=
            next_key_seed (K := K);
          serde.de.MapAccess.next_value_seed
            {V : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait V} :=
            next_value_seed (V := V);
          serde.de.MapAccess.next_entry_seed := Datatypes.None;
          serde.de.MapAccess.next_key := Datatypes.None;
          serde.de.MapAccess.next_value := Datatypes.None;
          serde.de.MapAccess.next_entry := Datatypes.None;
          serde.de.MapAccess.size_hint := Datatypes.None;
        }.
      End Impl_serde_de_MapAccess_for_axum_extract_path_de_MapDeserializer_t.
      End Impl_serde_de_MapAccess_for_axum_extract_path_de_MapDeserializer_t.
      
      Module  KeyDeserializer.
      Section KeyDeserializer.
        Record t : Set := {
          key : alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A;
        }.
        
        Definition Get_key :=
          Ref.map (fun α => Some α.(key)) (fun β α => Some (α <| key := β |>)).
      End KeyDeserializer.
      End KeyDeserializer.
      
      Module  Impl_serde_de_Deserializer_for_axum_extract_path_de_KeyDeserializer_t.
      Section Impl_serde_de_Deserializer_for_axum_extract_path_de_KeyDeserializer_t.
        Definition Self : Set := axum.extract.path.de.KeyDeserializer.t.
        
        (*
            type Error = PathDeserializationError;
        *)
        Definition Error : Set := axum.extract.path.PathDeserializationError.t.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    visitor.visit_str(&self.key)
                }
        *)
        Definition deserialize_identifier
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_identifier
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_identifier" := {
          Notations.double_colon := deserialize_identifier (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    visitor.visit_str(&self.key)
                }
        *)
        Definition deserialize_str
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_str
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_str" := {
          Notations.double_colon := deserialize_str (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    visitor.visit_str(&self.key)
                }
        *)
        Definition deserialize_string
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_string
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_string" := {
          Notations.double_colon := deserialize_string (V := V);
        }.
        
        (*
            fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                Err(PathDeserializationError::custom("Unexpected key type"))
            }
        *)
        Definition deserialize_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (_visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _visitor := M.alloc _visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_any" := {
          Notations.double_colon := deserialize_any (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_bool
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_bool
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_bool" := {
          Notations.double_colon := deserialize_bool (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_i8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i8" := {
          Notations.double_colon := deserialize_i8 (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_i16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i16" := {
          Notations.double_colon := deserialize_i16 (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_i32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i32" := {
          Notations.double_colon := deserialize_i32 (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_i64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i64" := {
          Notations.double_colon := deserialize_i64 (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_i128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i128" := {
          Notations.double_colon := deserialize_i128 (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_u8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u8" := {
          Notations.double_colon := deserialize_u8 (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_u16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u16" := {
          Notations.double_colon := deserialize_u16 (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_u32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u32" := {
          Notations.double_colon := deserialize_u32 (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_u64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u64" := {
          Notations.double_colon := deserialize_u64 (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_u128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u128" := {
          Notations.double_colon := deserialize_u128 (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_f32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_f32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_f32" := {
          Notations.double_colon := deserialize_f32 (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_f64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_f64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_f64" := {
          Notations.double_colon := deserialize_f64 (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_char
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_char
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_char" := {
          Notations.double_colon := deserialize_char (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_bytes
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_bytes
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_bytes" := {
          Notations.double_colon := deserialize_bytes (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_byte_buf
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_byte_buf
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_byte_buf" := {
          Notations.double_colon := deserialize_byte_buf (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_option
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_option
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_option" := {
          Notations.double_colon := deserialize_option (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_unit
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_unit
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_unit" := {
          Notations.double_colon := deserialize_unit (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_unit_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (name : ref str.t)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* name := M.alloc name in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_unit_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_unit_struct" := {
          Notations.double_colon := deserialize_unit_struct (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_seq
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_seq
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_seq" := {
          Notations.double_colon := deserialize_seq (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_tuple
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (len : usize.t)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* len := M.alloc len in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_tuple
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_tuple" := {
          Notations.double_colon := deserialize_tuple (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_tuple_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (name : ref str.t)
            (len : usize.t)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* name := M.alloc name in
          let* len := M.alloc len in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_tuple_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_tuple_struct" := {
          Notations.double_colon := deserialize_tuple_struct (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_map
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_map
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_map" := {
          Notations.double_colon := deserialize_map (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_newtype_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (name : ref str.t)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* name := M.alloc name in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_newtype_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_newtype_struct" := {
          Notations.double_colon := deserialize_newtype_struct (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (name : ref str.t)
            (fields : ref (slice (ref str.t)))
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* name := M.alloc name in
          let* fields := M.alloc fields in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_struct" := {
          Notations.double_colon := deserialize_struct (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_enum
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (name : ref str.t)
            (variants : ref (slice (ref str.t)))
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* name := M.alloc name in
          let* variants := M.alloc variants in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_enum
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_enum" := {
          Notations.double_colon := deserialize_enum (V := V);
        }.
        
        (*
                fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
                where
                    $v: $crate::de::Visitor<$l>,
                {
                    $(
                        let _ = $arg;
                    )*
                    self.deserialize_any(visitor)
                }
        *)
        Definition deserialize_ignored_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_ignored_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_ignored_any" := {
          Notations.double_colon := deserialize_ignored_any (V := V);
        }.
        
        Global Instance ℐ : serde.de.Deserializer.Required.Trait Self := {
          serde.de.Deserializer.Error := Error;
          serde.de.Deserializer.deserialize_identifier
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_identifier (V := V);
          serde.de.Deserializer.deserialize_str
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_str (V := V);
          serde.de.Deserializer.deserialize_string
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_string (V := V);
          serde.de.Deserializer.deserialize_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_any (V := V);
          serde.de.Deserializer.deserialize_bool
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_bool (V := V);
          serde.de.Deserializer.deserialize_i8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_i8 (V := V);
          serde.de.Deserializer.deserialize_i16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_i16 (V := V);
          serde.de.Deserializer.deserialize_i32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_i32 (V := V);
          serde.de.Deserializer.deserialize_i64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_i64 (V := V);
          serde.de.Deserializer.deserialize_i128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            Datatypes.Some (deserialize_i128 (V := V));
          serde.de.Deserializer.deserialize_u8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_u8 (V := V);
          serde.de.Deserializer.deserialize_u16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_u16 (V := V);
          serde.de.Deserializer.deserialize_u32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_u32 (V := V);
          serde.de.Deserializer.deserialize_u64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_u64 (V := V);
          serde.de.Deserializer.deserialize_u128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            Datatypes.Some (deserialize_u128 (V := V));
          serde.de.Deserializer.deserialize_f32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_f32 (V := V);
          serde.de.Deserializer.deserialize_f64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_f64 (V := V);
          serde.de.Deserializer.deserialize_char
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_char (V := V);
          serde.de.Deserializer.deserialize_bytes
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_bytes (V := V);
          serde.de.Deserializer.deserialize_byte_buf
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_byte_buf (V := V);
          serde.de.Deserializer.deserialize_option
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_option (V := V);
          serde.de.Deserializer.deserialize_unit
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_unit (V := V);
          serde.de.Deserializer.deserialize_unit_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_unit_struct (V := V);
          serde.de.Deserializer.deserialize_seq
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_seq (V := V);
          serde.de.Deserializer.deserialize_tuple
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_tuple (V := V);
          serde.de.Deserializer.deserialize_tuple_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_tuple_struct (V := V);
          serde.de.Deserializer.deserialize_map
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_map (V := V);
          serde.de.Deserializer.deserialize_newtype_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_newtype_struct (V := V);
          serde.de.Deserializer.deserialize_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_struct (V := V);
          serde.de.Deserializer.deserialize_enum
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_enum (V := V);
          serde.de.Deserializer.deserialize_ignored_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_ignored_any (V := V);
          serde.de.Deserializer.is_human_readable := Datatypes.None;
          serde.de.Deserializer.__deserialize_content := Datatypes.None;
        }.
      End Impl_serde_de_Deserializer_for_axum_extract_path_de_KeyDeserializer_t.
      End Impl_serde_de_Deserializer_for_axum_extract_path_de_KeyDeserializer_t.
      
      Module  ValueDeserializer.
      Section ValueDeserializer.
        Record t : Set := {
          key : core.option.Option.t axum.extract.path.de.KeyOrIdx.t;
          value : ref axum.util.PercentDecodedStr.t;
        }.
        
        Definition Get_key :=
          Ref.map (fun α => Some α.(key)) (fun β α => Some (α <| key := β |>)).
        Definition Get_value :=
          Ref.map
            (fun α => Some α.(value))
            (fun β α => Some (α <| value := β |>)).
      End ValueDeserializer.
      End ValueDeserializer.
      
      Module  Impl_core_fmt_Debug_for_axum_extract_path_de_ValueDeserializer_t.
      Section Impl_core_fmt_Debug_for_axum_extract_path_de_ValueDeserializer_t.
        Definition Self : Set := axum.extract.path.de.ValueDeserializer.t.
        
        (*
        Debug
        *)
        Definition fmt
            (self : ref Self)
            (f : mut_ref core.fmt.Formatter.t)
            : M ltac:(core.fmt.Result) :=
          let* self := M.alloc self in
          let* f := M.alloc f in
          M.read foo.
        
        Global Instance AssociatedFunction_fmt :
          Notations.DoubleColon Self "fmt" := {
          Notations.double_colon := fmt;
        }.
        
        Global Instance ℐ : core.fmt.Debug.Trait Self := {
          core.fmt.Debug.fmt := fmt;
        }.
      End Impl_core_fmt_Debug_for_axum_extract_path_de_ValueDeserializer_t.
      End Impl_core_fmt_Debug_for_axum_extract_path_de_ValueDeserializer_t.
      
      Module  Impl_serde_de_Deserializer_for_axum_extract_path_de_ValueDeserializer_t.
      Section Impl_serde_de_Deserializer_for_axum_extract_path_de_ValueDeserializer_t.
        Definition Self : Set := axum.extract.path.de.ValueDeserializer.t.
        
        (*
            type Error = PathDeserializationError;
        *)
        Definition Error : Set := axum.extract.path.PathDeserializationError.t.
        
        (*
                fn $trait_fn<V>(self, _: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    Err(PathDeserializationError::unsupported_type(type_name::<
                        V::Value,
                    >()))
                }
        *)
        Definition deserialize_map
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (Pattern : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* Pattern := M.alloc Pattern in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_map
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_map" := {
          Notations.double_colon := deserialize_map (V := V);
        }.
        
        (*
                fn $trait_fn<V>(self, _: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    Err(PathDeserializationError::unsupported_type(type_name::<
                        V::Value,
                    >()))
                }
        *)
        Definition deserialize_identifier
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (Pattern : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* Pattern := M.alloc Pattern in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_identifier
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_identifier" := {
          Notations.double_colon := deserialize_identifier (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_bool
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_bool
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_bool" := {
          Notations.double_colon := deserialize_bool (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_i8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i8" := {
          Notations.double_colon := deserialize_i8 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_i16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i16" := {
          Notations.double_colon := deserialize_i16 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_i32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i32" := {
          Notations.double_colon := deserialize_i32 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_i64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i64" := {
          Notations.double_colon := deserialize_i64 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_i128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_i128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_i128" := {
          Notations.double_colon := deserialize_i128 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_u8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u8" := {
          Notations.double_colon := deserialize_u8 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_u16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u16" := {
          Notations.double_colon := deserialize_u16 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_u32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u32" := {
          Notations.double_colon := deserialize_u32 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_u64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u64" := {
          Notations.double_colon := deserialize_u64 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_u128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_u128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_u128" := {
          Notations.double_colon := deserialize_u128 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_f32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_f32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_f32" := {
          Notations.double_colon := deserialize_f32 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_f64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_f64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_f64" := {
          Notations.double_colon := deserialize_f64 (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_string
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_string
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_string" := {
          Notations.double_colon := deserialize_string (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_byte_buf
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_byte_buf
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_byte_buf" := {
          Notations.double_colon := deserialize_byte_buf (V := V);
        }.
        
        (*
                fn $trait_fn<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>
                where
                    V: Visitor<'de>,
                {
                    let v = self.value.parse().map_err(|_| {
                        if let Some(key) = self.key.take() {
                            let kind = match key {
                                KeyOrIdx::Key(key) => ErrorKind::ParseErrorAtKey {
                                    key: key.to_string(),
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                                KeyOrIdx::Idx { idx: index, key: _ } => ErrorKind::ParseErrorAtIndex {
                                    index,
                                    value: self.value.as_str().to_owned(),
                                    expected_type: $ty,
                                },
                            };
                            PathDeserializationError::new(kind)
                        } else {
                            PathDeserializationError::new(ErrorKind::ParseError {
                                value: self.value.as_str().to_owned(),
                                expected_type: $ty,
                            })
                        }
                    })?;
                    visitor.$visit_fn(v)
                }
        *)
        Definition deserialize_char
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_char
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_char" := {
          Notations.double_colon := deserialize_char (V := V);
        }.
        
        (*
            fn deserialize_any<V>(self, v: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                self.deserialize_str(v)
            }
        *)
        Definition deserialize_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (v : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* v := M.alloc v in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_any" := {
          Notations.double_colon := deserialize_any (V := V);
        }.
        
        (*
            fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                visitor.visit_borrowed_str(self.value)
            }
        *)
        Definition deserialize_str
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_str
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_str" := {
          Notations.double_colon := deserialize_str (V := V);
        }.
        
        (*
            fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                visitor.visit_borrowed_bytes(self.value.as_bytes())
            }
        *)
        Definition deserialize_bytes
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_bytes
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_bytes" := {
          Notations.double_colon := deserialize_bytes (V := V);
        }.
        
        (*
            fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                visitor.visit_some(self)
            }
        *)
        Definition deserialize_option
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_option
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_option" := {
          Notations.double_colon := deserialize_option (V := V);
        }.
        
        (*
            fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                visitor.visit_unit()
            }
        *)
        Definition deserialize_unit
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_unit
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_unit" := {
          Notations.double_colon := deserialize_unit (V := V);
        }.
        
        (*
            fn deserialize_unit_struct<V>(
                self,
                _name: &'static str,
                visitor: V,
            ) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                visitor.visit_unit()
            }
        *)
        Definition deserialize_unit_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (_name : ref str.t)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _name := M.alloc _name in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_unit_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_unit_struct" := {
          Notations.double_colon := deserialize_unit_struct (V := V);
        }.
        
        (*
            fn deserialize_newtype_struct<V>(
                self,
                _name: &'static str,
                visitor: V,
            ) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                visitor.visit_newtype_struct(self)
            }
        *)
        Definition deserialize_newtype_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (_name : ref str.t)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _name := M.alloc _name in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_newtype_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_newtype_struct" := {
          Notations.double_colon := deserialize_newtype_struct (V := V);
        }.
        
        (*
            fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                struct PairDeserializer<'de> {
                    key: Option<KeyOrIdx>,
                    value: Option<&'de PercentDecodedStr>,
                }
        
                impl<'de> SeqAccess<'de> for PairDeserializer<'de> {
                    type Error = PathDeserializationError;
        
                    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
                    where
                        T: DeserializeSeed<'de>,
                    {
                        match self.key.take() {
                            Some(KeyOrIdx::Idx { idx: _, key }) => {
                                return seed.deserialize(KeyDeserializer { key }).map(Some);
                            }
                            // `KeyOrIdx::Key` is only used when deserializing maps so `deserialize_seq`
                            // wouldn't be called for that
                            Some(KeyOrIdx::Key(_)) => unreachable!(),
                            None => {}
                        };
        
                        self.value
                            .take()
                            .map(|value| seed.deserialize(ValueDeserializer { key: None, value }))
                            .transpose()
                    }
                }
        
                if len == 2 {
                    match self.key {
                        Some(key) => visitor.visit_seq(PairDeserializer {
                            key: Some(key),
                            value: Some(self.value),
                        }),
                        // `self.key` is only `None` when deserializing maps so `deserialize_seq`
                        // wouldn't be called for that
                        None => unreachable!(),
                    }
                } else {
                    Err(PathDeserializationError::unsupported_type(type_name::<
                        V::Value,
                    >()))
                }
            }
        *)
        Definition deserialize_tuple
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (len : usize.t)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* len := M.alloc len in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_tuple
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_tuple" := {
          Notations.double_colon := deserialize_tuple (V := V);
        }.
        
        (*
            fn deserialize_seq<V>(self, _visitor: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                Err(PathDeserializationError::unsupported_type(type_name::<
                    V::Value,
                >()))
            }
        *)
        Definition deserialize_seq
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (_visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _visitor := M.alloc _visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_seq
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_seq" := {
          Notations.double_colon := deserialize_seq (V := V);
        }.
        
        (*
            fn deserialize_tuple_struct<V>(
                self,
                _name: &'static str,
                _len: usize,
                _visitor: V,
            ) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                Err(PathDeserializationError::unsupported_type(type_name::<
                    V::Value,
                >()))
            }
        *)
        Definition deserialize_tuple_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (_name : ref str.t)
            (_len : usize.t)
            (_visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _name := M.alloc _name in
          let* _len := M.alloc _len in
          let* _visitor := M.alloc _visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_tuple_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_tuple_struct" := {
          Notations.double_colon := deserialize_tuple_struct (V := V);
        }.
        
        (*
            fn deserialize_struct<V>(
                self,
                _name: &'static str,
                _fields: &'static [&'static str],
                _visitor: V,
            ) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                Err(PathDeserializationError::unsupported_type(type_name::<
                    V::Value,
                >()))
            }
        *)
        Definition deserialize_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (_name : ref str.t)
            (_fields : ref (slice (ref str.t)))
            (_visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _name := M.alloc _name in
          let* _fields := M.alloc _fields in
          let* _visitor := M.alloc _visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_struct" := {
          Notations.double_colon := deserialize_struct (V := V);
        }.
        
        (*
            fn deserialize_enum<V>(
                self,
                _name: &'static str,
                _variants: &'static [&'static str],
                visitor: V,
            ) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                visitor.visit_enum(EnumDeserializer {
                    value: self.value.clone().into_inner(),
                })
            }
        *)
        Definition deserialize_enum
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (_name : ref str.t)
            (_variants : ref (slice (ref str.t)))
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _name := M.alloc _name in
          let* _variants := M.alloc _variants in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_enum
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_enum" := {
          Notations.double_colon := deserialize_enum (V := V);
        }.
        
        (*
            fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                visitor.visit_unit()
            }
        *)
        Definition deserialize_ignored_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* visitor := M.alloc visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_deserialize_ignored_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "deserialize_ignored_any" := {
          Notations.double_colon := deserialize_ignored_any (V := V);
        }.
        
        Global Instance ℐ : serde.de.Deserializer.Required.Trait Self := {
          serde.de.Deserializer.Error := Error;
          serde.de.Deserializer.deserialize_map
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_map (V := V);
          serde.de.Deserializer.deserialize_identifier
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_identifier (V := V);
          serde.de.Deserializer.deserialize_bool
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_bool (V := V);
          serde.de.Deserializer.deserialize_i8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_i8 (V := V);
          serde.de.Deserializer.deserialize_i16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_i16 (V := V);
          serde.de.Deserializer.deserialize_i32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_i32 (V := V);
          serde.de.Deserializer.deserialize_i64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_i64 (V := V);
          serde.de.Deserializer.deserialize_i128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            Datatypes.Some (deserialize_i128 (V := V));
          serde.de.Deserializer.deserialize_u8
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_u8 (V := V);
          serde.de.Deserializer.deserialize_u16
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_u16 (V := V);
          serde.de.Deserializer.deserialize_u32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_u32 (V := V);
          serde.de.Deserializer.deserialize_u64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_u64 (V := V);
          serde.de.Deserializer.deserialize_u128
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            Datatypes.Some (deserialize_u128 (V := V));
          serde.de.Deserializer.deserialize_f32
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_f32 (V := V);
          serde.de.Deserializer.deserialize_f64
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_f64 (V := V);
          serde.de.Deserializer.deserialize_string
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_string (V := V);
          serde.de.Deserializer.deserialize_byte_buf
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_byte_buf (V := V);
          serde.de.Deserializer.deserialize_char
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_char (V := V);
          serde.de.Deserializer.deserialize_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_any (V := V);
          serde.de.Deserializer.deserialize_str
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_str (V := V);
          serde.de.Deserializer.deserialize_bytes
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_bytes (V := V);
          serde.de.Deserializer.deserialize_option
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_option (V := V);
          serde.de.Deserializer.deserialize_unit
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_unit (V := V);
          serde.de.Deserializer.deserialize_unit_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_unit_struct (V := V);
          serde.de.Deserializer.deserialize_newtype_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_newtype_struct (V := V);
          serde.de.Deserializer.deserialize_tuple
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_tuple (V := V);
          serde.de.Deserializer.deserialize_seq
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_seq (V := V);
          serde.de.Deserializer.deserialize_tuple_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_tuple_struct (V := V);
          serde.de.Deserializer.deserialize_struct
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_struct (V := V);
          serde.de.Deserializer.deserialize_enum
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_enum (V := V);
          serde.de.Deserializer.deserialize_ignored_any
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            deserialize_ignored_any (V := V);
          serde.de.Deserializer.is_human_readable := Datatypes.None;
          serde.de.Deserializer.__deserialize_content := Datatypes.None;
        }.
      End Impl_serde_de_Deserializer_for_axum_extract_path_de_ValueDeserializer_t.
      End Impl_serde_de_Deserializer_for_axum_extract_path_de_ValueDeserializer_t.
      
      Module  EnumDeserializer.
      Section EnumDeserializer.
        Record t : Set := {
          value : alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A;
        }.
        
        Definition Get_value :=
          Ref.map
            (fun α => Some α.(value))
            (fun β α => Some (α <| value := β |>)).
      End EnumDeserializer.
      End EnumDeserializer.
      
      Module  Impl_serde_de_EnumAccess_for_axum_extract_path_de_EnumDeserializer_t.
      Section Impl_serde_de_EnumAccess_for_axum_extract_path_de_EnumDeserializer_t.
        Definition Self : Set := axum.extract.path.de.EnumDeserializer.t.
        
        (*
            type Error = PathDeserializationError;
        *)
        Definition Error : Set := axum.extract.path.PathDeserializationError.t.
        
        (*
            type Variant = UnitVariant;
        *)
        Definition Variant : Set := axum.extract.path.de.UnitVariant.t.
        
        (*
            fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Self::Error>
            where
                V: de::DeserializeSeed<'de>,
            {
                Ok((
                    seed.deserialize(KeyDeserializer { key: self.value })?,
                    UnitVariant,
                ))
            }
        *)
        Definition variant_seed
            {V : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait V}
            (self : Self)
            (seed : V)
            : M (core.result.Result.t (V::type["Value"].t * Variant) Error) :=
          let* self := M.alloc self in
          let* seed := M.alloc seed in
          M.read foo.
        
        Global Instance AssociatedFunction_variant_seed
            {V : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait V} :
          Notations.DoubleColon Self "variant_seed" := {
          Notations.double_colon := variant_seed (V := V);
        }.
        
        Global Instance ℐ : serde.de.EnumAccess.Required.Trait Self := {
          serde.de.EnumAccess.Error := Error;
          serde.de.EnumAccess.Variant := Variant;
          serde.de.EnumAccess.variant_seed
            {V : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait V} :=
            variant_seed (V := V);
          serde.de.EnumAccess.variant := Datatypes.None;
        }.
      End Impl_serde_de_EnumAccess_for_axum_extract_path_de_EnumDeserializer_t.
      End Impl_serde_de_EnumAccess_for_axum_extract_path_de_EnumDeserializer_t.
      
      Module  UnitVariant.
      Section UnitVariant.
        Inductive t : Set := Build.
      End UnitVariant.
      End UnitVariant.
      
      Module  Impl_serde_de_VariantAccess_for_axum_extract_path_de_UnitVariant_t.
      Section Impl_serde_de_VariantAccess_for_axum_extract_path_de_UnitVariant_t.
        Definition Self : Set := axum.extract.path.de.UnitVariant.t.
        
        (*
            type Error = PathDeserializationError;
        *)
        Definition Error : Set := axum.extract.path.PathDeserializationError.t.
        
        (*
            fn unit_variant(self) -> Result<(), Self::Error> {
                Ok(())
            }
        *)
        Definition unit_variant
            (self : Self)
            : M (core.result.Result.t unit Error) :=
          let* self := M.alloc self in
          M.read foo.
        
        Global Instance AssociatedFunction_unit_variant :
          Notations.DoubleColon Self "unit_variant" := {
          Notations.double_colon := unit_variant;
        }.
        
        (*
            fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value, Self::Error>
            where
                T: DeserializeSeed<'de>,
            {
                Err(PathDeserializationError::unsupported_type(
                    "newtype enum variant",
                ))
            }
        *)
        Definition newtype_variant_seed
            {T : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait T}
            (self : Self)
            (_seed : T)
            : M (core.result.Result.t T::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _seed := M.alloc _seed in
          M.read foo.
        
        Global Instance AssociatedFunction_newtype_variant_seed
            {T : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait T} :
          Notations.DoubleColon Self "newtype_variant_seed" := {
          Notations.double_colon := newtype_variant_seed (T := T);
        }.
        
        (*
            fn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                Err(PathDeserializationError::unsupported_type(
                    "tuple enum variant",
                ))
            }
        *)
        Definition tuple_variant
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (_len : usize.t)
            (_visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _len := M.alloc _len in
          let* _visitor := M.alloc _visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_tuple_variant
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "tuple_variant" := {
          Notations.double_colon := tuple_variant (V := V);
        }.
        
        (*
            fn struct_variant<V>(
                self,
                _fields: &'static [&'static str],
                _visitor: V,
            ) -> Result<V::Value, Self::Error>
            where
                V: Visitor<'de>,
            {
                Err(PathDeserializationError::unsupported_type(
                    "struct enum variant",
                ))
            }
        *)
        Definition struct_variant
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V}
            (self : Self)
            (_fields : ref (slice (ref str.t)))
            (_visitor : V)
            : M (core.result.Result.t V::type["Value"].t Error) :=
          let* self := M.alloc self in
          let* _fields := M.alloc _fields in
          let* _visitor := M.alloc _visitor in
          M.read foo.
        
        Global Instance AssociatedFunction_struct_variant
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :
          Notations.DoubleColon Self "struct_variant" := {
          Notations.double_colon := struct_variant (V := V);
        }.
        
        Global Instance ℐ : serde.de.VariantAccess.Required.Trait Self := {
          serde.de.VariantAccess.Error := Error;
          serde.de.VariantAccess.unit_variant := unit_variant;
          serde.de.VariantAccess.newtype_variant_seed
            {T : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait T} :=
            newtype_variant_seed (T := T);
          serde.de.VariantAccess.tuple_variant
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            tuple_variant (V := V);
          serde.de.VariantAccess.struct_variant
            {V : Set}
            {ℋ_0 : serde.de.Visitor.Trait V} :=
            struct_variant (V := V);
          serde.de.VariantAccess.newtype_variant := Datatypes.None;
        }.
      End Impl_serde_de_VariantAccess_for_axum_extract_path_de_UnitVariant_t.
      End Impl_serde_de_VariantAccess_for_axum_extract_path_de_UnitVariant_t.
      
      Module  SeqDeserializer.
      Section SeqDeserializer.
        Record t : Set := {
          params :
            ref
              (slice
                ((alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A)
                *
                axum.util.PercentDecodedStr.t));
          idx : usize.t;
        }.
        
        Definition Get_params :=
          Ref.map
            (fun α => Some α.(params))
            (fun β α => Some (α <| params := β |>)).
        Definition Get_idx :=
          Ref.map (fun α => Some α.(idx)) (fun β α => Some (α <| idx := β |>)).
      End SeqDeserializer.
      End SeqDeserializer.
      
      Module  Impl_serde_de_SeqAccess_for_axum_extract_path_de_SeqDeserializer_t.
      Section Impl_serde_de_SeqAccess_for_axum_extract_path_de_SeqDeserializer_t.
        Definition Self : Set := axum.extract.path.de.SeqDeserializer.t.
        
        (*
            type Error = PathDeserializationError;
        *)
        Definition Error : Set := axum.extract.path.PathDeserializationError.t.
        
        (*
            fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
            where
                T: DeserializeSeed<'de>,
            {
                match self.params.split_first() {
                    Some(((key, value), tail)) => {
                        self.params = tail;
                        let idx = self.idx;
                        self.idx += 1;
                        Ok(Some(seed.deserialize(ValueDeserializer {
                            key: Some(KeyOrIdx::Idx {
                                idx,
                                key: key.clone(),
                            }),
                            value,
                        })?))
                    }
                    None => Ok(None),
                }
            }
        *)
        Definition next_element_seed
            {T : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait T}
            (self : mut_ref Self)
            (seed : T)
            :
              M
                (core.result.Result.t
                  (core.option.Option.t T::type["Value"].t)
                  Error) :=
          let* self := M.alloc self in
          let* seed := M.alloc seed in
          M.read foo.
        
        Global Instance AssociatedFunction_next_element_seed
            {T : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait T} :
          Notations.DoubleColon Self "next_element_seed" := {
          Notations.double_colon := next_element_seed (T := T);
        }.
        
        Global Instance ℐ : serde.de.SeqAccess.Required.Trait Self := {
          serde.de.SeqAccess.Error := Error;
          serde.de.SeqAccess.next_element_seed
            {T : Set}
            {ℋ_0 : serde.de.DeserializeSeed.Trait T} :=
            next_element_seed (T := T);
          serde.de.SeqAccess.next_element := Datatypes.None;
          serde.de.SeqAccess.size_hint := Datatypes.None;
        }.
      End Impl_serde_de_SeqAccess_for_axum_extract_path_de_SeqDeserializer_t.
      End Impl_serde_de_SeqAccess_for_axum_extract_path_de_SeqDeserializer_t.
      
      Module KeyOrIdx.
        Module Idx.
          Record t : Set := {
            idx : usize.t;
            key : alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A;
          }.
        End Idx.
        
        Inductive t : Set :=
        | Key (_ : alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A)
        | Idx (_ : Idx.t).
        
        Definition Get_Key_0 :=
          Ref.map
            (fun α => match α with | Key α0 => Some α0 | _ => None end)
            (fun β α => match α with | Key _ => Some (Key β) | _ => None end).
        
        Definition Get_Idx_idx :=
          Ref.map
            (fun α => match α with | Idx α => Some α.(Idx.idx) | _ => None end)
            (fun β α =>
              match α with
              | Idx α => Some (Idx (α <| Idx.idx := β |>))
              | _ => None
              end).
        
        Definition Get_Idx_key :=
          Ref.map
            (fun α => match α with | Idx α => Some α.(Idx.key) | _ => None end)
            (fun β α =>
              match α with
              | Idx α => Some (Idx (α <| Idx.key := β |>))
              | _ => None
              end).
      End KeyOrIdx.
      
      Module  Impl_core_fmt_Debug_for_axum_extract_path_de_KeyOrIdx_t.
      Section Impl_core_fmt_Debug_for_axum_extract_path_de_KeyOrIdx_t.
        Definition Self : Set := axum.extract.path.de.KeyOrIdx.t.
        
        (*
        Debug
        *)
        Definition fmt
            (self : ref Self)
            (f : mut_ref core.fmt.Formatter.t)
            : M ltac:(core.fmt.Result) :=
          let* self := M.alloc self in
          let* f := M.alloc f in
          M.read foo.
        
        Global Instance AssociatedFunction_fmt :
          Notations.DoubleColon Self "fmt" := {
          Notations.double_colon := fmt;
        }.
        
        Global Instance ℐ : core.fmt.Debug.Trait Self := {
          core.fmt.Debug.fmt := fmt;
        }.
      End Impl_core_fmt_Debug_for_axum_extract_path_de_KeyOrIdx_t.
      End Impl_core_fmt_Debug_for_axum_extract_path_de_KeyOrIdx_t.
      
      Module  Impl_core_clone_Clone_for_axum_extract_path_de_KeyOrIdx_t.
      Section Impl_core_clone_Clone_for_axum_extract_path_de_KeyOrIdx_t.
        Definition Self : Set := axum.extract.path.de.KeyOrIdx.t.
        
        (*
        Clone
        *)
        Definition clone
            (self : ref Self)
            : M axum.extract.path.de.KeyOrIdx.t :=
          let* self := M.alloc self in
          M.read foo.
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_axum_extract_path_de_KeyOrIdx_t.
      End Impl_core_clone_Clone_for_axum_extract_path_de_KeyOrIdx_t.
    End de.
    
    Module  Path.
    Section Path.
      Context {T : Set}.
      
      Record t : Set := {
        x0 : T;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End Path.
    End Path.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_path_Path_t_T.
    Section Impl_core_fmt_Debug_for_axum_extract_path_Path_t_T.
      Context {T : Set}.
      
      Context {ℋ_0 : core.fmt.Debug.Trait T}.
      
      Definition Self : Set := axum.extract.path.Path.t T.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_path_Path_t_T.
    End Impl_core_fmt_Debug_for_axum_extract_path_Path_t_T.
    
    Module  Impl_core_ops_deref_Deref_for_axum_extract_path_Path_t_T.
    Section Impl_core_ops_deref_Deref_for_axum_extract_path_Path_t_T.
      Context {T : Set}.
      
      Definition Self : Set := axum.extract.path.Path.t T.
      
      (*
                  type Target = T;
      *)
      Definition Target : Set := T.
      
      (*
                  fn deref(&self) -> &Self::Target {
                      &self.0
                  }
      *)
      Definition deref (self : ref Self) : M (ref Target) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_deref :
        Notations.DoubleColon Self "deref" := {
        Notations.double_colon := deref;
      }.
      
      Global Instance ℐ : core.ops.deref.Deref.Trait Self := {
        core.ops.deref.Deref.Target := Target;
        core.ops.deref.Deref.deref := deref;
      }.
    End Impl_core_ops_deref_Deref_for_axum_extract_path_Path_t_T.
    End Impl_core_ops_deref_Deref_for_axum_extract_path_Path_t_T.
    
    Module  Impl_core_ops_deref_DerefMut_for_axum_extract_path_Path_t_T.
    Section Impl_core_ops_deref_DerefMut_for_axum_extract_path_Path_t_T.
      Context {T : Set}.
      
      Definition Self : Set := axum.extract.path.Path.t T.
      
      (*
                  fn deref_mut(&mut self) -> &mut Self::Target {
                      &mut self.0
                  }
      *)
      Definition deref_mut (self : mut_ref Self) : M (mut_ref Target) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_deref_mut :
        Notations.DoubleColon Self "deref_mut" := {
        Notations.double_colon := deref_mut;
      }.
      
      Global Instance ℐ : core.ops.deref.DerefMut.Trait Self := {
        core.ops.deref.DerefMut.deref_mut := deref_mut;
      }.
    End Impl_core_ops_deref_DerefMut_for_axum_extract_path_Path_t_T.
    End Impl_core_ops_deref_DerefMut_for_axum_extract_path_Path_t_T.
    
    Module  Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_path_Path_t_T.
    Section Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_path_Path_t_T.
      Context {T S : Set}.
      
      Context
        {ℋ_0 : serde.de.DeserializeOwned.Trait T}
        {ℋ_1 : core.marker.Send.Trait T}
        {ℋ_2 : core.marker.Send.Trait S}
        {ℋ_3 : core.marker.Sync.Trait S}.
      
      Definition Self : Set := axum.extract.path.Path.t T.
      
      (*
          type Rejection = PathRejection;
      *)
      Definition Rejection : Set := axum.extract.rejection.PathRejection.t.
      
      (*
          async fn from_request_parts(parts: &mut Parts, _state: &S) -> Result<Self, Self::Rejection> {
              let params = match parts.extensions.get::<UrlParams>() {
                  Some(UrlParams::Params(params)) => params,
                  Some(UrlParams::InvalidUtf8InPathParam { key }) => {
                      let err = PathDeserializationError {
                          kind: ErrorKind::InvalidUtf8InPathParam {
                              key: key.to_string(),
                          },
                      };
                      let err = FailedToDeserializePathParams(err);
                      return Err(err.into());
                  }
                  None => {
                      return Err(MissingPathParams.into());
                  }
              };
      
              T::deserialize(de::PathDeserializer::new(params))
                  .map_err(|err| {
                      PathRejection::FailedToDeserializePathParams(FailedToDeserializePathParams(err))
                  })
                  .map(Path)
          }
      *)
      Definition from_request_parts
          (parts : mut_ref http.request.Parts.t)
          (_state : ref S)
          :
            M
              (core.pin.Pin.t
                (alloc.boxed.Box.t
                  (dyn
                    [core.future.future.Future.Trait; core.marker.Send.Trait])
                  alloc.boxed.Box.Default.A)) :=
        let* parts := M.alloc parts in
        let* _state := M.alloc _state in
        M.read foo.
      
      Global Instance AssociatedFunction_from_request_parts :
        Notations.DoubleColon Self "from_request_parts" := {
        Notations.double_colon := from_request_parts;
      }.
      
      Global Instance ℐ :
        axum_core.extract.FromRequestParts.Trait Self (S := S) := {
        axum_core.extract.FromRequestParts.Rejection := Rejection;
        axum_core.extract.FromRequestParts.from_request_parts :=
          from_request_parts;
      }.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_path_Path_t_T.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_path_Path_t_T.
    
    Module  PathDeserializationError.
    Section PathDeserializationError.
      Record t : Set := {
        kind : axum.extract.path.ErrorKind.t;
      }.
      
      Definition Get_kind :=
        Ref.map (fun α => Some α.(kind)) (fun β α => Some (α <| kind := β |>)).
    End PathDeserializationError.
    End PathDeserializationError.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_path_PathDeserializationError_t.
    Section Impl_core_fmt_Debug_for_axum_extract_path_PathDeserializationError_t.
      Definition Self : Set := axum.extract.path.PathDeserializationError.t.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_path_PathDeserializationError_t.
    End Impl_core_fmt_Debug_for_axum_extract_path_PathDeserializationError_t.
    
    Module  Impl_axum_extract_path_PathDeserializationError_t.
    Section Impl_axum_extract_path_PathDeserializationError_t.
      Definition Self : Set := axum.extract.path.PathDeserializationError.t.
      
      (*
          pub(super) fn new(kind: ErrorKind) -> Self {
              Self { kind }
          }
      *)
      Definition new (kind : axum.extract.path.ErrorKind.t) : M Self :=
        let* kind := M.alloc kind in
        M.read foo.
      
      Global Instance AssociatedFunction_new :
        Notations.DoubleColon Self "new" := {
        Notations.double_colon := new;
      }.
      
      (*
          pub(super) fn wrong_number_of_parameters() -> WrongNumberOfParameters<()> {
              WrongNumberOfParameters { got: () }
          }
      *)
      Definition wrong_number_of_parameters
          : M (axum.extract.path.WrongNumberOfParameters.t unit) :=
        M.read foo.
      
      Global Instance AssociatedFunction_wrong_number_of_parameters :
        Notations.DoubleColon Self "wrong_number_of_parameters" := {
        Notations.double_colon := wrong_number_of_parameters;
      }.
      
      (*
          pub(super) fn unsupported_type(name: &'static str) -> Self {
              Self::new(ErrorKind::UnsupportedType { name })
          }
      *)
      Definition unsupported_type (name : ref str.t) : M Self :=
        let* name := M.alloc name in
        M.read foo.
      
      Global Instance AssociatedFunction_unsupported_type :
        Notations.DoubleColon Self "unsupported_type" := {
        Notations.double_colon := unsupported_type;
      }.
    End Impl_axum_extract_path_PathDeserializationError_t.
    End Impl_axum_extract_path_PathDeserializationError_t.
    
    Module  WrongNumberOfParameters.
    Section WrongNumberOfParameters.
      Context (G : Set).
      
      Record t : Set := {
        got : G;
      }.
      
      Definition Get_got :=
        Ref.map (fun α => Some α.(got)) (fun β α => Some (α <| got := β |>)).
    End WrongNumberOfParameters.
    End WrongNumberOfParameters.
    
    Module  Impl_axum_extract_path_WrongNumberOfParameters_t_G.
    Section Impl_axum_extract_path_WrongNumberOfParameters_t_G.
      Context {G : Set}.
      
      Definition Self : Set := axum.extract.path.WrongNumberOfParameters.t G.
      
      (*
          pub(super) fn got<G2>(self, got: G2) -> WrongNumberOfParameters<G2> {
              WrongNumberOfParameters { got }
          }
      *)
      Definition got
          {G2 : Set}
          (self : Self)
          (got : G2)
          : M (axum.extract.path.WrongNumberOfParameters.t G2) :=
        let* self := M.alloc self in
        let* got := M.alloc got in
        M.read foo.
      
      Global Instance AssociatedFunction_got {G2 : Set} :
        Notations.DoubleColon Self "got" := {
        Notations.double_colon := got (G2 := G2);
      }.
    End Impl_axum_extract_path_WrongNumberOfParameters_t_G.
    End Impl_axum_extract_path_WrongNumberOfParameters_t_G.
    
    Module  Impl_axum_extract_path_WrongNumberOfParameters_t_usize_t.
    Section Impl_axum_extract_path_WrongNumberOfParameters_t_usize_t.
      Definition Self : Set :=
        axum.extract.path.WrongNumberOfParameters.t usize.t.
      
      (*
          pub(super) fn expected(self, expected: usize) -> PathDeserializationError {
              PathDeserializationError::new(ErrorKind::WrongNumberOfParameters {
                  got: self.got,
                  expected,
              })
          }
      *)
      Definition expected
          (self : Self)
          (expected : usize.t)
          : M axum.extract.path.PathDeserializationError.t :=
        let* self := M.alloc self in
        let* expected := M.alloc expected in
        M.read foo.
      
      Global Instance AssociatedFunction_expected :
        Notations.DoubleColon Self "expected" := {
        Notations.double_colon := expected;
      }.
    End Impl_axum_extract_path_WrongNumberOfParameters_t_usize_t.
    End Impl_axum_extract_path_WrongNumberOfParameters_t_usize_t.
    
    Module  Impl_serde_de_Error_for_axum_extract_path_PathDeserializationError_t.
    Section Impl_serde_de_Error_for_axum_extract_path_PathDeserializationError_t.
      Definition Self : Set := axum.extract.path.PathDeserializationError.t.
      
      (*
          fn custom<T>(msg: T) -> Self
          where
              T: fmt::Display,
          {
              Self {
                  kind: ErrorKind::Message(msg.to_string()),
              }
          }
      *)
      Definition custom
          {T : Set}
          {ℋ_0 : core.fmt.Display.Trait T}
          (msg : T)
          : M Self :=
        let* msg := M.alloc msg in
        M.read foo.
      
      Global Instance AssociatedFunction_custom
          {T : Set}
          {ℋ_0 : core.fmt.Display.Trait T} :
        Notations.DoubleColon Self "custom" := {
        Notations.double_colon := custom (T := T);
      }.
      
      Global Instance ℐ : serde.de.Error.Required.Trait Self := {
        serde.de.Error.custom {T : Set} {ℋ_0 : core.fmt.Display.Trait T} :=
          custom (T := T);
        serde.de.Error.invalid_type := Datatypes.None;
        serde.de.Error.invalid_value := Datatypes.None;
        serde.de.Error.invalid_length := Datatypes.None;
        serde.de.Error.unknown_variant := Datatypes.None;
        serde.de.Error.unknown_field := Datatypes.None;
        serde.de.Error.missing_field := Datatypes.None;
        serde.de.Error.duplicate_field := Datatypes.None;
      }.
    End Impl_serde_de_Error_for_axum_extract_path_PathDeserializationError_t.
    End Impl_serde_de_Error_for_axum_extract_path_PathDeserializationError_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_path_PathDeserializationError_t.
    Section Impl_core_fmt_Display_for_axum_extract_path_PathDeserializationError_t.
      Definition Self : Set := axum.extract.path.PathDeserializationError.t.
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              self.kind.fmt(f)
          }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_path_PathDeserializationError_t.
    End Impl_core_fmt_Display_for_axum_extract_path_PathDeserializationError_t.
    
    Module  Impl_core_error_Error_for_axum_extract_path_PathDeserializationError_t.
    Section Impl_core_error_Error_for_axum_extract_path_PathDeserializationError_t.
      Definition Self : Set := axum.extract.path.PathDeserializationError.t.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.None;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_path_PathDeserializationError_t.
    End Impl_core_error_Error_for_axum_extract_path_PathDeserializationError_t.
    
    Module ErrorKind.
      Module WrongNumberOfParameters.
        Record t : Set := {
          got : usize.t;
          expected : usize.t;
        }.
      End WrongNumberOfParameters.
      
      Module ParseErrorAtKey.
        Record t : Set := {
          key : alloc.string.String.t;
          value : alloc.string.String.t;
          expected_type : ref str.t;
        }.
      End ParseErrorAtKey.
      
      Module ParseErrorAtIndex.
        Record t : Set := {
          index : usize.t;
          value : alloc.string.String.t;
          expected_type : ref str.t;
        }.
      End ParseErrorAtIndex.
      
      Module ParseError.
        Record t : Set := {
          value : alloc.string.String.t;
          expected_type : ref str.t;
        }.
      End ParseError.
      
      Module InvalidUtf8InPathParam.
        Record t : Set := {
          key : alloc.string.String.t;
        }.
      End InvalidUtf8InPathParam.
      
      Module UnsupportedType.
        Record t : Set := {
          name : ref str.t;
        }.
      End UnsupportedType.
      
      Inductive t : Set :=
      | WrongNumberOfParameters (_ : WrongNumberOfParameters.t)
      | ParseErrorAtKey (_ : ParseErrorAtKey.t)
      | ParseErrorAtIndex (_ : ParseErrorAtIndex.t)
      | ParseError (_ : ParseError.t)
      | InvalidUtf8InPathParam (_ : InvalidUtf8InPathParam.t)
      | UnsupportedType (_ : UnsupportedType.t)
      | Message (_ : alloc.string.String.t).
      
      Definition Get_WrongNumberOfParameters_got :=
        Ref.map
          (fun α =>
            match α with
            | WrongNumberOfParameters α => Some α.(WrongNumberOfParameters.got)
            | _ => None
            end)
          (fun β α =>
            match α with
            | WrongNumberOfParameters α =>
              Some
                (WrongNumberOfParameters
                  (α <| WrongNumberOfParameters.got := β |>))
            | _ => None
            end).
      
      Definition Get_WrongNumberOfParameters_expected :=
        Ref.map
          (fun α =>
            match α with
            | WrongNumberOfParameters α =>
              Some α.(WrongNumberOfParameters.expected)
            | _ => None
            end)
          (fun β α =>
            match α with
            | WrongNumberOfParameters α =>
              Some
                (WrongNumberOfParameters
                  (α <| WrongNumberOfParameters.expected := β |>))
            | _ => None
            end).
      
      Definition Get_ParseErrorAtKey_key :=
        Ref.map
          (fun α =>
            match α with
            | ParseErrorAtKey α => Some α.(ParseErrorAtKey.key)
            | _ => None
            end)
          (fun β α =>
            match α with
            | ParseErrorAtKey α =>
              Some (ParseErrorAtKey (α <| ParseErrorAtKey.key := β |>))
            | _ => None
            end).
      
      Definition Get_ParseErrorAtKey_value :=
        Ref.map
          (fun α =>
            match α with
            | ParseErrorAtKey α => Some α.(ParseErrorAtKey.value)
            | _ => None
            end)
          (fun β α =>
            match α with
            | ParseErrorAtKey α =>
              Some (ParseErrorAtKey (α <| ParseErrorAtKey.value := β |>))
            | _ => None
            end).
      
      Definition Get_ParseErrorAtKey_expected_type :=
        Ref.map
          (fun α =>
            match α with
            | ParseErrorAtKey α => Some α.(ParseErrorAtKey.expected_type)
            | _ => None
            end)
          (fun β α =>
            match α with
            | ParseErrorAtKey α =>
              Some
                (ParseErrorAtKey (α <| ParseErrorAtKey.expected_type := β |>))
            | _ => None
            end).
      
      Definition Get_ParseErrorAtIndex_index :=
        Ref.map
          (fun α =>
            match α with
            | ParseErrorAtIndex α => Some α.(ParseErrorAtIndex.index)
            | _ => None
            end)
          (fun β α =>
            match α with
            | ParseErrorAtIndex α =>
              Some (ParseErrorAtIndex (α <| ParseErrorAtIndex.index := β |>))
            | _ => None
            end).
      
      Definition Get_ParseErrorAtIndex_value :=
        Ref.map
          (fun α =>
            match α with
            | ParseErrorAtIndex α => Some α.(ParseErrorAtIndex.value)
            | _ => None
            end)
          (fun β α =>
            match α with
            | ParseErrorAtIndex α =>
              Some (ParseErrorAtIndex (α <| ParseErrorAtIndex.value := β |>))
            | _ => None
            end).
      
      Definition Get_ParseErrorAtIndex_expected_type :=
        Ref.map
          (fun α =>
            match α with
            | ParseErrorAtIndex α => Some α.(ParseErrorAtIndex.expected_type)
            | _ => None
            end)
          (fun β α =>
            match α with
            | ParseErrorAtIndex α =>
              Some
                (ParseErrorAtIndex
                  (α <| ParseErrorAtIndex.expected_type := β |>))
            | _ => None
            end).
      
      Definition Get_ParseError_value :=
        Ref.map
          (fun α =>
            match α with
            | ParseError α => Some α.(ParseError.value)
            | _ => None
            end)
          (fun β α =>
            match α with
            | ParseError α => Some (ParseError (α <| ParseError.value := β |>))
            | _ => None
            end).
      
      Definition Get_ParseError_expected_type :=
        Ref.map
          (fun α =>
            match α with
            | ParseError α => Some α.(ParseError.expected_type)
            | _ => None
            end)
          (fun β α =>
            match α with
            | ParseError α =>
              Some (ParseError (α <| ParseError.expected_type := β |>))
            | _ => None
            end).
      
      Definition Get_InvalidUtf8InPathParam_key :=
        Ref.map
          (fun α =>
            match α with
            | InvalidUtf8InPathParam α => Some α.(InvalidUtf8InPathParam.key)
            | _ => None
            end)
          (fun β α =>
            match α with
            | InvalidUtf8InPathParam α =>
              Some
                (InvalidUtf8InPathParam
                  (α <| InvalidUtf8InPathParam.key := β |>))
            | _ => None
            end).
      
      Definition Get_UnsupportedType_name :=
        Ref.map
          (fun α =>
            match α with
            | UnsupportedType α => Some α.(UnsupportedType.name)
            | _ => None
            end)
          (fun β α =>
            match α with
            | UnsupportedType α =>
              Some (UnsupportedType (α <| UnsupportedType.name := β |>))
            | _ => None
            end).
      
      Definition Get_Message_0 :=
        Ref.map
          (fun α => match α with | Message α0 => Some α0 | _ => None end)
          (fun β α =>
            match α with | Message _ => Some (Message β) | _ => None end).
    End ErrorKind.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_path_ErrorKind_t.
    Section Impl_core_fmt_Debug_for_axum_extract_path_ErrorKind_t.
      Definition Self : Set := axum.extract.path.ErrorKind.t.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_path_ErrorKind_t.
    End Impl_core_fmt_Debug_for_axum_extract_path_ErrorKind_t.
    
    Module  Impl_core_marker_StructuralPartialEq_for_axum_extract_path_ErrorKind_t.
    Section Impl_core_marker_StructuralPartialEq_for_axum_extract_path_ErrorKind_t.
      Definition Self : Set := axum.extract.path.ErrorKind.t.
      
      Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
      }.
    End Impl_core_marker_StructuralPartialEq_for_axum_extract_path_ErrorKind_t.
    End Impl_core_marker_StructuralPartialEq_for_axum_extract_path_ErrorKind_t.
    
    Module  Impl_core_cmp_PartialEq_for_axum_extract_path_ErrorKind_t.
    Section Impl_core_cmp_PartialEq_for_axum_extract_path_ErrorKind_t.
      Definition Self : Set := axum.extract.path.ErrorKind.t.
      
      (*
      PartialEq
      *)
      Definition eq
          (self : ref Self)
          (other : ref axum.extract.path.ErrorKind.t)
          : M bool.t :=
        let* self := M.alloc self in
        let* other := M.alloc other in
        M.read foo.
      
      Global Instance AssociatedFunction_eq :
        Notations.DoubleColon Self "eq" := {
        Notations.double_colon := eq;
      }.
      
      Global Instance ℐ :
        core.cmp.PartialEq.Required.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
        core.cmp.PartialEq.eq := eq;
        core.cmp.PartialEq.ne := Datatypes.None;
      }.
    End Impl_core_cmp_PartialEq_for_axum_extract_path_ErrorKind_t.
    End Impl_core_cmp_PartialEq_for_axum_extract_path_ErrorKind_t.
    
    Module  Impl_core_marker_StructuralEq_for_axum_extract_path_ErrorKind_t.
    Section Impl_core_marker_StructuralEq_for_axum_extract_path_ErrorKind_t.
      Definition Self : Set := axum.extract.path.ErrorKind.t.
      
      Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
      }.
    End Impl_core_marker_StructuralEq_for_axum_extract_path_ErrorKind_t.
    End Impl_core_marker_StructuralEq_for_axum_extract_path_ErrorKind_t.
    
    Module  Impl_core_cmp_Eq_for_axum_extract_path_ErrorKind_t.
    Section Impl_core_cmp_Eq_for_axum_extract_path_ErrorKind_t.
      Definition Self : Set := axum.extract.path.ErrorKind.t.
      
      (*
      Eq
      *)
      Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_assert_receiver_is_total_eq :
        Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
        Notations.double_colon := assert_receiver_is_total_eq;
      }.
      
      Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
        core.cmp.Eq.assert_receiver_is_total_eq :=
          Datatypes.Some assert_receiver_is_total_eq;
      }.
    End Impl_core_cmp_Eq_for_axum_extract_path_ErrorKind_t.
    End Impl_core_cmp_Eq_for_axum_extract_path_ErrorKind_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_path_ErrorKind_t.
    Section Impl_core_fmt_Display_for_axum_extract_path_ErrorKind_t.
      Definition Self : Set := axum.extract.path.ErrorKind.t.
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              match self {
                  ErrorKind::Message(error) => error.fmt(f),
                  ErrorKind::InvalidUtf8InPathParam { key } => write!(f, "Invalid UTF-8 in `{key}`"),
                  ErrorKind::WrongNumberOfParameters { got, expected } => {
                      write!(
                          f,
                          "Wrong number of path arguments for `Path`. Expected {expected} but got {got}"
                      )?;
      
                      if *expected == 1 {
                          write!(f, ". Note that multiple parameters must be extracted with a tuple `Path<(_, _)>` or a struct `Path<YourParams>`")?;
                      }
      
                      Ok(())
                  }
                  ErrorKind::UnsupportedType { name } => write!(f, "Unsupported type `{name}`"),
                  ErrorKind::ParseErrorAtKey {
                      key,
                      value,
                      expected_type,
                  } => write!(
                      f,
                      "Cannot parse `{key}` with value `{value:?}` to a `{expected_type}`"
                  ),
                  ErrorKind::ParseError {
                      value,
                      expected_type,
                  } => write!(f, "Cannot parse `{value:?}` to a `{expected_type}`"),
                  ErrorKind::ParseErrorAtIndex {
                      index,
                      value,
                      expected_type,
                  } => write!(
                      f,
                      "Cannot parse value at index {index} with value `{value:?}` to a `{expected_type}`"
                  ),
              }
          }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_path_ErrorKind_t.
    End Impl_core_fmt_Display_for_axum_extract_path_ErrorKind_t.
    
    Module  FailedToDeserializePathParams.
    Section FailedToDeserializePathParams.
      Record t : Set := {
        x0 : axum.extract.path.PathDeserializationError.t;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End FailedToDeserializePathParams.
    End FailedToDeserializePathParams.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_path_FailedToDeserializePathParams_t.
    Section Impl_core_fmt_Debug_for_axum_extract_path_FailedToDeserializePathParams_t.
      Definition Self : Set :=
        axum.extract.path.FailedToDeserializePathParams.t.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_path_FailedToDeserializePathParams_t.
    End Impl_core_fmt_Debug_for_axum_extract_path_FailedToDeserializePathParams_t.
    
    Module  Impl_axum_extract_path_FailedToDeserializePathParams_t.
    Section Impl_axum_extract_path_FailedToDeserializePathParams_t.
      Definition Self : Set :=
        axum.extract.path.FailedToDeserializePathParams.t.
      
      (*
          pub fn kind(&self) -> &ErrorKind {
              &self.0.kind
          }
      *)
      Definition kind
          (self : ref Self)
          : M (ref axum.extract.path.ErrorKind.t) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_kind :
        Notations.DoubleColon Self "kind" := {
        Notations.double_colon := kind;
      }.
      
      (*
          pub fn into_kind(self) -> ErrorKind {
              self.0.kind
          }
      *)
      Definition into_kind (self : Self) : M axum.extract.path.ErrorKind.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_kind :
        Notations.DoubleColon Self "into_kind" := {
        Notations.double_colon := into_kind;
      }.
      
      (*
          pub fn body_text(&self) -> String {
              match self.0.kind {
                  ErrorKind::Message(_)
                  | ErrorKind::InvalidUtf8InPathParam { .. }
                  | ErrorKind::ParseError { .. }
                  | ErrorKind::ParseErrorAtIndex { .. }
                  | ErrorKind::ParseErrorAtKey { .. } => format!("Invalid URL: {}", self.0.kind),
                  ErrorKind::WrongNumberOfParameters { .. } | ErrorKind::UnsupportedType { .. } => {
                      self.0.kind.to_string()
                  }
              }
          }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
          pub fn status(&self) -> StatusCode {
              match self.0.kind {
                  ErrorKind::Message(_)
                  | ErrorKind::InvalidUtf8InPathParam { .. }
                  | ErrorKind::ParseError { .. }
                  | ErrorKind::ParseErrorAtIndex { .. }
                  | ErrorKind::ParseErrorAtKey { .. } => StatusCode::BAD_REQUEST,
                  ErrorKind::WrongNumberOfParameters { .. } | ErrorKind::UnsupportedType { .. } => {
                      StatusCode::INTERNAL_SERVER_ERROR
                  }
              }
          }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_path_FailedToDeserializePathParams_t.
    End Impl_axum_extract_path_FailedToDeserializePathParams_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_path_FailedToDeserializePathParams_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_path_FailedToDeserializePathParams_t.
      Definition Self : Set :=
        axum.extract.path.FailedToDeserializePathParams.t.
      
      (*
          fn into_response(self) -> Response {
              axum_core::__log_rejection!(
                  rejection_type = Self,
                  body_text = self.body_text(),
                  status = self.status(),
              );
              (self.status(), self.body_text()).into_response()
          }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_path_FailedToDeserializePathParams_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_path_FailedToDeserializePathParams_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_path_FailedToDeserializePathParams_t.
    Section Impl_core_fmt_Display_for_axum_extract_path_FailedToDeserializePathParams_t.
      Definition Self : Set :=
        axum.extract.path.FailedToDeserializePathParams.t.
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              self.0.fmt(f)
          }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_path_FailedToDeserializePathParams_t.
    End Impl_core_fmt_Display_for_axum_extract_path_FailedToDeserializePathParams_t.
    
    Module  Impl_core_error_Error_for_axum_extract_path_FailedToDeserializePathParams_t.
    Section Impl_core_error_Error_for_axum_extract_path_FailedToDeserializePathParams_t.
      Definition Self : Set :=
        axum.extract.path.FailedToDeserializePathParams.t.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.None;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_path_FailedToDeserializePathParams_t.
    End Impl_core_error_Error_for_axum_extract_path_FailedToDeserializePathParams_t.
    
    Module  RawPathParams.
    Section RawPathParams.
      Record t : Set := {
        x0 :
          alloc.vec.Vec.t
            ((alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A)
            *
            axum.util.PercentDecodedStr.t)
            alloc.vec.Vec.Default.A;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End RawPathParams.
    End RawPathParams.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_path_RawPathParams_t.
    Section Impl_core_fmt_Debug_for_axum_extract_path_RawPathParams_t.
      Definition Self : Set := axum.extract.path.RawPathParams.t.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_path_RawPathParams_t.
    End Impl_core_fmt_Debug_for_axum_extract_path_RawPathParams_t.
    
    Module  Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_path_RawPathParams_t.
    Section Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_path_RawPathParams_t.
      Context {S : Set}.
      
      Context {ℋ_0 : core.marker.Send.Trait S} {ℋ_1 : core.marker.Sync.Trait S}.
      
      Definition Self : Set := axum.extract.path.RawPathParams.t.
      
      (*
          type Rejection = RawPathParamsRejection;
      *)
      Definition Rejection : Set :=
        axum.extract.rejection.RawPathParamsRejection.t.
      
      (*
          async fn from_request_parts(parts: &mut Parts, _state: &S) -> Result<Self, Self::Rejection> {
              let params = match parts.extensions.get::<UrlParams>() {
                  Some(UrlParams::Params(params)) => params,
                  Some(UrlParams::InvalidUtf8InPathParam { key }) => {
                      return Err(InvalidUtf8InPathParam {
                          key: Arc::clone(key),
                      }
                      .into());
                  }
                  None => {
                      return Err(MissingPathParams.into());
                  }
              };
      
              Ok(Self(params.clone()))
          }
      *)
      Definition from_request_parts
          (parts : mut_ref http.request.Parts.t)
          (_state : ref S)
          :
            M
              (core.pin.Pin.t
                (alloc.boxed.Box.t
                  (dyn
                    [core.future.future.Future.Trait; core.marker.Send.Trait])
                  alloc.boxed.Box.Default.A)) :=
        let* parts := M.alloc parts in
        let* _state := M.alloc _state in
        M.read foo.
      
      Global Instance AssociatedFunction_from_request_parts :
        Notations.DoubleColon Self "from_request_parts" := {
        Notations.double_colon := from_request_parts;
      }.
      
      Global Instance ℐ :
        axum_core.extract.FromRequestParts.Trait Self (S := S) := {
        axum_core.extract.FromRequestParts.Rejection := Rejection;
        axum_core.extract.FromRequestParts.from_request_parts :=
          from_request_parts;
      }.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_path_RawPathParams_t.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_path_RawPathParams_t.
    
    Module  Impl_axum_extract_path_RawPathParams_t.
    Section Impl_axum_extract_path_RawPathParams_t.
      Definition Self : Set := axum.extract.path.RawPathParams.t.
      
      (*
          pub fn iter(&self) -> RawPathParamsIter<'_> {
              self.into_iter()
          }
      *)
      Definition iter
          (self : ref Self)
          : M axum.extract.path.RawPathParamsIter.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_iter :
        Notations.DoubleColon Self "iter" := {
        Notations.double_colon := iter;
      }.
    End Impl_axum_extract_path_RawPathParams_t.
    End Impl_axum_extract_path_RawPathParams_t.
    
    Module  Impl_core_iter_traits_collect_IntoIterator_for_ref_axum_extract_path_RawPathParams_t.
    Section Impl_core_iter_traits_collect_IntoIterator_for_ref_axum_extract_path_RawPathParams_t.
      Definition Self : Set := ref axum.extract.path.RawPathParams.t.
      
      (*
          type Item = (&'a str, &'a str);
      *)
      Definition Item : Set := (ref str.t) * (ref str.t).
      
      (*
          type IntoIter = RawPathParamsIter<'a>;
      *)
      Definition IntoIter : Set := axum.extract.path.RawPathParamsIter.t.
      
      (*
          fn into_iter(self) -> Self::IntoIter {
              RawPathParamsIter(self.0.iter())
          }
      *)
      Definition into_iter (self : Self) : M IntoIter :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_iter :
        Notations.DoubleColon Self "into_iter" := {
        Notations.double_colon := into_iter;
      }.
      
      Global Instance ℐ : core.iter.traits.collect.IntoIterator.Trait Self := {
        core.iter.traits.collect.IntoIterator.Item := Item;
        core.iter.traits.collect.IntoIterator.IntoIter := IntoIter;
        core.iter.traits.collect.IntoIterator.into_iter := into_iter;
      }.
    End Impl_core_iter_traits_collect_IntoIterator_for_ref_axum_extract_path_RawPathParams_t.
    End Impl_core_iter_traits_collect_IntoIterator_for_ref_axum_extract_path_RawPathParams_t.
    
    Module  RawPathParamsIter.
    Section RawPathParamsIter.
      Record t : Set := {
        x0 :
          core.slice.iter.Iter.t
            ((alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A)
            *
            axum.util.PercentDecodedStr.t);
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End RawPathParamsIter.
    End RawPathParamsIter.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_path_RawPathParamsIter_t.
    Section Impl_core_fmt_Debug_for_axum_extract_path_RawPathParamsIter_t.
      Definition Self : Set := axum.extract.path.RawPathParamsIter.t.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_path_RawPathParamsIter_t.
    End Impl_core_fmt_Debug_for_axum_extract_path_RawPathParamsIter_t.
    
    Module  Impl_core_iter_traits_iterator_Iterator_for_axum_extract_path_RawPathParamsIter_t.
    Section Impl_core_iter_traits_iterator_Iterator_for_axum_extract_path_RawPathParamsIter_t.
      Definition Self : Set := axum.extract.path.RawPathParamsIter.t.
      
      (*
          type Item = (&'a str, &'a str);
      *)
      Definition Item : Set := (ref str.t) * (ref str.t).
      
      (*
          fn next(&mut self) -> Option<Self::Item> {
              let (key, value) = self.0.next()?;
              Some((&**key, value.as_str()))
          }
      *)
      Definition next (self : mut_ref Self) : M (core.option.Option.t Item) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_next :
        Notations.DoubleColon Self "next" := {
        Notations.double_colon := next;
      }.
      
      Global Instance ℐ :
        core.iter.traits.iterator.Iterator.Required.Trait Self := {
        core.iter.traits.iterator.Iterator.Item := Item;
        core.iter.traits.iterator.Iterator.next := next;
        core.iter.traits.iterator.Iterator.next_chunk := Datatypes.None;
        core.iter.traits.iterator.Iterator.size_hint := Datatypes.None;
        core.iter.traits.iterator.Iterator.count := Datatypes.None;
        core.iter.traits.iterator.Iterator.last := Datatypes.None;
        core.iter.traits.iterator.Iterator.advance_by := Datatypes.None;
        core.iter.traits.iterator.Iterator.nth := Datatypes.None;
        core.iter.traits.iterator.Iterator.step_by := Datatypes.None;
        core.iter.traits.iterator.Iterator.chain := Datatypes.None;
        core.iter.traits.iterator.Iterator.zip := Datatypes.None;
        core.iter.traits.iterator.Iterator.intersperse := Datatypes.None;
        core.iter.traits.iterator.Iterator.intersperse_with := Datatypes.None;
        core.iter.traits.iterator.Iterator.map := Datatypes.None;
        core.iter.traits.iterator.Iterator.for_each := Datatypes.None;
        core.iter.traits.iterator.Iterator.filter := Datatypes.None;
        core.iter.traits.iterator.Iterator.filter_map := Datatypes.None;
        core.iter.traits.iterator.Iterator.enumerate := Datatypes.None;
        core.iter.traits.iterator.Iterator.peekable := Datatypes.None;
        core.iter.traits.iterator.Iterator.skip_while := Datatypes.None;
        core.iter.traits.iterator.Iterator.take_while := Datatypes.None;
        core.iter.traits.iterator.Iterator.map_while := Datatypes.None;
        core.iter.traits.iterator.Iterator.skip := Datatypes.None;
        core.iter.traits.iterator.Iterator.take := Datatypes.None;
        core.iter.traits.iterator.Iterator.scan := Datatypes.None;
        core.iter.traits.iterator.Iterator.flat_map := Datatypes.None;
        core.iter.traits.iterator.Iterator.flatten := Datatypes.None;
        core.iter.traits.iterator.Iterator.map_windows := Datatypes.None;
        core.iter.traits.iterator.Iterator.fuse := Datatypes.None;
        core.iter.traits.iterator.Iterator.inspect := Datatypes.None;
        core.iter.traits.iterator.Iterator.by_ref := Datatypes.None;
        core.iter.traits.iterator.Iterator.collect := Datatypes.None;
        core.iter.traits.iterator.Iterator.try_collect := Datatypes.None;
        core.iter.traits.iterator.Iterator.collect_into := Datatypes.None;
        core.iter.traits.iterator.Iterator.partition := Datatypes.None;
        core.iter.traits.iterator.Iterator.partition_in_place := Datatypes.None;
        core.iter.traits.iterator.Iterator.is_partitioned := Datatypes.None;
        core.iter.traits.iterator.Iterator.try_fold := Datatypes.None;
        core.iter.traits.iterator.Iterator.try_for_each := Datatypes.None;
        core.iter.traits.iterator.Iterator.fold := Datatypes.None;
        core.iter.traits.iterator.Iterator.reduce := Datatypes.None;
        core.iter.traits.iterator.Iterator.try_reduce := Datatypes.None;
        core.iter.traits.iterator.Iterator.all := Datatypes.None;
        core.iter.traits.iterator.Iterator.any := Datatypes.None;
        core.iter.traits.iterator.Iterator.find := Datatypes.None;
        core.iter.traits.iterator.Iterator.find_map := Datatypes.None;
        core.iter.traits.iterator.Iterator.try_find := Datatypes.None;
        core.iter.traits.iterator.Iterator.position := Datatypes.None;
        core.iter.traits.iterator.Iterator.rposition := Datatypes.None;
        core.iter.traits.iterator.Iterator.max := Datatypes.None;
        core.iter.traits.iterator.Iterator.min := Datatypes.None;
        core.iter.traits.iterator.Iterator.max_by_key := Datatypes.None;
        core.iter.traits.iterator.Iterator.max_by := Datatypes.None;
        core.iter.traits.iterator.Iterator.min_by_key := Datatypes.None;
        core.iter.traits.iterator.Iterator.min_by := Datatypes.None;
        core.iter.traits.iterator.Iterator.rev := Datatypes.None;
        core.iter.traits.iterator.Iterator.unzip := Datatypes.None;
        core.iter.traits.iterator.Iterator.copied := Datatypes.None;
        core.iter.traits.iterator.Iterator.cloned := Datatypes.None;
        core.iter.traits.iterator.Iterator.cycle := Datatypes.None;
        core.iter.traits.iterator.Iterator.array_chunks := Datatypes.None;
        core.iter.traits.iterator.Iterator.sum := Datatypes.None;
        core.iter.traits.iterator.Iterator.product := Datatypes.None;
        core.iter.traits.iterator.Iterator.cmp := Datatypes.None;
        core.iter.traits.iterator.Iterator.cmp_by := Datatypes.None;
        core.iter.traits.iterator.Iterator.partial_cmp := Datatypes.None;
        core.iter.traits.iterator.Iterator.partial_cmp_by := Datatypes.None;
        core.iter.traits.iterator.Iterator.eq := Datatypes.None;
        core.iter.traits.iterator.Iterator.eq_by := Datatypes.None;
        core.iter.traits.iterator.Iterator.ne := Datatypes.None;
        core.iter.traits.iterator.Iterator.lt := Datatypes.None;
        core.iter.traits.iterator.Iterator.le := Datatypes.None;
        core.iter.traits.iterator.Iterator.gt := Datatypes.None;
        core.iter.traits.iterator.Iterator.ge := Datatypes.None;
        core.iter.traits.iterator.Iterator.is_sorted := Datatypes.None;
        core.iter.traits.iterator.Iterator.is_sorted_by := Datatypes.None;
        core.iter.traits.iterator.Iterator.is_sorted_by_key := Datatypes.None;
        core.iter.traits.iterator.Iterator.__iterator_get_unchecked :=
          Datatypes.None;
      }.
    End Impl_core_iter_traits_iterator_Iterator_for_axum_extract_path_RawPathParamsIter_t.
    End Impl_core_iter_traits_iterator_Iterator_for_axum_extract_path_RawPathParamsIter_t.
    
    Module  InvalidUtf8InPathParam.
    Section InvalidUtf8InPathParam.
      Record t : Set := {
        key : alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A;
      }.
      
      Definition Get_key :=
        Ref.map (fun α => Some α.(key)) (fun β α => Some (α <| key := β |>)).
    End InvalidUtf8InPathParam.
    End InvalidUtf8InPathParam.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_path_InvalidUtf8InPathParam_t.
    Section Impl_core_fmt_Debug_for_axum_extract_path_InvalidUtf8InPathParam_t.
      Definition Self : Set := axum.extract.path.InvalidUtf8InPathParam.t.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_path_InvalidUtf8InPathParam_t.
    End Impl_core_fmt_Debug_for_axum_extract_path_InvalidUtf8InPathParam_t.
    
    Module  Impl_axum_extract_path_InvalidUtf8InPathParam_t.
    Section Impl_axum_extract_path_InvalidUtf8InPathParam_t.
      Definition Self : Set := axum.extract.path.InvalidUtf8InPathParam.t.
      
      (*
          pub fn body_text(&self) -> String {
              self.to_string()
          }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
          pub fn status(&self) -> StatusCode {
              StatusCode::BAD_REQUEST
          }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_path_InvalidUtf8InPathParam_t.
    End Impl_axum_extract_path_InvalidUtf8InPathParam_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_path_InvalidUtf8InPathParam_t.
    Section Impl_core_fmt_Display_for_axum_extract_path_InvalidUtf8InPathParam_t.
      Definition Self : Set := axum.extract.path.InvalidUtf8InPathParam.t.
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              write!(f, "Invalid UTF-8 in `{}`", self.key)
          }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_path_InvalidUtf8InPathParam_t.
    End Impl_core_fmt_Display_for_axum_extract_path_InvalidUtf8InPathParam_t.
    
    Module  Impl_core_error_Error_for_axum_extract_path_InvalidUtf8InPathParam_t.
    Section Impl_core_error_Error_for_axum_extract_path_InvalidUtf8InPathParam_t.
      Definition Self : Set := axum.extract.path.InvalidUtf8InPathParam.t.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.None;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_path_InvalidUtf8InPathParam_t.
    End Impl_core_error_Error_for_axum_extract_path_InvalidUtf8InPathParam_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_path_InvalidUtf8InPathParam_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_path_InvalidUtf8InPathParam_t.
      Definition Self : Set := axum.extract.path.InvalidUtf8InPathParam.t.
      
      (*
          fn into_response(self) -> Response {
              (self.status(), self.body_text()).into_response()
          }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_path_InvalidUtf8InPathParam_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_path_InvalidUtf8InPathParam_t.
  End path.
  
  Module rejection.
    Module  JsonDataError.
    Section JsonDataError.
      Record t : Set := {
        x0 : axum_core.error.Error.t;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End JsonDataError.
    End JsonDataError.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_JsonDataError_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_JsonDataError_t.
      Definition Self : Set := axum.extract.rejection.JsonDataError.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_JsonDataError_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_JsonDataError_t.
    
    Module  Impl_axum_extract_rejection_JsonDataError_t.
    Section Impl_axum_extract_rejection_JsonDataError_t.
      Definition Self : Set := axum.extract.rejection.JsonDataError.t.
      
      (*
                  pub(crate) fn from_err<E>(err: E) -> Self
                  where
                      E: Into<$crate::BoxError>,
                  {
                      Self($crate::Error::new(err))
                  }
      *)
      Definition from_err
          {E : Set}
          {ℋ_0 : core.convert.Into.Trait E (T := ltac:(axum_core.BoxError))}
          (err : E)
          : M Self :=
        let* err := M.alloc err in
        M.read foo.
      
      Global Instance AssociatedFunction_from_err
          {E : Set}
          {ℋ_0 : core.convert.Into.Trait E (T := ltac:(axum_core.BoxError))} :
        Notations.DoubleColon Self "from_err" := {
        Notations.double_colon := from_err (E := E);
      }.
    End Impl_axum_extract_rejection_JsonDataError_t.
    End Impl_axum_extract_rejection_JsonDataError_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_JsonDataError_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_JsonDataError_t.
      Definition Self : Set := axum.extract.rejection.JsonDataError.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      $crate::__log_rejection!(
                          rejection_type = $name,
                          body_text = self.body_text(),
                          status = http::StatusCode::$status,
                      );
                      (self.status(), self.body_text()).into_response()
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_JsonDataError_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_JsonDataError_t.
    
    Module  Impl_axum_extract_rejection_JsonDataError_t_2.
    Section Impl_axum_extract_rejection_JsonDataError_t_2.
      Definition Self : Set := axum.extract.rejection.JsonDataError.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      format!(concat!($body, ": {}"), self.0).into()
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      http::StatusCode::$status
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_JsonDataError_t_2.
    End Impl_axum_extract_rejection_JsonDataError_t_2.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_JsonDataError_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_JsonDataError_t.
      Definition Self : Set := axum.extract.rejection.JsonDataError.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      write!(f, "{}", $body)
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_JsonDataError_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_JsonDataError_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_JsonDataError_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_JsonDataError_t.
      Definition Self : Set := axum.extract.rejection.JsonDataError.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      Some(&self.0)
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_JsonDataError_t.
    End Impl_core_error_Error_for_axum_extract_rejection_JsonDataError_t.
    
    Module  JsonSyntaxError.
    Section JsonSyntaxError.
      Record t : Set := {
        x0 : axum_core.error.Error.t;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End JsonSyntaxError.
    End JsonSyntaxError.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_JsonSyntaxError_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_JsonSyntaxError_t.
      Definition Self : Set := axum.extract.rejection.JsonSyntaxError.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_JsonSyntaxError_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_JsonSyntaxError_t.
    
    Module  Impl_axum_extract_rejection_JsonSyntaxError_t.
    Section Impl_axum_extract_rejection_JsonSyntaxError_t.
      Definition Self : Set := axum.extract.rejection.JsonSyntaxError.t.
      
      (*
                  pub(crate) fn from_err<E>(err: E) -> Self
                  where
                      E: Into<$crate::BoxError>,
                  {
                      Self($crate::Error::new(err))
                  }
      *)
      Definition from_err
          {E : Set}
          {ℋ_0 : core.convert.Into.Trait E (T := ltac:(axum_core.BoxError))}
          (err : E)
          : M Self :=
        let* err := M.alloc err in
        M.read foo.
      
      Global Instance AssociatedFunction_from_err
          {E : Set}
          {ℋ_0 : core.convert.Into.Trait E (T := ltac:(axum_core.BoxError))} :
        Notations.DoubleColon Self "from_err" := {
        Notations.double_colon := from_err (E := E);
      }.
    End Impl_axum_extract_rejection_JsonSyntaxError_t.
    End Impl_axum_extract_rejection_JsonSyntaxError_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_JsonSyntaxError_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_JsonSyntaxError_t.
      Definition Self : Set := axum.extract.rejection.JsonSyntaxError.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      $crate::__log_rejection!(
                          rejection_type = $name,
                          body_text = self.body_text(),
                          status = http::StatusCode::$status,
                      );
                      (self.status(), self.body_text()).into_response()
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_JsonSyntaxError_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_JsonSyntaxError_t.
    
    Module  Impl_axum_extract_rejection_JsonSyntaxError_t_2.
    Section Impl_axum_extract_rejection_JsonSyntaxError_t_2.
      Definition Self : Set := axum.extract.rejection.JsonSyntaxError.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      format!(concat!($body, ": {}"), self.0).into()
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      http::StatusCode::$status
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_JsonSyntaxError_t_2.
    End Impl_axum_extract_rejection_JsonSyntaxError_t_2.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_JsonSyntaxError_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_JsonSyntaxError_t.
      Definition Self : Set := axum.extract.rejection.JsonSyntaxError.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      write!(f, "{}", $body)
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_JsonSyntaxError_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_JsonSyntaxError_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_JsonSyntaxError_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_JsonSyntaxError_t.
      Definition Self : Set := axum.extract.rejection.JsonSyntaxError.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      Some(&self.0)
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_JsonSyntaxError_t.
    End Impl_core_error_Error_for_axum_extract_rejection_JsonSyntaxError_t.
    
    Module  MissingJsonContentType.
    Section MissingJsonContentType.
      Inductive t : Set := Build.
    End MissingJsonContentType.
    End MissingJsonContentType.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_MissingJsonContentType_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_MissingJsonContentType_t.
      Definition Self : Set := axum.extract.rejection.MissingJsonContentType.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_MissingJsonContentType_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_MissingJsonContentType_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MissingJsonContentType_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MissingJsonContentType_t.
      Definition Self : Set := axum.extract.rejection.MissingJsonContentType.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      $crate::__log_rejection!(
                          rejection_type = $name,
                          body_text = $body,
                          status = http::StatusCode::$status,
                      );
                      (self.status(), $body).into_response()
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MissingJsonContentType_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MissingJsonContentType_t.
    
    Module  Impl_axum_extract_rejection_MissingJsonContentType_t.
    Section Impl_axum_extract_rejection_MissingJsonContentType_t.
      Definition Self : Set := axum.extract.rejection.MissingJsonContentType.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      $body.into()
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      http::StatusCode::$status
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_MissingJsonContentType_t.
    End Impl_axum_extract_rejection_MissingJsonContentType_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_MissingJsonContentType_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_MissingJsonContentType_t.
      Definition Self : Set := axum.extract.rejection.MissingJsonContentType.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      write!(f, "{}", $body)
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_MissingJsonContentType_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_MissingJsonContentType_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_MissingJsonContentType_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_MissingJsonContentType_t.
      Definition Self : Set := axum.extract.rejection.MissingJsonContentType.t.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.None;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_MissingJsonContentType_t.
    End Impl_core_error_Error_for_axum_extract_rejection_MissingJsonContentType_t.
    
    Module  Impl_core_default_Default_for_axum_extract_rejection_MissingJsonContentType_t.
    Section Impl_core_default_Default_for_axum_extract_rejection_MissingJsonContentType_t.
      Definition Self : Set := axum.extract.rejection.MissingJsonContentType.t.
      
      (*
                  fn default() -> Self {
                      Self
                  }
      *)
      Definition default : M Self := M.read foo.
      
      Global Instance AssociatedFunction_default :
        Notations.DoubleColon Self "default" := {
        Notations.double_colon := default;
      }.
      
      Global Instance ℐ : core.default.Default.Trait Self := {
        core.default.Default.default := default;
      }.
    End Impl_core_default_Default_for_axum_extract_rejection_MissingJsonContentType_t.
    End Impl_core_default_Default_for_axum_extract_rejection_MissingJsonContentType_t.
    
    Module  MissingExtension.
    Section MissingExtension.
      Record t : Set := {
        x0 : axum_core.error.Error.t;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End MissingExtension.
    End MissingExtension.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_MissingExtension_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_MissingExtension_t.
      Definition Self : Set := axum.extract.rejection.MissingExtension.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_MissingExtension_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_MissingExtension_t.
    
    Module  Impl_axum_extract_rejection_MissingExtension_t.
    Section Impl_axum_extract_rejection_MissingExtension_t.
      Definition Self : Set := axum.extract.rejection.MissingExtension.t.
      
      (*
                  pub(crate) fn from_err<E>(err: E) -> Self
                  where
                      E: Into<$crate::BoxError>,
                  {
                      Self($crate::Error::new(err))
                  }
      *)
      Definition from_err
          {E : Set}
          {ℋ_0 : core.convert.Into.Trait E (T := ltac:(axum_core.BoxError))}
          (err : E)
          : M Self :=
        let* err := M.alloc err in
        M.read foo.
      
      Global Instance AssociatedFunction_from_err
          {E : Set}
          {ℋ_0 : core.convert.Into.Trait E (T := ltac:(axum_core.BoxError))} :
        Notations.DoubleColon Self "from_err" := {
        Notations.double_colon := from_err (E := E);
      }.
    End Impl_axum_extract_rejection_MissingExtension_t.
    End Impl_axum_extract_rejection_MissingExtension_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MissingExtension_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MissingExtension_t.
      Definition Self : Set := axum.extract.rejection.MissingExtension.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      $crate::__log_rejection!(
                          rejection_type = $name,
                          body_text = self.body_text(),
                          status = http::StatusCode::$status,
                      );
                      (self.status(), self.body_text()).into_response()
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MissingExtension_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MissingExtension_t.
    
    Module  Impl_axum_extract_rejection_MissingExtension_t_2.
    Section Impl_axum_extract_rejection_MissingExtension_t_2.
      Definition Self : Set := axum.extract.rejection.MissingExtension.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      format!(concat!($body, ": {}"), self.0).into()
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      http::StatusCode::$status
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_MissingExtension_t_2.
    End Impl_axum_extract_rejection_MissingExtension_t_2.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_MissingExtension_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_MissingExtension_t.
      Definition Self : Set := axum.extract.rejection.MissingExtension.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      write!(f, "{}", $body)
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_MissingExtension_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_MissingExtension_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_MissingExtension_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_MissingExtension_t.
      Definition Self : Set := axum.extract.rejection.MissingExtension.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      Some(&self.0)
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_MissingExtension_t.
    End Impl_core_error_Error_for_axum_extract_rejection_MissingExtension_t.
    
    Module  MissingPathParams.
    Section MissingPathParams.
      Inductive t : Set := Build.
    End MissingPathParams.
    End MissingPathParams.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_MissingPathParams_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_MissingPathParams_t.
      Definition Self : Set := axum.extract.rejection.MissingPathParams.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_MissingPathParams_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_MissingPathParams_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MissingPathParams_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MissingPathParams_t.
      Definition Self : Set := axum.extract.rejection.MissingPathParams.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      $crate::__log_rejection!(
                          rejection_type = $name,
                          body_text = $body,
                          status = http::StatusCode::$status,
                      );
                      (self.status(), $body).into_response()
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MissingPathParams_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MissingPathParams_t.
    
    Module  Impl_axum_extract_rejection_MissingPathParams_t.
    Section Impl_axum_extract_rejection_MissingPathParams_t.
      Definition Self : Set := axum.extract.rejection.MissingPathParams.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      $body.into()
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      http::StatusCode::$status
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_MissingPathParams_t.
    End Impl_axum_extract_rejection_MissingPathParams_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_MissingPathParams_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_MissingPathParams_t.
      Definition Self : Set := axum.extract.rejection.MissingPathParams.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      write!(f, "{}", $body)
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_MissingPathParams_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_MissingPathParams_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_MissingPathParams_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_MissingPathParams_t.
      Definition Self : Set := axum.extract.rejection.MissingPathParams.t.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.None;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_MissingPathParams_t.
    End Impl_core_error_Error_for_axum_extract_rejection_MissingPathParams_t.
    
    Module  Impl_core_default_Default_for_axum_extract_rejection_MissingPathParams_t.
    Section Impl_core_default_Default_for_axum_extract_rejection_MissingPathParams_t.
      Definition Self : Set := axum.extract.rejection.MissingPathParams.t.
      
      (*
                  fn default() -> Self {
                      Self
                  }
      *)
      Definition default : M Self := M.read foo.
      
      Global Instance AssociatedFunction_default :
        Notations.DoubleColon Self "default" := {
        Notations.double_colon := default;
      }.
      
      Global Instance ℐ : core.default.Default.Trait Self := {
        core.default.Default.default := default;
      }.
    End Impl_core_default_Default_for_axum_extract_rejection_MissingPathParams_t.
    End Impl_core_default_Default_for_axum_extract_rejection_MissingPathParams_t.
    
    Module  InvalidFormContentType.
    Section InvalidFormContentType.
      Inductive t : Set := Build.
    End InvalidFormContentType.
    End InvalidFormContentType.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_InvalidFormContentType_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_InvalidFormContentType_t.
      Definition Self : Set := axum.extract.rejection.InvalidFormContentType.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_InvalidFormContentType_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_InvalidFormContentType_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_InvalidFormContentType_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_InvalidFormContentType_t.
      Definition Self : Set := axum.extract.rejection.InvalidFormContentType.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      $crate::__log_rejection!(
                          rejection_type = $name,
                          body_text = $body,
                          status = http::StatusCode::$status,
                      );
                      (self.status(), $body).into_response()
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_InvalidFormContentType_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_InvalidFormContentType_t.
    
    Module  Impl_axum_extract_rejection_InvalidFormContentType_t.
    Section Impl_axum_extract_rejection_InvalidFormContentType_t.
      Definition Self : Set := axum.extract.rejection.InvalidFormContentType.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      $body.into()
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      http::StatusCode::$status
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_InvalidFormContentType_t.
    End Impl_axum_extract_rejection_InvalidFormContentType_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_InvalidFormContentType_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_InvalidFormContentType_t.
      Definition Self : Set := axum.extract.rejection.InvalidFormContentType.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      write!(f, "{}", $body)
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_InvalidFormContentType_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_InvalidFormContentType_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_InvalidFormContentType_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_InvalidFormContentType_t.
      Definition Self : Set := axum.extract.rejection.InvalidFormContentType.t.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.None;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_InvalidFormContentType_t.
    End Impl_core_error_Error_for_axum_extract_rejection_InvalidFormContentType_t.
    
    Module  Impl_core_default_Default_for_axum_extract_rejection_InvalidFormContentType_t.
    Section Impl_core_default_Default_for_axum_extract_rejection_InvalidFormContentType_t.
      Definition Self : Set := axum.extract.rejection.InvalidFormContentType.t.
      
      (*
                  fn default() -> Self {
                      Self
                  }
      *)
      Definition default : M Self := M.read foo.
      
      Global Instance AssociatedFunction_default :
        Notations.DoubleColon Self "default" := {
        Notations.double_colon := default;
      }.
      
      Global Instance ℐ : core.default.Default.Trait Self := {
        core.default.Default.default := default;
      }.
    End Impl_core_default_Default_for_axum_extract_rejection_InvalidFormContentType_t.
    End Impl_core_default_Default_for_axum_extract_rejection_InvalidFormContentType_t.
    
    Module  FailedToResolveHost.
    Section FailedToResolveHost.
      Inductive t : Set := Build.
    End FailedToResolveHost.
    End FailedToResolveHost.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToResolveHost_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToResolveHost_t.
      Definition Self : Set := axum.extract.rejection.FailedToResolveHost.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToResolveHost_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToResolveHost_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToResolveHost_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToResolveHost_t.
      Definition Self : Set := axum.extract.rejection.FailedToResolveHost.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      $crate::__log_rejection!(
                          rejection_type = $name,
                          body_text = $body,
                          status = http::StatusCode::$status,
                      );
                      (self.status(), $body).into_response()
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToResolveHost_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToResolveHost_t.
    
    Module  Impl_axum_extract_rejection_FailedToResolveHost_t.
    Section Impl_axum_extract_rejection_FailedToResolveHost_t.
      Definition Self : Set := axum.extract.rejection.FailedToResolveHost.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      $body.into()
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      http::StatusCode::$status
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_FailedToResolveHost_t.
    End Impl_axum_extract_rejection_FailedToResolveHost_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_FailedToResolveHost_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_FailedToResolveHost_t.
      Definition Self : Set := axum.extract.rejection.FailedToResolveHost.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      write!(f, "{}", $body)
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_FailedToResolveHost_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_FailedToResolveHost_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_FailedToResolveHost_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_FailedToResolveHost_t.
      Definition Self : Set := axum.extract.rejection.FailedToResolveHost.t.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.None;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_FailedToResolveHost_t.
    End Impl_core_error_Error_for_axum_extract_rejection_FailedToResolveHost_t.
    
    Module  Impl_core_default_Default_for_axum_extract_rejection_FailedToResolveHost_t.
    Section Impl_core_default_Default_for_axum_extract_rejection_FailedToResolveHost_t.
      Definition Self : Set := axum.extract.rejection.FailedToResolveHost.t.
      
      (*
                  fn default() -> Self {
                      Self
                  }
      *)
      Definition default : M Self := M.read foo.
      
      Global Instance AssociatedFunction_default :
        Notations.DoubleColon Self "default" := {
        Notations.double_colon := default;
      }.
      
      Global Instance ℐ : core.default.Default.Trait Self := {
        core.default.Default.default := default;
      }.
    End Impl_core_default_Default_for_axum_extract_rejection_FailedToResolveHost_t.
    End Impl_core_default_Default_for_axum_extract_rejection_FailedToResolveHost_t.
    
    Module  FailedToDeserializeForm.
    Section FailedToDeserializeForm.
      Record t : Set := {
        x0 : axum_core.error.Error.t;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End FailedToDeserializeForm.
    End FailedToDeserializeForm.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToDeserializeForm_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToDeserializeForm_t.
      Definition Self : Set := axum.extract.rejection.FailedToDeserializeForm.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToDeserializeForm_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToDeserializeForm_t.
    
    Module  Impl_axum_extract_rejection_FailedToDeserializeForm_t.
    Section Impl_axum_extract_rejection_FailedToDeserializeForm_t.
      Definition Self : Set := axum.extract.rejection.FailedToDeserializeForm.t.
      
      (*
                  pub(crate) fn from_err<E>(err: E) -> Self
                  where
                      E: Into<$crate::BoxError>,
                  {
                      Self($crate::Error::new(err))
                  }
      *)
      Definition from_err
          {E : Set}
          {ℋ_0 : core.convert.Into.Trait E (T := ltac:(axum_core.BoxError))}
          (err : E)
          : M Self :=
        let* err := M.alloc err in
        M.read foo.
      
      Global Instance AssociatedFunction_from_err
          {E : Set}
          {ℋ_0 : core.convert.Into.Trait E (T := ltac:(axum_core.BoxError))} :
        Notations.DoubleColon Self "from_err" := {
        Notations.double_colon := from_err (E := E);
      }.
    End Impl_axum_extract_rejection_FailedToDeserializeForm_t.
    End Impl_axum_extract_rejection_FailedToDeserializeForm_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToDeserializeForm_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToDeserializeForm_t.
      Definition Self : Set := axum.extract.rejection.FailedToDeserializeForm.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      $crate::__log_rejection!(
                          rejection_type = $name,
                          body_text = self.body_text(),
                          status = http::StatusCode::$status,
                      );
                      (self.status(), self.body_text()).into_response()
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToDeserializeForm_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToDeserializeForm_t.
    
    Module  Impl_axum_extract_rejection_FailedToDeserializeForm_t_2.
    Section Impl_axum_extract_rejection_FailedToDeserializeForm_t_2.
      Definition Self : Set := axum.extract.rejection.FailedToDeserializeForm.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      format!(concat!($body, ": {}"), self.0).into()
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      http::StatusCode::$status
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_FailedToDeserializeForm_t_2.
    End Impl_axum_extract_rejection_FailedToDeserializeForm_t_2.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_FailedToDeserializeForm_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_FailedToDeserializeForm_t.
      Definition Self : Set := axum.extract.rejection.FailedToDeserializeForm.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      write!(f, "{}", $body)
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_FailedToDeserializeForm_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_FailedToDeserializeForm_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_FailedToDeserializeForm_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_FailedToDeserializeForm_t.
      Definition Self : Set := axum.extract.rejection.FailedToDeserializeForm.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      Some(&self.0)
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_FailedToDeserializeForm_t.
    End Impl_core_error_Error_for_axum_extract_rejection_FailedToDeserializeForm_t.
    
    Module  FailedToDeserializeFormBody.
    Section FailedToDeserializeFormBody.
      Record t : Set := {
        x0 : axum_core.error.Error.t;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End FailedToDeserializeFormBody.
    End FailedToDeserializeFormBody.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
      Definition Self : Set :=
        axum.extract.rejection.FailedToDeserializeFormBody.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
    
    Module  Impl_axum_extract_rejection_FailedToDeserializeFormBody_t.
    Section Impl_axum_extract_rejection_FailedToDeserializeFormBody_t.
      Definition Self : Set :=
        axum.extract.rejection.FailedToDeserializeFormBody.t.
      
      (*
                  pub(crate) fn from_err<E>(err: E) -> Self
                  where
                      E: Into<$crate::BoxError>,
                  {
                      Self($crate::Error::new(err))
                  }
      *)
      Definition from_err
          {E : Set}
          {ℋ_0 : core.convert.Into.Trait E (T := ltac:(axum_core.BoxError))}
          (err : E)
          : M Self :=
        let* err := M.alloc err in
        M.read foo.
      
      Global Instance AssociatedFunction_from_err
          {E : Set}
          {ℋ_0 : core.convert.Into.Trait E (T := ltac:(axum_core.BoxError))} :
        Notations.DoubleColon Self "from_err" := {
        Notations.double_colon := from_err (E := E);
      }.
    End Impl_axum_extract_rejection_FailedToDeserializeFormBody_t.
    End Impl_axum_extract_rejection_FailedToDeserializeFormBody_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
      Definition Self : Set :=
        axum.extract.rejection.FailedToDeserializeFormBody.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      $crate::__log_rejection!(
                          rejection_type = $name,
                          body_text = self.body_text(),
                          status = http::StatusCode::$status,
                      );
                      (self.status(), self.body_text()).into_response()
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
    
    Module  Impl_axum_extract_rejection_FailedToDeserializeFormBody_t_2.
    Section Impl_axum_extract_rejection_FailedToDeserializeFormBody_t_2.
      Definition Self : Set :=
        axum.extract.rejection.FailedToDeserializeFormBody.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      format!(concat!($body, ": {}"), self.0).into()
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      http::StatusCode::$status
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_FailedToDeserializeFormBody_t_2.
    End Impl_axum_extract_rejection_FailedToDeserializeFormBody_t_2.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
      Definition Self : Set :=
        axum.extract.rejection.FailedToDeserializeFormBody.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      write!(f, "{}", $body)
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
      Definition Self : Set :=
        axum.extract.rejection.FailedToDeserializeFormBody.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      Some(&self.0)
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
    End Impl_core_error_Error_for_axum_extract_rejection_FailedToDeserializeFormBody_t.
    
    Module  FailedToDeserializeQueryString.
    Section FailedToDeserializeQueryString.
      Record t : Set := {
        x0 : axum_core.error.Error.t;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End FailedToDeserializeQueryString.
    End FailedToDeserializeQueryString.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
      Definition Self : Set :=
        axum.extract.rejection.FailedToDeserializeQueryString.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
    
    Module  Impl_axum_extract_rejection_FailedToDeserializeQueryString_t.
    Section Impl_axum_extract_rejection_FailedToDeserializeQueryString_t.
      Definition Self : Set :=
        axum.extract.rejection.FailedToDeserializeQueryString.t.
      
      (*
                  pub(crate) fn from_err<E>(err: E) -> Self
                  where
                      E: Into<$crate::BoxError>,
                  {
                      Self($crate::Error::new(err))
                  }
      *)
      Definition from_err
          {E : Set}
          {ℋ_0 : core.convert.Into.Trait E (T := ltac:(axum_core.BoxError))}
          (err : E)
          : M Self :=
        let* err := M.alloc err in
        M.read foo.
      
      Global Instance AssociatedFunction_from_err
          {E : Set}
          {ℋ_0 : core.convert.Into.Trait E (T := ltac:(axum_core.BoxError))} :
        Notations.DoubleColon Self "from_err" := {
        Notations.double_colon := from_err (E := E);
      }.
    End Impl_axum_extract_rejection_FailedToDeserializeQueryString_t.
    End Impl_axum_extract_rejection_FailedToDeserializeQueryString_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
      Definition Self : Set :=
        axum.extract.rejection.FailedToDeserializeQueryString.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      $crate::__log_rejection!(
                          rejection_type = $name,
                          body_text = self.body_text(),
                          status = http::StatusCode::$status,
                      );
                      (self.status(), self.body_text()).into_response()
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
    
    Module  Impl_axum_extract_rejection_FailedToDeserializeQueryString_t_2.
    Section Impl_axum_extract_rejection_FailedToDeserializeQueryString_t_2.
      Definition Self : Set :=
        axum.extract.rejection.FailedToDeserializeQueryString.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      format!(concat!($body, ": {}"), self.0).into()
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      http::StatusCode::$status
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_FailedToDeserializeQueryString_t_2.
    End Impl_axum_extract_rejection_FailedToDeserializeQueryString_t_2.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
      Definition Self : Set :=
        axum.extract.rejection.FailedToDeserializeQueryString.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      write!(f, "{}", $body)
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
      Definition Self : Set :=
        axum.extract.rejection.FailedToDeserializeQueryString.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      Some(&self.0)
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
    End Impl_core_error_Error_for_axum_extract_rejection_FailedToDeserializeQueryString_t.
    
    Module QueryRejection.
      Inductive t : Set :=
      |
        FailedToDeserializeQueryString
        (_ : axum.extract.rejection.FailedToDeserializeQueryString.t).
      
      Definition Get_FailedToDeserializeQueryString_0 :=
        Ref.map
          (fun α =>
            match α with | FailedToDeserializeQueryString α0 => Some α0 end)
          (fun β α =>
            match α with
            | FailedToDeserializeQueryString _ =>
              Some (FailedToDeserializeQueryString β)
            end).
    End QueryRejection.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_QueryRejection_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_QueryRejection_t.
      Definition Self : Set := axum.extract.rejection.QueryRejection.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_QueryRejection_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_QueryRejection_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_QueryRejection_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_QueryRejection_t.
      Definition Self : Set := axum.extract.rejection.QueryRejection.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      match self {
                          $(
                              Self::$variant(inner) => inner.into_response(),
                          )+
                      }
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_QueryRejection_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_QueryRejection_t.
    
    Module  Impl_axum_extract_rejection_QueryRejection_t.
    Section Impl_axum_extract_rejection_QueryRejection_t.
      Definition Self : Set := axum.extract.rejection.QueryRejection.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      match self {
                          $(
                              Self::$variant(inner) => inner.body_text(),
                          )+
                      }
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      match self {
                          $(
                              Self::$variant(inner) => inner.status(),
                          )+
                      }
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_QueryRejection_t.
    End Impl_axum_extract_rejection_QueryRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_rejection_FailedToDeserializeQueryString_t_for_axum_extract_rejection_QueryRejection_t.
    Section Impl_core_convert_From_axum_extract_rejection_FailedToDeserializeQueryString_t_for_axum_extract_rejection_QueryRejection_t.
      Definition Self : Set := axum.extract.rejection.QueryRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.rejection.FailedToDeserializeQueryString.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.rejection.FailedToDeserializeQueryString.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_rejection_FailedToDeserializeQueryString_t_for_axum_extract_rejection_QueryRejection_t.
    End Impl_core_convert_From_axum_extract_rejection_FailedToDeserializeQueryString_t_for_axum_extract_rejection_QueryRejection_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_QueryRejection_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_QueryRejection_t.
      Definition Self : Set := axum.extract.rejection.QueryRejection.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      match self {
                          $(
                              Self::$variant(inner) => write!(f, "{inner}"),
                          )+
                      }
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_QueryRejection_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_QueryRejection_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_QueryRejection_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_QueryRejection_t.
      Definition Self : Set := axum.extract.rejection.QueryRejection.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      match self {
                          $(
                              Self::$variant(inner) => inner.source(),
                          )+
                      }
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_QueryRejection_t.
    End Impl_core_error_Error_for_axum_extract_rejection_QueryRejection_t.
    
    Module FormRejection.
      Inductive t : Set :=
      |
        InvalidFormContentType
        (_ : axum.extract.rejection.InvalidFormContentType.t)
      |
        FailedToDeserializeForm
        (_ : axum.extract.rejection.FailedToDeserializeForm.t)
      |
        FailedToDeserializeFormBody
        (_ : axum.extract.rejection.FailedToDeserializeFormBody.t)
      | BytesRejection (_ : axum_core.extract.rejection.BytesRejection.t).
      
      Definition Get_InvalidFormContentType_0 :=
        Ref.map
          (fun α =>
            match α with | InvalidFormContentType α0 => Some α0 | _ => None end)
          (fun β α =>
            match α with
            | InvalidFormContentType _ => Some (InvalidFormContentType β)
            | _ => None
            end).
      
      Definition Get_FailedToDeserializeForm_0 :=
        Ref.map
          (fun α =>
            match α with
            | FailedToDeserializeForm α0 => Some α0
            | _ => None
            end)
          (fun β α =>
            match α with
            | FailedToDeserializeForm _ => Some (FailedToDeserializeForm β)
            | _ => None
            end).
      
      Definition Get_FailedToDeserializeFormBody_0 :=
        Ref.map
          (fun α =>
            match α with
            | FailedToDeserializeFormBody α0 => Some α0
            | _ => None
            end)
          (fun β α =>
            match α with
            | FailedToDeserializeFormBody _ =>
              Some (FailedToDeserializeFormBody β)
            | _ => None
            end).
      
      Definition Get_BytesRejection_0 :=
        Ref.map
          (fun α => match α with | BytesRejection α0 => Some α0 | _ => None end)
          (fun β α =>
            match α with
            | BytesRejection _ => Some (BytesRejection β)
            | _ => None
            end).
    End FormRejection.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_FormRejection_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_FormRejection_t.
      Definition Self : Set := axum.extract.rejection.FormRejection.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_FormRejection_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_FormRejection_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FormRejection_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FormRejection_t.
      Definition Self : Set := axum.extract.rejection.FormRejection.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      match self {
                          $(
                              Self::$variant(inner) => inner.into_response(),
                          )+
                      }
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FormRejection_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_FormRejection_t.
    
    Module  Impl_axum_extract_rejection_FormRejection_t.
    Section Impl_axum_extract_rejection_FormRejection_t.
      Definition Self : Set := axum.extract.rejection.FormRejection.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      match self {
                          $(
                              Self::$variant(inner) => inner.body_text(),
                          )+
                      }
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      match self {
                          $(
                              Self::$variant(inner) => inner.status(),
                          )+
                      }
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_FormRejection_t.
    End Impl_axum_extract_rejection_FormRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_rejection_InvalidFormContentType_t_for_axum_extract_rejection_FormRejection_t.
    Section Impl_core_convert_From_axum_extract_rejection_InvalidFormContentType_t_for_axum_extract_rejection_FormRejection_t.
      Definition Self : Set := axum.extract.rejection.FormRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.rejection.InvalidFormContentType.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.rejection.InvalidFormContentType.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_rejection_InvalidFormContentType_t_for_axum_extract_rejection_FormRejection_t.
    End Impl_core_convert_From_axum_extract_rejection_InvalidFormContentType_t_for_axum_extract_rejection_FormRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_rejection_FailedToDeserializeForm_t_for_axum_extract_rejection_FormRejection_t.
    Section Impl_core_convert_From_axum_extract_rejection_FailedToDeserializeForm_t_for_axum_extract_rejection_FormRejection_t.
      Definition Self : Set := axum.extract.rejection.FormRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.rejection.FailedToDeserializeForm.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.rejection.FailedToDeserializeForm.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_rejection_FailedToDeserializeForm_t_for_axum_extract_rejection_FormRejection_t.
    End Impl_core_convert_From_axum_extract_rejection_FailedToDeserializeForm_t_for_axum_extract_rejection_FormRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_rejection_FailedToDeserializeFormBody_t_for_axum_extract_rejection_FormRejection_t.
    Section Impl_core_convert_From_axum_extract_rejection_FailedToDeserializeFormBody_t_for_axum_extract_rejection_FormRejection_t.
      Definition Self : Set := axum.extract.rejection.FormRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.rejection.FailedToDeserializeFormBody.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.rejection.FailedToDeserializeFormBody.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_rejection_FailedToDeserializeFormBody_t_for_axum_extract_rejection_FormRejection_t.
    End Impl_core_convert_From_axum_extract_rejection_FailedToDeserializeFormBody_t_for_axum_extract_rejection_FormRejection_t.
    
    Module  Impl_core_convert_From_axum_core_extract_rejection_BytesRejection_t_for_axum_extract_rejection_FormRejection_t.
    Section Impl_core_convert_From_axum_core_extract_rejection_BytesRejection_t_for_axum_extract_rejection_FormRejection_t.
      Definition Self : Set := axum.extract.rejection.FormRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum_core.extract.rejection.BytesRejection.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum_core.extract.rejection.BytesRejection.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_core_extract_rejection_BytesRejection_t_for_axum_extract_rejection_FormRejection_t.
    End Impl_core_convert_From_axum_core_extract_rejection_BytesRejection_t_for_axum_extract_rejection_FormRejection_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_FormRejection_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_FormRejection_t.
      Definition Self : Set := axum.extract.rejection.FormRejection.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      match self {
                          $(
                              Self::$variant(inner) => write!(f, "{inner}"),
                          )+
                      }
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_FormRejection_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_FormRejection_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_FormRejection_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_FormRejection_t.
      Definition Self : Set := axum.extract.rejection.FormRejection.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      match self {
                          $(
                              Self::$variant(inner) => inner.source(),
                          )+
                      }
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_FormRejection_t.
    End Impl_core_error_Error_for_axum_extract_rejection_FormRejection_t.
    
    Module RawFormRejection.
      Inductive t : Set :=
      |
        InvalidFormContentType
        (_ : axum.extract.rejection.InvalidFormContentType.t)
      | BytesRejection (_ : axum_core.extract.rejection.BytesRejection.t).
      
      Definition Get_InvalidFormContentType_0 :=
        Ref.map
          (fun α =>
            match α with | InvalidFormContentType α0 => Some α0 | _ => None end)
          (fun β α =>
            match α with
            | InvalidFormContentType _ => Some (InvalidFormContentType β)
            | _ => None
            end).
      
      Definition Get_BytesRejection_0 :=
        Ref.map
          (fun α => match α with | BytesRejection α0 => Some α0 | _ => None end)
          (fun β α =>
            match α with
            | BytesRejection _ => Some (BytesRejection β)
            | _ => None
            end).
    End RawFormRejection.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_RawFormRejection_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_RawFormRejection_t.
      Definition Self : Set := axum.extract.rejection.RawFormRejection.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_RawFormRejection_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_RawFormRejection_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_RawFormRejection_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_RawFormRejection_t.
      Definition Self : Set := axum.extract.rejection.RawFormRejection.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      match self {
                          $(
                              Self::$variant(inner) => inner.into_response(),
                          )+
                      }
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_RawFormRejection_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_RawFormRejection_t.
    
    Module  Impl_axum_extract_rejection_RawFormRejection_t.
    Section Impl_axum_extract_rejection_RawFormRejection_t.
      Definition Self : Set := axum.extract.rejection.RawFormRejection.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      match self {
                          $(
                              Self::$variant(inner) => inner.body_text(),
                          )+
                      }
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      match self {
                          $(
                              Self::$variant(inner) => inner.status(),
                          )+
                      }
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_RawFormRejection_t.
    End Impl_axum_extract_rejection_RawFormRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_rejection_InvalidFormContentType_t_for_axum_extract_rejection_RawFormRejection_t.
    Section Impl_core_convert_From_axum_extract_rejection_InvalidFormContentType_t_for_axum_extract_rejection_RawFormRejection_t.
      Definition Self : Set := axum.extract.rejection.RawFormRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.rejection.InvalidFormContentType.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.rejection.InvalidFormContentType.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_rejection_InvalidFormContentType_t_for_axum_extract_rejection_RawFormRejection_t.
    End Impl_core_convert_From_axum_extract_rejection_InvalidFormContentType_t_for_axum_extract_rejection_RawFormRejection_t.
    
    Module  Impl_core_convert_From_axum_core_extract_rejection_BytesRejection_t_for_axum_extract_rejection_RawFormRejection_t.
    Section Impl_core_convert_From_axum_core_extract_rejection_BytesRejection_t_for_axum_extract_rejection_RawFormRejection_t.
      Definition Self : Set := axum.extract.rejection.RawFormRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum_core.extract.rejection.BytesRejection.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum_core.extract.rejection.BytesRejection.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_core_extract_rejection_BytesRejection_t_for_axum_extract_rejection_RawFormRejection_t.
    End Impl_core_convert_From_axum_core_extract_rejection_BytesRejection_t_for_axum_extract_rejection_RawFormRejection_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_RawFormRejection_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_RawFormRejection_t.
      Definition Self : Set := axum.extract.rejection.RawFormRejection.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      match self {
                          $(
                              Self::$variant(inner) => write!(f, "{inner}"),
                          )+
                      }
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_RawFormRejection_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_RawFormRejection_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_RawFormRejection_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_RawFormRejection_t.
      Definition Self : Set := axum.extract.rejection.RawFormRejection.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      match self {
                          $(
                              Self::$variant(inner) => inner.source(),
                          )+
                      }
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_RawFormRejection_t.
    End Impl_core_error_Error_for_axum_extract_rejection_RawFormRejection_t.
    
    Module JsonRejection.
      Inductive t : Set :=
      | JsonDataError (_ : axum.extract.rejection.JsonDataError.t)
      | JsonSyntaxError (_ : axum.extract.rejection.JsonSyntaxError.t)
      |
        MissingJsonContentType
        (_ : axum.extract.rejection.MissingJsonContentType.t)
      | BytesRejection (_ : axum_core.extract.rejection.BytesRejection.t).
      
      Definition Get_JsonDataError_0 :=
        Ref.map
          (fun α => match α with | JsonDataError α0 => Some α0 | _ => None end)
          (fun β α =>
            match α with
            | JsonDataError _ => Some (JsonDataError β)
            | _ => None
            end).
      
      Definition Get_JsonSyntaxError_0 :=
        Ref.map
          (fun α =>
            match α with | JsonSyntaxError α0 => Some α0 | _ => None end)
          (fun β α =>
            match α with
            | JsonSyntaxError _ => Some (JsonSyntaxError β)
            | _ => None
            end).
      
      Definition Get_MissingJsonContentType_0 :=
        Ref.map
          (fun α =>
            match α with | MissingJsonContentType α0 => Some α0 | _ => None end)
          (fun β α =>
            match α with
            | MissingJsonContentType _ => Some (MissingJsonContentType β)
            | _ => None
            end).
      
      Definition Get_BytesRejection_0 :=
        Ref.map
          (fun α => match α with | BytesRejection α0 => Some α0 | _ => None end)
          (fun β α =>
            match α with
            | BytesRejection _ => Some (BytesRejection β)
            | _ => None
            end).
    End JsonRejection.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_JsonRejection_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_JsonRejection_t.
      Definition Self : Set := axum.extract.rejection.JsonRejection.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_JsonRejection_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_JsonRejection_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_JsonRejection_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_JsonRejection_t.
      Definition Self : Set := axum.extract.rejection.JsonRejection.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      match self {
                          $(
                              Self::$variant(inner) => inner.into_response(),
                          )+
                      }
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_JsonRejection_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_JsonRejection_t.
    
    Module  Impl_axum_extract_rejection_JsonRejection_t.
    Section Impl_axum_extract_rejection_JsonRejection_t.
      Definition Self : Set := axum.extract.rejection.JsonRejection.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      match self {
                          $(
                              Self::$variant(inner) => inner.body_text(),
                          )+
                      }
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      match self {
                          $(
                              Self::$variant(inner) => inner.status(),
                          )+
                      }
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_JsonRejection_t.
    End Impl_axum_extract_rejection_JsonRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_rejection_JsonDataError_t_for_axum_extract_rejection_JsonRejection_t.
    Section Impl_core_convert_From_axum_extract_rejection_JsonDataError_t_for_axum_extract_rejection_JsonRejection_t.
      Definition Self : Set := axum.extract.rejection.JsonRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.rejection.JsonDataError.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.rejection.JsonDataError.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_rejection_JsonDataError_t_for_axum_extract_rejection_JsonRejection_t.
    End Impl_core_convert_From_axum_extract_rejection_JsonDataError_t_for_axum_extract_rejection_JsonRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_rejection_JsonSyntaxError_t_for_axum_extract_rejection_JsonRejection_t.
    Section Impl_core_convert_From_axum_extract_rejection_JsonSyntaxError_t_for_axum_extract_rejection_JsonRejection_t.
      Definition Self : Set := axum.extract.rejection.JsonRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.rejection.JsonSyntaxError.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.rejection.JsonSyntaxError.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_rejection_JsonSyntaxError_t_for_axum_extract_rejection_JsonRejection_t.
    End Impl_core_convert_From_axum_extract_rejection_JsonSyntaxError_t_for_axum_extract_rejection_JsonRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_rejection_MissingJsonContentType_t_for_axum_extract_rejection_JsonRejection_t.
    Section Impl_core_convert_From_axum_extract_rejection_MissingJsonContentType_t_for_axum_extract_rejection_JsonRejection_t.
      Definition Self : Set := axum.extract.rejection.JsonRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.rejection.MissingJsonContentType.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.rejection.MissingJsonContentType.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_rejection_MissingJsonContentType_t_for_axum_extract_rejection_JsonRejection_t.
    End Impl_core_convert_From_axum_extract_rejection_MissingJsonContentType_t_for_axum_extract_rejection_JsonRejection_t.
    
    Module  Impl_core_convert_From_axum_core_extract_rejection_BytesRejection_t_for_axum_extract_rejection_JsonRejection_t.
    Section Impl_core_convert_From_axum_core_extract_rejection_BytesRejection_t_for_axum_extract_rejection_JsonRejection_t.
      Definition Self : Set := axum.extract.rejection.JsonRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum_core.extract.rejection.BytesRejection.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum_core.extract.rejection.BytesRejection.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_core_extract_rejection_BytesRejection_t_for_axum_extract_rejection_JsonRejection_t.
    End Impl_core_convert_From_axum_core_extract_rejection_BytesRejection_t_for_axum_extract_rejection_JsonRejection_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_JsonRejection_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_JsonRejection_t.
      Definition Self : Set := axum.extract.rejection.JsonRejection.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      match self {
                          $(
                              Self::$variant(inner) => write!(f, "{inner}"),
                          )+
                      }
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_JsonRejection_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_JsonRejection_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_JsonRejection_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_JsonRejection_t.
      Definition Self : Set := axum.extract.rejection.JsonRejection.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      match self {
                          $(
                              Self::$variant(inner) => inner.source(),
                          )+
                      }
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_JsonRejection_t.
    End Impl_core_error_Error_for_axum_extract_rejection_JsonRejection_t.
    
    Module ExtensionRejection.
      Inductive t : Set :=
      | MissingExtension (_ : axum.extract.rejection.MissingExtension.t).
      
      Definition Get_MissingExtension_0 :=
        Ref.map
          (fun α => match α with | MissingExtension α0 => Some α0 end)
          (fun β α =>
            match α with | MissingExtension _ => Some (MissingExtension β) end).
    End ExtensionRejection.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_ExtensionRejection_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_ExtensionRejection_t.
      Definition Self : Set := axum.extract.rejection.ExtensionRejection.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_ExtensionRejection_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_ExtensionRejection_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_ExtensionRejection_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_ExtensionRejection_t.
      Definition Self : Set := axum.extract.rejection.ExtensionRejection.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      match self {
                          $(
                              Self::$variant(inner) => inner.into_response(),
                          )+
                      }
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_ExtensionRejection_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_ExtensionRejection_t.
    
    Module  Impl_axum_extract_rejection_ExtensionRejection_t.
    Section Impl_axum_extract_rejection_ExtensionRejection_t.
      Definition Self : Set := axum.extract.rejection.ExtensionRejection.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      match self {
                          $(
                              Self::$variant(inner) => inner.body_text(),
                          )+
                      }
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      match self {
                          $(
                              Self::$variant(inner) => inner.status(),
                          )+
                      }
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_ExtensionRejection_t.
    End Impl_axum_extract_rejection_ExtensionRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_rejection_MissingExtension_t_for_axum_extract_rejection_ExtensionRejection_t.
    Section Impl_core_convert_From_axum_extract_rejection_MissingExtension_t_for_axum_extract_rejection_ExtensionRejection_t.
      Definition Self : Set := axum.extract.rejection.ExtensionRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.rejection.MissingExtension.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.rejection.MissingExtension.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_rejection_MissingExtension_t_for_axum_extract_rejection_ExtensionRejection_t.
    End Impl_core_convert_From_axum_extract_rejection_MissingExtension_t_for_axum_extract_rejection_ExtensionRejection_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_ExtensionRejection_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_ExtensionRejection_t.
      Definition Self : Set := axum.extract.rejection.ExtensionRejection.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      match self {
                          $(
                              Self::$variant(inner) => write!(f, "{inner}"),
                          )+
                      }
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_ExtensionRejection_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_ExtensionRejection_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_ExtensionRejection_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_ExtensionRejection_t.
      Definition Self : Set := axum.extract.rejection.ExtensionRejection.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      match self {
                          $(
                              Self::$variant(inner) => inner.source(),
                          )+
                      }
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_ExtensionRejection_t.
    End Impl_core_error_Error_for_axum_extract_rejection_ExtensionRejection_t.
    
    Module PathRejection.
      Inductive t : Set :=
      |
        FailedToDeserializePathParams
        (_ : axum.extract.path.FailedToDeserializePathParams.t)
      | MissingPathParams (_ : axum.extract.rejection.MissingPathParams.t).
      
      Definition Get_FailedToDeserializePathParams_0 :=
        Ref.map
          (fun α =>
            match α with
            | FailedToDeserializePathParams α0 => Some α0
            | _ => None
            end)
          (fun β α =>
            match α with
            | FailedToDeserializePathParams _ =>
              Some (FailedToDeserializePathParams β)
            | _ => None
            end).
      
      Definition Get_MissingPathParams_0 :=
        Ref.map
          (fun α =>
            match α with | MissingPathParams α0 => Some α0 | _ => None end)
          (fun β α =>
            match α with
            | MissingPathParams _ => Some (MissingPathParams β)
            | _ => None
            end).
    End PathRejection.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_PathRejection_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_PathRejection_t.
      Definition Self : Set := axum.extract.rejection.PathRejection.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_PathRejection_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_PathRejection_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_PathRejection_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_PathRejection_t.
      Definition Self : Set := axum.extract.rejection.PathRejection.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      match self {
                          $(
                              Self::$variant(inner) => inner.into_response(),
                          )+
                      }
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_PathRejection_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_PathRejection_t.
    
    Module  Impl_axum_extract_rejection_PathRejection_t.
    Section Impl_axum_extract_rejection_PathRejection_t.
      Definition Self : Set := axum.extract.rejection.PathRejection.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      match self {
                          $(
                              Self::$variant(inner) => inner.body_text(),
                          )+
                      }
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      match self {
                          $(
                              Self::$variant(inner) => inner.status(),
                          )+
                      }
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_PathRejection_t.
    End Impl_axum_extract_rejection_PathRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_path_FailedToDeserializePathParams_t_for_axum_extract_rejection_PathRejection_t.
    Section Impl_core_convert_From_axum_extract_path_FailedToDeserializePathParams_t_for_axum_extract_rejection_PathRejection_t.
      Definition Self : Set := axum.extract.rejection.PathRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.path.FailedToDeserializePathParams.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.path.FailedToDeserializePathParams.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_path_FailedToDeserializePathParams_t_for_axum_extract_rejection_PathRejection_t.
    End Impl_core_convert_From_axum_extract_path_FailedToDeserializePathParams_t_for_axum_extract_rejection_PathRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_rejection_MissingPathParams_t_for_axum_extract_rejection_PathRejection_t.
    Section Impl_core_convert_From_axum_extract_rejection_MissingPathParams_t_for_axum_extract_rejection_PathRejection_t.
      Definition Self : Set := axum.extract.rejection.PathRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.rejection.MissingPathParams.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.rejection.MissingPathParams.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_rejection_MissingPathParams_t_for_axum_extract_rejection_PathRejection_t.
    End Impl_core_convert_From_axum_extract_rejection_MissingPathParams_t_for_axum_extract_rejection_PathRejection_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_PathRejection_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_PathRejection_t.
      Definition Self : Set := axum.extract.rejection.PathRejection.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      match self {
                          $(
                              Self::$variant(inner) => write!(f, "{inner}"),
                          )+
                      }
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_PathRejection_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_PathRejection_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_PathRejection_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_PathRejection_t.
      Definition Self : Set := axum.extract.rejection.PathRejection.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      match self {
                          $(
                              Self::$variant(inner) => inner.source(),
                          )+
                      }
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_PathRejection_t.
    End Impl_core_error_Error_for_axum_extract_rejection_PathRejection_t.
    
    Module RawPathParamsRejection.
      Inductive t : Set :=
      | InvalidUtf8InPathParam (_ : axum.extract.path.InvalidUtf8InPathParam.t)
      | MissingPathParams (_ : axum.extract.rejection.MissingPathParams.t).
      
      Definition Get_InvalidUtf8InPathParam_0 :=
        Ref.map
          (fun α =>
            match α with | InvalidUtf8InPathParam α0 => Some α0 | _ => None end)
          (fun β α =>
            match α with
            | InvalidUtf8InPathParam _ => Some (InvalidUtf8InPathParam β)
            | _ => None
            end).
      
      Definition Get_MissingPathParams_0 :=
        Ref.map
          (fun α =>
            match α with | MissingPathParams α0 => Some α0 | _ => None end)
          (fun β α =>
            match α with
            | MissingPathParams _ => Some (MissingPathParams β)
            | _ => None
            end).
    End RawPathParamsRejection.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_RawPathParamsRejection_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_RawPathParamsRejection_t.
      Definition Self : Set := axum.extract.rejection.RawPathParamsRejection.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_RawPathParamsRejection_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_RawPathParamsRejection_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_RawPathParamsRejection_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_RawPathParamsRejection_t.
      Definition Self : Set := axum.extract.rejection.RawPathParamsRejection.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      match self {
                          $(
                              Self::$variant(inner) => inner.into_response(),
                          )+
                      }
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_RawPathParamsRejection_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_RawPathParamsRejection_t.
    
    Module  Impl_axum_extract_rejection_RawPathParamsRejection_t.
    Section Impl_axum_extract_rejection_RawPathParamsRejection_t.
      Definition Self : Set := axum.extract.rejection.RawPathParamsRejection.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      match self {
                          $(
                              Self::$variant(inner) => inner.body_text(),
                          )+
                      }
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      match self {
                          $(
                              Self::$variant(inner) => inner.status(),
                          )+
                      }
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_RawPathParamsRejection_t.
    End Impl_axum_extract_rejection_RawPathParamsRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_path_InvalidUtf8InPathParam_t_for_axum_extract_rejection_RawPathParamsRejection_t.
    Section Impl_core_convert_From_axum_extract_path_InvalidUtf8InPathParam_t_for_axum_extract_rejection_RawPathParamsRejection_t.
      Definition Self : Set := axum.extract.rejection.RawPathParamsRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.path.InvalidUtf8InPathParam.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.path.InvalidUtf8InPathParam.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_path_InvalidUtf8InPathParam_t_for_axum_extract_rejection_RawPathParamsRejection_t.
    End Impl_core_convert_From_axum_extract_path_InvalidUtf8InPathParam_t_for_axum_extract_rejection_RawPathParamsRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_rejection_MissingPathParams_t_for_axum_extract_rejection_RawPathParamsRejection_t.
    Section Impl_core_convert_From_axum_extract_rejection_MissingPathParams_t_for_axum_extract_rejection_RawPathParamsRejection_t.
      Definition Self : Set := axum.extract.rejection.RawPathParamsRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.rejection.MissingPathParams.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.rejection.MissingPathParams.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_rejection_MissingPathParams_t_for_axum_extract_rejection_RawPathParamsRejection_t.
    End Impl_core_convert_From_axum_extract_rejection_MissingPathParams_t_for_axum_extract_rejection_RawPathParamsRejection_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_RawPathParamsRejection_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_RawPathParamsRejection_t.
      Definition Self : Set := axum.extract.rejection.RawPathParamsRejection.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      match self {
                          $(
                              Self::$variant(inner) => write!(f, "{inner}"),
                          )+
                      }
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_RawPathParamsRejection_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_RawPathParamsRejection_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_RawPathParamsRejection_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_RawPathParamsRejection_t.
      Definition Self : Set := axum.extract.rejection.RawPathParamsRejection.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      match self {
                          $(
                              Self::$variant(inner) => inner.source(),
                          )+
                      }
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_RawPathParamsRejection_t.
    End Impl_core_error_Error_for_axum_extract_rejection_RawPathParamsRejection_t.
    
    Module HostRejection.
      Inductive t : Set :=
      | FailedToResolveHost (_ : axum.extract.rejection.FailedToResolveHost.t).
      
      Definition Get_FailedToResolveHost_0 :=
        Ref.map
          (fun α => match α with | FailedToResolveHost α0 => Some α0 end)
          (fun β α =>
            match α with
            | FailedToResolveHost _ => Some (FailedToResolveHost β)
            end).
    End HostRejection.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_HostRejection_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_HostRejection_t.
      Definition Self : Set := axum.extract.rejection.HostRejection.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_HostRejection_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_HostRejection_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_HostRejection_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_HostRejection_t.
      Definition Self : Set := axum.extract.rejection.HostRejection.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      match self {
                          $(
                              Self::$variant(inner) => inner.into_response(),
                          )+
                      }
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_HostRejection_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_HostRejection_t.
    
    Module  Impl_axum_extract_rejection_HostRejection_t.
    Section Impl_axum_extract_rejection_HostRejection_t.
      Definition Self : Set := axum.extract.rejection.HostRejection.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      match self {
                          $(
                              Self::$variant(inner) => inner.body_text(),
                          )+
                      }
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      match self {
                          $(
                              Self::$variant(inner) => inner.status(),
                          )+
                      }
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_HostRejection_t.
    End Impl_axum_extract_rejection_HostRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_rejection_FailedToResolveHost_t_for_axum_extract_rejection_HostRejection_t.
    Section Impl_core_convert_From_axum_extract_rejection_FailedToResolveHost_t_for_axum_extract_rejection_HostRejection_t.
      Definition Self : Set := axum.extract.rejection.HostRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.rejection.FailedToResolveHost.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.rejection.FailedToResolveHost.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_rejection_FailedToResolveHost_t_for_axum_extract_rejection_HostRejection_t.
    End Impl_core_convert_From_axum_extract_rejection_FailedToResolveHost_t_for_axum_extract_rejection_HostRejection_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_HostRejection_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_HostRejection_t.
      Definition Self : Set := axum.extract.rejection.HostRejection.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      match self {
                          $(
                              Self::$variant(inner) => write!(f, "{inner}"),
                          )+
                      }
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_HostRejection_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_HostRejection_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_HostRejection_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_HostRejection_t.
      Definition Self : Set := axum.extract.rejection.HostRejection.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      match self {
                          $(
                              Self::$variant(inner) => inner.source(),
                          )+
                      }
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_HostRejection_t.
    End Impl_core_error_Error_for_axum_extract_rejection_HostRejection_t.
    
    Module  MatchedPathMissing.
    Section MatchedPathMissing.
      Inductive t : Set := Build.
    End MatchedPathMissing.
    End MatchedPathMissing.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_MatchedPathMissing_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_MatchedPathMissing_t.
      Definition Self : Set := axum.extract.rejection.MatchedPathMissing.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_MatchedPathMissing_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_MatchedPathMissing_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MatchedPathMissing_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MatchedPathMissing_t.
      Definition Self : Set := axum.extract.rejection.MatchedPathMissing.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      $crate::__log_rejection!(
                          rejection_type = $name,
                          body_text = $body,
                          status = http::StatusCode::$status,
                      );
                      (self.status(), $body).into_response()
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MatchedPathMissing_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MatchedPathMissing_t.
    
    Module  Impl_axum_extract_rejection_MatchedPathMissing_t.
    Section Impl_axum_extract_rejection_MatchedPathMissing_t.
      Definition Self : Set := axum.extract.rejection.MatchedPathMissing.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      $body.into()
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      http::StatusCode::$status
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_MatchedPathMissing_t.
    End Impl_axum_extract_rejection_MatchedPathMissing_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_MatchedPathMissing_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_MatchedPathMissing_t.
      Definition Self : Set := axum.extract.rejection.MatchedPathMissing.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      write!(f, "{}", $body)
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_MatchedPathMissing_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_MatchedPathMissing_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_MatchedPathMissing_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_MatchedPathMissing_t.
      Definition Self : Set := axum.extract.rejection.MatchedPathMissing.t.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.None;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_MatchedPathMissing_t.
    End Impl_core_error_Error_for_axum_extract_rejection_MatchedPathMissing_t.
    
    Module  Impl_core_default_Default_for_axum_extract_rejection_MatchedPathMissing_t.
    Section Impl_core_default_Default_for_axum_extract_rejection_MatchedPathMissing_t.
      Definition Self : Set := axum.extract.rejection.MatchedPathMissing.t.
      
      (*
                  fn default() -> Self {
                      Self
                  }
      *)
      Definition default : M Self := M.read foo.
      
      Global Instance AssociatedFunction_default :
        Notations.DoubleColon Self "default" := {
        Notations.double_colon := default;
      }.
      
      Global Instance ℐ : core.default.Default.Trait Self := {
        core.default.Default.default := default;
      }.
    End Impl_core_default_Default_for_axum_extract_rejection_MatchedPathMissing_t.
    End Impl_core_default_Default_for_axum_extract_rejection_MatchedPathMissing_t.
    
    Module MatchedPathRejection.
      Inductive t : Set :=
      | MatchedPathMissing (_ : axum.extract.rejection.MatchedPathMissing.t).
      
      Definition Get_MatchedPathMissing_0 :=
        Ref.map
          (fun α => match α with | MatchedPathMissing α0 => Some α0 end)
          (fun β α =>
            match α with
            | MatchedPathMissing _ => Some (MatchedPathMissing β)
            end).
    End MatchedPathRejection.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_MatchedPathRejection_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_MatchedPathRejection_t.
      Definition Self : Set := axum.extract.rejection.MatchedPathRejection.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_MatchedPathRejection_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_MatchedPathRejection_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MatchedPathRejection_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MatchedPathRejection_t.
      Definition Self : Set := axum.extract.rejection.MatchedPathRejection.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      match self {
                          $(
                              Self::$variant(inner) => inner.into_response(),
                          )+
                      }
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MatchedPathRejection_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_MatchedPathRejection_t.
    
    Module  Impl_axum_extract_rejection_MatchedPathRejection_t.
    Section Impl_axum_extract_rejection_MatchedPathRejection_t.
      Definition Self : Set := axum.extract.rejection.MatchedPathRejection.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      match self {
                          $(
                              Self::$variant(inner) => inner.body_text(),
                          )+
                      }
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      match self {
                          $(
                              Self::$variant(inner) => inner.status(),
                          )+
                      }
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_MatchedPathRejection_t.
    End Impl_axum_extract_rejection_MatchedPathRejection_t.
    
    Module  Impl_core_convert_From_axum_extract_rejection_MatchedPathMissing_t_for_axum_extract_rejection_MatchedPathRejection_t.
    Section Impl_core_convert_From_axum_extract_rejection_MatchedPathMissing_t_for_axum_extract_rejection_MatchedPathRejection_t.
      Definition Self : Set := axum.extract.rejection.MatchedPathRejection.t.
      
      (*
                      fn from(inner: $variant) -> Self {
                          Self::$variant(inner)
                      }
      *)
      Definition from
          (inner : axum.extract.rejection.MatchedPathMissing.t)
          : M Self :=
        let* inner := M.alloc inner in
        M.read foo.
      
      Global Instance AssociatedFunction_from :
        Notations.DoubleColon Self "from" := {
        Notations.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := axum.extract.rejection.MatchedPathMissing.t) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_axum_extract_rejection_MatchedPathMissing_t_for_axum_extract_rejection_MatchedPathRejection_t.
    End Impl_core_convert_From_axum_extract_rejection_MatchedPathMissing_t_for_axum_extract_rejection_MatchedPathRejection_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_MatchedPathRejection_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_MatchedPathRejection_t.
      Definition Self : Set := axum.extract.rejection.MatchedPathRejection.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      match self {
                          $(
                              Self::$variant(inner) => write!(f, "{inner}"),
                          )+
                      }
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_MatchedPathRejection_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_MatchedPathRejection_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_MatchedPathRejection_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_MatchedPathRejection_t.
      Definition Self : Set := axum.extract.rejection.MatchedPathRejection.t.
      
      (*
                  fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
                      match self {
                          $(
                              Self::$variant(inner) => inner.source(),
                          )+
                      }
                  }
      *)
      Definition source
          (self : ref Self)
          : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_source :
        Notations.DoubleColon Self "source" := {
        Notations.double_colon := source;
      }.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.Some source;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_MatchedPathRejection_t.
    End Impl_core_error_Error_for_axum_extract_rejection_MatchedPathRejection_t.
    
    Module  NestedPathRejection.
    Section NestedPathRejection.
      Inductive t : Set := Build.
    End NestedPathRejection.
    End NestedPathRejection.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_rejection_NestedPathRejection_t.
    Section Impl_core_fmt_Debug_for_axum_extract_rejection_NestedPathRejection_t.
      Definition Self : Set := axum.extract.rejection.NestedPathRejection.t.
      
      (*
              Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_NestedPathRejection_t.
    End Impl_core_fmt_Debug_for_axum_extract_rejection_NestedPathRejection_t.
    
    Module  Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_NestedPathRejection_t.
    Section Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_NestedPathRejection_t.
      Definition Self : Set := axum.extract.rejection.NestedPathRejection.t.
      
      (*
                  fn into_response(self) -> $crate::response::Response {
                      $crate::__log_rejection!(
                          rejection_type = $name,
                          body_text = $body,
                          status = http::StatusCode::$status,
                      );
                      (self.status(), $body).into_response()
                  }
      *)
      Definition into_response
          (self : Self)
          :
            M
              ltac:(axum_core.response.Response
                axum_core.response.Response.Default.T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_into_response :
        Notations.DoubleColon Self "into_response" := {
        Notations.double_colon := into_response;
      }.
      
      Global Instance ℐ :
        axum_core.response.into_response.IntoResponse.Trait Self := {
        axum_core.response.into_response.IntoResponse.into_response :=
          into_response;
      }.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_NestedPathRejection_t.
    End Impl_axum_core_response_into_response_IntoResponse_for_axum_extract_rejection_NestedPathRejection_t.
    
    Module  Impl_axum_extract_rejection_NestedPathRejection_t.
    Section Impl_axum_extract_rejection_NestedPathRejection_t.
      Definition Self : Set := axum.extract.rejection.NestedPathRejection.t.
      
      (*
                  pub fn body_text(&self) -> String {
                      $body.into()
                  }
      *)
      Definition body_text (self : ref Self) : M alloc.string.String.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_body_text :
        Notations.DoubleColon Self "body_text" := {
        Notations.double_colon := body_text;
      }.
      
      (*
                  pub fn status(&self) -> http::StatusCode {
                      http::StatusCode::$status
                  }
      *)
      Definition status (self : ref Self) : M http.status.StatusCode.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_status :
        Notations.DoubleColon Self "status" := {
        Notations.double_colon := status;
      }.
    End Impl_axum_extract_rejection_NestedPathRejection_t.
    End Impl_axum_extract_rejection_NestedPathRejection_t.
    
    Module  Impl_core_fmt_Display_for_axum_extract_rejection_NestedPathRejection_t.
    Section Impl_core_fmt_Display_for_axum_extract_rejection_NestedPathRejection_t.
      Definition Self : Set := axum.extract.rejection.NestedPathRejection.t.
      
      (*
                  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                      write!(f, "{}", $body)
                  }
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_axum_extract_rejection_NestedPathRejection_t.
    End Impl_core_fmt_Display_for_axum_extract_rejection_NestedPathRejection_t.
    
    Module  Impl_core_error_Error_for_axum_extract_rejection_NestedPathRejection_t.
    Section Impl_core_error_Error_for_axum_extract_rejection_NestedPathRejection_t.
      Definition Self : Set := axum.extract.rejection.NestedPathRejection.t.
      
      Global Instance ℐ : core.error.Error.Required.Trait Self := {
        core.error.Error.source := Datatypes.None;
        core.error.Error.type_id := Datatypes.None;
        core.error.Error.description := Datatypes.None;
        core.error.Error.cause := Datatypes.None;
        core.error.Error.provide := Datatypes.None;
      }.
    End Impl_core_error_Error_for_axum_extract_rejection_NestedPathRejection_t.
    End Impl_core_error_Error_for_axum_extract_rejection_NestedPathRejection_t.
    
    Module  Impl_core_default_Default_for_axum_extract_rejection_NestedPathRejection_t.
    Section Impl_core_default_Default_for_axum_extract_rejection_NestedPathRejection_t.
      Definition Self : Set := axum.extract.rejection.NestedPathRejection.t.
      
      (*
                  fn default() -> Self {
                      Self
                  }
      *)
      Definition default : M Self := M.read foo.
      
      Global Instance AssociatedFunction_default :
        Notations.DoubleColon Self "default" := {
        Notations.double_colon := default;
      }.
      
      Global Instance ℐ : core.default.Default.Trait Self := {
        core.default.Default.default := default;
      }.
    End Impl_core_default_Default_for_axum_extract_rejection_NestedPathRejection_t.
    End Impl_core_default_Default_for_axum_extract_rejection_NestedPathRejection_t.
  End rejection.
  
  Module host.
    Definition X_FORWARDED_HOST_HEADER_KEY : M.Val (ref str.t) :=
      M.run (M.pure foo).
    
    Module  Host.
    Section Host.
      Record t : Set := {
        x0 : alloc.string.String.t;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End Host.
    End Host.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_host_Host_t.
    Section Impl_core_fmt_Debug_for_axum_extract_host_Host_t.
      Definition Self : Set := axum.extract.host.Host.t.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_host_Host_t.
    End Impl_core_fmt_Debug_for_axum_extract_host_Host_t.
    
    Module  Impl_core_clone_Clone_for_axum_extract_host_Host_t.
    Section Impl_core_clone_Clone_for_axum_extract_host_Host_t.
      Definition Self : Set := axum.extract.host.Host.t.
      
      (*
      Clone
      *)
      Definition clone (self : ref Self) : M axum.extract.host.Host.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_axum_extract_host_Host_t.
    End Impl_core_clone_Clone_for_axum_extract_host_Host_t.
    
    Module  Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_host_Host_t.
    Section Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_host_Host_t.
      Context {S : Set}.
      
      Context {ℋ_0 : core.marker.Send.Trait S} {ℋ_1 : core.marker.Sync.Trait S}.
      
      Definition Self : Set := axum.extract.host.Host.t.
      
      (*
          type Rejection = HostRejection;
      *)
      Definition Rejection : Set := axum.extract.rejection.HostRejection.t.
      
      (*
          async fn from_request_parts(parts: &mut Parts, _state: &S) -> Result<Self, Self::Rejection> {
              if let Some(host) = parse_forwarded(&parts.headers) {
                  return Ok(Host(host.to_owned()));
              }
      
              if let Some(host) = parts
                  .headers
                  .get(X_FORWARDED_HOST_HEADER_KEY)
                  .and_then(|host| host.to_str().ok())
              {
                  return Ok(Host(host.to_owned()));
              }
      
              if let Some(host) = parts
                  .headers
                  .get(http::header::HOST)
                  .and_then(|host| host.to_str().ok())
              {
                  return Ok(Host(host.to_owned()));
              }
      
              if let Some(host) = parts.uri.host() {
                  return Ok(Host(host.to_owned()));
              }
      
              Err(HostRejection::FailedToResolveHost(FailedToResolveHost))
          }
      *)
      Definition from_request_parts
          (parts : mut_ref http.request.Parts.t)
          (_state : ref S)
          :
            M
              (core.pin.Pin.t
                (alloc.boxed.Box.t
                  (dyn
                    [core.future.future.Future.Trait; core.marker.Send.Trait])
                  alloc.boxed.Box.Default.A)) :=
        let* parts := M.alloc parts in
        let* _state := M.alloc _state in
        M.read foo.
      
      Global Instance AssociatedFunction_from_request_parts :
        Notations.DoubleColon Self "from_request_parts" := {
        Notations.double_colon := from_request_parts;
      }.
      
      Global Instance ℐ :
        axum_core.extract.FromRequestParts.Trait Self (S := S) := {
        axum_core.extract.FromRequestParts.Rejection := Rejection;
        axum_core.extract.FromRequestParts.from_request_parts :=
          from_request_parts;
      }.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_host_Host_t.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_host_Host_t.
    
    (*
    fn parse_forwarded(headers: &HeaderMap) -> Option<&str> {
        // if there are multiple `Forwarded` `HeaderMap::get` will return the first one
        let forwarded_values = headers.get(FORWARDED)?.to_str().ok()?;
    
        // get the first set of values
        let first_value = forwarded_values.split(',').nth(0)?;
    
        // find the value of the `host` field
        first_value.split(';').find_map(|pair| {
            let (key, value) = pair.split_once('=')?;
            key.trim()
                .eq_ignore_ascii_case("host")
                .then(|| value.trim().trim_matches('"'))
        })
    }
    "
    *)
    Definition parse_forwarded
        (headers
          :
          ref (http.header.map.HeaderMap.t http.header.map.HeaderMap.Default.T))
        : M (core.option.Option.t (ref str.t)) :=
      let* headers := M.alloc headers in
      M.read foo.
  End host.
  
  Module nested_path.
    Module  NestedPath.
    Section NestedPath.
      Record t : Set := {
        x0 : alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End NestedPath.
    End NestedPath.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_nested_path_NestedPath_t.
    Section Impl_core_fmt_Debug_for_axum_extract_nested_path_NestedPath_t.
      Definition Self : Set := axum.extract.nested_path.NestedPath.t.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_nested_path_NestedPath_t.
    End Impl_core_fmt_Debug_for_axum_extract_nested_path_NestedPath_t.
    
    Module  Impl_core_clone_Clone_for_axum_extract_nested_path_NestedPath_t.
    Section Impl_core_clone_Clone_for_axum_extract_nested_path_NestedPath_t.
      Definition Self : Set := axum.extract.nested_path.NestedPath.t.
      
      (*
      Clone
      *)
      Definition clone
          (self : ref Self)
          : M axum.extract.nested_path.NestedPath.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_axum_extract_nested_path_NestedPath_t.
    End Impl_core_clone_Clone_for_axum_extract_nested_path_NestedPath_t.
    
    Module  Impl_axum_extract_nested_path_NestedPath_t.
    Section Impl_axum_extract_nested_path_NestedPath_t.
      Definition Self : Set := axum.extract.nested_path.NestedPath.t.
      
      (*
          pub fn as_str(&self) -> &str {
              &self.0
          }
      *)
      Definition as_str (self : ref Self) : M (ref str.t) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_as_str :
        Notations.DoubleColon Self "as_str" := {
        Notations.double_colon := as_str;
      }.
    End Impl_axum_extract_nested_path_NestedPath_t.
    End Impl_axum_extract_nested_path_NestedPath_t.
    
    Module  Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_nested_path_NestedPath_t.
    Section Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_nested_path_NestedPath_t.
      Context {S : Set}.
      
      Context {ℋ_0 : core.marker.Send.Trait S} {ℋ_1 : core.marker.Sync.Trait S}.
      
      Definition Self : Set := axum.extract.nested_path.NestedPath.t.
      
      (*
          type Rejection = NestedPathRejection;
      *)
      Definition Rejection : Set :=
        axum.extract.rejection.NestedPathRejection.t.
      
      (*
          async fn from_request_parts(parts: &mut Parts, _state: &S) -> Result<Self, Self::Rejection> {
              match parts.extensions.get::<Self>() {
                  Some(nested_path) => Ok(nested_path.clone()),
                  None => Err(NestedPathRejection),
              }
          }
      *)
      Definition from_request_parts
          (parts : mut_ref http.request.Parts.t)
          (_state : ref S)
          :
            M
              (core.pin.Pin.t
                (alloc.boxed.Box.t
                  (dyn
                    [core.future.future.Future.Trait; core.marker.Send.Trait])
                  alloc.boxed.Box.Default.A)) :=
        let* parts := M.alloc parts in
        let* _state := M.alloc _state in
        M.read foo.
      
      Global Instance AssociatedFunction_from_request_parts :
        Notations.DoubleColon Self "from_request_parts" := {
        Notations.double_colon := from_request_parts;
      }.
      
      Global Instance ℐ :
        axum_core.extract.FromRequestParts.Trait Self (S := S) := {
        axum_core.extract.FromRequestParts.Rejection := Rejection;
        axum_core.extract.FromRequestParts.from_request_parts :=
          from_request_parts;
      }.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_nested_path_NestedPath_t.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_nested_path_NestedPath_t.
    
    Module  SetNestedPath.
    Section SetNestedPath.
      Context (S : Set).
      
      Record t : Set := {
        inner : S;
        path : alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A;
      }.
      
      Definition Get_inner :=
        Ref.map
          (fun α => Some α.(inner))
          (fun β α => Some (α <| inner := β |>)).
      Definition Get_path :=
        Ref.map (fun α => Some α.(path)) (fun β α => Some (α <| path := β |>)).
    End SetNestedPath.
    End SetNestedPath.
    
    Module  Impl_core_clone_Clone_for_axum_extract_nested_path_SetNestedPath_t_S.
    Section Impl_core_clone_Clone_for_axum_extract_nested_path_SetNestedPath_t_S.
      Context {S : Set}.
      
      Context {ℋ_0 : core.clone.Clone.Trait S}.
      
      Definition Self : Set := axum.extract.nested_path.SetNestedPath.t S.
      
      (*
      Clone
      *)
      Definition clone
          (self : ref Self)
          : M (axum.extract.nested_path.SetNestedPath.t S) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_axum_extract_nested_path_SetNestedPath_t_S.
    End Impl_core_clone_Clone_for_axum_extract_nested_path_SetNestedPath_t_S.
    
    Module  Impl_axum_extract_nested_path_SetNestedPath_t_S.
    Section Impl_axum_extract_nested_path_SetNestedPath_t_S.
      Context {S : Set}.
      
      Definition Self : Set := axum.extract.nested_path.SetNestedPath.t S.
      
      (*
          pub(crate) fn layer(path: &str) -> impl Layer<S, Service = Self> + Clone {
              let path = Arc::from(path);
              layer_fn(move |inner| Self {
                  inner,
                  path: Arc::clone(&path),
              })
          }
      *)
      Definition layer (path : ref str.t) : M _ (* OpaqueTy *) :=
        let* path := M.alloc path in
        M.read foo.
      
      Global Instance AssociatedFunction_layer :
        Notations.DoubleColon Self "layer" := {
        Notations.double_colon := layer;
      }.
    End Impl_axum_extract_nested_path_SetNestedPath_t_S.
    End Impl_axum_extract_nested_path_SetNestedPath_t_S.
    
    Module  Impl_tower_service_Service_axum_core_extract_Request_B_for_axum_extract_nested_path_SetNestedPath_t_S.
    Section Impl_tower_service_Service_axum_core_extract_Request_B_for_axum_extract_nested_path_SetNestedPath_t_S.
      Context {S B : Set}.
      
      Context
        {ℋ_0 :
          tower_service.Service.Trait S
            (Request := ltac:(axum_core.extract.Request B))}.
      
      Definition Self : Set := axum.extract.nested_path.SetNestedPath.t S.
      
      (*
          type Response = S::Response;
      *)
      Definition Response : Set := S::type["Response"].t.
      
      (*
          type Error = S::Error;
      *)
      Definition Error : Set := S::type["Error"].t.
      
      (*
          type Future = S::Future;
      *)
      Definition Future : Set := S::type["Future"].t.
      
      (*
          fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {
              self.inner.poll_ready(cx)
          }
      *)
      Definition poll_ready
          (self : mut_ref Self)
          (cx : mut_ref core.task.wake.Context.t)
          : M (core.task.poll.Poll.t (core.result.Result.t unit Error)) :=
        let* self := M.alloc self in
        let* cx := M.alloc cx in
        M.read foo.
      
      Global Instance AssociatedFunction_poll_ready :
        Notations.DoubleColon Self "poll_ready" := {
        Notations.double_colon := poll_ready;
      }.
      
      (*
          fn call(&mut self, mut req: Request<B>) -> Self::Future {
              if let Some(prev) = req.extensions_mut().get_mut::<NestedPath>() {
                  let new_path = if prev.as_str() == "/" {
                      Arc::clone(&self.path)
                  } else {
                      format!("{}{}", prev.as_str().trim_end_matches('/'), self.path).into()
                  };
                  prev.0 = new_path;
              } else {
                  req.extensions_mut()
                      .insert(NestedPath(Arc::clone(&self.path)));
              };
      
              self.inner.call(req)
          }
      *)
      Definition call
          (self : mut_ref Self)
          (req : ltac:(axum_core.extract.Request B))
          : M Future :=
        let* self := M.alloc self in
        let* req := M.alloc req in
        M.read foo.
      
      Global Instance AssociatedFunction_call :
        Notations.DoubleColon Self "call" := {
        Notations.double_colon := call;
      }.
      
      Global Instance ℐ :
        tower_service.Service.Trait Self
          (Request := ltac:(axum_core.extract.Request B)) := {
        tower_service.Service.Response := Response;
        tower_service.Service.Error := Error;
        tower_service.Service.Future := Future;
        tower_service.Service.poll_ready := poll_ready;
        tower_service.Service.call := call;
      }.
    End Impl_tower_service_Service_axum_core_extract_Request_B_for_axum_extract_nested_path_SetNestedPath_t_S.
    End Impl_tower_service_Service_axum_core_extract_Request_B_for_axum_extract_nested_path_SetNestedPath_t_S.
  End nested_path.
  
  Module raw_form.
    Module  RawForm.
    Section RawForm.
      Record t : Set := {
        x0 : bytes.bytes.Bytes.t;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End RawForm.
    End RawForm.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_raw_form_RawForm_t.
    Section Impl_core_fmt_Debug_for_axum_extract_raw_form_RawForm_t.
      Definition Self : Set := axum.extract.raw_form.RawForm.t.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_raw_form_RawForm_t.
    End Impl_core_fmt_Debug_for_axum_extract_raw_form_RawForm_t.
    
    Module  Impl_axum_core_extract_FromRequest_S_for_axum_extract_raw_form_RawForm_t.
    Section Impl_axum_core_extract_FromRequest_S_for_axum_extract_raw_form_RawForm_t.
      Context {S : Set}.
      
      Context {ℋ_0 : core.marker.Send.Trait S} {ℋ_1 : core.marker.Sync.Trait S}.
      
      Definition Self : Set := axum.extract.raw_form.RawForm.t.
      
      (*
          type Rejection = RawFormRejection;
      *)
      Definition Rejection : Set := axum.extract.rejection.RawFormRejection.t.
      
      (*
          async fn from_request(req: Request, state: &S) -> Result<Self, Self::Rejection> {
              if req.method() == Method::GET {
                  if let Some(query) = req.uri().query() {
                      return Ok(Self(Bytes::copy_from_slice(query.as_bytes())));
                  }
      
                  Ok(Self(Bytes::new()))
              } else {
                  if !has_content_type(req.headers(), &mime::APPLICATION_WWW_FORM_URLENCODED) {
                      return Err(InvalidFormContentType.into());
                  }
      
                  Ok(Self(Bytes::from_request(req, state).await?))
              }
          }
      *)
      Definition from_request
          (req
            :
            ltac:(axum_core.extract.Request
              axum_core.extract.Request.Default.T))
          (state : ref S)
          :
            M
              (core.pin.Pin.t
                (alloc.boxed.Box.t
                  (dyn
                    [core.future.future.Future.Trait; core.marker.Send.Trait])
                  alloc.boxed.Box.Default.A)) :=
        let* req := M.alloc req in
        let* state := M.alloc state in
        M.read foo.
      
      Global Instance AssociatedFunction_from_request :
        Notations.DoubleColon Self "from_request" := {
        Notations.double_colon := from_request;
      }.
      
      Global Instance ℐ :
        axum_core.extract.FromRequest.Trait Self
          (S := S)
          (M := axum_core.extract.FromRequest.Default.M Self) := {
        axum_core.extract.FromRequest.Rejection := Rejection;
        axum_core.extract.FromRequest.from_request := from_request;
      }.
    End Impl_axum_core_extract_FromRequest_S_for_axum_extract_raw_form_RawForm_t.
    End Impl_axum_core_extract_FromRequest_S_for_axum_extract_raw_form_RawForm_t.
  End raw_form.
  
  Module raw_query.
    Module  RawQuery.
    Section RawQuery.
      Record t : Set := {
        x0 : core.option.Option.t alloc.string.String.t;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End RawQuery.
    End RawQuery.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_raw_query_RawQuery_t.
    Section Impl_core_fmt_Debug_for_axum_extract_raw_query_RawQuery_t.
      Definition Self : Set := axum.extract.raw_query.RawQuery.t.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_raw_query_RawQuery_t.
    End Impl_core_fmt_Debug_for_axum_extract_raw_query_RawQuery_t.
    
    Module  Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_raw_query_RawQuery_t.
    Section Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_raw_query_RawQuery_t.
      Context {S : Set}.
      
      Context {ℋ_0 : core.marker.Send.Trait S} {ℋ_1 : core.marker.Sync.Trait S}.
      
      Definition Self : Set := axum.extract.raw_query.RawQuery.t.
      
      (*
          type Rejection = Infallible;
      *)
      Definition Rejection : Set := core.convert.Infallible.t.
      
      (*
          async fn from_request_parts(parts: &mut Parts, _state: &S) -> Result<Self, Self::Rejection> {
              let query = parts.uri.query().map(|query| query.to_owned());
              Ok(Self(query))
          }
      *)
      Definition from_request_parts
          (parts : mut_ref http.request.Parts.t)
          (_state : ref S)
          :
            M
              (core.pin.Pin.t
                (alloc.boxed.Box.t
                  (dyn
                    [core.future.future.Future.Trait; core.marker.Send.Trait])
                  alloc.boxed.Box.Default.A)) :=
        let* parts := M.alloc parts in
        let* _state := M.alloc _state in
        M.read foo.
      
      Global Instance AssociatedFunction_from_request_parts :
        Notations.DoubleColon Self "from_request_parts" := {
        Notations.double_colon := from_request_parts;
      }.
      
      Global Instance ℐ :
        axum_core.extract.FromRequestParts.Trait Self (S := S) := {
        axum_core.extract.FromRequestParts.Rejection := Rejection;
        axum_core.extract.FromRequestParts.from_request_parts :=
          from_request_parts;
      }.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_raw_query_RawQuery_t.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_raw_query_RawQuery_t.
  End raw_query.
  
  Module request_parts.
    Module  OriginalUri.
    Section OriginalUri.
      Record t : Set := {
        x0 : http.uri.Uri.t;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End OriginalUri.
    End OriginalUri.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_request_parts_OriginalUri_t.
    Section Impl_core_fmt_Debug_for_axum_extract_request_parts_OriginalUri_t.
      Definition Self : Set := axum.extract.request_parts.OriginalUri.t.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_request_parts_OriginalUri_t.
    End Impl_core_fmt_Debug_for_axum_extract_request_parts_OriginalUri_t.
    
    Module  Impl_core_clone_Clone_for_axum_extract_request_parts_OriginalUri_t.
    Section Impl_core_clone_Clone_for_axum_extract_request_parts_OriginalUri_t.
      Definition Self : Set := axum.extract.request_parts.OriginalUri.t.
      
      (*
      Clone
      *)
      Definition clone
          (self : ref Self)
          : M axum.extract.request_parts.OriginalUri.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_axum_extract_request_parts_OriginalUri_t.
    End Impl_core_clone_Clone_for_axum_extract_request_parts_OriginalUri_t.
    
    Module  Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_request_parts_OriginalUri_t.
    Section Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_request_parts_OriginalUri_t.
      Context {S : Set}.
      
      Context {ℋ_0 : core.marker.Send.Trait S} {ℋ_1 : core.marker.Sync.Trait S}.
      
      Definition Self : Set := axum.extract.request_parts.OriginalUri.t.
      
      (*
          type Rejection = Infallible;
      *)
      Definition Rejection : Set := core.convert.Infallible.t.
      
      (*
          async fn from_request_parts(parts: &mut Parts, state: &S) -> Result<Self, Self::Rejection> {
              let uri = Extension::<Self>::from_request_parts(parts, state)
                  .await
                  .unwrap_or_else(|_| Extension(OriginalUri(parts.uri.clone())))
                  .0;
              Ok(uri)
          }
      *)
      Definition from_request_parts
          (parts : mut_ref http.request.Parts.t)
          (state : ref S)
          :
            M
              (core.pin.Pin.t
                (alloc.boxed.Box.t
                  (dyn
                    [core.future.future.Future.Trait; core.marker.Send.Trait])
                  alloc.boxed.Box.Default.A)) :=
        let* parts := M.alloc parts in
        let* state := M.alloc state in
        M.read foo.
      
      Global Instance AssociatedFunction_from_request_parts :
        Notations.DoubleColon Self "from_request_parts" := {
        Notations.double_colon := from_request_parts;
      }.
      
      Global Instance ℐ :
        axum_core.extract.FromRequestParts.Trait Self (S := S) := {
        axum_core.extract.FromRequestParts.Rejection := Rejection;
        axum_core.extract.FromRequestParts.from_request_parts :=
          from_request_parts;
      }.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_request_parts_OriginalUri_t.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_request_parts_OriginalUri_t.
    
    Module  Impl_core_ops_deref_Deref_for_axum_extract_request_parts_OriginalUri_t.
    Section Impl_core_ops_deref_Deref_for_axum_extract_request_parts_OriginalUri_t.
      Definition Self : Set := axum.extract.request_parts.OriginalUri.t.
      
      (*
                  type Target = $ty;
      *)
      Definition Target : Set := http.uri.Uri.t.
      
      (*
                  fn deref(&self) -> &Self::Target {
                      &self.0
                  }
      *)
      Definition deref (self : ref Self) : M (ref Target) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_deref :
        Notations.DoubleColon Self "deref" := {
        Notations.double_colon := deref;
      }.
      
      Global Instance ℐ : core.ops.deref.Deref.Trait Self := {
        core.ops.deref.Deref.Target := Target;
        core.ops.deref.Deref.deref := deref;
      }.
    End Impl_core_ops_deref_Deref_for_axum_extract_request_parts_OriginalUri_t.
    End Impl_core_ops_deref_Deref_for_axum_extract_request_parts_OriginalUri_t.
    
    Module  Impl_core_ops_deref_DerefMut_for_axum_extract_request_parts_OriginalUri_t.
    Section Impl_core_ops_deref_DerefMut_for_axum_extract_request_parts_OriginalUri_t.
      Definition Self : Set := axum.extract.request_parts.OriginalUri.t.
      
      (*
                  fn deref_mut(&mut self) -> &mut Self::Target {
                      &mut self.0
                  }
      *)
      Definition deref_mut (self : mut_ref Self) : M (mut_ref Target) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_deref_mut :
        Notations.DoubleColon Self "deref_mut" := {
        Notations.double_colon := deref_mut;
      }.
      
      Global Instance ℐ : core.ops.deref.DerefMut.Trait Self := {
        core.ops.deref.DerefMut.deref_mut := deref_mut;
      }.
    End Impl_core_ops_deref_DerefMut_for_axum_extract_request_parts_OriginalUri_t.
    End Impl_core_ops_deref_DerefMut_for_axum_extract_request_parts_OriginalUri_t.
  End request_parts.
  
  Module state.
    Module  State.
    Section State.
      Context {S : Set}.
      
      Record t : Set := {
        x0 : S;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End State.
    End State.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_state_State_t_S.
    Section Impl_core_fmt_Debug_for_axum_extract_state_State_t_S.
      Context {S : Set}.
      
      Context {ℋ_0 : core.fmt.Debug.Trait S}.
      
      Definition Self : Set := axum.extract.state.State.t S.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_state_State_t_S.
    End Impl_core_fmt_Debug_for_axum_extract_state_State_t_S.
    
    Module  Impl_core_default_Default_for_axum_extract_state_State_t_S.
    Section Impl_core_default_Default_for_axum_extract_state_State_t_S.
      Context {S : Set}.
      
      Context {ℋ_0 : core.default.Default.Trait S}.
      
      Definition Self : Set := axum.extract.state.State.t S.
      
      (*
      Default
      *)
      Definition default : M (axum.extract.state.State.t S) := M.read foo.
      
      Global Instance AssociatedFunction_default :
        Notations.DoubleColon Self "default" := {
        Notations.double_colon := default;
      }.
      
      Global Instance ℐ : core.default.Default.Trait Self := {
        core.default.Default.default := default;
      }.
    End Impl_core_default_Default_for_axum_extract_state_State_t_S.
    End Impl_core_default_Default_for_axum_extract_state_State_t_S.
    
    Module  Impl_core_clone_Clone_for_axum_extract_state_State_t_S.
    Section Impl_core_clone_Clone_for_axum_extract_state_State_t_S.
      Context {S : Set}.
      
      Context {ℋ_0 : core.clone.Clone.Trait S}.
      
      Definition Self : Set := axum.extract.state.State.t S.
      
      (*
      Clone
      *)
      Definition clone (self : ref Self) : M (axum.extract.state.State.t S) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_axum_extract_state_State_t_S.
    End Impl_core_clone_Clone_for_axum_extract_state_State_t_S.
    
    Module  Impl_core_marker_Copy_for_axum_extract_state_State_t_S.
    Section Impl_core_marker_Copy_for_axum_extract_state_State_t_S.
      Context {S : Set}.
      
      Context {ℋ_0 : core.marker.Copy.Trait S}.
      
      Definition Self : Set := axum.extract.state.State.t S.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_axum_extract_state_State_t_S.
    End Impl_core_marker_Copy_for_axum_extract_state_State_t_S.
    
    Module  Impl_axum_core_extract_FromRequestParts_OuterState_for_axum_extract_state_State_t_InnerState.
    Section Impl_axum_core_extract_FromRequestParts_OuterState_for_axum_extract_state_State_t_InnerState.
      Context {OuterState InnerState : Set}.
      
      Context
        {ℋ_0 :
          axum_core.extract.from_ref.FromRef.Trait InnerState (T := OuterState)}
        {ℋ_1 : core.marker.Send.Trait OuterState}
        {ℋ_2 : core.marker.Sync.Trait OuterState}.
      
      Definition Self : Set := axum.extract.state.State.t InnerState.
      
      (*
          type Rejection = Infallible;
      *)
      Definition Rejection : Set := core.convert.Infallible.t.
      
      (*
          async fn from_request_parts(
              _parts: &mut Parts,
              state: &OuterState,
          ) -> Result<Self, Self::Rejection> {
              let inner_state = InnerState::from_ref(state);
              Ok(Self(inner_state))
          }
      *)
      Definition from_request_parts
          (_parts : mut_ref http.request.Parts.t)
          (state : ref OuterState)
          :
            M
              (core.pin.Pin.t
                (alloc.boxed.Box.t
                  (dyn
                    [core.future.future.Future.Trait; core.marker.Send.Trait])
                  alloc.boxed.Box.Default.A)) :=
        let* _parts := M.alloc _parts in
        let* state := M.alloc state in
        M.read foo.
      
      Global Instance AssociatedFunction_from_request_parts :
        Notations.DoubleColon Self "from_request_parts" := {
        Notations.double_colon := from_request_parts;
      }.
      
      Global Instance ℐ :
        axum_core.extract.FromRequestParts.Trait Self (S := OuterState) := {
        axum_core.extract.FromRequestParts.Rejection := Rejection;
        axum_core.extract.FromRequestParts.from_request_parts :=
          from_request_parts;
      }.
    End Impl_axum_core_extract_FromRequestParts_OuterState_for_axum_extract_state_State_t_InnerState.
    End Impl_axum_core_extract_FromRequestParts_OuterState_for_axum_extract_state_State_t_InnerState.
    
    Module  Impl_core_ops_deref_Deref_for_axum_extract_state_State_t_S.
    Section Impl_core_ops_deref_Deref_for_axum_extract_state_State_t_S.
      Context {S : Set}.
      
      Definition Self : Set := axum.extract.state.State.t S.
      
      (*
          type Target = S;
      *)
      Definition Target : Set := S.
      
      (*
          fn deref(&self) -> &Self::Target {
              &self.0
          }
      *)
      Definition deref (self : ref Self) : M (ref Target) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_deref :
        Notations.DoubleColon Self "deref" := {
        Notations.double_colon := deref;
      }.
      
      Global Instance ℐ : core.ops.deref.Deref.Trait Self := {
        core.ops.deref.Deref.Target := Target;
        core.ops.deref.Deref.deref := deref;
      }.
    End Impl_core_ops_deref_Deref_for_axum_extract_state_State_t_S.
    End Impl_core_ops_deref_Deref_for_axum_extract_state_State_t_S.
    
    Module  Impl_core_ops_deref_DerefMut_for_axum_extract_state_State_t_S.
    Section Impl_core_ops_deref_DerefMut_for_axum_extract_state_State_t_S.
      Context {S : Set}.
      
      Definition Self : Set := axum.extract.state.State.t S.
      
      (*
          fn deref_mut(&mut self) -> &mut Self::Target {
              &mut self.0
          }
      *)
      Definition deref_mut (self : mut_ref Self) : M (mut_ref Target) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_deref_mut :
        Notations.DoubleColon Self "deref_mut" := {
        Notations.double_colon := deref_mut;
      }.
      
      Global Instance ℐ : core.ops.deref.DerefMut.Trait Self := {
        core.ops.deref.DerefMut.deref_mut := deref_mut;
      }.
    End Impl_core_ops_deref_DerefMut_for_axum_extract_state_State_t_S.
    End Impl_core_ops_deref_DerefMut_for_axum_extract_state_State_t_S.
  End state.
  
  Module matched_path.
    Module  MatchedPath.
    Section MatchedPath.
      Record t : Set := {
        x0 : alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End MatchedPath.
    End MatchedPath.
    
    Module  Impl_core_clone_Clone_for_axum_extract_matched_path_MatchedPath_t.
    Section Impl_core_clone_Clone_for_axum_extract_matched_path_MatchedPath_t.
      Definition Self : Set := axum.extract.matched_path.MatchedPath.t.
      
      (*
      Clone
      *)
      Definition clone
          (self : ref Self)
          : M axum.extract.matched_path.MatchedPath.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_axum_extract_matched_path_MatchedPath_t.
    End Impl_core_clone_Clone_for_axum_extract_matched_path_MatchedPath_t.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_matched_path_MatchedPath_t.
    Section Impl_core_fmt_Debug_for_axum_extract_matched_path_MatchedPath_t.
      Definition Self : Set := axum.extract.matched_path.MatchedPath.t.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_matched_path_MatchedPath_t.
    End Impl_core_fmt_Debug_for_axum_extract_matched_path_MatchedPath_t.
    
    Module  Impl_axum_extract_matched_path_MatchedPath_t.
    Section Impl_axum_extract_matched_path_MatchedPath_t.
      Definition Self : Set := axum.extract.matched_path.MatchedPath.t.
      
      (*
          pub fn as_str(&self) -> &str {
              &self.0
          }
      *)
      Definition as_str (self : ref Self) : M (ref str.t) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_as_str :
        Notations.DoubleColon Self "as_str" := {
        Notations.double_colon := as_str;
      }.
    End Impl_axum_extract_matched_path_MatchedPath_t.
    End Impl_axum_extract_matched_path_MatchedPath_t.
    
    Module  Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_matched_path_MatchedPath_t.
    Section Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_matched_path_MatchedPath_t.
      Context {S : Set}.
      
      Context {ℋ_0 : core.marker.Send.Trait S} {ℋ_1 : core.marker.Sync.Trait S}.
      
      Definition Self : Set := axum.extract.matched_path.MatchedPath.t.
      
      (*
          type Rejection = MatchedPathRejection;
      *)
      Definition Rejection : Set :=
        axum.extract.rejection.MatchedPathRejection.t.
      
      (*
          async fn from_request_parts(parts: &mut Parts, _state: &S) -> Result<Self, Self::Rejection> {
              let matched_path = parts
                  .extensions
                  .get::<Self>()
                  .ok_or(MatchedPathRejection::MatchedPathMissing(MatchedPathMissing))?
                  .clone();
      
              Ok(matched_path)
          }
      *)
      Definition from_request_parts
          (parts : mut_ref http.request.Parts.t)
          (_state : ref S)
          :
            M
              (core.pin.Pin.t
                (alloc.boxed.Box.t
                  (dyn
                    [core.future.future.Future.Trait; core.marker.Send.Trait])
                  alloc.boxed.Box.Default.A)) :=
        let* parts := M.alloc parts in
        let* _state := M.alloc _state in
        M.read foo.
      
      Global Instance AssociatedFunction_from_request_parts :
        Notations.DoubleColon Self "from_request_parts" := {
        Notations.double_colon := from_request_parts;
      }.
      
      Global Instance ℐ :
        axum_core.extract.FromRequestParts.Trait Self (S := S) := {
        axum_core.extract.FromRequestParts.Rejection := Rejection;
        axum_core.extract.FromRequestParts.from_request_parts :=
          from_request_parts;
      }.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_matched_path_MatchedPath_t.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_matched_path_MatchedPath_t.
    
    Module  MatchedNestedPath.
    Section MatchedNestedPath.
      Record t : Set := {
        x0 : alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End MatchedNestedPath.
    End MatchedNestedPath.
    
    Module  Impl_core_clone_Clone_for_axum_extract_matched_path_MatchedNestedPath_t.
    Section Impl_core_clone_Clone_for_axum_extract_matched_path_MatchedNestedPath_t.
      Definition Self : Set := axum.extract.matched_path.MatchedNestedPath.t.
      
      (*
      Clone
      *)
      Definition clone
          (self : ref Self)
          : M axum.extract.matched_path.MatchedNestedPath.t :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_axum_extract_matched_path_MatchedNestedPath_t.
    End Impl_core_clone_Clone_for_axum_extract_matched_path_MatchedNestedPath_t.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_matched_path_MatchedNestedPath_t.
    Section Impl_core_fmt_Debug_for_axum_extract_matched_path_MatchedNestedPath_t.
      Definition Self : Set := axum.extract.matched_path.MatchedNestedPath.t.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_matched_path_MatchedNestedPath_t.
    End Impl_core_fmt_Debug_for_axum_extract_matched_path_MatchedNestedPath_t.
    
    (*
    pub(crate) fn set_matched_path_for_request(
        id: RouteId,
        route_id_to_path: &HashMap<RouteId, Arc<str>>,
        extensions: &mut http::Extensions,
    ) {
        let matched_path = if let Some(matched_path) = route_id_to_path.get(&id) {
            matched_path
        } else {
            #[cfg(debug_assertions)]
            panic!("should always have a matched path for a route id");
            #[cfg(not(debug_assertions))]
            return;
        };
    
        let matched_path = append_nested_matched_path(matched_path, extensions);
    
        if matched_path.ends_with(NEST_TAIL_PARAM_CAPTURE) {
            extensions.insert(MatchedNestedPath(matched_path));
            debug_assert!(extensions.remove::<MatchedPath>().is_none());
        } else {
            extensions.insert(MatchedPath(matched_path));
            extensions.remove::<MatchedNestedPath>();
        }
    }
    *)
    Definition set_matched_path_for_request
        (id : axum.routing.RouteId.t)
        (route_id_to_path
          :
          ref
            (std.collections.hash.map.HashMap.t
              axum.routing.RouteId.t
              (alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A)
              std.collections.hash.map.HashMap.Default.S))
        (extensions : mut_ref http.extensions.Extensions.t)
        : M unit :=
      let* id := M.alloc id in
      let* route_id_to_path := M.alloc route_id_to_path in
      let* extensions := M.alloc extensions in
      M.read foo.
    
    (*
    fn append_nested_matched_path(matched_path: &Arc<str>, extensions: &http::Extensions) -> Arc<str> {
        if let Some(previous) = extensions
            .get::<MatchedPath>()
            .map(|matched_path| matched_path.as_str())
            .or_else(|| Some(&extensions.get::<MatchedNestedPath>()?.0))
        {
            let previous = previous
                .strip_suffix(NEST_TAIL_PARAM_CAPTURE)
                .unwrap_or(previous);
    
            let matched_path = format!("{previous}{matched_path}");
            matched_path.into()
        } else {
            Arc::clone(matched_path)
        }
    }
    *)
    Definition append_nested_matched_path
        (matched_path : ref (alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A))
        (extensions : ref http.extensions.Extensions.t)
        : M (alloc.sync.Arc.t str.t alloc.sync.Arc.Default.A) :=
      let* matched_path := M.alloc matched_path in
      let* extensions := M.alloc extensions in
      M.read foo.
  End matched_path.
  
  Module query.
    Module  Query.
    Section Query.
      Context {T : Set}.
      
      Record t : Set := {
        x0 : T;
      }.
      
      Definition Get_0 :=
        Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
    End Query.
    End Query.
    
    Module  Impl_core_fmt_Debug_for_axum_extract_query_Query_t_T.
    Section Impl_core_fmt_Debug_for_axum_extract_query_Query_t_T.
      Context {T : Set}.
      
      Context {ℋ_0 : core.fmt.Debug.Trait T}.
      
      Definition Self : Set := axum.extract.query.Query.t T.
      
      (*
      Debug
      *)
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter.t)
          : M ltac:(core.fmt.Result) :=
        let* self := M.alloc self in
        let* f := M.alloc f in
        M.read foo.
      
      Global Instance AssociatedFunction_fmt :
        Notations.DoubleColon Self "fmt" := {
        Notations.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_axum_extract_query_Query_t_T.
    End Impl_core_fmt_Debug_for_axum_extract_query_Query_t_T.
    
    Module  Impl_core_clone_Clone_for_axum_extract_query_Query_t_T.
    Section Impl_core_clone_Clone_for_axum_extract_query_Query_t_T.
      Context {T : Set}.
      
      Context {ℋ_0 : core.clone.Clone.Trait T}.
      
      Definition Self : Set := axum.extract.query.Query.t T.
      
      (*
      Clone
      *)
      Definition clone (self : ref Self) : M (axum.extract.query.Query.t T) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_axum_extract_query_Query_t_T.
    End Impl_core_clone_Clone_for_axum_extract_query_Query_t_T.
    
    Module  Impl_core_marker_Copy_for_axum_extract_query_Query_t_T.
    Section Impl_core_marker_Copy_for_axum_extract_query_Query_t_T.
      Context {T : Set}.
      
      Context {ℋ_0 : core.marker.Copy.Trait T}.
      
      Definition Self : Set := axum.extract.query.Query.t T.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_axum_extract_query_Query_t_T.
    End Impl_core_marker_Copy_for_axum_extract_query_Query_t_T.
    
    Module  Impl_core_default_Default_for_axum_extract_query_Query_t_T.
    Section Impl_core_default_Default_for_axum_extract_query_Query_t_T.
      Context {T : Set}.
      
      Context {ℋ_0 : core.default.Default.Trait T}.
      
      Definition Self : Set := axum.extract.query.Query.t T.
      
      (*
      Default
      *)
      Definition default : M (axum.extract.query.Query.t T) := M.read foo.
      
      Global Instance AssociatedFunction_default :
        Notations.DoubleColon Self "default" := {
        Notations.double_colon := default;
      }.
      
      Global Instance ℐ : core.default.Default.Trait Self := {
        core.default.Default.default := default;
      }.
    End Impl_core_default_Default_for_axum_extract_query_Query_t_T.
    End Impl_core_default_Default_for_axum_extract_query_Query_t_T.
    
    Module  Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_query_Query_t_T.
    Section Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_query_Query_t_T.
      Context {T S : Set}.
      
      Context
        {ℋ_0 : serde.de.DeserializeOwned.Trait T}
        {ℋ_1 : core.marker.Send.Trait S}
        {ℋ_2 : core.marker.Sync.Trait S}.
      
      Definition Self : Set := axum.extract.query.Query.t T.
      
      (*
          type Rejection = QueryRejection;
      *)
      Definition Rejection : Set := axum.extract.rejection.QueryRejection.t.
      
      (*
          async fn from_request_parts(parts: &mut Parts, _state: &S) -> Result<Self, Self::Rejection> {
              Self::try_from_uri(&parts.uri)
          }
      *)
      Definition from_request_parts
          (parts : mut_ref http.request.Parts.t)
          (_state : ref S)
          :
            M
              (core.pin.Pin.t
                (alloc.boxed.Box.t
                  (dyn
                    [core.future.future.Future.Trait; core.marker.Send.Trait])
                  alloc.boxed.Box.Default.A)) :=
        let* parts := M.alloc parts in
        let* _state := M.alloc _state in
        M.read foo.
      
      Global Instance AssociatedFunction_from_request_parts :
        Notations.DoubleColon Self "from_request_parts" := {
        Notations.double_colon := from_request_parts;
      }.
      
      Global Instance ℐ :
        axum_core.extract.FromRequestParts.Trait Self (S := S) := {
        axum_core.extract.FromRequestParts.Rejection := Rejection;
        axum_core.extract.FromRequestParts.from_request_parts :=
          from_request_parts;
      }.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_query_Query_t_T.
    End Impl_axum_core_extract_FromRequestParts_S_for_axum_extract_query_Query_t_T.
    
    Module  Impl_axum_extract_query_Query_t_T.
    Section Impl_axum_extract_query_Query_t_T.
      Context {T : Set}.
      
      Definition Self : Set := axum.extract.query.Query.t T.
      
      (*
          pub fn try_from_uri(value: &Uri) -> Result<Self, QueryRejection> {
              let query = value.query().unwrap_or_default();
              let params =
                  serde_urlencoded::from_str(query).map_err(FailedToDeserializeQueryString::from_err)?;
              Ok(Query(params))
          }
      *)
      Definition try_from_uri
          (value : ref http.uri.Uri.t)
          :
            M
              (core.result.Result.t
                Self
                axum.extract.rejection.QueryRejection.t) :=
        let* value := M.alloc value in
        M.read foo.
      
      Global Instance AssociatedFunction_try_from_uri :
        Notations.DoubleColon Self "try_from_uri" := {
        Notations.double_colon := try_from_uri;
      }.
    End Impl_axum_extract_query_Query_t_T.
    End Impl_axum_extract_query_Query_t_T.
    
    Module  Impl_core_ops_deref_Deref_for_axum_extract_query_Query_t_T.
    Section Impl_core_ops_deref_Deref_for_axum_extract_query_Query_t_T.
      Context {T : Set}.
      
      Definition Self : Set := axum.extract.query.Query.t T.
      
      (*
                  type Target = T;
      *)
      Definition Target : Set := T.
      
      (*
                  fn deref(&self) -> &Self::Target {
                      &self.0
                  }
      *)
      Definition deref (self : ref Self) : M (ref Target) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_deref :
        Notations.DoubleColon Self "deref" := {
        Notations.double_colon := deref;
      }.
      
      Global Instance ℐ : core.ops.deref.Deref.Trait Self := {
        core.ops.deref.Deref.Target := Target;
        core.ops.deref.Deref.deref := deref;
      }.
    End Impl_core_ops_deref_Deref_for_axum_extract_query_Query_t_T.
    End Impl_core_ops_deref_Deref_for_axum_extract_query_Query_t_T.
    
    Module  Impl_core_ops_deref_DerefMut_for_axum_extract_query_Query_t_T.
    Section Impl_core_ops_deref_DerefMut_for_axum_extract_query_Query_t_T.
      Context {T : Set}.
      
      Definition Self : Set := axum.extract.query.Query.t T.
      
      (*
                  fn deref_mut(&mut self) -> &mut Self::Target {
                      &mut self.0
                  }
      *)
      Definition deref_mut (self : mut_ref Self) : M (mut_ref Target) :=
        let* self := M.alloc self in
        M.read foo.
      
      Global Instance AssociatedFunction_deref_mut :
        Notations.DoubleColon Self "deref_mut" := {
        Notations.double_colon := deref_mut;
      }.
      
      Global Instance ℐ : core.ops.deref.DerefMut.Trait Self := {
        core.ops.deref.DerefMut.deref_mut := deref_mut;
      }.
    End Impl_core_ops_deref_DerefMut_for_axum_extract_query_Query_t_T.
    End Impl_core_ops_deref_DerefMut_for_axum_extract_query_Query_t_T.
  End query.
  
  (*
  pub(super) fn has_content_type(headers: &HeaderMap, expected_content_type: &mime::Mime) -> bool {
      let content_type = if let Some(content_type) = headers.get(header::CONTENT_TYPE) {
          content_type
      } else {
          return false;
      };
  
      let content_type = if let Ok(content_type) = content_type.to_str() {
          content_type
      } else {
          return false;
      };
  
      content_type.starts_with(expected_content_type.as_ref())
  }
  *)
  Definition has_content_type
      (headers
        :
        ref (http.header.map.HeaderMap.t http.header.map.HeaderMap.Default.T))
      (expected_content_type : ref mime.Mime.t)
      : M bool.t :=
    let* headers := M.alloc headers in
    let* expected_content_type := M.alloc expected_content_type in
    M.read foo.
End extract.

Module assistants.
  (*
  pub async fn create_assistant_handler(
      State(app_state): State<AppState>,
      Json(assistant): Json<Value>, // TODO https://github.com/64bit/async-openai/issues/166
  ) -> Result<JsonResponse<AssistantObject>, (StatusCode, String)> {
      let tools = assistant["tools"].as_array().unwrap_or(&vec![]).to_vec();
      let assistant = create_assistant(
          &app_state.pool,
          &Assistant {
              inner: AssistantObject {
                  id: Default::default(),
                  instructions: Some(assistant["instructions"].as_str().unwrap().to_string()),
                  name: Some(assistant["name"].as_str().unwrap().to_string()),
                  tools: match Tools::new(Some(tools)).to_tools() {
                      Ok(tools) => tools,
                      Err(e) => return Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
                  },
                  model: assistant["model"].as_str().unwrap().to_string(),
                  metadata: if let Some(object) = assistant["metadata"].as_object() {
                      // This serves to communicate the inconsistency with the OpenAI API's metadata value length limit
                      let mut temp_map = HashMap::new();
                      for (k, v) in object {
                          match v.as_str() {
                              Some(str_value) => {
                                  temp_map.insert(k.clone(), Value::String(str_value.to_string()));
                              },
                              None => {
                                  return Err((
                                      StatusCode::BAD_REQUEST,
                                      format!("Metadata value for key '{}' is not a string. All metadata values must be strings.", k)
                                  ));
                              },
                          }
                      }
                      Some(temp_map)
                  } else {
                      None
                  },
                  file_ids: if assistant["file_ids"].is_array() {
                      assistant["file_ids"]
                          .as_array()
                          .unwrap()
                          .iter()
                          .map(|file_id| file_id.as_str().unwrap().to_string())
                          .collect()
                  } else {
                      vec![]
                  },
                  object: Default::default(),
                  created_at: Default::default(),
                  description: Default::default(),
              },
              user_id: Uuid::default().to_string(),
          },
      )
      .await;
      match assistant {
          Ok(assistant) => Ok(JsonResponse(assistant.inner)),
          Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
      }
  }
  *)
  Definition create_assistant_handler
      (__arg0
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      (__arg1 : axum.json.Json.t serde_json.value.Value.t)
      : M OpaqueDef :=
    let __arg0 := M.alloc __arg0 in
    let __arg1 := M.alloc __arg1 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let α0 := M.alloc α0 in
        match_operator
          α0
          foo1) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.assistant.AssistantObject.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn get_assistant_handler(
      Path((assistant_id,)): Path<(String,)>,
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<AssistantObject>, (StatusCode, String)> {
      match get_assistant(&app_state.pool, &assistant_id, &Uuid::default().to_string()).await {
          Ok(assistant) => Ok(JsonResponse(assistant.inner)),
          Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
      }
  }
  *)
  Definition get_assistant_handler
      (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t
                        async_openai.types.assistant.AssistantObject.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_) =>
                          let γ1_0 := γ0_0 in
                          let* assistant_id := M.copy γ1_0 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* α0 : _ -> M _ :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.future.into_future.IntoFuture.into_future
                                        (Self := _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      (ref
                                          (alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t))
                                        ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self :=
                                          alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α2 :
                                      ref
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t) :=
                                    M.call
                                      (α1
                                        (borrow
                                          (assistants_api_communication.models.AppState.Get_pool
                                            app_state))) in
                                  let* α3 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α4 : ref str.t :=
                                    M.call (α3 (borrow assistant_id)) in
                                  let* α5 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α6 :
                                      (ref uuid.Uuid.t) ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      alloc.string.ToString.to_string
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α7 : M uuid.Uuid.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.default.Default.default
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α8 : uuid.Uuid.t := M.call α7 in
                                  let* α9 : M.Val uuid.Uuid.t := M.alloc α8 in
                                  let* α10 : alloc.string.String.t :=
                                    M.call (α6 (borrow α9)) in
                                  let* α11 : M.Val alloc.string.String.t :=
                                    M.alloc α10 in
                                  let* α12 : ref str.t :=
                                    M.call (α5 (borrow α11)) in
                                  let* α13 : _ :=
                                    M.call
                                      (assistants_core.assistants.get_assistant
                                        α2
                                        α4
                                        α12) in
                                  let* α14 : _ := M.call (α0 α13) in
                                  let* α15 : M.Val _ := M.alloc α14 in
                                  let* α16 :
                                      M.Val
                                        (core.result.Result.t
                                          assistants_core.models.Assistant.t
                                          sqlx_core.error.Error.t) :=
                                    match_operator
                                      α15
                                      [
                                        fun γ =>
                                          (let* __awaitee := M.copy γ in
                                          M.loop
                                            (let* _ : M.Val unit :=
                                              let* α0 :
                                                  (core.pin.Pin.t (mut_ref _))
                                                    ->
                                                    (mut_ref
                                                      core.task.wake.Context.t)
                                                    ->
                                                    M
                                                      (core.task.poll.Poll.t
                                                        _) :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.future.future.Future.poll
                                                    (Self := _)
                                                    (Trait := ℐ))) in
                                              let* α1 :
                                                  core.pin.Pin.t (mut_ref _) :=
                                                M.call
                                                  ((core.pin.Pin.t
                                                        (mut_ref
                                                          _))::["new_unchecked"]
                                                    (borrow_mut __awaitee)) in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read _task_context in
                                              let* α3 :
                                                  mut_ref
                                                    core.task.wake.Context.t :=
                                                M.call
                                                  (core.future.get_context
                                                    α2) in
                                              let* α4 :
                                                  core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      assistants_core.models.Assistant.t
                                                      sqlx_core.error.Error.t) :=
                                                M.call (α0 α1 α3) in
                                              let* α5 :
                                                  M.Val
                                                    (core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        assistants_core.models.Assistant.t
                                                        sqlx_core.error.Error.t)) :=
                                                M.alloc α4 in
                                              match_operator
                                                α5
                                                [
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Ready
                                                          _
                                                        =>
                                                      let γ0_0 :=
                                                        core.task.poll.Poll.Get_Ready_0
                                                          γ in
                                                      let* result :=
                                                        M.copy γ0_0 in
                                                      let* α0 : M.Val never.t :=
                                                        M.break in
                                                      let* α1 := M.read α0 in
                                                      let* α2 : unit :=
                                                        never_to_any α1 in
                                                      M.alloc α2
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit);
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Pending
                                                        =>
                                                      M.alloc tt
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit)
                                                ] in
                                            let* _ : M.Val unit :=
                                              let* α0 : M.Val unit :=
                                                M.alloc tt in
                                              let* α1 :
                                                  M.Val
                                                    core.future.ResumeTy.t :=
                                                yield α0 in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read α1 in
                                              assign _task_context α2 in
                                            M.alloc tt)) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                assistants_core.models.Assistant.t
                                                sqlx_core.error.Error.t))
                                      ] in
                                  let* α17 :
                                      M.Val
                                        (core.result.Result.t
                                          (axum.json.Json.t
                                            async_openai.types.assistant.AssistantObject.t)
                                          (http.status.StatusCode.t
                                          *
                                          alloc.string.String.t)) :=
                                    match_operator
                                      α16
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Ok _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Ok_0 γ in
                                            let* assistant := M.copy γ0_0 in
                                            let* α0 :
                                                async_openai.types.assistant.AssistantObject.t :=
                                              M.read
                                                (assistants_core.models.Assistant.Get_inner
                                                  assistant) in
                                            M.alloc
                                              (core.result.Result.Ok
                                                (axum.json.Json.Build_t α0))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.assistant.AssistantObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)));
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Err _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Err_0 γ in
                                            let* e := M.copy γ0_0 in
                                            let* α0 :
                                                http.status.StatusCode.t :=
                                              M.read
                                                http.status.INTERNAL_SERVER_ERROR in
                                            let* α1 :
                                                (ref sqlx_core.error.Error.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self :=
                                                    sqlx_core.error.Error.t)
                                                  (Trait := ℐ))) in
                                            let* α2 : alloc.string.String.t :=
                                              M.call (α1 (borrow e)) in
                                            M.alloc
                                              (core.result.Result.Err (α0, α2))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.assistant.AssistantObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)))
                                      ] in
                                  M.pure (use α17)
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.assistant.AssistantObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.assistant.AssistantObject.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t
                    async_openai.types.assistant.AssistantObject.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.assistant.AssistantObject.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn update_assistant_handler(
      Path((assistant_id,)): Path<(String,)>,
      State(app_state): State<AppState>,
      Json(assistant): Json<ModifyAssistantRequest>, // TODO: either eliminate dependance on crates or custom types for similar objects. This and the create_assistant_handler are unecessarily different as a result.
  ) -> Result<JsonResponse<AssistantObject>, (StatusCode, String)> {
      match update_assistant(
          &app_state.pool,
          &assistant_id,
          &Assistant {
              inner: AssistantObject {
                  id: Default::default(),
                  instructions: assistant.instructions,
                  name: assistant.name,
                  tools: assistant
                      .tools
                      .map(|tools| tools.into_iter().map(|tool| tool.into()).collect())
                      .unwrap_or(vec![]),
                  model: assistant.model.unwrap_or("".to_string()), // TODO dirty?
                  metadata: if let Some(object) = &assistant.metadata {
                      let mut temp_map = HashMap::new();
                      for (k, v) in object {
                          match v.as_str() {
                              Some(str_value) => {
                                  temp_map.insert(k.clone(), Value::String(str_value.to_string()));
                              },
                              None => {
                                  return Err((
                                      StatusCode::BAD_REQUEST,
                                      format!("Metadata value for key '{}' is not a string. All metadata values must be strings.", k)
                                  ));
                              },
                          }
                      }
                      Some(temp_map)
                  } else {
                      None
                  },
                  file_ids: assistant.file_ids.unwrap_or(vec![]),
                  object: Default::default(),
                  created_at: Default::default(),
                  description: Default::default(),
              },
              user_id: Uuid::default().to_string(),
          },
      )
      .await
      {
          Ok(assistant) => Ok(JsonResponse(assistant.inner)),
          Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
      }
  }
  *)
  Definition update_assistant_handler
      (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      (__arg2
        :
        axum.json.Json.t async_openai.types.assistant.ModifyAssistantRequest.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    let* __arg2 := M.alloc __arg2 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t
                        async_openai.types.assistant.AssistantObject.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_) =>
                          let γ1_0 := γ0_0 in
                          let* assistant_id := M.copy γ1_0 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* __arg2 :
                                      M.Val
                                        (axum.json.Json.t
                                          async_openai.types.assistant.ModifyAssistantRequest.t) :=
                                    M.copy __arg2 in
                                  match_operator
                                    __arg2
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | axum.json.Json.Build_t _ =>
                                          let γ0_0 := axum.json.Json.Get_0 γ in
                                          let* assistant := M.copy γ0_0 in
                                          let* α0 : _ -> M _ :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.future.into_future.IntoFuture.into_future
                                                (Self := _)
                                                (Trait := ℐ))) in
                                          let* α1 :
                                              (ref
                                                  (alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t))
                                                ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self :=
                                                  alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α2 :
                                              ref
                                                (sqlx_core.pool.Pool.t
                                                  sqlx_postgres.database.Postgres.t) :=
                                            M.call
                                              (α1
                                                (borrow
                                                  (assistants_api_communication.models.AppState.Get_pool
                                                    app_state))) in
                                          let* α3 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α4 : ref str.t :=
                                            M.call (α3 (borrow assistant_id)) in
                                          let* α5 : M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.default.Default.default
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α6 : alloc.string.String.t :=
                                            M.call α5 in
                                          let* α7 :
                                              core.option.Option.t
                                                alloc.string.String.t :=
                                            M.read
                                              (async_openai.types.assistant.ModifyAssistantRequest.Get_instructions
                                                assistant) in
                                          let* α8 :
                                              core.option.Option.t
                                                alloc.string.String.t :=
                                            M.read
                                              (async_openai.types.assistant.ModifyAssistantRequest.Get_name
                                                assistant) in
                                          let* α9 :
                                              core.option.Option.t
                                                (alloc.vec.Vec.t
                                                  async_openai.types.assistant.AssistantTools.t
                                                  alloc.alloc.Global.t) :=
                                            M.read
                                              (async_openai.types.assistant.ModifyAssistantRequest.Get_tools
                                                assistant) in
                                          let* α10 :
                                              core.option.Option.t
                                                (alloc.vec.Vec.t
                                                  async_openai.types.assistant.AssistantTools.t
                                                  alloc.alloc.Global.t) :=
                                            M.call
                                              ((core.option.Option.t
                                                    (alloc.vec.Vec.t
                                                      async_openai.types.assistant.AssistantTools.t
                                                      alloc.alloc.Global.t))::["map"]
                                                α9
                                                (fun
                                                    (α0 :
                                                      alloc.vec.Vec.t
                                                        async_openai.types.assistant.AssistantTools.t
                                                        alloc.alloc.Global.t) =>
                                                  (let* α0 := M.alloc α0 in
                                                  match_operator
                                                    α0
                                                    [
                                                      fun γ =>
                                                        (let* tools :=
                                                          M.copy γ in
                                                        let* α0 :
                                                            (core.iter.adapters.map.Map.t
                                                                (alloc.vec.into_iter.IntoIter.t
                                                                  async_openai.types.assistant.AssistantTools.t
                                                                  alloc.alloc.Global.t)
                                                                (async_openai.types.assistant.AssistantTools.t
                                                                  ->
                                                                  M
                                                                    async_openai.types.assistant.AssistantTools.t))
                                                              ->
                                                              M
                                                                (alloc.vec.Vec.t
                                                                  async_openai.types.assistant.AssistantTools.t
                                                                  alloc.alloc.Global.t) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.iter.traits.iterator.Iterator.collect
                                                              (Self :=
                                                                core.iter.adapters.map.Map.t
                                                                  (alloc.vec.into_iter.IntoIter.t
                                                                    async_openai.types.assistant.AssistantTools.t
                                                                    alloc.alloc.Global.t)
                                                                  (async_openai.types.assistant.AssistantTools.t
                                                                    ->
                                                                    M
                                                                      async_openai.types.assistant.AssistantTools.t))
                                                              (B :=
                                                                alloc.vec.Vec.t
                                                                  async_openai.types.assistant.AssistantTools.t
                                                                  alloc.alloc.Global.t)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            (alloc.vec.into_iter.IntoIter.t
                                                                async_openai.types.assistant.AssistantTools.t
                                                                alloc.alloc.Global.t)
                                                              ->
                                                              (async_openai.types.assistant.AssistantTools.t
                                                                ->
                                                                M
                                                                  async_openai.types.assistant.AssistantTools.t)
                                                              ->
                                                              M
                                                                (core.iter.adapters.map.Map.t
                                                                  (alloc.vec.into_iter.IntoIter.t
                                                                    async_openai.types.assistant.AssistantTools.t
                                                                    alloc.alloc.Global.t)
                                                                  (async_openai.types.assistant.AssistantTools.t
                                                                    ->
                                                                    M
                                                                      async_openai.types.assistant.AssistantTools.t)) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.iter.traits.iterator.Iterator.map
                                                              (Self :=
                                                                alloc.vec.into_iter.IntoIter.t
                                                                  async_openai.types.assistant.AssistantTools.t
                                                                  alloc.alloc.Global.t)
                                                              (B :=
                                                                async_openai.types.assistant.AssistantTools.t)
                                                              (F :=
                                                                async_openai.types.assistant.AssistantTools.t
                                                                  ->
                                                                  M
                                                                    async_openai.types.assistant.AssistantTools.t)
                                                              (Trait := ℐ))) in
                                                        let* α2 :
                                                            (alloc.vec.Vec.t
                                                                async_openai.types.assistant.AssistantTools.t
                                                                alloc.alloc.Global.t)
                                                              ->
                                                              M _ :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.iter.traits.collect.IntoIterator.into_iter
                                                              (Self :=
                                                                alloc.vec.Vec.t
                                                                  async_openai.types.assistant.AssistantTools.t
                                                                  alloc.alloc.Global.t)
                                                              (Trait := ℐ))) in
                                                        let* α3 :
                                                            alloc.vec.Vec.t
                                                              async_openai.types.assistant.AssistantTools.t
                                                              alloc.alloc.Global.t :=
                                                          M.read tools in
                                                        let* α4 :
                                                            alloc.vec.into_iter.IntoIter.t
                                                              async_openai.types.assistant.AssistantTools.t
                                                              alloc.alloc.Global.t :=
                                                          M.call (α2 α3) in
                                                        let* α5 :
                                                            core.iter.adapters.map.Map.t
                                                              (alloc.vec.into_iter.IntoIter.t
                                                                async_openai.types.assistant.AssistantTools.t
                                                                alloc.alloc.Global.t)
                                                              (async_openai.types.assistant.AssistantTools.t
                                                                ->
                                                                M
                                                                  async_openai.types.assistant.AssistantTools.t) :=
                                                          M.call
                                                            (α1
                                                              α4
                                                              (fun
                                                                  (α0 :
                                                                    async_openai.types.assistant.AssistantTools.t) =>
                                                                (let* α0 :=
                                                                  M.alloc α0 in
                                                                match_operator
                                                                  α0
                                                                  [
                                                                    fun γ =>
                                                                      (let*
                                                                            tool :=
                                                                        M.copy
                                                                          γ in
                                                                      let* α0 :
                                                                          async_openai.types.assistant.AssistantTools.t
                                                                            ->
                                                                            M
                                                                              async_openai.types.assistant.AssistantTools.t :=
                                                                        ltac:(M.get_method (fun ℐ =>
                                                                          core.convert.Into.into
                                                                            (Self :=
                                                                              async_openai.types.assistant.AssistantTools.t)
                                                                            (T :=
                                                                              async_openai.types.assistant.AssistantTools.t)
                                                                            (Trait := ℐ))) in
                                                                      let* α1 :
                                                                          async_openai.types.assistant.AssistantTools.t :=
                                                                        M.read
                                                                          tool in
                                                                      M.call
                                                                        (α0
                                                                          α1)) :
                                                                      M
                                                                        async_openai.types.assistant.AssistantTools.t
                                                                  ]) :
                                                                M
                                                                  async_openai.types.assistant.AssistantTools.t)) in
                                                        M.call (α0 α5)) :
                                                        M
                                                          (alloc.vec.Vec.t
                                                            async_openai.types.assistant.AssistantTools.t
                                                            alloc.alloc.Global.t)
                                                    ]) :
                                                  M
                                                    (alloc.vec.Vec.t
                                                      async_openai.types.assistant.AssistantTools.t
                                                      alloc.alloc.Global.t))) in
                                          let* α11 :
                                              alloc.vec.Vec.t
                                                async_openai.types.assistant.AssistantTools.t
                                                alloc.alloc.Global.t :=
                                            M.call
                                              (alloc.vec.Vec.t
                                                  async_openai.types.assistant.AssistantTools.t
                                                  alloc.alloc.Global.t)::["new"] in
                                          let* α12 :
                                              alloc.vec.Vec.t
                                                async_openai.types.assistant.AssistantTools.t
                                                alloc.alloc.Global.t :=
                                            M.call
                                              ((core.option.Option.t
                                                    (alloc.vec.Vec.t
                                                      async_openai.types.assistant.AssistantTools.t
                                                      alloc.alloc.Global.t))::["unwrap_or"]
                                                α10
                                                α11) in
                                          let* α13 :
                                              core.option.Option.t
                                                alloc.string.String.t :=
                                            M.read
                                              (async_openai.types.assistant.ModifyAssistantRequest.Get_model
                                                assistant) in
                                          let* α14 :
                                              (ref str.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := str.t)
                                                (Trait := ℐ))) in
                                          let* α15 : ref str.t :=
                                            M.read (mk_str "") in
                                          let* α16 : alloc.string.String.t :=
                                            M.call (α14 α15) in
                                          let* α17 : alloc.string.String.t :=
                                            M.call
                                              ((core.option.Option.t
                                                    alloc.string.String.t)::["unwrap_or"]
                                                α13
                                                α16) in
                                          let* α18 :
                                              M.Val
                                                (ref
                                                  (core.option.Option.t
                                                    (std.collections.hash.map.HashMap.t
                                                      alloc.string.String.t
                                                      serde_json.value.Value.t
                                                      std.hash.random.RandomState.t))) :=
                                            M.alloc
                                              (borrow
                                                (async_openai.types.assistant.ModifyAssistantRequest.Get_metadata
                                                  assistant)) in
                                          let* α19 :
                                              M.Val
                                                (core.option.Option.t
                                                  (std.collections.hash.map.HashMap.t
                                                    alloc.string.String.t
                                                    serde_json.value.Value.t
                                                    std.hash.random.RandomState.t)) :=
                                            match_operator
                                              α18
                                              [
                                                fun γ =>
                                                  (let* γ :=
                                                    let* α0 := M.read γ in
                                                    M.pure (deref α0) in
                                                  let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.option.Option.Some _ =>
                                                    let γ1_0 :=
                                                      core.option.Option.Get_Some_0
                                                        γ in
                                                    let* object :=
                                                      M.alloc (borrow γ1_0) in
                                                    let* temp_map :
                                                        M.Val
                                                          (std.collections.hash.map.HashMap.t
                                                            alloc.string.String.t
                                                            serde_json.value.Value.t
                                                            std.hash.random.RandomState.t) :=
                                                      let* α0 :
                                                          std.collections.hash.map.HashMap.t
                                                            alloc.string.String.t
                                                            serde_json.value.Value.t
                                                            std.hash.random.RandomState.t :=
                                                        M.call
                                                          (std.collections.hash.map.HashMap.t
                                                              alloc.string.String.t
                                                              serde_json.value.Value.t
                                                              std.hash.random.RandomState.t)::["new"] in
                                                      M.alloc α0 in
                                                    let* _ : M.Val unit :=
                                                      let* α0 :
                                                          (ref
                                                              (std.collections.hash.map.HashMap.t
                                                                alloc.string.String.t
                                                                serde_json.value.Value.t
                                                                std.hash.random.RandomState.t))
                                                            ->
                                                            M _ :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.iter.traits.collect.IntoIterator.into_iter
                                                            (Self :=
                                                              ref
                                                                (std.collections.hash.map.HashMap.t
                                                                  alloc.string.String.t
                                                                  serde_json.value.Value.t
                                                                  std.hash.random.RandomState.t))
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          ref
                                                            (std.collections.hash.map.HashMap.t
                                                              alloc.string.String.t
                                                              serde_json.value.Value.t
                                                              std.hash.random.RandomState.t) :=
                                                        M.read object in
                                                      let* α2 :
                                                          std.collections.hash.map.Iter.t
                                                            alloc.string.String.t
                                                            serde_json.value.Value.t :=
                                                        M.call (α0 α1) in
                                                      let* α3 :
                                                          M.Val
                                                            (std.collections.hash.map.Iter.t
                                                              alloc.string.String.t
                                                              serde_json.value.Value.t) :=
                                                        M.alloc α2 in
                                                      let* α4 : M.Val unit :=
                                                        match_operator
                                                          α3
                                                          [
                                                            fun γ =>
                                                              (let* iter :=
                                                                M.copy γ in
                                                              M.loop
                                                                (let* _ :
                                                                    M.Val
                                                                      unit :=
                                                                  let* α0 :
                                                                      (mut_ref
                                                                          (std.collections.hash.map.Iter.t
                                                                            alloc.string.String.t
                                                                            serde_json.value.Value.t))
                                                                        ->
                                                                        M
                                                                          (core.option.Option.t
                                                                            _) :=
                                                                    ltac:(M.get_method (fun ℐ =>
                                                                      core.iter.traits.iterator.Iterator.next
                                                                        (Self :=
                                                                          std.collections.hash.map.Iter.t
                                                                            alloc.string.String.t
                                                                            serde_json.value.Value.t)
                                                                        (Trait := ℐ))) in
                                                                  let* α1 :
                                                                      core.option.Option.t
                                                                        ((ref
                                                                          alloc.string.String.t)
                                                                        *
                                                                        (ref
                                                                          serde_json.value.Value.t)) :=
                                                                    M.call
                                                                      (α0
                                                                        (borrow_mut
                                                                          iter)) in
                                                                  let* α2 :
                                                                      M.Val
                                                                        (core.option.Option.t
                                                                          ((ref
                                                                            alloc.string.String.t)
                                                                          *
                                                                          (ref
                                                                            serde_json.value.Value.t))) :=
                                                                    M.alloc
                                                                      α1 in
                                                                  match_operator
                                                                    α2
                                                                    [
                                                                      fun γ =>
                                                                        (let*
                                                                              α0 :=
                                                                          M.read
                                                                            γ in
                                                                        match α0
                                                                        with
                                                                        |
                                                                            core.option.Option.None
                                                                            =>
                                                                          let*
                                                                                α0 :
                                                                              M.Val
                                                                                never.t :=
                                                                            M.break in
                                                                          let*
                                                                                α1 :=
                                                                            M.read
                                                                              α0 in
                                                                          let*
                                                                                α2 :
                                                                              unit :=
                                                                            never_to_any
                                                                              α1 in
                                                                          M.alloc
                                                                            α2
                                                                        | _ =>
                                                                          M.break_match
                                                                        end) :
                                                                        M
                                                                          (M.Val
                                                                            unit);
                                                                      fun γ =>
                                                                        (let*
                                                                              α0 :=
                                                                          M.read
                                                                            γ in
                                                                        match α0
                                                                        with
                                                                        |
                                                                            core.option.Option.Some
                                                                              _
                                                                            =>
                                                                          let
                                                                                γ0_0 :=
                                                                            core.option.Option.Get_Some_0
                                                                              γ in
                                                                          let*
                                                                                α0 :=
                                                                            M.read
                                                                              γ0_0 in
                                                                          match
                                                                            α0
                                                                          with
                                                                          |
                                                                              (_,
                                                                                _)
                                                                              =>
                                                                            let
                                                                                  γ1_0 :=
                                                                              Tuple.Access.left
                                                                                γ0_0 in
                                                                            let
                                                                                  γ1_1 :=
                                                                              Tuple.Access.right
                                                                                γ0_0 in
                                                                            let*
                                                                                  k :=
                                                                              M.copy
                                                                                γ1_0 in
                                                                            let*
                                                                                  v :=
                                                                              M.copy
                                                                                γ1_1 in
                                                                            let*
                                                                                  α0 :
                                                                                ref
                                                                                  serde_json.value.Value.t :=
                                                                              M.read
                                                                                v in
                                                                            let*
                                                                                  α1 :
                                                                                core.option.Option.t
                                                                                  (ref
                                                                                    str.t) :=
                                                                              M.call
                                                                                (serde_json.value.Value.t::["as_str"]
                                                                                  α0) in
                                                                            let*
                                                                                  α2 :
                                                                                M.Val
                                                                                  (core.option.Option.t
                                                                                    (ref
                                                                                      str.t)) :=
                                                                              M.alloc
                                                                                α1 in
                                                                            match_operator
                                                                              α2
                                                                              [
                                                                                fun
                                                                                    γ =>
                                                                                  (let*
                                                                                        α0 :=
                                                                                    M.read
                                                                                      γ in
                                                                                  match
                                                                                    α0
                                                                                  with
                                                                                  |
                                                                                      core.option.Option.Some
                                                                                        _
                                                                                      =>
                                                                                    let
                                                                                          γ0_0 :=
                                                                                      core.option.Option.Get_Some_0
                                                                                        γ in
                                                                                    let*
                                                                                          str_value :=
                                                                                      M.copy
                                                                                        γ0_0 in
                                                                                    let*
                                                                                          _ :
                                                                                        M.Val
                                                                                          (core.option.Option.t
                                                                                            serde_json.value.Value.t) :=
                                                                                      let*
                                                                                            α0 :
                                                                                          (ref
                                                                                              alloc.string.String.t)
                                                                                            ->
                                                                                            M
                                                                                              alloc.string.String.t :=
                                                                                        ltac:(M.get_method (fun ℐ =>
                                                                                          core.clone.Clone.clone
                                                                                            (Self :=
                                                                                              alloc.string.String.t)
                                                                                            (Trait := ℐ))) in
                                                                                      let*
                                                                                            α1 :
                                                                                          ref
                                                                                            alloc.string.String.t :=
                                                                                        M.read
                                                                                          k in
                                                                                      let*
                                                                                            α2 :
                                                                                          alloc.string.String.t :=
                                                                                        M.call
                                                                                          (α0
                                                                                            α1) in
                                                                                      let*
                                                                                            α3 :
                                                                                          (ref
                                                                                              str.t)
                                                                                            ->
                                                                                            M
                                                                                              alloc.string.String.t :=
                                                                                        ltac:(M.get_method (fun ℐ =>
                                                                                          alloc.string.ToString.to_string
                                                                                            (Self :=
                                                                                              str.t)
                                                                                            (Trait := ℐ))) in
                                                                                      let*
                                                                                            α4 :
                                                                                          ref
                                                                                            str.t :=
                                                                                        M.read
                                                                                          str_value in
                                                                                      let*
                                                                                            α5 :
                                                                                          alloc.string.String.t :=
                                                                                        M.call
                                                                                          (α3
                                                                                            α4) in
                                                                                      let*
                                                                                            α6 :
                                                                                          core.option.Option.t
                                                                                            serde_json.value.Value.t :=
                                                                                        M.call
                                                                                          ((std.collections.hash.map.HashMap.t
                                                                                                alloc.string.String.t
                                                                                                serde_json.value.Value.t
                                                                                                std.hash.random.RandomState.t)::["insert"]
                                                                                            (borrow_mut
                                                                                              temp_map)
                                                                                            α2
                                                                                            (serde_json.value.Value.String
                                                                                              α5)) in
                                                                                      M.alloc
                                                                                        α6 in
                                                                                    M.alloc
                                                                                      tt
                                                                                  |
                                                                                      _
                                                                                      =>
                                                                                    M.break_match
                                                                                  end) :
                                                                                  M
                                                                                    (M.Val
                                                                                      unit);
                                                                                fun
                                                                                    γ =>
                                                                                  (let*
                                                                                        α0 :=
                                                                                    M.read
                                                                                      γ in
                                                                                  match
                                                                                    α0
                                                                                  with
                                                                                  |
                                                                                      core.option.Option.None
                                                                                      =>
                                                                                    let*
                                                                                          α0 :
                                                                                        http.status.StatusCode.t :=
                                                                                      M.read
                                                                                        http.status.BAD_REQUEST in
                                                                                    let*
                                                                                          res :
                                                                                        M.Val
                                                                                          alloc.string.String.t :=
                                                                                      let*
                                                                                            α0 :
                                                                                          ref
                                                                                            str.t :=
                                                                                        M.read
                                                                                          (mk_str
                                                                                            "Metadata value for key '") in
                                                                                      let*
                                                                                            α1 :
                                                                                          ref
                                                                                            str.t :=
                                                                                        M.read
                                                                                          (mk_str
                                                                                            "' is not a string. All metadata values must be strings.") in
                                                                                      let*
                                                                                            α2 :
                                                                                          M.Val
                                                                                            (array
                                                                                              (ref
                                                                                                str.t)) :=
                                                                                        M.alloc
                                                                                          [
                                                                                            α0;
                                                                                            α1
                                                                                          ] in
                                                                                      let*
                                                                                            α3 :
                                                                                          core.fmt.rt.Argument.t :=
                                                                                        M.call
                                                                                          (core.fmt.rt.Argument.t::["new_display"]
                                                                                            (borrow
                                                                                              k)) in
                                                                                      let*
                                                                                            α4 :
                                                                                          M.Val
                                                                                            (array
                                                                                              core.fmt.rt.Argument.t) :=
                                                                                        M.alloc
                                                                                          [
                                                                                            α3
                                                                                          ] in
                                                                                      let*
                                                                                            α5 :
                                                                                          core.fmt.Arguments.t :=
                                                                                        M.call
                                                                                          (core.fmt.Arguments.t::["new_v1"]
                                                                                            (pointer_coercion
                                                                                              "Unsize"
                                                                                              (borrow
                                                                                                α2))
                                                                                            (pointer_coercion
                                                                                              "Unsize"
                                                                                              (borrow
                                                                                                α4))) in
                                                                                      let*
                                                                                            α6 :
                                                                                          alloc.string.String.t :=
                                                                                        M.call
                                                                                          (alloc.fmt.format
                                                                                            α5) in
                                                                                      M.alloc
                                                                                        α6 in
                                                                                    let*
                                                                                          α1 :
                                                                                        alloc.string.String.t :=
                                                                                      M.read
                                                                                        res in
                                                                                    let*
                                                                                          α2 :
                                                                                        M.Val
                                                                                          never.t :=
                                                                                      return_
                                                                                        (core.result.Result.Err
                                                                                          (α0,
                                                                                            α1)) in
                                                                                    let*
                                                                                          α3 :=
                                                                                      M.read
                                                                                        α2 in
                                                                                    let*
                                                                                          α4 :
                                                                                        unit :=
                                                                                      never_to_any
                                                                                        α3 in
                                                                                    M.alloc
                                                                                      α4
                                                                                  |
                                                                                      _
                                                                                      =>
                                                                                    M.break_match
                                                                                  end) :
                                                                                  M
                                                                                    (M.Val
                                                                                      unit)
                                                                              ]
                                                                          end
                                                                        | _ =>
                                                                          M.break_match
                                                                        end) :
                                                                        M
                                                                          (M.Val
                                                                            unit)
                                                                    ] in
                                                                M.alloc tt)) :
                                                              M (M.Val unit)
                                                          ] in
                                                      M.pure (use α4) in
                                                    let* α0 :
                                                        std.collections.hash.map.HashMap.t
                                                          alloc.string.String.t
                                                          serde_json.value.Value.t
                                                          std.hash.random.RandomState.t :=
                                                      M.read temp_map in
                                                    M.alloc
                                                      (core.option.Option.Some
                                                        α0)
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.option.Option.t
                                                        (std.collections.hash.map.HashMap.t
                                                          alloc.string.String.t
                                                          serde_json.value.Value.t
                                                          std.hash.random.RandomState.t)));
                                                fun γ =>
                                                  (M.alloc
                                                    core.option.Option.None) :
                                                  M
                                                    (M.Val
                                                      (core.option.Option.t
                                                        (std.collections.hash.map.HashMap.t
                                                          alloc.string.String.t
                                                          serde_json.value.Value.t
                                                          std.hash.random.RandomState.t)))
                                              ] in
                                          let* α20 :
                                              core.option.Option.t
                                                (std.collections.hash.map.HashMap.t
                                                  alloc.string.String.t
                                                  serde_json.value.Value.t
                                                  std.hash.random.RandomState.t) :=
                                            M.read α19 in
                                          let* α21 :
                                              core.option.Option.t
                                                (alloc.vec.Vec.t
                                                  alloc.string.String.t
                                                  alloc.alloc.Global.t) :=
                                            M.read
                                              (async_openai.types.assistant.ModifyAssistantRequest.Get_file_ids
                                                assistant) in
                                          let* α22 :
                                              alloc.vec.Vec.t
                                                alloc.string.String.t
                                                alloc.alloc.Global.t :=
                                            M.call
                                              (alloc.vec.Vec.t
                                                  alloc.string.String.t
                                                  alloc.alloc.Global.t)::["new"] in
                                          let* α23 :
                                              alloc.vec.Vec.t
                                                alloc.string.String.t
                                                alloc.alloc.Global.t :=
                                            M.call
                                              ((core.option.Option.t
                                                    (alloc.vec.Vec.t
                                                      alloc.string.String.t
                                                      alloc.alloc.Global.t))::["unwrap_or"]
                                                α21
                                                α22) in
                                          let* α24 : M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.default.Default.default
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α25 : alloc.string.String.t :=
                                            M.call α24 in
                                          let* α26 : M i32.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.default.Default.default
                                                (Self := i32.t)
                                                (Trait := ℐ))) in
                                          let* α27 : i32.t := M.call α26 in
                                          let* α28 :
                                              M
                                                (core.option.Option.t
                                                  alloc.string.String.t) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.default.Default.default
                                                (Self :=
                                                  core.option.Option.t
                                                    alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α29 :
                                              core.option.Option.t
                                                alloc.string.String.t :=
                                            M.call α28 in
                                          let* α30 :
                                              (ref uuid.Uuid.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α31 : M uuid.Uuid.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.default.Default.default
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α32 : uuid.Uuid.t :=
                                            M.call α31 in
                                          let* α33 : M.Val uuid.Uuid.t :=
                                            M.alloc α32 in
                                          let* α34 : alloc.string.String.t :=
                                            M.call (α30 (borrow α33)) in
                                          let* α35 :
                                              M.Val
                                                assistants_core.models.Assistant.t :=
                                            M.alloc
                                              {|
                                                assistants_core.models.Assistant.inner :=
                                                  {|
                                                    async_openai.types.assistant.AssistantObject.id :=
                                                      α6;
                                                    async_openai.types.assistant.AssistantObject.instructions :=
                                                      α7;
                                                    async_openai.types.assistant.AssistantObject.name :=
                                                      α8;
                                                    async_openai.types.assistant.AssistantObject.tools :=
                                                      α12;
                                                    async_openai.types.assistant.AssistantObject.model :=
                                                      α17;
                                                    async_openai.types.assistant.AssistantObject.metadata :=
                                                      α20;
                                                    async_openai.types.assistant.AssistantObject.file_ids :=
                                                      α23;
                                                    async_openai.types.assistant.AssistantObject.object :=
                                                      α25;
                                                    async_openai.types.assistant.AssistantObject.created_at :=
                                                      α27;
                                                    async_openai.types.assistant.AssistantObject.description :=
                                                      α29;
                                                  |};
                                                assistants_core.models.Assistant.user_id :=
                                                  α34;
                                              |} in
                                          let* α36 : _ :=
                                            M.call
                                              (assistants_core.assistants.update_assistant
                                                α2
                                                α4
                                                (borrow α35)) in
                                          let* α37 : _ := M.call (α0 α36) in
                                          let* α38 : M.Val _ := M.alloc α37 in
                                          let* α39 :
                                              M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Assistant.t
                                                  sqlx_core.error.Error.t) :=
                                            match_operator
                                              α38
                                              [
                                                fun γ =>
                                                  (let* __awaitee := M.copy γ in
                                                  M.loop
                                                    (let* _ : M.Val unit :=
                                                      let* α0 :
                                                          (core.pin.Pin.t
                                                              (mut_ref _))
                                                            ->
                                                            (mut_ref
                                                              core.task.wake.Context.t)
                                                            ->
                                                            M
                                                              (core.task.poll.Poll.t
                                                                _) :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.future.future.Future.poll
                                                            (Self := _)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          core.pin.Pin.t
                                                            (mut_ref _) :=
                                                        M.call
                                                          ((core.pin.Pin.t
                                                                (mut_ref
                                                                  _))::["new_unchecked"]
                                                            (borrow_mut
                                                              __awaitee)) in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read _task_context in
                                                      let* α3 :
                                                          mut_ref
                                                            core.task.wake.Context.t :=
                                                        M.call
                                                          (core.future.get_context
                                                            α2) in
                                                      let* α4 :
                                                          core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              assistants_core.models.Assistant.t
                                                              sqlx_core.error.Error.t) :=
                                                        M.call (α0 α1 α3) in
                                                      let* α5 :
                                                          M.Val
                                                            (core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                assistants_core.models.Assistant.t
                                                                sqlx_core.error.Error.t)) :=
                                                        M.alloc α4 in
                                                      match_operator
                                                        α5
                                                        [
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Ready
                                                                  _
                                                                =>
                                                              let γ0_0 :=
                                                                core.task.poll.Poll.Get_Ready_0
                                                                  γ in
                                                              let* result :=
                                                                M.copy γ0_0 in
                                                              let* α0 :
                                                                  M.Val
                                                                    never.t :=
                                                                M.break in
                                                              let* α1 :=
                                                                M.read α0 in
                                                              let* α2 : unit :=
                                                                never_to_any
                                                                  α1 in
                                                              M.alloc α2
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit);
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Pending
                                                                =>
                                                              M.alloc tt
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit)
                                                        ] in
                                                    let* _ : M.Val unit :=
                                                      let* α0 : M.Val unit :=
                                                        M.alloc tt in
                                                      let* α1 :
                                                          M.Val
                                                            core.future.ResumeTy.t :=
                                                        yield α0 in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read α1 in
                                                      assign _task_context α2 in
                                                    M.alloc tt)) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        assistants_core.models.Assistant.t
                                                        sqlx_core.error.Error.t))
                                              ] in
                                          let* α40 :
                                              M.Val
                                                (core.result.Result.t
                                                  (axum.json.Json.t
                                                    async_openai.types.assistant.AssistantObject.t)
                                                  (http.status.StatusCode.t
                                                  *
                                                  alloc.string.String.t)) :=
                                            match_operator
                                              α39
                                              [
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Ok _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Ok_0
                                                        γ in
                                                    let* assistant :=
                                                      M.copy γ0_0 in
                                                    let* α0 :
                                                        async_openai.types.assistant.AssistantObject.t :=
                                                      M.read
                                                        (assistants_core.models.Assistant.Get_inner
                                                          assistant) in
                                                    M.alloc
                                                      (core.result.Result.Ok
                                                        (axum.json.Json.Build_t
                                                          α0))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.assistant.AssistantObject.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)));
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Err _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Err_0
                                                        γ in
                                                    let* e := M.copy γ0_0 in
                                                    let* α0 :
                                                        http.status.StatusCode.t :=
                                                      M.read
                                                        http.status.INTERNAL_SERVER_ERROR in
                                                    let* α1 :
                                                        (ref
                                                            sqlx_core.error.Error.t)
                                                          ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        alloc.string.ToString.to_string
                                                          (Self :=
                                                            sqlx_core.error.Error.t)
                                                          (Trait := ℐ))) in
                                                    let* α2 :
                                                        alloc.string.String.t :=
                                                      M.call (α1 (borrow e)) in
                                                    M.alloc
                                                      (core.result.Result.Err
                                                        (α0, α2))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.assistant.AssistantObject.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)))
                                              ] in
                                          M.pure (use α40)
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.assistant.AssistantObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ]
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.assistant.AssistantObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.assistant.AssistantObject.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t
                    async_openai.types.assistant.AssistantObject.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.assistant.AssistantObject.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn delete_assistant_handler(
      Path((assistant_id,)): Path<(String,)>,
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<DeleteAssistantResponse>, (StatusCode, String)> {
      match delete_assistant(&app_state.pool, &assistant_id, &Uuid::default().to_string()).await {
          Ok(_) => Ok(JsonResponse(DeleteAssistantResponse {
              id: assistant_id.to_string(),
              deleted: true,
              object: "assistant".to_string(),
          })),
          Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
      }
  }
  *)
  Definition delete_assistant_handler
      (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t
                        async_openai.types.assistant.DeleteAssistantResponse.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_) =>
                          let γ1_0 := γ0_0 in
                          let* assistant_id := M.copy γ1_0 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* α0 : _ -> M _ :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.future.into_future.IntoFuture.into_future
                                        (Self := _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      (ref
                                          (alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t))
                                        ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self :=
                                          alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α2 :
                                      ref
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t) :=
                                    M.call
                                      (α1
                                        (borrow
                                          (assistants_api_communication.models.AppState.Get_pool
                                            app_state))) in
                                  let* α3 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α4 : ref str.t :=
                                    M.call (α3 (borrow assistant_id)) in
                                  let* α5 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α6 :
                                      (ref uuid.Uuid.t) ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      alloc.string.ToString.to_string
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α7 : M uuid.Uuid.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.default.Default.default
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α8 : uuid.Uuid.t := M.call α7 in
                                  let* α9 : M.Val uuid.Uuid.t := M.alloc α8 in
                                  let* α10 : alloc.string.String.t :=
                                    M.call (α6 (borrow α9)) in
                                  let* α11 : M.Val alloc.string.String.t :=
                                    M.alloc α10 in
                                  let* α12 : ref str.t :=
                                    M.call (α5 (borrow α11)) in
                                  let* α13 : _ :=
                                    M.call
                                      (assistants_core.assistants.delete_assistant
                                        α2
                                        α4
                                        α12) in
                                  let* α14 : _ := M.call (α0 α13) in
                                  let* α15 : M.Val _ := M.alloc α14 in
                                  let* α16 :
                                      M.Val
                                        (core.result.Result.t
                                          unit
                                          sqlx_core.error.Error.t) :=
                                    match_operator
                                      α15
                                      [
                                        fun γ =>
                                          (let* __awaitee := M.copy γ in
                                          M.loop
                                            (let* _ : M.Val unit :=
                                              let* α0 :
                                                  (core.pin.Pin.t (mut_ref _))
                                                    ->
                                                    (mut_ref
                                                      core.task.wake.Context.t)
                                                    ->
                                                    M
                                                      (core.task.poll.Poll.t
                                                        _) :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.future.future.Future.poll
                                                    (Self := _)
                                                    (Trait := ℐ))) in
                                              let* α1 :
                                                  core.pin.Pin.t (mut_ref _) :=
                                                M.call
                                                  ((core.pin.Pin.t
                                                        (mut_ref
                                                          _))::["new_unchecked"]
                                                    (borrow_mut __awaitee)) in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read _task_context in
                                              let* α3 :
                                                  mut_ref
                                                    core.task.wake.Context.t :=
                                                M.call
                                                  (core.future.get_context
                                                    α2) in
                                              let* α4 :
                                                  core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      unit
                                                      sqlx_core.error.Error.t) :=
                                                M.call (α0 α1 α3) in
                                              let* α5 :
                                                  M.Val
                                                    (core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        unit
                                                        sqlx_core.error.Error.t)) :=
                                                M.alloc α4 in
                                              match_operator
                                                α5
                                                [
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Ready
                                                          _
                                                        =>
                                                      let γ0_0 :=
                                                        core.task.poll.Poll.Get_Ready_0
                                                          γ in
                                                      let* result :=
                                                        M.copy γ0_0 in
                                                      let* α0 : M.Val never.t :=
                                                        M.break in
                                                      let* α1 := M.read α0 in
                                                      let* α2 : unit :=
                                                        never_to_any α1 in
                                                      M.alloc α2
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit);
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Pending
                                                        =>
                                                      M.alloc tt
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit)
                                                ] in
                                            let* _ : M.Val unit :=
                                              let* α0 : M.Val unit :=
                                                M.alloc tt in
                                              let* α1 :
                                                  M.Val
                                                    core.future.ResumeTy.t :=
                                                yield α0 in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read α1 in
                                              assign _task_context α2 in
                                            M.alloc tt)) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                unit
                                                sqlx_core.error.Error.t))
                                      ] in
                                  let* α17 :
                                      M.Val
                                        (core.result.Result.t
                                          (axum.json.Json.t
                                            async_openai.types.assistant.DeleteAssistantResponse.t)
                                          (http.status.StatusCode.t
                                          *
                                          alloc.string.String.t)) :=
                                    match_operator
                                      α16
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Ok _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Ok_0 γ in
                                            let* α0 :
                                                (ref alloc.string.String.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : alloc.string.String.t :=
                                              M.call
                                                (α0 (borrow assistant_id)) in
                                            let* α2 :
                                                (ref str.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self := str.t)
                                                  (Trait := ℐ))) in
                                            let* α3 : ref str.t :=
                                              M.read (mk_str "assistant") in
                                            let* α4 : alloc.string.String.t :=
                                              M.call (α2 α3) in
                                            M.alloc
                                              (core.result.Result.Ok
                                                (axum.json.Json.Build_t
                                                  {|
                                                    async_openai.types.assistant.DeleteAssistantResponse.id :=
                                                      α1;
                                                    async_openai.types.assistant.DeleteAssistantResponse.deleted :=
                                                      true;
                                                    async_openai.types.assistant.DeleteAssistantResponse.object :=
                                                      α4;
                                                  |}))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.assistant.DeleteAssistantResponse.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)));
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Err _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Err_0 γ in
                                            let* e := M.copy γ0_0 in
                                            let* α0 :
                                                http.status.StatusCode.t :=
                                              M.read
                                                http.status.INTERNAL_SERVER_ERROR in
                                            let* α1 :
                                                (ref sqlx_core.error.Error.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self :=
                                                    sqlx_core.error.Error.t)
                                                  (Trait := ℐ))) in
                                            let* α2 : alloc.string.String.t :=
                                              M.call (α1 (borrow e)) in
                                            M.alloc
                                              (core.result.Result.Err (α0, α2))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.assistant.DeleteAssistantResponse.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)))
                                      ] in
                                  M.pure (use α17)
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.assistant.DeleteAssistantResponse.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.assistant.DeleteAssistantResponse.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t
                    async_openai.types.assistant.DeleteAssistantResponse.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t
              async_openai.types.assistant.DeleteAssistantResponse.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  Module  ListParams.
  Section ListParams.
    Record t : Set := {
      limit : core.option.Option.t usize.t;
      order : core.option.Option.t alloc.string.String.t;
      after : core.option.Option.t alloc.string.String.t;
      before : core.option.Option.t alloc.string.String.t;
    }.
    
    Definition Get_limit :=
      Ref.map (fun α => Some α.(limit)) (fun β α => Some (α <| limit := β |>)).
    Definition Get_order :=
      Ref.map (fun α => Some α.(order)) (fun β α => Some (α <| order := β |>)).
    Definition Get_after :=
      Ref.map (fun α => Some α.(after)) (fun β α => Some (α <| after := β |>)).
    Definition Get_before :=
      Ref.map
        (fun α => Some α.(before))
        (fun β α => Some (α <| before := β |>)).
  End ListParams.
  End ListParams.
  
  (*
  pub async fn list_assistants_handler(
      Query(_): Query<ListParams>,
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<ListAssistantsResponse>, (StatusCode, String)> {
      match list_assistants(&app_state.pool, &Uuid::default().to_string()).await {
          Ok(assistants) => Ok(JsonResponse(ListAssistantsResponse {
              data: assistants
                  .iter()
                  .map(|a| a.inner.clone())
                  .collect::<Vec<AssistantObject>>(),
              object: "list".to_string(),
              has_more: false,
              first_id: None,
              last_id: None,
          })),
          Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
      }
  }
  *)
  Definition list_assistants_handler
      (__arg0
        :
        axum.extract.query.Query.t
          assistants_api_communication.assistants.ListParams.t)
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val
                    (axum.extract.query.Query.t
                      assistants_api_communication.assistants.ListParams.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t
                        async_openai.types.assistant.ListAssistantsResponse.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.query.Query.Build_t _ =>
                        let γ0_0 := axum.extract.query.Query.Get_0 γ in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* α0 : _ -> M _ :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.future.into_future.IntoFuture.into_future
                                      (Self := _)
                                      (Trait := ℐ))) in
                                let* α1 :
                                    (ref
                                        (alloc.sync.Arc.t
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t)
                                          alloc.alloc.Global.t))
                                      ->
                                      M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.deref.Deref.deref
                                      (Self :=
                                        alloc.sync.Arc.t
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t)
                                          alloc.alloc.Global.t)
                                      (Trait := ℐ))) in
                                let* α2 :
                                    ref
                                      (sqlx_core.pool.Pool.t
                                        sqlx_postgres.database.Postgres.t) :=
                                  M.call
                                    (α1
                                      (borrow
                                        (assistants_api_communication.models.AppState.Get_pool
                                          app_state))) in
                                let* α3 :
                                    (ref alloc.string.String.t) -> M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.deref.Deref.deref
                                      (Self := alloc.string.String.t)
                                      (Trait := ℐ))) in
                                let* α4 :
                                    (ref uuid.Uuid.t) ->
                                      M alloc.string.String.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    alloc.string.ToString.to_string
                                      (Self := uuid.Uuid.t)
                                      (Trait := ℐ))) in
                                let* α5 : M uuid.Uuid.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.default.Default.default
                                      (Self := uuid.Uuid.t)
                                      (Trait := ℐ))) in
                                let* α6 : uuid.Uuid.t := M.call α5 in
                                let* α7 : M.Val uuid.Uuid.t := M.alloc α6 in
                                let* α8 : alloc.string.String.t :=
                                  M.call (α4 (borrow α7)) in
                                let* α9 : M.Val alloc.string.String.t :=
                                  M.alloc α8 in
                                let* α10 : ref str.t :=
                                  M.call (α3 (borrow α9)) in
                                let* α11 : _ :=
                                  M.call
                                    (assistants_core.assistants.list_assistants
                                      α2
                                      α10) in
                                let* α12 : _ := M.call (α0 α11) in
                                let* α13 : M.Val _ := M.alloc α12 in
                                let* α14 :
                                    M.Val
                                      (core.result.Result.t
                                        (alloc.vec.Vec.t
                                          assistants_core.models.Assistant.t
                                          alloc.alloc.Global.t)
                                        sqlx_core.error.Error.t) :=
                                  match_operator
                                    α13
                                    [
                                      fun γ =>
                                        (let* __awaitee := M.copy γ in
                                        M.loop
                                          (let* _ : M.Val unit :=
                                            let* α0 :
                                                (core.pin.Pin.t (mut_ref _)) ->
                                                  (mut_ref
                                                    core.task.wake.Context.t)
                                                  ->
                                                  M (core.task.poll.Poll.t _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.future.future.Future.poll
                                                  (Self := _)
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                core.pin.Pin.t (mut_ref _) :=
                                              M.call
                                                ((core.pin.Pin.t
                                                      (mut_ref
                                                        _))::["new_unchecked"]
                                                  (borrow_mut __awaitee)) in
                                            let* α2 : core.future.ResumeTy.t :=
                                              M.read _task_context in
                                            let* α3 :
                                                mut_ref
                                                  core.task.wake.Context.t :=
                                              M.call
                                                (core.future.get_context α2) in
                                            let* α4 :
                                                core.task.poll.Poll.t
                                                  (core.result.Result.t
                                                    (alloc.vec.Vec.t
                                                      assistants_core.models.Assistant.t
                                                      alloc.alloc.Global.t)
                                                    sqlx_core.error.Error.t) :=
                                              M.call (α0 α1 α3) in
                                            let* α5 :
                                                M.Val
                                                  (core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      (alloc.vec.Vec.t
                                                        assistants_core.models.Assistant.t
                                                        alloc.alloc.Global.t)
                                                      sqlx_core.error.Error.t)) :=
                                              M.alloc α4 in
                                            match_operator
                                              α5
                                              [
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  |
                                                      core.task.poll.Poll.Ready
                                                        _
                                                      =>
                                                    let γ0_0 :=
                                                      core.task.poll.Poll.Get_Ready_0
                                                        γ in
                                                    let* result :=
                                                      M.copy γ0_0 in
                                                    let* α0 : M.Val never.t :=
                                                      M.break in
                                                    let* α1 := M.read α0 in
                                                    let* α2 : unit :=
                                                      never_to_any α1 in
                                                    M.alloc α2
                                                  | _ => M.break_match
                                                  end) :
                                                  M (M.Val unit);
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  |
                                                      core.task.poll.Poll.Pending
                                                      =>
                                                    M.alloc tt
                                                  | _ => M.break_match
                                                  end) :
                                                  M (M.Val unit)
                                              ] in
                                          let* _ : M.Val unit :=
                                            let* α0 : M.Val unit :=
                                              M.alloc tt in
                                            let* α1 :
                                                M.Val core.future.ResumeTy.t :=
                                              yield α0 in
                                            let* α2 : core.future.ResumeTy.t :=
                                              M.read α1 in
                                            assign _task_context α2 in
                                          M.alloc tt)) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (alloc.vec.Vec.t
                                                assistants_core.models.Assistant.t
                                                alloc.alloc.Global.t)
                                              sqlx_core.error.Error.t))
                                    ] in
                                let* α15 :
                                    M.Val
                                      (core.result.Result.t
                                        (axum.json.Json.t
                                          async_openai.types.assistant.ListAssistantsResponse.t)
                                        (http.status.StatusCode.t
                                        *
                                        alloc.string.String.t)) :=
                                  match_operator
                                    α14
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Ok _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Ok_0 γ in
                                          let* assistants := M.copy γ0_0 in
                                          let* α0 :
                                              (core.iter.adapters.map.Map.t
                                                  (core.slice.iter.Iter.t
                                                    assistants_core.models.Assistant.t)
                                                  ((ref
                                                      assistants_core.models.Assistant.t)
                                                    ->
                                                    M
                                                      async_openai.types.assistant.AssistantObject.t))
                                                ->
                                                M
                                                  (alloc.vec.Vec.t
                                                    async_openai.types.assistant.AssistantObject.t
                                                    alloc.alloc.Global.t) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.iter.traits.iterator.Iterator.collect
                                                (Self :=
                                                  core.iter.adapters.map.Map.t
                                                    (core.slice.iter.Iter.t
                                                      assistants_core.models.Assistant.t)
                                                    ((ref
                                                        assistants_core.models.Assistant.t)
                                                      ->
                                                      M
                                                        async_openai.types.assistant.AssistantObject.t))
                                                (B :=
                                                  alloc.vec.Vec.t
                                                    async_openai.types.assistant.AssistantObject.t
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α1 :
                                              (core.slice.iter.Iter.t
                                                  assistants_core.models.Assistant.t)
                                                ->
                                                ((ref
                                                    assistants_core.models.Assistant.t)
                                                  ->
                                                  M
                                                    async_openai.types.assistant.AssistantObject.t)
                                                ->
                                                M
                                                  (core.iter.adapters.map.Map.t
                                                    (core.slice.iter.Iter.t
                                                      assistants_core.models.Assistant.t)
                                                    ((ref
                                                        assistants_core.models.Assistant.t)
                                                      ->
                                                      M
                                                        async_openai.types.assistant.AssistantObject.t)) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.iter.traits.iterator.Iterator.map
                                                (Self :=
                                                  core.slice.iter.Iter.t
                                                    assistants_core.models.Assistant.t)
                                                (B :=
                                                  async_openai.types.assistant.AssistantObject.t)
                                                (F :=
                                                  (ref
                                                      assistants_core.models.Assistant.t)
                                                    ->
                                                    M
                                                      async_openai.types.assistant.AssistantObject.t)
                                                (Trait := ℐ))) in
                                          let* α2 :
                                              (ref
                                                  (alloc.vec.Vec.t
                                                    assistants_core.models.Assistant.t
                                                    alloc.alloc.Global.t))
                                                ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self :=
                                                  alloc.vec.Vec.t
                                                    assistants_core.models.Assistant.t
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α3 :
                                              ref
                                                (slice
                                                  assistants_core.models.Assistant.t) :=
                                            M.call (α2 (borrow assistants)) in
                                          let* α4 :
                                              core.slice.iter.Iter.t
                                                assistants_core.models.Assistant.t :=
                                            M.call
                                              ((slice
                                                    assistants_core.models.Assistant.t)::["iter"]
                                                α3) in
                                          let* α5 :
                                              core.iter.adapters.map.Map.t
                                                (core.slice.iter.Iter.t
                                                  assistants_core.models.Assistant.t)
                                                ((ref
                                                    assistants_core.models.Assistant.t)
                                                  ->
                                                  M
                                                    async_openai.types.assistant.AssistantObject.t) :=
                                            M.call
                                              (α1
                                                α4
                                                (fun
                                                    (α0 :
                                                      ref
                                                        assistants_core.models.Assistant.t) =>
                                                  (let* α0 := M.alloc α0 in
                                                  match_operator
                                                    α0
                                                    [
                                                      fun γ =>
                                                        (let* a := M.copy γ in
                                                        let* α0 :
                                                            (ref
                                                                async_openai.types.assistant.AssistantObject.t)
                                                              ->
                                                              M
                                                                async_openai.types.assistant.AssistantObject.t :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.clone.Clone.clone
                                                              (Self :=
                                                                async_openai.types.assistant.AssistantObject.t)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            ref
                                                              assistants_core.models.Assistant.t :=
                                                          M.read a in
                                                        M.call
                                                          (α0
                                                            (borrow
                                                              (assistants_core.models.Assistant.Get_inner
                                                                (deref α1))))) :
                                                        M
                                                          async_openai.types.assistant.AssistantObject.t
                                                    ]) :
                                                  M
                                                    async_openai.types.assistant.AssistantObject.t)) in
                                          let* α6 :
                                              alloc.vec.Vec.t
                                                async_openai.types.assistant.AssistantObject.t
                                                alloc.alloc.Global.t :=
                                            M.call (α0 α5) in
                                          let* α7 :
                                              (ref str.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := str.t)
                                                (Trait := ℐ))) in
                                          let* α8 : ref str.t :=
                                            M.read (mk_str "list") in
                                          let* α9 : alloc.string.String.t :=
                                            M.call (α7 α8) in
                                          M.alloc
                                            (core.result.Result.Ok
                                              (axum.json.Json.Build_t
                                                {|
                                                  async_openai.types.assistant.ListAssistantsResponse.data :=
                                                    α6;
                                                  async_openai.types.assistant.ListAssistantsResponse.object :=
                                                    α9;
                                                  async_openai.types.assistant.ListAssistantsResponse.has_more :=
                                                    false;
                                                  async_openai.types.assistant.ListAssistantsResponse.first_id :=
                                                    core.option.Option.None;
                                                  async_openai.types.assistant.ListAssistantsResponse.last_id :=
                                                    core.option.Option.None;
                                                |}))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.assistant.ListAssistantsResponse.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)));
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Err _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Err_0 γ in
                                          let* e := M.copy γ0_0 in
                                          let* α0 : http.status.StatusCode.t :=
                                            M.read
                                              http.status.INTERNAL_SERVER_ERROR in
                                          let* α1 :
                                              (ref sqlx_core.error.Error.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self :=
                                                  sqlx_core.error.Error.t)
                                                (Trait := ℐ))) in
                                          let* α2 : alloc.string.String.t :=
                                            M.call (α1 (borrow e)) in
                                          M.alloc
                                            (core.result.Result.Err (α0, α2))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.assistant.ListAssistantsResponse.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ] in
                                M.pure (use α15)
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.assistant.ListAssistantsResponse.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.assistant.ListAssistantsResponse.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t
                    async_openai.types.assistant.ListAssistantsResponse.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t
              async_openai.types.assistant.ListAssistantsResponse.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
End assistants.

(*
pub async fn create_assistant_handler(
    State(app_state): State<AppState>,
    Json(assistant): Json<Value>, // TODO https://github.com/64bit/async-openai/issues/166
) -> Result<JsonResponse<AssistantObject>, (StatusCode, String)> {
    let tools = assistant["tools"].as_array().unwrap_or(&vec![]).to_vec();
    let assistant = create_assistant(
        &app_state.pool,
        &Assistant {
            inner: AssistantObject {
                id: Default::default(),
                instructions: Some(assistant["instructions"].as_str().unwrap().to_string()),
                name: Some(assistant["name"].as_str().unwrap().to_string()),
                tools: match Tools::new(Some(tools)).to_tools() {
                    Ok(tools) => tools,
                    Err(e) => return Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
                },
                model: assistant["model"].as_str().unwrap().to_string(),
                metadata: if let Some(object) = assistant["metadata"].as_object() {
                    // This serves to communicate the inconsistency with the OpenAI API's metadata value length limit
                    let mut temp_map = HashMap::new();
                    for (k, v) in object {
                        match v.as_str() {
                            Some(str_value) => {
                                temp_map.insert(k.clone(), Value::String(str_value.to_string()));
                            },
                            None => {
                                return Err((
                                    StatusCode::BAD_REQUEST,
                                    format!("Metadata value for key '{}' is not a string. All metadata values must be strings.", k)
                                ));
                            },
                        }
                    }
                    Some(temp_map)
                } else {
                    None
                },
                file_ids: if assistant["file_ids"].is_array() {
                    assistant["file_ids"]
                        .as_array()
                        .unwrap()
                        .iter()
                        .map(|file_id| file_id.as_str().unwrap().to_string())
                        .collect()
                } else {
                    vec![]
                },
                object: Default::default(),
                created_at: Default::default(),
                description: Default::default(),
            },
            user_id: Uuid::default().to_string(),
        },
    )
    .await;
    match assistant {
        Ok(assistant) => Ok(JsonResponse(assistant.inner)),
        Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
    }
}
*)
Definition create_assistant_handler
    (__arg0
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    (__arg1 : axum.json.Json.t serde_json.value.Value.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val
                  (axum.extract.state.State.t
                    assistants_api_communication.models.AppState.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t
                      async_openai.types.assistant.AssistantObject.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.state.State.Build_t _ =>
                      let γ0_0 := axum.extract.state.State.Get_0 γ in
                      let* app_state := M.copy γ0_0 in
                      let* __arg1 :
                          M.Val (axum.json.Json.t serde_json.value.Value.t) :=
                        M.copy __arg1 in
                      match_operator
                        __arg1
                        [
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | axum.json.Json.Build_t _ =>
                              let γ0_0 := axum.json.Json.Get_0 γ in
                              let* assistant := M.copy γ0_0 in
                              let* tools :
                                  M.Val
                                    (alloc.vec.Vec.t
                                      serde_json.value.Value.t
                                      alloc.alloc.Global.t) :=
                                let* α0 :
                                    (ref
                                        (alloc.vec.Vec.t
                                          serde_json.value.Value.t
                                          alloc.alloc.Global.t))
                                      ->
                                      M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.deref.Deref.deref
                                      (Self :=
                                        alloc.vec.Vec.t
                                          serde_json.value.Value.t
                                          alloc.alloc.Global.t)
                                      (Trait := ℐ))) in
                                let* α1 :
                                    (ref serde_json.value.Value.t) ->
                                      (ref str.t) ->
                                      M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.index.Index.index
                                      (Self := serde_json.value.Value.t)
                                      (Idx := ref str.t)
                                      (Trait := ℐ))) in
                                let* α2 : ref str.t :=
                                  M.read (mk_str "tools") in
                                let* α3 : ref serde_json.value.Value.t :=
                                  M.call (α1 (borrow assistant) α2) in
                                let* α4 :
                                    core.option.Option.t
                                      (ref
                                        (alloc.vec.Vec.t
                                          serde_json.value.Value.t
                                          alloc.alloc.Global.t)) :=
                                  M.call
                                    (serde_json.value.Value.t::["as_array"]
                                      α3) in
                                let* α5 :
                                    alloc.vec.Vec.t
                                      serde_json.value.Value.t
                                      alloc.alloc.Global.t :=
                                  M.call
                                    (alloc.vec.Vec.t
                                        serde_json.value.Value.t
                                        alloc.alloc.Global.t)::["new"] in
                                let* α6 :
                                    M.Val
                                      (alloc.vec.Vec.t
                                        serde_json.value.Value.t
                                        alloc.alloc.Global.t) :=
                                  M.alloc α5 in
                                let* α7 :
                                    ref
                                      (alloc.vec.Vec.t
                                        serde_json.value.Value.t
                                        alloc.alloc.Global.t) :=
                                  M.call
                                    ((core.option.Option.t
                                          (ref
                                            (alloc.vec.Vec.t
                                              serde_json.value.Value.t
                                              alloc.alloc.Global.t)))::["unwrap_or"]
                                      α4
                                      (borrow α6)) in
                                let* α8 :
                                    ref (slice serde_json.value.Value.t) :=
                                  M.call (α0 α7) in
                                let* α9 :
                                    alloc.vec.Vec.t
                                      serde_json.value.Value.t
                                      alloc.alloc.Global.t :=
                                  M.call
                                    ((slice
                                          serde_json.value.Value.t)::["to_vec"]
                                      α8) in
                                M.alloc α9 in
                              let* assistant :
                                  M.Val
                                    (core.result.Result.t
                                      assistants_core.models.Assistant.t
                                      assistants_core.assistants.AssistantError.t) :=
                                let* α0 : _ -> M _ :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.future.into_future.IntoFuture.into_future
                                      (Self := _)
                                      (Trait := ℐ))) in
                                let* α1 :
                                    (ref
                                        (alloc.sync.Arc.t
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t)
                                          alloc.alloc.Global.t))
                                      ->
                                      M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.deref.Deref.deref
                                      (Self :=
                                        alloc.sync.Arc.t
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t)
                                          alloc.alloc.Global.t)
                                      (Trait := ℐ))) in
                                let* α2 :
                                    ref
                                      (sqlx_core.pool.Pool.t
                                        sqlx_postgres.database.Postgres.t) :=
                                  M.call
                                    (α1
                                      (borrow
                                        (assistants_api_communication.models.AppState.Get_pool
                                          app_state))) in
                                let* α3 : M alloc.string.String.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.default.Default.default
                                      (Self := alloc.string.String.t)
                                      (Trait := ℐ))) in
                                let* α4 : alloc.string.String.t := M.call α3 in
                                let* α5 :
                                    (ref str.t) -> M alloc.string.String.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    alloc.string.ToString.to_string
                                      (Self := str.t)
                                      (Trait := ℐ))) in
                                let* α6 :
                                    (ref serde_json.value.Value.t) ->
                                      (ref str.t) ->
                                      M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.index.Index.index
                                      (Self := serde_json.value.Value.t)
                                      (Idx := ref str.t)
                                      (Trait := ℐ))) in
                                let* α7 : ref str.t :=
                                  M.read (mk_str "instructions") in
                                let* α8 : ref serde_json.value.Value.t :=
                                  M.call (α6 (borrow assistant) α7) in
                                let* α9 : core.option.Option.t (ref str.t) :=
                                  M.call
                                    (serde_json.value.Value.t::["as_str"] α8) in
                                let* α10 : ref str.t :=
                                  M.call
                                    ((core.option.Option.t
                                          (ref str.t))::["unwrap"]
                                      α9) in
                                let* α11 : alloc.string.String.t :=
                                  M.call (α5 α10) in
                                let* α12 :
                                    (ref str.t) -> M alloc.string.String.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    alloc.string.ToString.to_string
                                      (Self := str.t)
                                      (Trait := ℐ))) in
                                let* α13 :
                                    (ref serde_json.value.Value.t) ->
                                      (ref str.t) ->
                                      M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.index.Index.index
                                      (Self := serde_json.value.Value.t)
                                      (Idx := ref str.t)
                                      (Trait := ℐ))) in
                                let* α14 : ref str.t :=
                                  M.read (mk_str "name") in
                                let* α15 : ref serde_json.value.Value.t :=
                                  M.call (α13 (borrow assistant) α14) in
                                let* α16 : core.option.Option.t (ref str.t) :=
                                  M.call
                                    (serde_json.value.Value.t::["as_str"]
                                      α15) in
                                let* α17 : ref str.t :=
                                  M.call
                                    ((core.option.Option.t
                                          (ref str.t))::["unwrap"]
                                      α16) in
                                let* α18 : alloc.string.String.t :=
                                  M.call (α12 α17) in
                                let* α19 :
                                    alloc.vec.Vec.t
                                      serde_json.value.Value.t
                                      alloc.alloc.Global.t :=
                                  M.read tools in
                                let* α20 : assistants_core.assistants.Tools.t :=
                                  M.call
                                    (assistants_core.assistants.Tools.t::["new"]
                                      (core.option.Option.Some α19)) in
                                let* α21 :
                                    M.Val assistants_core.assistants.Tools.t :=
                                  M.alloc α20 in
                                let* α22 :
                                    core.result.Result.t
                                      (alloc.vec.Vec.t
                                        async_openai.types.assistant.AssistantTools.t
                                        alloc.alloc.Global.t)
                                      (alloc.boxed.Box.t
                                        serde_json.error.Error.t
                                        alloc.alloc.Global.t) :=
                                  M.call
                                    (assistants_core.assistants.Tools.t::["to_tools"]
                                      (borrow α21)) in
                                let* α23 :
                                    M.Val
                                      (core.result.Result.t
                                        (alloc.vec.Vec.t
                                          async_openai.types.assistant.AssistantTools.t
                                          alloc.alloc.Global.t)
                                        (alloc.boxed.Box.t
                                          serde_json.error.Error.t
                                          alloc.alloc.Global.t)) :=
                                  M.alloc α22 in
                                let* α24 :
                                    M.Val
                                      (alloc.vec.Vec.t
                                        async_openai.types.assistant.AssistantTools.t
                                        alloc.alloc.Global.t) :=
                                  match_operator
                                    α23
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Ok _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Ok_0 γ in
                                          let* tools := M.copy γ0_0 in
                                          M.pure tools
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (alloc.vec.Vec.t
                                              async_openai.types.assistant.AssistantTools.t
                                              alloc.alloc.Global.t));
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Err _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Err_0 γ in
                                          let* e := M.copy γ0_0 in
                                          let* α0 : http.status.StatusCode.t :=
                                            M.read
                                              http.status.INTERNAL_SERVER_ERROR in
                                          let* α1 :
                                              (ref
                                                  (alloc.boxed.Box.t
                                                    serde_json.error.Error.t
                                                    alloc.alloc.Global.t))
                                                ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self :=
                                                  alloc.boxed.Box.t
                                                    serde_json.error.Error.t
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α2 : alloc.string.String.t :=
                                            M.call (α1 (borrow e)) in
                                          let* α3 : M.Val never.t :=
                                            return_
                                              (core.result.Result.Err
                                                (α0, α2)) in
                                          let* α4 := M.read α3 in
                                          let* α5 :
                                              alloc.vec.Vec.t
                                                async_openai.types.assistant.AssistantTools.t
                                                alloc.alloc.Global.t :=
                                            never_to_any α4 in
                                          M.alloc α5
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (alloc.vec.Vec.t
                                              async_openai.types.assistant.AssistantTools.t
                                              alloc.alloc.Global.t))
                                    ] in
                                let* α25 :
                                    alloc.vec.Vec.t
                                      async_openai.types.assistant.AssistantTools.t
                                      alloc.alloc.Global.t :=
                                  M.read α24 in
                                let* α26 :
                                    (ref str.t) -> M alloc.string.String.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    alloc.string.ToString.to_string
                                      (Self := str.t)
                                      (Trait := ℐ))) in
                                let* α27 :
                                    (ref serde_json.value.Value.t) ->
                                      (ref str.t) ->
                                      M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.index.Index.index
                                      (Self := serde_json.value.Value.t)
                                      (Idx := ref str.t)
                                      (Trait := ℐ))) in
                                let* α28 : ref str.t :=
                                  M.read (mk_str "model") in
                                let* α29 : ref serde_json.value.Value.t :=
                                  M.call (α27 (borrow assistant) α28) in
                                let* α30 : core.option.Option.t (ref str.t) :=
                                  M.call
                                    (serde_json.value.Value.t::["as_str"]
                                      α29) in
                                let* α31 : ref str.t :=
                                  M.call
                                    ((core.option.Option.t
                                          (ref str.t))::["unwrap"]
                                      α30) in
                                let* α32 : alloc.string.String.t :=
                                  M.call (α26 α31) in
                                let* α33 :
                                    (ref serde_json.value.Value.t) ->
                                      (ref str.t) ->
                                      M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.index.Index.index
                                      (Self := serde_json.value.Value.t)
                                      (Idx := ref str.t)
                                      (Trait := ℐ))) in
                                let* α34 : ref str.t :=
                                  M.read (mk_str "metadata") in
                                let* α35 : ref serde_json.value.Value.t :=
                                  M.call (α33 (borrow assistant) α34) in
                                let* α36 :
                                    core.option.Option.t
                                      (ref
                                        (serde_json.map.Map.t
                                          alloc.string.String.t
                                          serde_json.value.Value.t)) :=
                                  M.call
                                    (serde_json.value.Value.t::["as_object"]
                                      α35) in
                                let* α37 :
                                    M.Val
                                      (core.option.Option.t
                                        (ref
                                          (serde_json.map.Map.t
                                            alloc.string.String.t
                                            serde_json.value.Value.t))) :=
                                  M.alloc α36 in
                                let* α38 :
                                    M.Val
                                      (core.option.Option.t
                                        (std.collections.hash.map.HashMap.t
                                          alloc.string.String.t
                                          serde_json.value.Value.t
                                          std.hash.random.RandomState.t)) :=
                                  match_operator
                                    α37
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.option.Option.Some _ =>
                                          let γ0_0 :=
                                            core.option.Option.Get_Some_0 γ in
                                          let* object := M.copy γ0_0 in
                                          let* temp_map :
                                              M.Val
                                                (std.collections.hash.map.HashMap.t
                                                  alloc.string.String.t
                                                  serde_json.value.Value.t
                                                  std.hash.random.RandomState.t) :=
                                            let* α0 :
                                                std.collections.hash.map.HashMap.t
                                                  alloc.string.String.t
                                                  serde_json.value.Value.t
                                                  std.hash.random.RandomState.t :=
                                              M.call
                                                (std.collections.hash.map.HashMap.t
                                                    alloc.string.String.t
                                                    serde_json.value.Value.t
                                                    std.hash.random.RandomState.t)::["new"] in
                                            M.alloc α0 in
                                          let* _ : M.Val unit :=
                                            let* α0 :
                                                (ref
                                                    (serde_json.map.Map.t
                                                      alloc.string.String.t
                                                      serde_json.value.Value.t))
                                                  ->
                                                  M _ :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.iter.traits.collect.IntoIterator.into_iter
                                                  (Self :=
                                                    ref
                                                      (serde_json.map.Map.t
                                                        alloc.string.String.t
                                                        serde_json.value.Value.t))
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                ref
                                                  (serde_json.map.Map.t
                                                    alloc.string.String.t
                                                    serde_json.value.Value.t) :=
                                              M.read object in
                                            let* α2 : serde_json.map.Iter.t :=
                                              M.call (α0 α1) in
                                            let* α3 :
                                                M.Val serde_json.map.Iter.t :=
                                              M.alloc α2 in
                                            let* α4 : M.Val unit :=
                                              match_operator
                                                α3
                                                [
                                                  fun γ =>
                                                    (let* iter := M.copy γ in
                                                    M.loop
                                                      (let* _ : M.Val unit :=
                                                        let* α0 :
                                                            (mut_ref
                                                                serde_json.map.Iter.t)
                                                              ->
                                                              M
                                                                (core.option.Option.t
                                                                  _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.iter.traits.iterator.Iterator.next
                                                              (Self :=
                                                                serde_json.map.Iter.t)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            core.option.Option.t
                                                              ((ref
                                                                alloc.string.String.t)
                                                              *
                                                              (ref
                                                                serde_json.value.Value.t)) :=
                                                          M.call
                                                            (α0
                                                              (borrow_mut
                                                                iter)) in
                                                        let* α2 :
                                                            M.Val
                                                              (core.option.Option.t
                                                                ((ref
                                                                  alloc.string.String.t)
                                                                *
                                                                (ref
                                                                  serde_json.value.Value.t))) :=
                                                          M.alloc α1 in
                                                        match_operator
                                                          α2
                                                          [
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.option.Option.None
                                                                  =>
                                                                let* α0 :
                                                                    M.Val
                                                                      never.t :=
                                                                  M.break in
                                                                let* α1 :=
                                                                  M.read α0 in
                                                                let* α2 :
                                                                    unit :=
                                                                  never_to_any
                                                                    α1 in
                                                                M.alloc α2
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit);
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.option.Option.Some
                                                                    _
                                                                  =>
                                                                let γ0_0 :=
                                                                  core.option.Option.Get_Some_0
                                                                    γ in
                                                                let* α0 :=
                                                                  M.read γ0_0 in
                                                                match α0 with
                                                                | (_, _) =>
                                                                  let γ1_0 :=
                                                                    Tuple.Access.left
                                                                      γ0_0 in
                                                                  let γ1_1 :=
                                                                    Tuple.Access.right
                                                                      γ0_0 in
                                                                  let* k :=
                                                                    M.copy
                                                                      γ1_0 in
                                                                  let* v :=
                                                                    M.copy
                                                                      γ1_1 in
                                                                  let* α0 :
                                                                      ref
                                                                        serde_json.value.Value.t :=
                                                                    M.read v in
                                                                  let* α1 :
                                                                      core.option.Option.t
                                                                        (ref
                                                                          str.t) :=
                                                                    M.call
                                                                      (serde_json.value.Value.t::["as_str"]
                                                                        α0) in
                                                                  let* α2 :
                                                                      M.Val
                                                                        (core.option.Option.t
                                                                          (ref
                                                                            str.t)) :=
                                                                    M.alloc
                                                                      α1 in
                                                                  match_operator
                                                                    α2
                                                                    [
                                                                      fun γ =>
                                                                        (let*
                                                                              α0 :=
                                                                          M.read
                                                                            γ in
                                                                        match α0
                                                                        with
                                                                        |
                                                                            core.option.Option.Some
                                                                              _
                                                                            =>
                                                                          let
                                                                                γ0_0 :=
                                                                            core.option.Option.Get_Some_0
                                                                              γ in
                                                                          let*
                                                                                str_value :=
                                                                            M.copy
                                                                              γ0_0 in
                                                                          let*
                                                                                _ :
                                                                              M.Val
                                                                                (core.option.Option.t
                                                                                  serde_json.value.Value.t) :=
                                                                            let*
                                                                                  α0 :
                                                                                (ref
                                                                                    alloc.string.String.t)
                                                                                  ->
                                                                                  M
                                                                                    alloc.string.String.t :=
                                                                              ltac:(M.get_method (fun ℐ =>
                                                                                core.clone.Clone.clone
                                                                                  (Self :=
                                                                                    alloc.string.String.t)
                                                                                  (Trait := ℐ))) in
                                                                            let*
                                                                                  α1 :
                                                                                ref
                                                                                  alloc.string.String.t :=
                                                                              M.read
                                                                                k in
                                                                            let*
                                                                                  α2 :
                                                                                alloc.string.String.t :=
                                                                              M.call
                                                                                (α0
                                                                                  α1) in
                                                                            let*
                                                                                  α3 :
                                                                                (ref
                                                                                    str.t)
                                                                                  ->
                                                                                  M
                                                                                    alloc.string.String.t :=
                                                                              ltac:(M.get_method (fun ℐ =>
                                                                                alloc.string.ToString.to_string
                                                                                  (Self :=
                                                                                    str.t)
                                                                                  (Trait := ℐ))) in
                                                                            let*
                                                                                  α4 :
                                                                                ref
                                                                                  str.t :=
                                                                              M.read
                                                                                str_value in
                                                                            let*
                                                                                  α5 :
                                                                                alloc.string.String.t :=
                                                                              M.call
                                                                                (α3
                                                                                  α4) in
                                                                            let*
                                                                                  α6 :
                                                                                core.option.Option.t
                                                                                  serde_json.value.Value.t :=
                                                                              M.call
                                                                                ((std.collections.hash.map.HashMap.t
                                                                                      alloc.string.String.t
                                                                                      serde_json.value.Value.t
                                                                                      std.hash.random.RandomState.t)::["insert"]
                                                                                  (borrow_mut
                                                                                    temp_map)
                                                                                  α2
                                                                                  (serde_json.value.Value.String
                                                                                    α5)) in
                                                                            M.alloc
                                                                              α6 in
                                                                          M.alloc
                                                                            tt
                                                                        | _ =>
                                                                          M.break_match
                                                                        end) :
                                                                        M
                                                                          (M.Val
                                                                            unit);
                                                                      fun γ =>
                                                                        (let*
                                                                              α0 :=
                                                                          M.read
                                                                            γ in
                                                                        match α0
                                                                        with
                                                                        |
                                                                            core.option.Option.None
                                                                            =>
                                                                          let*
                                                                                α0 :
                                                                              http.status.StatusCode.t :=
                                                                            M.read
                                                                              http.status.BAD_REQUEST in
                                                                          let*
                                                                                res :
                                                                              M.Val
                                                                                alloc.string.String.t :=
                                                                            let*
                                                                                  α0 :
                                                                                ref
                                                                                  str.t :=
                                                                              M.read
                                                                                (mk_str
                                                                                  "Metadata value for key '") in
                                                                            let*
                                                                                  α1 :
                                                                                ref
                                                                                  str.t :=
                                                                              M.read
                                                                                (mk_str
                                                                                  "' is not a string. All metadata values must be strings.") in
                                                                            let*
                                                                                  α2 :
                                                                                M.Val
                                                                                  (array
                                                                                    (ref
                                                                                      str.t)) :=
                                                                              M.alloc
                                                                                [
                                                                                  α0;
                                                                                  α1
                                                                                ] in
                                                                            let*
                                                                                  α3 :
                                                                                core.fmt.rt.Argument.t :=
                                                                              M.call
                                                                                (core.fmt.rt.Argument.t::["new_display"]
                                                                                  (borrow
                                                                                    k)) in
                                                                            let*
                                                                                  α4 :
                                                                                M.Val
                                                                                  (array
                                                                                    core.fmt.rt.Argument.t) :=
                                                                              M.alloc
                                                                                [
                                                                                  α3
                                                                                ] in
                                                                            let*
                                                                                  α5 :
                                                                                core.fmt.Arguments.t :=
                                                                              M.call
                                                                                (core.fmt.Arguments.t::["new_v1"]
                                                                                  (pointer_coercion
                                                                                    "Unsize"
                                                                                    (borrow
                                                                                      α2))
                                                                                  (pointer_coercion
                                                                                    "Unsize"
                                                                                    (borrow
                                                                                      α4))) in
                                                                            let*
                                                                                  α6 :
                                                                                alloc.string.String.t :=
                                                                              M.call
                                                                                (alloc.fmt.format
                                                                                  α5) in
                                                                            M.alloc
                                                                              α6 in
                                                                          let*
                                                                                α1 :
                                                                              alloc.string.String.t :=
                                                                            M.read
                                                                              res in
                                                                          let*
                                                                                α2 :
                                                                              M.Val
                                                                                never.t :=
                                                                            return_
                                                                              (core.result.Result.Err
                                                                                (α0,
                                                                                  α1)) in
                                                                          let*
                                                                                α3 :=
                                                                            M.read
                                                                              α2 in
                                                                          let*
                                                                                α4 :
                                                                              unit :=
                                                                            never_to_any
                                                                              α3 in
                                                                          M.alloc
                                                                            α4
                                                                        | _ =>
                                                                          M.break_match
                                                                        end) :
                                                                        M
                                                                          (M.Val
                                                                            unit)
                                                                    ]
                                                                end
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit)
                                                          ] in
                                                      M.alloc tt)) :
                                                    M (M.Val unit)
                                                ] in
                                            M.pure (use α4) in
                                          let* α0 :
                                              std.collections.hash.map.HashMap.t
                                                alloc.string.String.t
                                                serde_json.value.Value.t
                                                std.hash.random.RandomState.t :=
                                            M.read temp_map in
                                          M.alloc (core.option.Option.Some α0)
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.option.Option.t
                                              (std.collections.hash.map.HashMap.t
                                                alloc.string.String.t
                                                serde_json.value.Value.t
                                                std.hash.random.RandomState.t)));
                                      fun γ =>
                                        (M.alloc core.option.Option.None) :
                                        M
                                          (M.Val
                                            (core.option.Option.t
                                              (std.collections.hash.map.HashMap.t
                                                alloc.string.String.t
                                                serde_json.value.Value.t
                                                std.hash.random.RandomState.t)))
                                    ] in
                                let* α39 :
                                    core.option.Option.t
                                      (std.collections.hash.map.HashMap.t
                                        alloc.string.String.t
                                        serde_json.value.Value.t
                                        std.hash.random.RandomState.t) :=
                                  M.read α38 in
                                let* α40 :
                                    (ref serde_json.value.Value.t) ->
                                      (ref str.t) ->
                                      M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.index.Index.index
                                      (Self := serde_json.value.Value.t)
                                      (Idx := ref str.t)
                                      (Trait := ℐ))) in
                                let* α41 : ref str.t :=
                                  M.read (mk_str "file_ids") in
                                let* α42 : ref serde_json.value.Value.t :=
                                  M.call (α40 (borrow assistant) α41) in
                                let* α43 : bool.t :=
                                  M.call
                                    (serde_json.value.Value.t::["is_array"]
                                      α42) in
                                let* α44 : M.Val bool.t := M.alloc α43 in
                                let* α45 : bool.t := M.read (use α44) in
                                let* α46 :
                                    M.Val
                                      (alloc.vec.Vec.t
                                        alloc.string.String.t
                                        alloc.alloc.Global.t) :=
                                  if α45 then
                                    let* α0 :
                                        (core.iter.adapters.map.Map.t
                                            (core.slice.iter.Iter.t
                                              serde_json.value.Value.t)
                                            ((ref serde_json.value.Value.t) ->
                                              M alloc.string.String.t))
                                          ->
                                          M
                                            (alloc.vec.Vec.t
                                              alloc.string.String.t
                                              alloc.alloc.Global.t) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.iter.traits.iterator.Iterator.collect
                                          (Self :=
                                            core.iter.adapters.map.Map.t
                                              (core.slice.iter.Iter.t
                                                serde_json.value.Value.t)
                                              ((ref serde_json.value.Value.t) ->
                                                M alloc.string.String.t))
                                          (B :=
                                            alloc.vec.Vec.t
                                              alloc.string.String.t
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        (core.slice.iter.Iter.t
                                            serde_json.value.Value.t)
                                          ->
                                          ((ref serde_json.value.Value.t) ->
                                            M alloc.string.String.t)
                                          ->
                                          M
                                            (core.iter.adapters.map.Map.t
                                              (core.slice.iter.Iter.t
                                                serde_json.value.Value.t)
                                              ((ref serde_json.value.Value.t) ->
                                                M alloc.string.String.t)) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.iter.traits.iterator.Iterator.map
                                          (Self :=
                                            core.slice.iter.Iter.t
                                              serde_json.value.Value.t)
                                          (B := alloc.string.String.t)
                                          (F :=
                                            (ref serde_json.value.Value.t) ->
                                              M alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α2 :
                                        (ref
                                            (alloc.vec.Vec.t
                                              serde_json.value.Value.t
                                              alloc.alloc.Global.t))
                                          ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self :=
                                            alloc.vec.Vec.t
                                              serde_json.value.Value.t
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ))) in
                                    let* α3 :
                                        (ref serde_json.value.Value.t) ->
                                          (ref str.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.index.Index.index
                                          (Self := serde_json.value.Value.t)
                                          (Idx := ref str.t)
                                          (Trait := ℐ))) in
                                    let* α4 : ref str.t :=
                                      M.read (mk_str "file_ids") in
                                    let* α5 : ref serde_json.value.Value.t :=
                                      M.call (α3 (borrow assistant) α4) in
                                    let* α6 :
                                        core.option.Option.t
                                          (ref
                                            (alloc.vec.Vec.t
                                              serde_json.value.Value.t
                                              alloc.alloc.Global.t)) :=
                                      M.call
                                        (serde_json.value.Value.t::["as_array"]
                                          α5) in
                                    let* α7 :
                                        ref
                                          (alloc.vec.Vec.t
                                            serde_json.value.Value.t
                                            alloc.alloc.Global.t) :=
                                      M.call
                                        ((core.option.Option.t
                                              (ref
                                                (alloc.vec.Vec.t
                                                  serde_json.value.Value.t
                                                  alloc.alloc.Global.t)))::["unwrap"]
                                          α6) in
                                    let* α8 :
                                        ref (slice serde_json.value.Value.t) :=
                                      M.call (α2 α7) in
                                    let* α9 :
                                        core.slice.iter.Iter.t
                                          serde_json.value.Value.t :=
                                      M.call
                                        ((slice
                                              serde_json.value.Value.t)::["iter"]
                                          α8) in
                                    let* α10 :
                                        core.iter.adapters.map.Map.t
                                          (core.slice.iter.Iter.t
                                            serde_json.value.Value.t)
                                          ((ref serde_json.value.Value.t) ->
                                            M alloc.string.String.t) :=
                                      M.call
                                        (α1
                                          α9
                                          (fun
                                              (α0 :
                                                ref serde_json.value.Value.t) =>
                                            (let* α0 := M.alloc α0 in
                                            match_operator
                                              α0
                                              [
                                                fun γ =>
                                                  (let* file_id := M.copy γ in
                                                  let* α0 :
                                                      (ref str.t) ->
                                                        M
                                                          alloc.string.String.t :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      alloc.string.ToString.to_string
                                                        (Self := str.t)
                                                        (Trait := ℐ))) in
                                                  let* α1 :
                                                      ref
                                                        serde_json.value.Value.t :=
                                                    M.read file_id in
                                                  let* α2 :
                                                      core.option.Option.t
                                                        (ref str.t) :=
                                                    M.call
                                                      (serde_json.value.Value.t::["as_str"]
                                                        α1) in
                                                  let* α3 : ref str.t :=
                                                    M.call
                                                      ((core.option.Option.t
                                                            (ref
                                                              str.t))::["unwrap"]
                                                        α2) in
                                                  M.call (α0 α3)) :
                                                  M alloc.string.String.t
                                              ]) :
                                            M alloc.string.String.t)) in
                                    let* α11 :
                                        alloc.vec.Vec.t
                                          alloc.string.String.t
                                          alloc.alloc.Global.t :=
                                      M.call (α0 α10) in
                                    M.alloc α11
                                  else
                                    let* α0 :
                                        alloc.vec.Vec.t
                                          alloc.string.String.t
                                          alloc.alloc.Global.t :=
                                      M.call
                                        (alloc.vec.Vec.t
                                            alloc.string.String.t
                                            alloc.alloc.Global.t)::["new"] in
                                    M.alloc α0 in
                                let* α47 :
                                    alloc.vec.Vec.t
                                      alloc.string.String.t
                                      alloc.alloc.Global.t :=
                                  M.read α46 in
                                let* α48 : M alloc.string.String.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.default.Default.default
                                      (Self := alloc.string.String.t)
                                      (Trait := ℐ))) in
                                let* α49 : alloc.string.String.t :=
                                  M.call α48 in
                                let* α50 : M i32.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.default.Default.default
                                      (Self := i32.t)
                                      (Trait := ℐ))) in
                                let* α51 : i32.t := M.call α50 in
                                let* α52 :
                                    M
                                      (core.option.Option.t
                                        alloc.string.String.t) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.default.Default.default
                                      (Self :=
                                        core.option.Option.t
                                          alloc.string.String.t)
                                      (Trait := ℐ))) in
                                let* α53 :
                                    core.option.Option.t
                                      alloc.string.String.t :=
                                  M.call α52 in
                                let* α54 :
                                    (ref uuid.Uuid.t) ->
                                      M alloc.string.String.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    alloc.string.ToString.to_string
                                      (Self := uuid.Uuid.t)
                                      (Trait := ℐ))) in
                                let* α55 : M uuid.Uuid.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.default.Default.default
                                      (Self := uuid.Uuid.t)
                                      (Trait := ℐ))) in
                                let* α56 : uuid.Uuid.t := M.call α55 in
                                let* α57 : M.Val uuid.Uuid.t := M.alloc α56 in
                                let* α58 : alloc.string.String.t :=
                                  M.call (α54 (borrow α57)) in
                                let* α59 :
                                    M.Val assistants_core.models.Assistant.t :=
                                  M.alloc
                                    {|
                                      assistants_core.models.Assistant.inner :=
                                        {|
                                          async_openai.types.assistant.AssistantObject.id :=
                                            α4;
                                          async_openai.types.assistant.AssistantObject.instructions :=
                                            core.option.Option.Some α11;
                                          async_openai.types.assistant.AssistantObject.name :=
                                            core.option.Option.Some α18;
                                          async_openai.types.assistant.AssistantObject.tools :=
                                            α25;
                                          async_openai.types.assistant.AssistantObject.model :=
                                            α32;
                                          async_openai.types.assistant.AssistantObject.metadata :=
                                            α39;
                                          async_openai.types.assistant.AssistantObject.file_ids :=
                                            α47;
                                          async_openai.types.assistant.AssistantObject.object :=
                                            α49;
                                          async_openai.types.assistant.AssistantObject.created_at :=
                                            α51;
                                          async_openai.types.assistant.AssistantObject.description :=
                                            α53;
                                        |};
                                      assistants_core.models.Assistant.user_id :=
                                        α58;
                                    |} in
                                let* α60 : _ :=
                                  M.call
                                    (assistants_core.assistants.create_assistant
                                      α2
                                      (borrow α59)) in
                                let* α61 : _ := M.call (α0 α60) in
                                let* α62 : M.Val _ := M.alloc α61 in
                                let* α63 :
                                    M.Val
                                      (core.result.Result.t
                                        assistants_core.models.Assistant.t
                                        assistants_core.assistants.AssistantError.t) :=
                                  match_operator
                                    α62
                                    [
                                      fun γ =>
                                        (let* __awaitee := M.copy γ in
                                        M.loop
                                          (let* _ : M.Val unit :=
                                            let* α0 :
                                                (core.pin.Pin.t (mut_ref _)) ->
                                                  (mut_ref
                                                    core.task.wake.Context.t)
                                                  ->
                                                  M (core.task.poll.Poll.t _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.future.future.Future.poll
                                                  (Self := _)
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                core.pin.Pin.t (mut_ref _) :=
                                              M.call
                                                ((core.pin.Pin.t
                                                      (mut_ref
                                                        _))::["new_unchecked"]
                                                  (borrow_mut __awaitee)) in
                                            let* α2 : core.future.ResumeTy.t :=
                                              M.read _task_context in
                                            let* α3 :
                                                mut_ref
                                                  core.task.wake.Context.t :=
                                              M.call
                                                (core.future.get_context α2) in
                                            let* α4 :
                                                core.task.poll.Poll.t
                                                  (core.result.Result.t
                                                    assistants_core.models.Assistant.t
                                                    assistants_core.assistants.AssistantError.t) :=
                                              M.call (α0 α1 α3) in
                                            let* α5 :
                                                M.Val
                                                  (core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      assistants_core.models.Assistant.t
                                                      assistants_core.assistants.AssistantError.t)) :=
                                              M.alloc α4 in
                                            match_operator
                                              α5
                                              [
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  |
                                                      core.task.poll.Poll.Ready
                                                        _
                                                      =>
                                                    let γ0_0 :=
                                                      core.task.poll.Poll.Get_Ready_0
                                                        γ in
                                                    let* result :=
                                                      M.copy γ0_0 in
                                                    let* α0 : M.Val never.t :=
                                                      M.break in
                                                    let* α1 := M.read α0 in
                                                    let* α2 : unit :=
                                                      never_to_any α1 in
                                                    M.alloc α2
                                                  | _ => M.break_match
                                                  end) :
                                                  M (M.Val unit);
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  |
                                                      core.task.poll.Poll.Pending
                                                      =>
                                                    M.alloc tt
                                                  | _ => M.break_match
                                                  end) :
                                                  M (M.Val unit)
                                              ] in
                                          let* _ : M.Val unit :=
                                            let* α0 : M.Val unit :=
                                              M.alloc tt in
                                            let* α1 :
                                                M.Val core.future.ResumeTy.t :=
                                              yield α0 in
                                            let* α2 : core.future.ResumeTy.t :=
                                              M.read α1 in
                                            assign _task_context α2 in
                                          M.alloc tt)) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              assistants_core.models.Assistant.t
                                              assistants_core.assistants.AssistantError.t))
                                    ] in
                                M.copy α63 in
                              let* α0 :
                                  M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.assistant.AssistantObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)) :=
                                match_operator
                                  assistant
                                  [
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | core.result.Result.Ok _ =>
                                        let γ0_0 :=
                                          core.result.Result.Get_Ok_0 γ in
                                        let* assistant := M.copy γ0_0 in
                                        let* α0 :
                                            async_openai.types.assistant.AssistantObject.t :=
                                          M.read
                                            (assistants_core.models.Assistant.Get_inner
                                              assistant) in
                                        M.alloc
                                          (core.result.Result.Ok
                                            (axum.json.Json.Build_t α0))
                                      | _ => M.break_match
                                      end) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (axum.json.Json.t
                                              async_openai.types.assistant.AssistantObject.t)
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t)));
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | core.result.Result.Err _ =>
                                        let γ0_0 :=
                                          core.result.Result.Get_Err_0 γ in
                                        let* e := M.copy γ0_0 in
                                        let* α0 : http.status.StatusCode.t :=
                                          M.read
                                            http.status.INTERNAL_SERVER_ERROR in
                                        let* α1 :
                                            (ref
                                                assistants_core.assistants.AssistantError.t)
                                              ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            alloc.string.ToString.to_string
                                              (Self :=
                                                assistants_core.assistants.AssistantError.t)
                                              (Trait := ℐ))) in
                                        let* α2 : alloc.string.String.t :=
                                          M.call (α1 (borrow e)) in
                                        M.alloc
                                          (core.result.Result.Err (α0, α2))
                                      | _ => M.break_match
                                      end) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (axum.json.Json.t
                                              async_openai.types.assistant.AssistantObject.t)
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t)))
                                  ] in
                              M.pure (use α0)
                            end) :
                            M
                              (M.Val
                                (core.result.Result.t
                                  (axum.json.Json.t
                                    async_openai.types.assistant.AssistantObject.t)
                                  (http.status.StatusCode.t
                                  *
                                  alloc.string.String.t)))
                        ]
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.assistant.AssistantObject.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t
                  async_openai.types.assistant.AssistantObject.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.assistant.AssistantObject.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

Error OpaqueTy.

(*
pub async fn get_assistant_handler(
    Path((assistant_id,)): Path<(String,)>,
    State(app_state): State<AppState>,
) -> Result<JsonResponse<AssistantObject>, (StatusCode, String)> {
    match get_assistant(&app_state.pool, &assistant_id, &Uuid::default().to_string()).await {
        Ok(assistant) => Ok(JsonResponse(assistant.inner)),
        Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
    }
}
*)
Definition get_assistant_handler
    (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t
                      async_openai.types.assistant.AssistantObject.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_) =>
                        let γ1_0 := γ0_0 in
                        let* assistant_id := M.copy γ1_0 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* α0 : _ -> M _ :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.future.into_future.IntoFuture.into_future
                                      (Self := _)
                                      (Trait := ℐ))) in
                                let* α1 :
                                    (ref
                                        (alloc.sync.Arc.t
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t)
                                          alloc.alloc.Global.t))
                                      ->
                                      M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.deref.Deref.deref
                                      (Self :=
                                        alloc.sync.Arc.t
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t)
                                          alloc.alloc.Global.t)
                                      (Trait := ℐ))) in
                                let* α2 :
                                    ref
                                      (sqlx_core.pool.Pool.t
                                        sqlx_postgres.database.Postgres.t) :=
                                  M.call
                                    (α1
                                      (borrow
                                        (assistants_api_communication.models.AppState.Get_pool
                                          app_state))) in
                                let* α3 :
                                    (ref alloc.string.String.t) -> M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.deref.Deref.deref
                                      (Self := alloc.string.String.t)
                                      (Trait := ℐ))) in
                                let* α4 : ref str.t :=
                                  M.call (α3 (borrow assistant_id)) in
                                let* α5 :
                                    (ref alloc.string.String.t) -> M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.deref.Deref.deref
                                      (Self := alloc.string.String.t)
                                      (Trait := ℐ))) in
                                let* α6 :
                                    (ref uuid.Uuid.t) ->
                                      M alloc.string.String.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    alloc.string.ToString.to_string
                                      (Self := uuid.Uuid.t)
                                      (Trait := ℐ))) in
                                let* α7 : M uuid.Uuid.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.default.Default.default
                                      (Self := uuid.Uuid.t)
                                      (Trait := ℐ))) in
                                let* α8 : uuid.Uuid.t := M.call α7 in
                                let* α9 : M.Val uuid.Uuid.t := M.alloc α8 in
                                let* α10 : alloc.string.String.t :=
                                  M.call (α6 (borrow α9)) in
                                let* α11 : M.Val alloc.string.String.t :=
                                  M.alloc α10 in
                                let* α12 : ref str.t :=
                                  M.call (α5 (borrow α11)) in
                                let* α13 : _ :=
                                  M.call
                                    (assistants_core.assistants.get_assistant
                                      α2
                                      α4
                                      α12) in
                                let* α14 : _ := M.call (α0 α13) in
                                let* α15 : M.Val _ := M.alloc α14 in
                                let* α16 :
                                    M.Val
                                      (core.result.Result.t
                                        assistants_core.models.Assistant.t
                                        sqlx_core.error.Error.t) :=
                                  match_operator
                                    α15
                                    [
                                      fun γ =>
                                        (let* __awaitee := M.copy γ in
                                        M.loop
                                          (let* _ : M.Val unit :=
                                            let* α0 :
                                                (core.pin.Pin.t (mut_ref _)) ->
                                                  (mut_ref
                                                    core.task.wake.Context.t)
                                                  ->
                                                  M (core.task.poll.Poll.t _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.future.future.Future.poll
                                                  (Self := _)
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                core.pin.Pin.t (mut_ref _) :=
                                              M.call
                                                ((core.pin.Pin.t
                                                      (mut_ref
                                                        _))::["new_unchecked"]
                                                  (borrow_mut __awaitee)) in
                                            let* α2 : core.future.ResumeTy.t :=
                                              M.read _task_context in
                                            let* α3 :
                                                mut_ref
                                                  core.task.wake.Context.t :=
                                              M.call
                                                (core.future.get_context α2) in
                                            let* α4 :
                                                core.task.poll.Poll.t
                                                  (core.result.Result.t
                                                    assistants_core.models.Assistant.t
                                                    sqlx_core.error.Error.t) :=
                                              M.call (α0 α1 α3) in
                                            let* α5 :
                                                M.Val
                                                  (core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      assistants_core.models.Assistant.t
                                                      sqlx_core.error.Error.t)) :=
                                              M.alloc α4 in
                                            match_operator
                                              α5
                                              [
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  |
                                                      core.task.poll.Poll.Ready
                                                        _
                                                      =>
                                                    let γ0_0 :=
                                                      core.task.poll.Poll.Get_Ready_0
                                                        γ in
                                                    let* result :=
                                                      M.copy γ0_0 in
                                                    let* α0 : M.Val never.t :=
                                                      M.break in
                                                    let* α1 := M.read α0 in
                                                    let* α2 : unit :=
                                                      never_to_any α1 in
                                                    M.alloc α2
                                                  | _ => M.break_match
                                                  end) :
                                                  M (M.Val unit);
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  |
                                                      core.task.poll.Poll.Pending
                                                      =>
                                                    M.alloc tt
                                                  | _ => M.break_match
                                                  end) :
                                                  M (M.Val unit)
                                              ] in
                                          let* _ : M.Val unit :=
                                            let* α0 : M.Val unit :=
                                              M.alloc tt in
                                            let* α1 :
                                                M.Val core.future.ResumeTy.t :=
                                              yield α0 in
                                            let* α2 : core.future.ResumeTy.t :=
                                              M.read α1 in
                                            assign _task_context α2 in
                                          M.alloc tt)) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              assistants_core.models.Assistant.t
                                              sqlx_core.error.Error.t))
                                    ] in
                                let* α17 :
                                    M.Val
                                      (core.result.Result.t
                                        (axum.json.Json.t
                                          async_openai.types.assistant.AssistantObject.t)
                                        (http.status.StatusCode.t
                                        *
                                        alloc.string.String.t)) :=
                                  match_operator
                                    α16
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Ok _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Ok_0 γ in
                                          let* assistant := M.copy γ0_0 in
                                          let* α0 :
                                              async_openai.types.assistant.AssistantObject.t :=
                                            M.read
                                              (assistants_core.models.Assistant.Get_inner
                                                assistant) in
                                          M.alloc
                                            (core.result.Result.Ok
                                              (axum.json.Json.Build_t α0))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.assistant.AssistantObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)));
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Err _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Err_0 γ in
                                          let* e := M.copy γ0_0 in
                                          let* α0 : http.status.StatusCode.t :=
                                            M.read
                                              http.status.INTERNAL_SERVER_ERROR in
                                          let* α1 :
                                              (ref sqlx_core.error.Error.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self :=
                                                  sqlx_core.error.Error.t)
                                                (Trait := ℐ))) in
                                          let* α2 : alloc.string.String.t :=
                                            M.call (α1 (borrow e)) in
                                          M.alloc
                                            (core.result.Result.Err (α0, α2))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.assistant.AssistantObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ] in
                                M.pure (use α17)
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.assistant.AssistantObject.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.assistant.AssistantObject.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t
                  async_openai.types.assistant.AssistantObject.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.assistant.AssistantObject.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn update_assistant_handler(
    Path((assistant_id,)): Path<(String,)>,
    State(app_state): State<AppState>,
    Json(assistant): Json<ModifyAssistantRequest>, // TODO: either eliminate dependance on crates or custom types for similar objects. This and the create_assistant_handler are unecessarily different as a result.
) -> Result<JsonResponse<AssistantObject>, (StatusCode, String)> {
    match update_assistant(
        &app_state.pool,
        &assistant_id,
        &Assistant {
            inner: AssistantObject {
                id: Default::default(),
                instructions: assistant.instructions,
                name: assistant.name,
                tools: assistant
                    .tools
                    .map(|tools| tools.into_iter().map(|tool| tool.into()).collect())
                    .unwrap_or(vec![]),
                model: assistant.model.unwrap_or("".to_string()), // TODO dirty?
                metadata: if let Some(object) = &assistant.metadata {
                    let mut temp_map = HashMap::new();
                    for (k, v) in object {
                        match v.as_str() {
                            Some(str_value) => {
                                temp_map.insert(k.clone(), Value::String(str_value.to_string()));
                            },
                            None => {
                                return Err((
                                    StatusCode::BAD_REQUEST,
                                    format!("Metadata value for key '{}' is not a string. All metadata values must be strings.", k)
                                ));
                            },
                        }
                    }
                    Some(temp_map)
                } else {
                    None
                },
                file_ids: assistant.file_ids.unwrap_or(vec![]),
                object: Default::default(),
                created_at: Default::default(),
                description: Default::default(),
            },
            user_id: Uuid::default().to_string(),
        },
    )
    .await
    {
        Ok(assistant) => Ok(JsonResponse(assistant.inner)),
        Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
    }
}
*)
Definition update_assistant_handler
    (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    (__arg2
      :
      axum.json.Json.t async_openai.types.assistant.ModifyAssistantRequest.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  let* __arg2 := M.alloc __arg2 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t
                      async_openai.types.assistant.AssistantObject.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_) =>
                        let γ1_0 := γ0_0 in
                        let* assistant_id := M.copy γ1_0 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* __arg2 :
                                    M.Val
                                      (axum.json.Json.t
                                        async_openai.types.assistant.ModifyAssistantRequest.t) :=
                                  M.copy __arg2 in
                                match_operator
                                  __arg2
                                  [
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | axum.json.Json.Build_t _ =>
                                        let γ0_0 := axum.json.Json.Get_0 γ in
                                        let* assistant := M.copy γ0_0 in
                                        let* α0 : _ -> M _ :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.future.into_future.IntoFuture.into_future
                                              (Self := _)
                                              (Trait := ℐ))) in
                                        let* α1 :
                                            (ref
                                                (alloc.sync.Arc.t
                                                  (sqlx_core.pool.Pool.t
                                                    sqlx_postgres.database.Postgres.t)
                                                  alloc.alloc.Global.t))
                                              ->
                                              M (ref _) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.ops.deref.Deref.deref
                                              (Self :=
                                                alloc.sync.Arc.t
                                                  (sqlx_core.pool.Pool.t
                                                    sqlx_postgres.database.Postgres.t)
                                                  alloc.alloc.Global.t)
                                              (Trait := ℐ))) in
                                        let* α2 :
                                            ref
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t) :=
                                          M.call
                                            (α1
                                              (borrow
                                                (assistants_api_communication.models.AppState.Get_pool
                                                  app_state))) in
                                        let* α3 :
                                            (ref alloc.string.String.t) ->
                                              M (ref _) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.ops.deref.Deref.deref
                                              (Self := alloc.string.String.t)
                                              (Trait := ℐ))) in
                                        let* α4 : ref str.t :=
                                          M.call (α3 (borrow assistant_id)) in
                                        let* α5 : M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.default.Default.default
                                              (Self := alloc.string.String.t)
                                              (Trait := ℐ))) in
                                        let* α6 : alloc.string.String.t :=
                                          M.call α5 in
                                        let* α7 :
                                            core.option.Option.t
                                              alloc.string.String.t :=
                                          M.read
                                            (async_openai.types.assistant.ModifyAssistantRequest.Get_instructions
                                              assistant) in
                                        let* α8 :
                                            core.option.Option.t
                                              alloc.string.String.t :=
                                          M.read
                                            (async_openai.types.assistant.ModifyAssistantRequest.Get_name
                                              assistant) in
                                        let* α9 :
                                            core.option.Option.t
                                              (alloc.vec.Vec.t
                                                async_openai.types.assistant.AssistantTools.t
                                                alloc.alloc.Global.t) :=
                                          M.read
                                            (async_openai.types.assistant.ModifyAssistantRequest.Get_tools
                                              assistant) in
                                        let* α10 :
                                            core.option.Option.t
                                              (alloc.vec.Vec.t
                                                async_openai.types.assistant.AssistantTools.t
                                                alloc.alloc.Global.t) :=
                                          M.call
                                            ((core.option.Option.t
                                                  (alloc.vec.Vec.t
                                                    async_openai.types.assistant.AssistantTools.t
                                                    alloc.alloc.Global.t))::["map"]
                                              α9
                                              (fun
                                                  (α0 :
                                                    alloc.vec.Vec.t
                                                      async_openai.types.assistant.AssistantTools.t
                                                      alloc.alloc.Global.t) =>
                                                (let* α0 := M.alloc α0 in
                                                match_operator
                                                  α0
                                                  [
                                                    fun γ =>
                                                      (let* tools := M.copy γ in
                                                      let* α0 :
                                                          (core.iter.adapters.map.Map.t
                                                              (alloc.vec.into_iter.IntoIter.t
                                                                async_openai.types.assistant.AssistantTools.t
                                                                alloc.alloc.Global.t)
                                                              (async_openai.types.assistant.AssistantTools.t
                                                                ->
                                                                M
                                                                  async_openai.types.assistant.AssistantTools.t))
                                                            ->
                                                            M
                                                              (alloc.vec.Vec.t
                                                                async_openai.types.assistant.AssistantTools.t
                                                                alloc.alloc.Global.t) :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.iter.traits.iterator.Iterator.collect
                                                            (Self :=
                                                              core.iter.adapters.map.Map.t
                                                                (alloc.vec.into_iter.IntoIter.t
                                                                  async_openai.types.assistant.AssistantTools.t
                                                                  alloc.alloc.Global.t)
                                                                (async_openai.types.assistant.AssistantTools.t
                                                                  ->
                                                                  M
                                                                    async_openai.types.assistant.AssistantTools.t))
                                                            (B :=
                                                              alloc.vec.Vec.t
                                                                async_openai.types.assistant.AssistantTools.t
                                                                alloc.alloc.Global.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          (alloc.vec.into_iter.IntoIter.t
                                                              async_openai.types.assistant.AssistantTools.t
                                                              alloc.alloc.Global.t)
                                                            ->
                                                            (async_openai.types.assistant.AssistantTools.t
                                                              ->
                                                              M
                                                                async_openai.types.assistant.AssistantTools.t)
                                                            ->
                                                            M
                                                              (core.iter.adapters.map.Map.t
                                                                (alloc.vec.into_iter.IntoIter.t
                                                                  async_openai.types.assistant.AssistantTools.t
                                                                  alloc.alloc.Global.t)
                                                                (async_openai.types.assistant.AssistantTools.t
                                                                  ->
                                                                  M
                                                                    async_openai.types.assistant.AssistantTools.t)) :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.iter.traits.iterator.Iterator.map
                                                            (Self :=
                                                              alloc.vec.into_iter.IntoIter.t
                                                                async_openai.types.assistant.AssistantTools.t
                                                                alloc.alloc.Global.t)
                                                            (B :=
                                                              async_openai.types.assistant.AssistantTools.t)
                                                            (F :=
                                                              async_openai.types.assistant.AssistantTools.t
                                                                ->
                                                                M
                                                                  async_openai.types.assistant.AssistantTools.t)
                                                            (Trait := ℐ))) in
                                                      let* α2 :
                                                          (alloc.vec.Vec.t
                                                              async_openai.types.assistant.AssistantTools.t
                                                              alloc.alloc.Global.t)
                                                            ->
                                                            M _ :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.iter.traits.collect.IntoIterator.into_iter
                                                            (Self :=
                                                              alloc.vec.Vec.t
                                                                async_openai.types.assistant.AssistantTools.t
                                                                alloc.alloc.Global.t)
                                                            (Trait := ℐ))) in
                                                      let* α3 :
                                                          alloc.vec.Vec.t
                                                            async_openai.types.assistant.AssistantTools.t
                                                            alloc.alloc.Global.t :=
                                                        M.read tools in
                                                      let* α4 :
                                                          alloc.vec.into_iter.IntoIter.t
                                                            async_openai.types.assistant.AssistantTools.t
                                                            alloc.alloc.Global.t :=
                                                        M.call (α2 α3) in
                                                      let* α5 :
                                                          core.iter.adapters.map.Map.t
                                                            (alloc.vec.into_iter.IntoIter.t
                                                              async_openai.types.assistant.AssistantTools.t
                                                              alloc.alloc.Global.t)
                                                            (async_openai.types.assistant.AssistantTools.t
                                                              ->
                                                              M
                                                                async_openai.types.assistant.AssistantTools.t) :=
                                                        M.call
                                                          (α1
                                                            α4
                                                            (fun
                                                                (α0 :
                                                                  async_openai.types.assistant.AssistantTools.t) =>
                                                              (let* α0 :=
                                                                M.alloc α0 in
                                                              match_operator
                                                                α0
                                                                [
                                                                  fun γ =>
                                                                    (let*
                                                                          tool :=
                                                                      M.copy
                                                                        γ in
                                                                    let* α0 :
                                                                        async_openai.types.assistant.AssistantTools.t
                                                                          ->
                                                                          M
                                                                            async_openai.types.assistant.AssistantTools.t :=
                                                                      ltac:(M.get_method (fun ℐ =>
                                                                        core.convert.Into.into
                                                                          (Self :=
                                                                            async_openai.types.assistant.AssistantTools.t)
                                                                          (T :=
                                                                            async_openai.types.assistant.AssistantTools.t)
                                                                          (Trait := ℐ))) in
                                                                    let* α1 :
                                                                        async_openai.types.assistant.AssistantTools.t :=
                                                                      M.read
                                                                        tool in
                                                                    M.call
                                                                      (α0 α1)) :
                                                                    M
                                                                      async_openai.types.assistant.AssistantTools.t
                                                                ]) :
                                                              M
                                                                async_openai.types.assistant.AssistantTools.t)) in
                                                      M.call (α0 α5)) :
                                                      M
                                                        (alloc.vec.Vec.t
                                                          async_openai.types.assistant.AssistantTools.t
                                                          alloc.alloc.Global.t)
                                                  ]) :
                                                M
                                                  (alloc.vec.Vec.t
                                                    async_openai.types.assistant.AssistantTools.t
                                                    alloc.alloc.Global.t))) in
                                        let* α11 :
                                            alloc.vec.Vec.t
                                              async_openai.types.assistant.AssistantTools.t
                                              alloc.alloc.Global.t :=
                                          M.call
                                            (alloc.vec.Vec.t
                                                async_openai.types.assistant.AssistantTools.t
                                                alloc.alloc.Global.t)::["new"] in
                                        let* α12 :
                                            alloc.vec.Vec.t
                                              async_openai.types.assistant.AssistantTools.t
                                              alloc.alloc.Global.t :=
                                          M.call
                                            ((core.option.Option.t
                                                  (alloc.vec.Vec.t
                                                    async_openai.types.assistant.AssistantTools.t
                                                    alloc.alloc.Global.t))::["unwrap_or"]
                                              α10
                                              α11) in
                                        let* α13 :
                                            core.option.Option.t
                                              alloc.string.String.t :=
                                          M.read
                                            (async_openai.types.assistant.ModifyAssistantRequest.Get_model
                                              assistant) in
                                        let* α14 :
                                            (ref str.t) ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            alloc.string.ToString.to_string
                                              (Self := str.t)
                                              (Trait := ℐ))) in
                                        let* α15 : ref str.t :=
                                          M.read (mk_str "") in
                                        let* α16 : alloc.string.String.t :=
                                          M.call (α14 α15) in
                                        let* α17 : alloc.string.String.t :=
                                          M.call
                                            ((core.option.Option.t
                                                  alloc.string.String.t)::["unwrap_or"]
                                              α13
                                              α16) in
                                        let* α18 :
                                            M.Val
                                              (ref
                                                (core.option.Option.t
                                                  (std.collections.hash.map.HashMap.t
                                                    alloc.string.String.t
                                                    serde_json.value.Value.t
                                                    std.hash.random.RandomState.t))) :=
                                          M.alloc
                                            (borrow
                                              (async_openai.types.assistant.ModifyAssistantRequest.Get_metadata
                                                assistant)) in
                                        let* α19 :
                                            M.Val
                                              (core.option.Option.t
                                                (std.collections.hash.map.HashMap.t
                                                  alloc.string.String.t
                                                  serde_json.value.Value.t
                                                  std.hash.random.RandomState.t)) :=
                                          match_operator
                                            α18
                                            [
                                              fun γ =>
                                                (let* γ :=
                                                  let* α0 := M.read γ in
                                                  M.pure (deref α0) in
                                                let* α0 := M.read γ in
                                                match α0 with
                                                | core.option.Option.Some _ =>
                                                  let γ1_0 :=
                                                    core.option.Option.Get_Some_0
                                                      γ in
                                                  let* object :=
                                                    M.alloc (borrow γ1_0) in
                                                  let* temp_map :
                                                      M.Val
                                                        (std.collections.hash.map.HashMap.t
                                                          alloc.string.String.t
                                                          serde_json.value.Value.t
                                                          std.hash.random.RandomState.t) :=
                                                    let* α0 :
                                                        std.collections.hash.map.HashMap.t
                                                          alloc.string.String.t
                                                          serde_json.value.Value.t
                                                          std.hash.random.RandomState.t :=
                                                      M.call
                                                        (std.collections.hash.map.HashMap.t
                                                            alloc.string.String.t
                                                            serde_json.value.Value.t
                                                            std.hash.random.RandomState.t)::["new"] in
                                                    M.alloc α0 in
                                                  let* _ : M.Val unit :=
                                                    let* α0 :
                                                        (ref
                                                            (std.collections.hash.map.HashMap.t
                                                              alloc.string.String.t
                                                              serde_json.value.Value.t
                                                              std.hash.random.RandomState.t))
                                                          ->
                                                          M _ :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.iter.traits.collect.IntoIterator.into_iter
                                                          (Self :=
                                                            ref
                                                              (std.collections.hash.map.HashMap.t
                                                                alloc.string.String.t
                                                                serde_json.value.Value.t
                                                                std.hash.random.RandomState.t))
                                                          (Trait := ℐ))) in
                                                    let* α1 :
                                                        ref
                                                          (std.collections.hash.map.HashMap.t
                                                            alloc.string.String.t
                                                            serde_json.value.Value.t
                                                            std.hash.random.RandomState.t) :=
                                                      M.read object in
                                                    let* α2 :
                                                        std.collections.hash.map.Iter.t
                                                          alloc.string.String.t
                                                          serde_json.value.Value.t :=
                                                      M.call (α0 α1) in
                                                    let* α3 :
                                                        M.Val
                                                          (std.collections.hash.map.Iter.t
                                                            alloc.string.String.t
                                                            serde_json.value.Value.t) :=
                                                      M.alloc α2 in
                                                    let* α4 : M.Val unit :=
                                                      match_operator
                                                        α3
                                                        [
                                                          fun γ =>
                                                            (let* iter :=
                                                              M.copy γ in
                                                            M.loop
                                                              (let* _ :
                                                                  M.Val unit :=
                                                                let* α0 :
                                                                    (mut_ref
                                                                        (std.collections.hash.map.Iter.t
                                                                          alloc.string.String.t
                                                                          serde_json.value.Value.t))
                                                                      ->
                                                                      M
                                                                        (core.option.Option.t
                                                                          _) :=
                                                                  ltac:(M.get_method (fun ℐ =>
                                                                    core.iter.traits.iterator.Iterator.next
                                                                      (Self :=
                                                                        std.collections.hash.map.Iter.t
                                                                          alloc.string.String.t
                                                                          serde_json.value.Value.t)
                                                                      (Trait := ℐ))) in
                                                                let* α1 :
                                                                    core.option.Option.t
                                                                      ((ref
                                                                        alloc.string.String.t)
                                                                      *
                                                                      (ref
                                                                        serde_json.value.Value.t)) :=
                                                                  M.call
                                                                    (α0
                                                                      (borrow_mut
                                                                        iter)) in
                                                                let* α2 :
                                                                    M.Val
                                                                      (core.option.Option.t
                                                                        ((ref
                                                                          alloc.string.String.t)
                                                                        *
                                                                        (ref
                                                                          serde_json.value.Value.t))) :=
                                                                  M.alloc α1 in
                                                                match_operator
                                                                  α2
                                                                  [
                                                                    fun γ =>
                                                                      (let*
                                                                            α0 :=
                                                                        M.read
                                                                          γ in
                                                                      match α0
                                                                      with
                                                                      |
                                                                          core.option.Option.None
                                                                          =>
                                                                        let*
                                                                              α0 :
                                                                            M.Val
                                                                              never.t :=
                                                                          M.break in
                                                                        let*
                                                                              α1 :=
                                                                          M.read
                                                                            α0 in
                                                                        let*
                                                                              α2 :
                                                                            unit :=
                                                                          never_to_any
                                                                            α1 in
                                                                        M.alloc
                                                                          α2
                                                                      | _ =>
                                                                        M.break_match
                                                                      end) :
                                                                      M
                                                                        (M.Val
                                                                          unit);
                                                                    fun γ =>
                                                                      (let*
                                                                            α0 :=
                                                                        M.read
                                                                          γ in
                                                                      match α0
                                                                      with
                                                                      |
                                                                          core.option.Option.Some
                                                                            _
                                                                          =>
                                                                        let
                                                                              γ0_0 :=
                                                                          core.option.Option.Get_Some_0
                                                                            γ in
                                                                        let*
                                                                              α0 :=
                                                                          M.read
                                                                            γ0_0 in
                                                                        match α0
                                                                        with
                                                                        |
                                                                            (_,
                                                                              _)
                                                                            =>
                                                                          let
                                                                                γ1_0 :=
                                                                            Tuple.Access.left
                                                                              γ0_0 in
                                                                          let
                                                                                γ1_1 :=
                                                                            Tuple.Access.right
                                                                              γ0_0 in
                                                                          let*
                                                                                k :=
                                                                            M.copy
                                                                              γ1_0 in
                                                                          let*
                                                                                v :=
                                                                            M.copy
                                                                              γ1_1 in
                                                                          let*
                                                                                α0 :
                                                                              ref
                                                                                serde_json.value.Value.t :=
                                                                            M.read
                                                                              v in
                                                                          let*
                                                                                α1 :
                                                                              core.option.Option.t
                                                                                (ref
                                                                                  str.t) :=
                                                                            M.call
                                                                              (serde_json.value.Value.t::["as_str"]
                                                                                α0) in
                                                                          let*
                                                                                α2 :
                                                                              M.Val
                                                                                (core.option.Option.t
                                                                                  (ref
                                                                                    str.t)) :=
                                                                            M.alloc
                                                                              α1 in
                                                                          match_operator
                                                                            α2
                                                                            [
                                                                              fun
                                                                                  γ =>
                                                                                (let*
                                                                                      α0 :=
                                                                                  M.read
                                                                                    γ in
                                                                                match
                                                                                  α0
                                                                                with
                                                                                |
                                                                                    core.option.Option.Some
                                                                                      _
                                                                                    =>
                                                                                  let
                                                                                        γ0_0 :=
                                                                                    core.option.Option.Get_Some_0
                                                                                      γ in
                                                                                  let*
                                                                                        str_value :=
                                                                                    M.copy
                                                                                      γ0_0 in
                                                                                  let*
                                                                                        _ :
                                                                                      M.Val
                                                                                        (core.option.Option.t
                                                                                          serde_json.value.Value.t) :=
                                                                                    let*
                                                                                          α0 :
                                                                                        (ref
                                                                                            alloc.string.String.t)
                                                                                          ->
                                                                                          M
                                                                                            alloc.string.String.t :=
                                                                                      ltac:(M.get_method (fun ℐ =>
                                                                                        core.clone.Clone.clone
                                                                                          (Self :=
                                                                                            alloc.string.String.t)
                                                                                          (Trait := ℐ))) in
                                                                                    let*
                                                                                          α1 :
                                                                                        ref
                                                                                          alloc.string.String.t :=
                                                                                      M.read
                                                                                        k in
                                                                                    let*
                                                                                          α2 :
                                                                                        alloc.string.String.t :=
                                                                                      M.call
                                                                                        (α0
                                                                                          α1) in
                                                                                    let*
                                                                                          α3 :
                                                                                        (ref
                                                                                            str.t)
                                                                                          ->
                                                                                          M
                                                                                            alloc.string.String.t :=
                                                                                      ltac:(M.get_method (fun ℐ =>
                                                                                        alloc.string.ToString.to_string
                                                                                          (Self :=
                                                                                            str.t)
                                                                                          (Trait := ℐ))) in
                                                                                    let*
                                                                                          α4 :
                                                                                        ref
                                                                                          str.t :=
                                                                                      M.read
                                                                                        str_value in
                                                                                    let*
                                                                                          α5 :
                                                                                        alloc.string.String.t :=
                                                                                      M.call
                                                                                        (α3
                                                                                          α4) in
                                                                                    let*
                                                                                          α6 :
                                                                                        core.option.Option.t
                                                                                          serde_json.value.Value.t :=
                                                                                      M.call
                                                                                        ((std.collections.hash.map.HashMap.t
                                                                                              alloc.string.String.t
                                                                                              serde_json.value.Value.t
                                                                                              std.hash.random.RandomState.t)::["insert"]
                                                                                          (borrow_mut
                                                                                            temp_map)
                                                                                          α2
                                                                                          (serde_json.value.Value.String
                                                                                            α5)) in
                                                                                    M.alloc
                                                                                      α6 in
                                                                                  M.alloc
                                                                                    tt
                                                                                |
                                                                                    _
                                                                                    =>
                                                                                  M.break_match
                                                                                end) :
                                                                                M
                                                                                  (M.Val
                                                                                    unit);
                                                                              fun
                                                                                  γ =>
                                                                                (let*
                                                                                      α0 :=
                                                                                  M.read
                                                                                    γ in
                                                                                match
                                                                                  α0
                                                                                with
                                                                                |
                                                                                    core.option.Option.None
                                                                                    =>
                                                                                  let*
                                                                                        α0 :
                                                                                      http.status.StatusCode.t :=
                                                                                    M.read
                                                                                      http.status.BAD_REQUEST in
                                                                                  let*
                                                                                        res :
                                                                                      M.Val
                                                                                        alloc.string.String.t :=
                                                                                    let*
                                                                                          α0 :
                                                                                        ref
                                                                                          str.t :=
                                                                                      M.read
                                                                                        (mk_str
                                                                                          "Metadata value for key '") in
                                                                                    let*
                                                                                          α1 :
                                                                                        ref
                                                                                          str.t :=
                                                                                      M.read
                                                                                        (mk_str
                                                                                          "' is not a string. All metadata values must be strings.") in
                                                                                    let*
                                                                                          α2 :
                                                                                        M.Val
                                                                                          (array
                                                                                            (ref
                                                                                              str.t)) :=
                                                                                      M.alloc
                                                                                        [
                                                                                          α0;
                                                                                          α1
                                                                                        ] in
                                                                                    let*
                                                                                          α3 :
                                                                                        core.fmt.rt.Argument.t :=
                                                                                      M.call
                                                                                        (core.fmt.rt.Argument.t::["new_display"]
                                                                                          (borrow
                                                                                            k)) in
                                                                                    let*
                                                                                          α4 :
                                                                                        M.Val
                                                                                          (array
                                                                                            core.fmt.rt.Argument.t) :=
                                                                                      M.alloc
                                                                                        [
                                                                                          α3
                                                                                        ] in
                                                                                    let*
                                                                                          α5 :
                                                                                        core.fmt.Arguments.t :=
                                                                                      M.call
                                                                                        (core.fmt.Arguments.t::["new_v1"]
                                                                                          (pointer_coercion
                                                                                            "Unsize"
                                                                                            (borrow
                                                                                              α2))
                                                                                          (pointer_coercion
                                                                                            "Unsize"
                                                                                            (borrow
                                                                                              α4))) in
                                                                                    let*
                                                                                          α6 :
                                                                                        alloc.string.String.t :=
                                                                                      M.call
                                                                                        (alloc.fmt.format
                                                                                          α5) in
                                                                                    M.alloc
                                                                                      α6 in
                                                                                  let*
                                                                                        α1 :
                                                                                      alloc.string.String.t :=
                                                                                    M.read
                                                                                      res in
                                                                                  let*
                                                                                        α2 :
                                                                                      M.Val
                                                                                        never.t :=
                                                                                    return_
                                                                                      (core.result.Result.Err
                                                                                        (α0,
                                                                                          α1)) in
                                                                                  let*
                                                                                        α3 :=
                                                                                    M.read
                                                                                      α2 in
                                                                                  let*
                                                                                        α4 :
                                                                                      unit :=
                                                                                    never_to_any
                                                                                      α3 in
                                                                                  M.alloc
                                                                                    α4
                                                                                |
                                                                                    _
                                                                                    =>
                                                                                  M.break_match
                                                                                end) :
                                                                                M
                                                                                  (M.Val
                                                                                    unit)
                                                                            ]
                                                                        end
                                                                      | _ =>
                                                                        M.break_match
                                                                      end) :
                                                                      M
                                                                        (M.Val
                                                                          unit)
                                                                  ] in
                                                              M.alloc tt)) :
                                                            M (M.Val unit)
                                                        ] in
                                                    M.pure (use α4) in
                                                  let* α0 :
                                                      std.collections.hash.map.HashMap.t
                                                        alloc.string.String.t
                                                        serde_json.value.Value.t
                                                        std.hash.random.RandomState.t :=
                                                    M.read temp_map in
                                                  M.alloc
                                                    (core.option.Option.Some α0)
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.option.Option.t
                                                      (std.collections.hash.map.HashMap.t
                                                        alloc.string.String.t
                                                        serde_json.value.Value.t
                                                        std.hash.random.RandomState.t)));
                                              fun γ =>
                                                (M.alloc
                                                  core.option.Option.None) :
                                                M
                                                  (M.Val
                                                    (core.option.Option.t
                                                      (std.collections.hash.map.HashMap.t
                                                        alloc.string.String.t
                                                        serde_json.value.Value.t
                                                        std.hash.random.RandomState.t)))
                                            ] in
                                        let* α20 :
                                            core.option.Option.t
                                              (std.collections.hash.map.HashMap.t
                                                alloc.string.String.t
                                                serde_json.value.Value.t
                                                std.hash.random.RandomState.t) :=
                                          M.read α19 in
                                        let* α21 :
                                            core.option.Option.t
                                              (alloc.vec.Vec.t
                                                alloc.string.String.t
                                                alloc.alloc.Global.t) :=
                                          M.read
                                            (async_openai.types.assistant.ModifyAssistantRequest.Get_file_ids
                                              assistant) in
                                        let* α22 :
                                            alloc.vec.Vec.t
                                              alloc.string.String.t
                                              alloc.alloc.Global.t :=
                                          M.call
                                            (alloc.vec.Vec.t
                                                alloc.string.String.t
                                                alloc.alloc.Global.t)::["new"] in
                                        let* α23 :
                                            alloc.vec.Vec.t
                                              alloc.string.String.t
                                              alloc.alloc.Global.t :=
                                          M.call
                                            ((core.option.Option.t
                                                  (alloc.vec.Vec.t
                                                    alloc.string.String.t
                                                    alloc.alloc.Global.t))::["unwrap_or"]
                                              α21
                                              α22) in
                                        let* α24 : M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.default.Default.default
                                              (Self := alloc.string.String.t)
                                              (Trait := ℐ))) in
                                        let* α25 : alloc.string.String.t :=
                                          M.call α24 in
                                        let* α26 : M i32.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.default.Default.default
                                              (Self := i32.t)
                                              (Trait := ℐ))) in
                                        let* α27 : i32.t := M.call α26 in
                                        let* α28 :
                                            M
                                              (core.option.Option.t
                                                alloc.string.String.t) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.default.Default.default
                                              (Self :=
                                                core.option.Option.t
                                                  alloc.string.String.t)
                                              (Trait := ℐ))) in
                                        let* α29 :
                                            core.option.Option.t
                                              alloc.string.String.t :=
                                          M.call α28 in
                                        let* α30 :
                                            (ref uuid.Uuid.t) ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            alloc.string.ToString.to_string
                                              (Self := uuid.Uuid.t)
                                              (Trait := ℐ))) in
                                        let* α31 : M uuid.Uuid.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.default.Default.default
                                              (Self := uuid.Uuid.t)
                                              (Trait := ℐ))) in
                                        let* α32 : uuid.Uuid.t := M.call α31 in
                                        let* α33 : M.Val uuid.Uuid.t :=
                                          M.alloc α32 in
                                        let* α34 : alloc.string.String.t :=
                                          M.call (α30 (borrow α33)) in
                                        let* α35 :
                                            M.Val
                                              assistants_core.models.Assistant.t :=
                                          M.alloc
                                            {|
                                              assistants_core.models.Assistant.inner :=
                                                {|
                                                  async_openai.types.assistant.AssistantObject.id :=
                                                    α6;
                                                  async_openai.types.assistant.AssistantObject.instructions :=
                                                    α7;
                                                  async_openai.types.assistant.AssistantObject.name :=
                                                    α8;
                                                  async_openai.types.assistant.AssistantObject.tools :=
                                                    α12;
                                                  async_openai.types.assistant.AssistantObject.model :=
                                                    α17;
                                                  async_openai.types.assistant.AssistantObject.metadata :=
                                                    α20;
                                                  async_openai.types.assistant.AssistantObject.file_ids :=
                                                    α23;
                                                  async_openai.types.assistant.AssistantObject.object :=
                                                    α25;
                                                  async_openai.types.assistant.AssistantObject.created_at :=
                                                    α27;
                                                  async_openai.types.assistant.AssistantObject.description :=
                                                    α29;
                                                |};
                                              assistants_core.models.Assistant.user_id :=
                                                α34;
                                            |} in
                                        let* α36 : _ :=
                                          M.call
                                            (assistants_core.assistants.update_assistant
                                              α2
                                              α4
                                              (borrow α35)) in
                                        let* α37 : _ := M.call (α0 α36) in
                                        let* α38 : M.Val _ := M.alloc α37 in
                                        let* α39 :
                                            M.Val
                                              (core.result.Result.t
                                                assistants_core.models.Assistant.t
                                                sqlx_core.error.Error.t) :=
                                          match_operator
                                            α38
                                            [
                                              fun γ =>
                                                (let* __awaitee := M.copy γ in
                                                M.loop
                                                  (let* _ : M.Val unit :=
                                                    let* α0 :
                                                        (core.pin.Pin.t
                                                            (mut_ref _))
                                                          ->
                                                          (mut_ref
                                                            core.task.wake.Context.t)
                                                          ->
                                                          M
                                                            (core.task.poll.Poll.t
                                                              _) :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.future.future.Future.poll
                                                          (Self := _)
                                                          (Trait := ℐ))) in
                                                    let* α1 :
                                                        core.pin.Pin.t
                                                          (mut_ref _) :=
                                                      M.call
                                                        ((core.pin.Pin.t
                                                              (mut_ref
                                                                _))::["new_unchecked"]
                                                          (borrow_mut
                                                            __awaitee)) in
                                                    let* α2 :
                                                        core.future.ResumeTy.t :=
                                                      M.read _task_context in
                                                    let* α3 :
                                                        mut_ref
                                                          core.task.wake.Context.t :=
                                                      M.call
                                                        (core.future.get_context
                                                          α2) in
                                                    let* α4 :
                                                        core.task.poll.Poll.t
                                                          (core.result.Result.t
                                                            assistants_core.models.Assistant.t
                                                            sqlx_core.error.Error.t) :=
                                                      M.call (α0 α1 α3) in
                                                    let* α5 :
                                                        M.Val
                                                          (core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              assistants_core.models.Assistant.t
                                                              sqlx_core.error.Error.t)) :=
                                                      M.alloc α4 in
                                                    match_operator
                                                      α5
                                                      [
                                                        fun γ =>
                                                          (let* α0 :=
                                                            M.read γ in
                                                          match α0 with
                                                          |
                                                              core.task.poll.Poll.Ready
                                                                _
                                                              =>
                                                            let γ0_0 :=
                                                              core.task.poll.Poll.Get_Ready_0
                                                                γ in
                                                            let* result :=
                                                              M.copy γ0_0 in
                                                            let* α0 :
                                                                M.Val never.t :=
                                                              M.break in
                                                            let* α1 :=
                                                              M.read α0 in
                                                            let* α2 : unit :=
                                                              never_to_any α1 in
                                                            M.alloc α2
                                                          | _ => M.break_match
                                                          end) :
                                                          M (M.Val unit);
                                                        fun γ =>
                                                          (let* α0 :=
                                                            M.read γ in
                                                          match α0 with
                                                          |
                                                              core.task.poll.Poll.Pending
                                                              =>
                                                            M.alloc tt
                                                          | _ => M.break_match
                                                          end) :
                                                          M (M.Val unit)
                                                      ] in
                                                  let* _ : M.Val unit :=
                                                    let* α0 : M.Val unit :=
                                                      M.alloc tt in
                                                    let* α1 :
                                                        M.Val
                                                          core.future.ResumeTy.t :=
                                                      yield α0 in
                                                    let* α2 :
                                                        core.future.ResumeTy.t :=
                                                      M.read α1 in
                                                    assign _task_context α2 in
                                                  M.alloc tt)) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      assistants_core.models.Assistant.t
                                                      sqlx_core.error.Error.t))
                                            ] in
                                        let* α40 :
                                            M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.assistant.AssistantObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)) :=
                                          match_operator
                                            α39
                                            [
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Ok _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Ok_0
                                                      γ in
                                                  let* assistant :=
                                                    M.copy γ0_0 in
                                                  let* α0 :
                                                      async_openai.types.assistant.AssistantObject.t :=
                                                    M.read
                                                      (assistants_core.models.Assistant.Get_inner
                                                        assistant) in
                                                  M.alloc
                                                    (core.result.Result.Ok
                                                      (axum.json.Json.Build_t
                                                        α0))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.assistant.AssistantObject.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)));
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Err _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Err_0
                                                      γ in
                                                  let* e := M.copy γ0_0 in
                                                  let* α0 :
                                                      http.status.StatusCode.t :=
                                                    M.read
                                                      http.status.INTERNAL_SERVER_ERROR in
                                                  let* α1 :
                                                      (ref
                                                          sqlx_core.error.Error.t)
                                                        ->
                                                        M
                                                          alloc.string.String.t :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      alloc.string.ToString.to_string
                                                        (Self :=
                                                          sqlx_core.error.Error.t)
                                                        (Trait := ℐ))) in
                                                  let* α2 :
                                                      alloc.string.String.t :=
                                                    M.call (α1 (borrow e)) in
                                                  M.alloc
                                                    (core.result.Result.Err
                                                      (α0, α2))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.assistant.AssistantObject.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)))
                                            ] in
                                        M.pure (use α40)
                                      end) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (axum.json.Json.t
                                              async_openai.types.assistant.AssistantObject.t)
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t)))
                                  ]
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.assistant.AssistantObject.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.assistant.AssistantObject.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t
                  async_openai.types.assistant.AssistantObject.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.assistant.AssistantObject.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn delete_assistant_handler(
    Path((assistant_id,)): Path<(String,)>,
    State(app_state): State<AppState>,
) -> Result<JsonResponse<DeleteAssistantResponse>, (StatusCode, String)> {
    match delete_assistant(&app_state.pool, &assistant_id, &Uuid::default().to_string()).await {
        Ok(_) => Ok(JsonResponse(DeleteAssistantResponse {
            id: assistant_id.to_string(),
            deleted: true,
            object: "assistant".to_string(),
        })),
        Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
    }
}
*)
Definition delete_assistant_handler
    (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t
                      async_openai.types.assistant.DeleteAssistantResponse.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_) =>
                        let γ1_0 := γ0_0 in
                        let* assistant_id := M.copy γ1_0 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* α0 : _ -> M _ :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.future.into_future.IntoFuture.into_future
                                      (Self := _)
                                      (Trait := ℐ))) in
                                let* α1 :
                                    (ref
                                        (alloc.sync.Arc.t
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t)
                                          alloc.alloc.Global.t))
                                      ->
                                      M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.deref.Deref.deref
                                      (Self :=
                                        alloc.sync.Arc.t
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t)
                                          alloc.alloc.Global.t)
                                      (Trait := ℐ))) in
                                let* α2 :
                                    ref
                                      (sqlx_core.pool.Pool.t
                                        sqlx_postgres.database.Postgres.t) :=
                                  M.call
                                    (α1
                                      (borrow
                                        (assistants_api_communication.models.AppState.Get_pool
                                          app_state))) in
                                let* α3 :
                                    (ref alloc.string.String.t) -> M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.deref.Deref.deref
                                      (Self := alloc.string.String.t)
                                      (Trait := ℐ))) in
                                let* α4 : ref str.t :=
                                  M.call (α3 (borrow assistant_id)) in
                                let* α5 :
                                    (ref alloc.string.String.t) -> M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.deref.Deref.deref
                                      (Self := alloc.string.String.t)
                                      (Trait := ℐ))) in
                                let* α6 :
                                    (ref uuid.Uuid.t) ->
                                      M alloc.string.String.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    alloc.string.ToString.to_string
                                      (Self := uuid.Uuid.t)
                                      (Trait := ℐ))) in
                                let* α7 : M uuid.Uuid.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.default.Default.default
                                      (Self := uuid.Uuid.t)
                                      (Trait := ℐ))) in
                                let* α8 : uuid.Uuid.t := M.call α7 in
                                let* α9 : M.Val uuid.Uuid.t := M.alloc α8 in
                                let* α10 : alloc.string.String.t :=
                                  M.call (α6 (borrow α9)) in
                                let* α11 : M.Val alloc.string.String.t :=
                                  M.alloc α10 in
                                let* α12 : ref str.t :=
                                  M.call (α5 (borrow α11)) in
                                let* α13 : _ :=
                                  M.call
                                    (assistants_core.assistants.delete_assistant
                                      α2
                                      α4
                                      α12) in
                                let* α14 : _ := M.call (α0 α13) in
                                let* α15 : M.Val _ := M.alloc α14 in
                                let* α16 :
                                    M.Val
                                      (core.result.Result.t
                                        unit
                                        sqlx_core.error.Error.t) :=
                                  match_operator
                                    α15
                                    [
                                      fun γ =>
                                        (let* __awaitee := M.copy γ in
                                        M.loop
                                          (let* _ : M.Val unit :=
                                            let* α0 :
                                                (core.pin.Pin.t (mut_ref _)) ->
                                                  (mut_ref
                                                    core.task.wake.Context.t)
                                                  ->
                                                  M (core.task.poll.Poll.t _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.future.future.Future.poll
                                                  (Self := _)
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                core.pin.Pin.t (mut_ref _) :=
                                              M.call
                                                ((core.pin.Pin.t
                                                      (mut_ref
                                                        _))::["new_unchecked"]
                                                  (borrow_mut __awaitee)) in
                                            let* α2 : core.future.ResumeTy.t :=
                                              M.read _task_context in
                                            let* α3 :
                                                mut_ref
                                                  core.task.wake.Context.t :=
                                              M.call
                                                (core.future.get_context α2) in
                                            let* α4 :
                                                core.task.poll.Poll.t
                                                  (core.result.Result.t
                                                    unit
                                                    sqlx_core.error.Error.t) :=
                                              M.call (α0 α1 α3) in
                                            let* α5 :
                                                M.Val
                                                  (core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      unit
                                                      sqlx_core.error.Error.t)) :=
                                              M.alloc α4 in
                                            match_operator
                                              α5
                                              [
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  |
                                                      core.task.poll.Poll.Ready
                                                        _
                                                      =>
                                                    let γ0_0 :=
                                                      core.task.poll.Poll.Get_Ready_0
                                                        γ in
                                                    let* result :=
                                                      M.copy γ0_0 in
                                                    let* α0 : M.Val never.t :=
                                                      M.break in
                                                    let* α1 := M.read α0 in
                                                    let* α2 : unit :=
                                                      never_to_any α1 in
                                                    M.alloc α2
                                                  | _ => M.break_match
                                                  end) :
                                                  M (M.Val unit);
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  |
                                                      core.task.poll.Poll.Pending
                                                      =>
                                                    M.alloc tt
                                                  | _ => M.break_match
                                                  end) :
                                                  M (M.Val unit)
                                              ] in
                                          let* _ : M.Val unit :=
                                            let* α0 : M.Val unit :=
                                              M.alloc tt in
                                            let* α1 :
                                                M.Val core.future.ResumeTy.t :=
                                              yield α0 in
                                            let* α2 : core.future.ResumeTy.t :=
                                              M.read α1 in
                                            assign _task_context α2 in
                                          M.alloc tt)) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              unit
                                              sqlx_core.error.Error.t))
                                    ] in
                                let* α17 :
                                    M.Val
                                      (core.result.Result.t
                                        (axum.json.Json.t
                                          async_openai.types.assistant.DeleteAssistantResponse.t)
                                        (http.status.StatusCode.t
                                        *
                                        alloc.string.String.t)) :=
                                  match_operator
                                    α16
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Ok _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Ok_0 γ in
                                          let* α0 :
                                              (ref alloc.string.String.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α1 : alloc.string.String.t :=
                                            M.call (α0 (borrow assistant_id)) in
                                          let* α2 :
                                              (ref str.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := str.t)
                                                (Trait := ℐ))) in
                                          let* α3 : ref str.t :=
                                            M.read (mk_str "assistant") in
                                          let* α4 : alloc.string.String.t :=
                                            M.call (α2 α3) in
                                          M.alloc
                                            (core.result.Result.Ok
                                              (axum.json.Json.Build_t
                                                {|
                                                  async_openai.types.assistant.DeleteAssistantResponse.id :=
                                                    α1;
                                                  async_openai.types.assistant.DeleteAssistantResponse.deleted :=
                                                    true;
                                                  async_openai.types.assistant.DeleteAssistantResponse.object :=
                                                    α4;
                                                |}))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.assistant.DeleteAssistantResponse.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)));
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Err _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Err_0 γ in
                                          let* e := M.copy γ0_0 in
                                          let* α0 : http.status.StatusCode.t :=
                                            M.read
                                              http.status.INTERNAL_SERVER_ERROR in
                                          let* α1 :
                                              (ref sqlx_core.error.Error.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self :=
                                                  sqlx_core.error.Error.t)
                                                (Trait := ℐ))) in
                                          let* α2 : alloc.string.String.t :=
                                            M.call (α1 (borrow e)) in
                                          M.alloc
                                            (core.result.Result.Err (α0, α2))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.assistant.DeleteAssistantResponse.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ] in
                                M.pure (use α17)
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.assistant.DeleteAssistantResponse.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.assistant.DeleteAssistantResponse.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t
                  async_openai.types.assistant.DeleteAssistantResponse.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t
            async_openai.types.assistant.DeleteAssistantResponse.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

Module  ListParams.
Section ListParams.
  Record t : Set := {
    limit : core.option.Option.t usize.t;
    order : core.option.Option.t alloc.string.String.t;
    after : core.option.Option.t alloc.string.String.t;
    before : core.option.Option.t alloc.string.String.t;
  }.
  
  Definition Get_limit :=
    Ref.map (fun α => Some α.(limit)) (fun β α => Some (α <| limit := β |>)).
  Definition Get_order :=
    Ref.map (fun α => Some α.(order)) (fun β α => Some (α <| order := β |>)).
  Definition Get_after :=
    Ref.map (fun α => Some α.(after)) (fun β α => Some (α <| after := β |>)).
  Definition Get_before :=
    Ref.map (fun α => Some α.(before)) (fun β α => Some (α <| before := β |>)).
End ListParams.
End ListParams.

Module  Impl_serde_ser_Serialize_for_assistants_api_communication_assistants_ListParams_t.
Section Impl_serde_ser_Serialize_for_assistants_api_communication_assistants_ListParams_t.
  Definition Self : Set := assistants_api_communication.assistants.ListParams.t.
  
  (*
  Serialize
  *)
  Definition serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S}
      (self : ref Self)
      (__serializer : __S)
      : M (core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) :=
    let* self := M.alloc self in
    let* __serializer := M.alloc __serializer in
    let return_ :=
      M.return_
        (R := core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) in
    M.catch_return
      (let* __serde_state : M.Val _ :=
        let* α0 :
            (core.result.Result.t _ _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t _ _)
              (Trait := ℐ))) in
        let* α1 :
            __S -> (ref str.t) -> usize.t -> M (core.result.Result.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.Serializer.serialize_struct
              (Self := __S)
              (Trait := ℐ))) in
        let* α2 : __S := M.read __serializer in
        let* α3 : ref str.t := M.read (mk_str "ListParams") in
        let* α4 : usize.t :=
          BinOp.Panic.add (rust_cast false) ((Integer.of_Z 1) : usize.t) in
        let* α5 : usize.t := BinOp.Panic.add α4 ((Integer.of_Z 1) : usize.t) in
        let* α6 : usize.t := BinOp.Panic.add α5 ((Integer.of_Z 1) : usize.t) in
        let* α7 : usize.t := BinOp.Panic.add α6 ((Integer.of_Z 1) : usize.t) in
        let* α8 : core.result.Result.t _ _ := M.call (α1 α2 α3 α7) in
        let* α9 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              _ :=
          M.call (α0 α8) in
        let* α10 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                _) :=
          M.alloc α9 in
        let* α11 : M.Val _ :=
          match_operator
            α10
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self := core.result.Result.t _ _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : _ := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val _);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val _)
            ] in
        M.copy α11 in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref (core.option.Option.t usize.t)) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := core.option.Option.t usize.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "limit") in
        let* α3 : ref assistants_api_communication.assistants.ListParams.t :=
          M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_api_communication.assistants.ListParams.Get_limit
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref (core.option.Option.t alloc.string.String.t)) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := core.option.Option.t alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "order") in
        let* α3 : ref assistants_api_communication.assistants.ListParams.t :=
          M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_api_communication.assistants.ListParams.Get_order
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref (core.option.Option.t alloc.string.String.t)) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := core.option.Option.t alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "after") in
        let* α3 : ref assistants_api_communication.assistants.ListParams.t :=
          M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_api_communication.assistants.ListParams.Get_after
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref (core.option.Option.t alloc.string.String.t)) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := core.option.Option.t alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "before") in
        let* α3 : ref assistants_api_communication.assistants.ListParams.t :=
          M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_api_communication.assistants.ListParams.Get_before
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* α0 : _ -> M (core.result.Result.t _ _) :=
        ltac:(M.get_method (fun ℐ =>
          serde.ser.SerializeStruct.end_ (Self := _) (Trait := ℐ))) in
      let* α1 : _ := M.read __serde_state in
      let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
      let* α0 : M.Val (core.result.Result.t _ _) := M.alloc α2 in
      M.read α0).
  
  Global Instance AssociatedFunction_serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :
    Notations.DoubleColon Self "serialize" := {
    Notations.double_colon := serialize (__S := __S);
  }.
  
  Global Instance ℐ : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :=
      serialize (__S := __S);
  }.
End Impl_serde_ser_Serialize_for_assistants_api_communication_assistants_ListParams_t.
End Impl_serde_ser_Serialize_for_assistants_api_communication_assistants_ListParams_t.

Module  Impl_serde_de_Deserialize_for_assistants_api_communication_assistants_ListParams_t.
Section Impl_serde_de_Deserialize_for_assistants_api_communication_assistants_ListParams_t.
  Definition Self : Set := assistants_api_communication.assistants.ListParams.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_api_communication.assistants._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V :=
            assistants_api_communication.assistants._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "ListParams") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_api_communication.assistants._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_api_communication.assistants._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_api_communication.assistants._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_api_communication_assistants_ListParams_t.
End Impl_serde_de_Deserialize_for_assistants_api_communication_assistants_ListParams_t.

Module __Field.
  Inductive t : Set :=
  | __field0
  | __field1
  | __field2
  | __field3
  | __ignore.
End __Field.

Module  __FieldVisitor.
Section __FieldVisitor.
  Inductive t : Set := Build.
End __FieldVisitor.
End __FieldVisitor.

Module  Impl_serde_de_Visitor_for_assistants_api_communication_assistants___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_api_communication_assistants___deserialize___FieldVisitor_t.
  Definition Self : Set :=
    assistants_api_communication.assistants._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set :=
    assistants_api_communication.assistants._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_api_communication.assistants._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.assistants._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.assistants._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.assistants._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.assistants._.deserialize.__Field.__field3)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.assistants._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_api_communication.assistants._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.assistants._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.assistants._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.assistants._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.assistants._.deserialize.__Field.__field3)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.assistants._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_api_communication.assistants._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_api_communication.assistants._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_api_communication.assistants._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_api_communication.assistants._.deserialize.__Field.__field2)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_api_communication.assistants._.deserialize.__Field.__field3)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.assistants._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.assistants._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_api_communication_assistants___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_api_communication_assistants___deserialize___FieldVisitor_t.

Module  Impl_serde_de_Deserialize_for_assistants_api_communication_assistants___deserialize___Field_t.
Section Impl_serde_de_Deserialize_for_assistants_api_communication_assistants___deserialize___Field_t.
  Definition Self : Set :=
    assistants_api_communication.assistants._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          assistants_api_communication.assistants._.deserialize.__FieldVisitor.t
          ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_identifier
          (Self := __D)
          (V :=
            assistants_api_communication.assistants._.deserialize.__FieldVisitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    M.call
      (α0
        α1
        assistants_api_communication.assistants._.deserialize.__FieldVisitor.Build).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_api_communication_assistants___deserialize___Field_t.
End Impl_serde_de_Deserialize_for_assistants_api_communication_assistants___deserialize___Field_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker :
      core.marker.PhantomData.t
        assistants_api_communication.assistants.ListParams.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_api_communication_assistants___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_api_communication_assistants___deserialize___Visitor_t.
  Definition Self : Set :=
    assistants_api_communication.assistants._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set :=
    assistants_api_communication.assistants.ListParams.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct ListParams") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val (core.option.Option.t usize.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t (core.option.Option.t usize.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t (core.option.Option.t usize.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t (core.option.Option.t usize.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := core.option.Option.t usize.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t (core.option.Option.t usize.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t (core.option.Option.t usize.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t (core.option.Option.t usize.t))) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t (core.option.Option.t usize.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_api_communication.assistants.ListParams.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_api_communication.assistants.ListParams.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_api_communication.assistants.ListParams.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t (core.option.Option.t usize.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t (core.option.Option.t usize.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t (core.option.Option.t usize.t)))
            ] in
        let* α6 : M.Val (core.option.Option.t usize.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t usize.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ListParams with 4 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : core.option.Option.t usize.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t usize.t))
            ] in
        M.copy α6 in
      let* __field1 : M.Val (core.option.Option.t alloc.string.String.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t
                  (core.option.Option.t alloc.string.String.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t alloc.string.String.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t alloc.string.String.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := core.option.Option.t alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  (core.option.Option.t alloc.string.String.t))) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_api_communication.assistants.ListParams.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_api_communication.assistants.ListParams.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_api_communication.assistants.ListParams.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        (core.option.Option.t alloc.string.String.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t alloc.string.String.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t alloc.string.String.t)))
            ] in
        let* α6 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ListParams with 4 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        M.copy α6 in
      let* __field2 : M.Val (core.option.Option.t alloc.string.String.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t
                  (core.option.Option.t alloc.string.String.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t alloc.string.String.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t alloc.string.String.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := core.option.Option.t alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  (core.option.Option.t alloc.string.String.t))) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_api_communication.assistants.ListParams.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_api_communication.assistants.ListParams.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_api_communication.assistants.ListParams.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        (core.option.Option.t alloc.string.String.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t alloc.string.String.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t alloc.string.String.t)))
            ] in
        let* α6 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 2) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ListParams with 4 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        M.copy α6 in
      let* __field3 : M.Val (core.option.Option.t alloc.string.String.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t
                  (core.option.Option.t alloc.string.String.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t alloc.string.String.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t alloc.string.String.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := core.option.Option.t alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  (core.option.Option.t alloc.string.String.t))) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_api_communication.assistants.ListParams.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_api_communication.assistants.ListParams.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_api_communication.assistants.ListParams.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        (core.option.Option.t alloc.string.String.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t alloc.string.String.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t alloc.string.String.t)))
            ] in
        let* α6 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 3) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ListParams with 4 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        M.copy α6 in
      let* α0 : core.option.Option.t usize.t := M.read __field0 in
      let* α1 : core.option.Option.t alloc.string.String.t := M.read __field1 in
      let* α2 : core.option.Option.t alloc.string.String.t := M.read __field2 in
      let* α3 : core.option.Option.t alloc.string.String.t := M.read __field3 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_api_communication.assistants.ListParams.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_api_communication.assistants.ListParams.limit := α0;
              assistants_api_communication.assistants.ListParams.order := α1;
              assistants_api_communication.assistants.ListParams.after := α2;
              assistants_api_communication.assistants.ListParams.before := α3;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 :
          M.Val (core.option.Option.t (core.option.Option.t usize.t)) :=
        M.alloc core.option.Option.None in
      let* __field1 :
          M.Val
            (core.option.Option.t
              (core.option.Option.t alloc.string.String.t)) :=
        M.alloc core.option.Option.None in
      let* __field2 :
          M.Val
            (core.option.Option.t
              (core.option.Option.t alloc.string.String.t)) :=
        M.alloc core.option.Option.None in
      let* __field3 :
          M.Val
            (core.option.Option.t
              (core.option.Option.t alloc.string.String.t)) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_api_communication.assistants._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_api_communication.assistants._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_api_communication.assistants._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K :=
                  assistants_api_communication.assistants._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_api_communication.assistants._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_api_communication.assistants._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_api_communication.assistants._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_api_communication.assistants._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_api_communication.assistants.ListParams.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_api_communication.assistants.ListParams.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_api_communication.assistants.ListParams.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_api_communication.assistants._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_api_communication.assistants._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_api_communication.assistants._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_api_communication.assistants._.deserialize.__Field.__field0
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (core.option.Option.t
                                        usize.t))::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "limit") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (core.option.Option.t usize.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (core.option.Option.t usize.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (core.option.Option.t usize.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := core.option.Option.t usize.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (core.option.Option.t usize.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (core.option.Option.t usize.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (core.option.Option.t usize.t)) :=
                              M.alloc α3 in
                            let* α5 : M.Val (core.option.Option.t usize.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_api_communication.assistants.ListParams.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_api_communication.assistants.ListParams.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_api_communication.assistants.ListParams.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : core.option.Option.t usize.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val (core.option.Option.t usize.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val (core.option.Option.t usize.t))
                                ] in
                            let* α6 : core.option.Option.t usize.t :=
                              M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_api_communication.assistants._.deserialize.__Field.__field1
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (core.option.Option.t
                                        alloc.string.String.t))::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "order") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (core.option.Option.t alloc.string.String.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (core.option.Option.t
                                        alloc.string.String.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (core.option.Option.t
                                        alloc.string.String.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    core.option.Option.t alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (core.option.Option.t alloc.string.String.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (core.option.Option.t
                                    alloc.string.String.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (core.option.Option.t
                                      alloc.string.String.t)) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  (core.option.Option.t
                                    alloc.string.String.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_api_communication.assistants.ListParams.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_api_communication.assistants.ListParams.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_api_communication.assistants.ListParams.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          core.option.Option.t
                                            alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          alloc.string.String.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          alloc.string.String.t))
                                ] in
                            let* α6 :
                                core.option.Option.t alloc.string.String.t :=
                              M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_api_communication.assistants._.deserialize.__Field.__field2
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (core.option.Option.t
                                        alloc.string.String.t))::["is_some"]
                                  (borrow __field2)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "after") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (core.option.Option.t alloc.string.String.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (core.option.Option.t
                                        alloc.string.String.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (core.option.Option.t
                                        alloc.string.String.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    core.option.Option.t alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (core.option.Option.t alloc.string.String.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (core.option.Option.t
                                    alloc.string.String.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (core.option.Option.t
                                      alloc.string.String.t)) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  (core.option.Option.t
                                    alloc.string.String.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_api_communication.assistants.ListParams.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_api_communication.assistants.ListParams.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_api_communication.assistants.ListParams.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          core.option.Option.t
                                            alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          alloc.string.String.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          alloc.string.String.t))
                                ] in
                            let* α6 :
                                core.option.Option.t alloc.string.String.t :=
                              M.read α5 in
                            assign __field2 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_api_communication.assistants._.deserialize.__Field.__field3
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (core.option.Option.t
                                        alloc.string.String.t))::["is_some"]
                                  (borrow __field3)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "before") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (core.option.Option.t alloc.string.String.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (core.option.Option.t
                                        alloc.string.String.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (core.option.Option.t
                                        alloc.string.String.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    core.option.Option.t alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (core.option.Option.t alloc.string.String.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (core.option.Option.t
                                    alloc.string.String.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (core.option.Option.t
                                      alloc.string.String.t)) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  (core.option.Option.t
                                    alloc.string.String.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_api_communication.assistants.ListParams.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_api_communication.assistants.ListParams.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_api_communication.assistants.ListParams.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          core.option.Option.t
                                            alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          alloc.string.String.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          alloc.string.String.t))
                                ] in
                            let* α6 :
                                core.option.Option.t alloc.string.String.t :=
                              M.read α5 in
                            assign __field3 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_api_communication.assistants.ListParams.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_api_communication.assistants.ListParams.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_api_communication.assistants.ListParams.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val (core.option.Option.t usize.t) :=
        let* α0 : M.Val (core.option.Option.t usize.t) :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t usize.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t (core.option.Option.t usize.t) _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t (core.option.Option.t usize.t) _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "limit") in
                  let* α2 :
                      core.result.Result.t (core.option.Option.t usize.t) _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (core.option.Option.t usize.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (core.option.Option.t usize.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_api_communication.assistants.ListParams.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_api_communication.assistants.ListParams.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_api_communication.assistants.ListParams.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : core.option.Option.t usize.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t usize.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t usize.t))
                    ]
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t usize.t))
            ] in
        M.copy α0 in
      let* __field1 : M.Val (core.option.Option.t alloc.string.String.t) :=
        let* α0 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          (core.option.Option.t alloc.string.String.t)
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (core.option.Option.t alloc.string.String.t)
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "order") in
                  let* α2 :
                      core.result.Result.t
                        (core.option.Option.t alloc.string.String.t)
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (core.option.Option.t alloc.string.String.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (core.option.Option.t alloc.string.String.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_api_communication.assistants.ListParams.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_api_communication.assistants.ListParams.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_api_communication.assistants.ListParams.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              core.option.Option.t alloc.string.String.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t alloc.string.String.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t alloc.string.String.t))
                    ]
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        M.copy α0 in
      let* __field2 : M.Val (core.option.Option.t alloc.string.String.t) :=
        let* α0 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            __field2
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field2 := M.copy γ0_0 in
                  M.pure __field2
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          (core.option.Option.t alloc.string.String.t)
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (core.option.Option.t alloc.string.String.t)
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "after") in
                  let* α2 :
                      core.result.Result.t
                        (core.option.Option.t alloc.string.String.t)
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (core.option.Option.t alloc.string.String.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (core.option.Option.t alloc.string.String.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_api_communication.assistants.ListParams.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_api_communication.assistants.ListParams.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_api_communication.assistants.ListParams.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              core.option.Option.t alloc.string.String.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t alloc.string.String.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t alloc.string.String.t))
                    ]
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        M.copy α0 in
      let* __field3 : M.Val (core.option.Option.t alloc.string.String.t) :=
        let* α0 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            __field3
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field3 := M.copy γ0_0 in
                  M.pure __field3
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          (core.option.Option.t alloc.string.String.t)
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (core.option.Option.t alloc.string.String.t)
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "before") in
                  let* α2 :
                      core.result.Result.t
                        (core.option.Option.t alloc.string.String.t)
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (core.option.Option.t alloc.string.String.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (core.option.Option.t alloc.string.String.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_api_communication.assistants.ListParams.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_api_communication.assistants.ListParams.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_api_communication.assistants.ListParams.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              core.option.Option.t alloc.string.String.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t alloc.string.String.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t alloc.string.String.t))
                    ]
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        M.copy α0 in
      let* α0 : core.option.Option.t usize.t := M.read __field0 in
      let* α1 : core.option.Option.t alloc.string.String.t := M.read __field1 in
      let* α2 : core.option.Option.t alloc.string.String.t := M.read __field2 in
      let* α3 : core.option.Option.t alloc.string.String.t := M.read __field3 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_api_communication.assistants.ListParams.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_api_communication.assistants.ListParams.limit := α0;
              assistants_api_communication.assistants.ListParams.order := α1;
              assistants_api_communication.assistants.ListParams.after := α2;
              assistants_api_communication.assistants.ListParams.before := α3;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_api_communication_assistants___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_api_communication_assistants___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "limit") in
    let* α1 : ref str.t := M.read (mk_str "order") in
    let* α2 : ref str.t := M.read (mk_str "after") in
    let* α3 : ref str.t := M.read (mk_str "before") in
    let* α4 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2; α3 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α4))).

(*
pub async fn list_assistants_handler(
    Query(_): Query<ListParams>,
    State(app_state): State<AppState>,
) -> Result<JsonResponse<ListAssistantsResponse>, (StatusCode, String)> {
    match list_assistants(&app_state.pool, &Uuid::default().to_string()).await {
        Ok(assistants) => Ok(JsonResponse(ListAssistantsResponse {
            data: assistants
                .iter()
                .map(|a| a.inner.clone())
                .collect::<Vec<AssistantObject>>(),
            object: "list".to_string(),
            has_more: false,
            first_id: None,
            last_id: None,
        })),
        Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
    }
}
*)
Definition list_assistants_handler
    (__arg0
      :
      axum.extract.query.Query.t
        assistants_api_communication.assistants.ListParams.t)
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val
                  (axum.extract.query.Query.t
                    assistants_api_communication.assistants.ListParams.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t
                      async_openai.types.assistant.ListAssistantsResponse.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.query.Query.Build_t _ =>
                      let γ0_0 := axum.extract.query.Query.Get_0 γ in
                      let* __arg1 :
                          M.Val
                            (axum.extract.state.State.t
                              assistants_api_communication.models.AppState.t) :=
                        M.copy __arg1 in
                      match_operator
                        __arg1
                        [
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | axum.extract.state.State.Build_t _ =>
                              let γ0_0 := axum.extract.state.State.Get_0 γ in
                              let* app_state := M.copy γ0_0 in
                              let* α0 : _ -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.future.into_future.IntoFuture.into_future
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 :
                                  (ref
                                      (alloc.sync.Arc.t
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t)
                                        alloc.alloc.Global.t))
                                    ->
                                    M (ref _) :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.ops.deref.Deref.deref
                                    (Self :=
                                      alloc.sync.Arc.t
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t)
                                        alloc.alloc.Global.t)
                                    (Trait := ℐ))) in
                              let* α2 :
                                  ref
                                    (sqlx_core.pool.Pool.t
                                      sqlx_postgres.database.Postgres.t) :=
                                M.call
                                  (α1
                                    (borrow
                                      (assistants_api_communication.models.AppState.Get_pool
                                        app_state))) in
                              let* α3 :
                                  (ref alloc.string.String.t) -> M (ref _) :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.ops.deref.Deref.deref
                                    (Self := alloc.string.String.t)
                                    (Trait := ℐ))) in
                              let* α4 :
                                  (ref uuid.Uuid.t) ->
                                    M alloc.string.String.t :=
                                ltac:(M.get_method (fun ℐ =>
                                  alloc.string.ToString.to_string
                                    (Self := uuid.Uuid.t)
                                    (Trait := ℐ))) in
                              let* α5 : M uuid.Uuid.t :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.default.Default.default
                                    (Self := uuid.Uuid.t)
                                    (Trait := ℐ))) in
                              let* α6 : uuid.Uuid.t := M.call α5 in
                              let* α7 : M.Val uuid.Uuid.t := M.alloc α6 in
                              let* α8 : alloc.string.String.t :=
                                M.call (α4 (borrow α7)) in
                              let* α9 : M.Val alloc.string.String.t :=
                                M.alloc α8 in
                              let* α10 : ref str.t := M.call (α3 (borrow α9)) in
                              let* α11 : _ :=
                                M.call
                                  (assistants_core.assistants.list_assistants
                                    α2
                                    α10) in
                              let* α12 : _ := M.call (α0 α11) in
                              let* α13 : M.Val _ := M.alloc α12 in
                              let* α14 :
                                  M.Val
                                    (core.result.Result.t
                                      (alloc.vec.Vec.t
                                        assistants_core.models.Assistant.t
                                        alloc.alloc.Global.t)
                                      sqlx_core.error.Error.t) :=
                                match_operator
                                  α13
                                  [
                                    fun γ =>
                                      (let* __awaitee := M.copy γ in
                                      M.loop
                                        (let* _ : M.Val unit :=
                                          let* α0 :
                                              (core.pin.Pin.t (mut_ref _)) ->
                                                (mut_ref
                                                  core.task.wake.Context.t)
                                                ->
                                                M (core.task.poll.Poll.t _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.future.future.Future.poll
                                                (Self := _)
                                                (Trait := ℐ))) in
                                          let* α1 :
                                              core.pin.Pin.t (mut_ref _) :=
                                            M.call
                                              ((core.pin.Pin.t
                                                    (mut_ref
                                                      _))::["new_unchecked"]
                                                (borrow_mut __awaitee)) in
                                          let* α2 : core.future.ResumeTy.t :=
                                            M.read _task_context in
                                          let* α3 :
                                              mut_ref
                                                core.task.wake.Context.t :=
                                            M.call
                                              (core.future.get_context α2) in
                                          let* α4 :
                                              core.task.poll.Poll.t
                                                (core.result.Result.t
                                                  (alloc.vec.Vec.t
                                                    assistants_core.models.Assistant.t
                                                    alloc.alloc.Global.t)
                                                  sqlx_core.error.Error.t) :=
                                            M.call (α0 α1 α3) in
                                          let* α5 :
                                              M.Val
                                                (core.task.poll.Poll.t
                                                  (core.result.Result.t
                                                    (alloc.vec.Vec.t
                                                      assistants_core.models.Assistant.t
                                                      alloc.alloc.Global.t)
                                                    sqlx_core.error.Error.t)) :=
                                            M.alloc α4 in
                                          match_operator
                                            α5
                                            [
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.task.poll.Poll.Ready _ =>
                                                  let γ0_0 :=
                                                    core.task.poll.Poll.Get_Ready_0
                                                      γ in
                                                  let* result := M.copy γ0_0 in
                                                  let* α0 : M.Val never.t :=
                                                    M.break in
                                                  let* α1 := M.read α0 in
                                                  let* α2 : unit :=
                                                    never_to_any α1 in
                                                  M.alloc α2
                                                | _ => M.break_match
                                                end) :
                                                M (M.Val unit);
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.task.poll.Poll.Pending =>
                                                  M.alloc tt
                                                | _ => M.break_match
                                                end) :
                                                M (M.Val unit)
                                            ] in
                                        let* _ : M.Val unit :=
                                          let* α0 : M.Val unit := M.alloc tt in
                                          let* α1 :
                                              M.Val core.future.ResumeTy.t :=
                                            yield α0 in
                                          let* α2 : core.future.ResumeTy.t :=
                                            M.read α1 in
                                          assign _task_context α2 in
                                        M.alloc tt)) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (alloc.vec.Vec.t
                                              assistants_core.models.Assistant.t
                                              alloc.alloc.Global.t)
                                            sqlx_core.error.Error.t))
                                  ] in
                              let* α15 :
                                  M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.assistant.ListAssistantsResponse.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)) :=
                                match_operator
                                  α14
                                  [
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | core.result.Result.Ok _ =>
                                        let γ0_0 :=
                                          core.result.Result.Get_Ok_0 γ in
                                        let* assistants := M.copy γ0_0 in
                                        let* α0 :
                                            (core.iter.adapters.map.Map.t
                                                (core.slice.iter.Iter.t
                                                  assistants_core.models.Assistant.t)
                                                ((ref
                                                    assistants_core.models.Assistant.t)
                                                  ->
                                                  M
                                                    async_openai.types.assistant.AssistantObject.t))
                                              ->
                                              M
                                                (alloc.vec.Vec.t
                                                  async_openai.types.assistant.AssistantObject.t
                                                  alloc.alloc.Global.t) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.iter.traits.iterator.Iterator.collect
                                              (Self :=
                                                core.iter.adapters.map.Map.t
                                                  (core.slice.iter.Iter.t
                                                    assistants_core.models.Assistant.t)
                                                  ((ref
                                                      assistants_core.models.Assistant.t)
                                                    ->
                                                    M
                                                      async_openai.types.assistant.AssistantObject.t))
                                              (B :=
                                                alloc.vec.Vec.t
                                                  async_openai.types.assistant.AssistantObject.t
                                                  alloc.alloc.Global.t)
                                              (Trait := ℐ))) in
                                        let* α1 :
                                            (core.slice.iter.Iter.t
                                                assistants_core.models.Assistant.t)
                                              ->
                                              ((ref
                                                  assistants_core.models.Assistant.t)
                                                ->
                                                M
                                                  async_openai.types.assistant.AssistantObject.t)
                                              ->
                                              M
                                                (core.iter.adapters.map.Map.t
                                                  (core.slice.iter.Iter.t
                                                    assistants_core.models.Assistant.t)
                                                  ((ref
                                                      assistants_core.models.Assistant.t)
                                                    ->
                                                    M
                                                      async_openai.types.assistant.AssistantObject.t)) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.iter.traits.iterator.Iterator.map
                                              (Self :=
                                                core.slice.iter.Iter.t
                                                  assistants_core.models.Assistant.t)
                                              (B :=
                                                async_openai.types.assistant.AssistantObject.t)
                                              (F :=
                                                (ref
                                                    assistants_core.models.Assistant.t)
                                                  ->
                                                  M
                                                    async_openai.types.assistant.AssistantObject.t)
                                              (Trait := ℐ))) in
                                        let* α2 :
                                            (ref
                                                (alloc.vec.Vec.t
                                                  assistants_core.models.Assistant.t
                                                  alloc.alloc.Global.t))
                                              ->
                                              M (ref _) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.ops.deref.Deref.deref
                                              (Self :=
                                                alloc.vec.Vec.t
                                                  assistants_core.models.Assistant.t
                                                  alloc.alloc.Global.t)
                                              (Trait := ℐ))) in
                                        let* α3 :
                                            ref
                                              (slice
                                                assistants_core.models.Assistant.t) :=
                                          M.call (α2 (borrow assistants)) in
                                        let* α4 :
                                            core.slice.iter.Iter.t
                                              assistants_core.models.Assistant.t :=
                                          M.call
                                            ((slice
                                                  assistants_core.models.Assistant.t)::["iter"]
                                              α3) in
                                        let* α5 :
                                            core.iter.adapters.map.Map.t
                                              (core.slice.iter.Iter.t
                                                assistants_core.models.Assistant.t)
                                              ((ref
                                                  assistants_core.models.Assistant.t)
                                                ->
                                                M
                                                  async_openai.types.assistant.AssistantObject.t) :=
                                          M.call
                                            (α1
                                              α4
                                              (fun
                                                  (α0 :
                                                    ref
                                                      assistants_core.models.Assistant.t) =>
                                                (let* α0 := M.alloc α0 in
                                                match_operator
                                                  α0
                                                  [
                                                    fun γ =>
                                                      (let* a := M.copy γ in
                                                      let* α0 :
                                                          (ref
                                                              async_openai.types.assistant.AssistantObject.t)
                                                            ->
                                                            M
                                                              async_openai.types.assistant.AssistantObject.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.clone.Clone.clone
                                                            (Self :=
                                                              async_openai.types.assistant.AssistantObject.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          ref
                                                            assistants_core.models.Assistant.t :=
                                                        M.read a in
                                                      M.call
                                                        (α0
                                                          (borrow
                                                            (assistants_core.models.Assistant.Get_inner
                                                              (deref α1))))) :
                                                      M
                                                        async_openai.types.assistant.AssistantObject.t
                                                  ]) :
                                                M
                                                  async_openai.types.assistant.AssistantObject.t)) in
                                        let* α6 :
                                            alloc.vec.Vec.t
                                              async_openai.types.assistant.AssistantObject.t
                                              alloc.alloc.Global.t :=
                                          M.call (α0 α5) in
                                        let* α7 :
                                            (ref str.t) ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            alloc.string.ToString.to_string
                                              (Self := str.t)
                                              (Trait := ℐ))) in
                                        let* α8 : ref str.t :=
                                          M.read (mk_str "list") in
                                        let* α9 : alloc.string.String.t :=
                                          M.call (α7 α8) in
                                        M.alloc
                                          (core.result.Result.Ok
                                            (axum.json.Json.Build_t
                                              {|
                                                async_openai.types.assistant.ListAssistantsResponse.data :=
                                                  α6;
                                                async_openai.types.assistant.ListAssistantsResponse.object :=
                                                  α9;
                                                async_openai.types.assistant.ListAssistantsResponse.has_more :=
                                                  false;
                                                async_openai.types.assistant.ListAssistantsResponse.first_id :=
                                                  core.option.Option.None;
                                                async_openai.types.assistant.ListAssistantsResponse.last_id :=
                                                  core.option.Option.None;
                                              |}))
                                      | _ => M.break_match
                                      end) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (axum.json.Json.t
                                              async_openai.types.assistant.ListAssistantsResponse.t)
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t)));
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | core.result.Result.Err _ =>
                                        let γ0_0 :=
                                          core.result.Result.Get_Err_0 γ in
                                        let* e := M.copy γ0_0 in
                                        let* α0 : http.status.StatusCode.t :=
                                          M.read
                                            http.status.INTERNAL_SERVER_ERROR in
                                        let* α1 :
                                            (ref sqlx_core.error.Error.t) ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            alloc.string.ToString.to_string
                                              (Self := sqlx_core.error.Error.t)
                                              (Trait := ℐ))) in
                                        let* α2 : alloc.string.String.t :=
                                          M.call (α1 (borrow e)) in
                                        M.alloc
                                          (core.result.Result.Err (α0, α2))
                                      | _ => M.break_match
                                      end) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (axum.json.Json.t
                                              async_openai.types.assistant.ListAssistantsResponse.t)
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t)))
                                  ] in
                              M.pure (use α15)
                            end) :
                            M
                              (M.Val
                                (core.result.Result.t
                                  (axum.json.Json.t
                                    async_openai.types.assistant.ListAssistantsResponse.t)
                                  (http.status.StatusCode.t
                                  *
                                  alloc.string.String.t)))
                        ]
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.assistant.ListAssistantsResponse.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t
                  async_openai.types.assistant.ListAssistantsResponse.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t
            async_openai.types.assistant.ListAssistantsResponse.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

Module chat.
  (*
  fn extract_base_url(model_url: &str) -> Result<String, url::ParseError> {
      let url = Url::parse(model_url)?;
      let base_url = url.join("/")?;
      Ok(base_url.as_str().to_string())
  }
  *)
  Definition extract_base_url
      (model_url : ref str.t)
      :
        M
          (core.result.Result.t
            alloc.string.String.t
            url.parser.ParseError.t) :=
    let* model_url := M.alloc model_url in
    let return_ :=
      M.return_
        (R :=
          core.result.Result.t alloc.string.String.t url.parser.ParseError.t) in
    M.catch_return
      (let* url : M.Val url.Url.t :=
        let* α0 :
            (core.result.Result.t url.Url.t url.parser.ParseError.t) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t url.Url.t url.parser.ParseError.t)
              (Trait := ℐ))) in
        let* α1 : ref str.t := M.read model_url in
        let* α2 : core.result.Result.t url.Url.t url.parser.ParseError.t :=
          M.call (url.Url.t::["parse"] α1) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t
                core.convert.Infallible.t
                url.parser.ParseError.t)
              url.Url.t :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t
                  core.convert.Infallible.t
                  url.parser.ParseError.t)
                url.Url.t) :=
          M.alloc α3 in
        let* α5 : M.Val url.Url.t :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t
                          core.convert.Infallible.t
                          url.parser.ParseError.t)
                        ->
                        M
                          (core.result.Result.t
                            alloc.string.String.t
                            url.parser.ParseError.t) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            alloc.string.String.t
                            url.parser.ParseError.t)
                        (R :=
                          core.result.Result.t
                            core.convert.Infallible.t
                            url.parser.ParseError.t)
                        (Trait := ℐ))) in
                  let* α1 :
                      core.result.Result.t
                        core.convert.Infallible.t
                        url.parser.ParseError.t :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        alloc.string.String.t
                        url.parser.ParseError.t :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : url.Url.t := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val url.Url.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val url.Url.t)
            ] in
        M.copy α5 in
      let* base_url : M.Val url.Url.t :=
        let* α0 :
            (core.result.Result.t url.Url.t url.parser.ParseError.t) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t url.Url.t url.parser.ParseError.t)
              (Trait := ℐ))) in
        let* α1 : ref str.t := M.read (mk_str "/") in
        let* α2 : core.result.Result.t url.Url.t url.parser.ParseError.t :=
          M.call (url.Url.t::["join"] (borrow url) α1) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t
                core.convert.Infallible.t
                url.parser.ParseError.t)
              url.Url.t :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t
                  core.convert.Infallible.t
                  url.parser.ParseError.t)
                url.Url.t) :=
          M.alloc α3 in
        let* α5 : M.Val url.Url.t :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t
                          core.convert.Infallible.t
                          url.parser.ParseError.t)
                        ->
                        M
                          (core.result.Result.t
                            alloc.string.String.t
                            url.parser.ParseError.t) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            alloc.string.String.t
                            url.parser.ParseError.t)
                        (R :=
                          core.result.Result.t
                            core.convert.Infallible.t
                            url.parser.ParseError.t)
                        (Trait := ℐ))) in
                  let* α1 :
                      core.result.Result.t
                        core.convert.Infallible.t
                        url.parser.ParseError.t :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        alloc.string.String.t
                        url.parser.ParseError.t :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : url.Url.t := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val url.Url.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val url.Url.t)
            ] in
        M.copy α5 in
      let* α0 : (ref str.t) -> M alloc.string.String.t :=
        ltac:(M.get_method (fun ℐ =>
          alloc.string.ToString.to_string (Self := str.t) (Trait := ℐ))) in
      let* α1 : ref str.t := M.call (url.Url.t::["as_str"] (borrow base_url)) in
      let* α2 : alloc.string.String.t := M.call (α0 α1) in
      let* α0 :
          M.Val
            (core.result.Result.t
              alloc.string.String.t
              url.parser.ParseError.t) :=
        M.alloc (core.result.Result.Ok α2) in
      M.read α0).
  
  (*
  pub async fn chat_handler(
      Json(request): Json<CreateChatCompletionRequest>,
  ) -> Result<Response, (StatusCode, String)> {
      let model_name = request.model.clone();
      // set stream to true
  
      let model_url = std::env::var("MODEL_URL")
          .unwrap_or_else(|_| String::from("http://localhost:8000/v1/chat/completions"));
      let base_url = extract_base_url(&model_url).unwrap_or_else(|_| model_url);
      let (api_key, base_url) = if model_name.contains("/") {
          // Open Source model
          (std::env::var("MODEL_API_KEY").unwrap_or_default(), base_url)
      } else {
          // OpenAI model
          (
              std::env::var("OPENAI_API_KEY").unwrap_or_default(),
              String::from("https://api.openai.com"),
          )
      };
      let client = Client::with_config(
          OpenAIConfig::new()
              .with_api_key(&api_key)
              .with_api_base(&base_url),
      );
      // let client = Client::new();
  
      let is_streaming = request.stream.unwrap_or(false);
      if !is_streaming {
          let tools = request.tools.as_ref().unwrap_or(&Vec::new()).clone();
          // if tools has function
          let function_calls_futures: Vec<_> = tools
              .iter()
              .map(|tool| {
                  generate_function_call(FunctionCallInput {
                      user_context: serde_json::to_string(&request.messages.clone()).unwrap(),
                      function: Function {
                          metadata: None,
                          inner: tool.function.clone(),
                          assistant_id: "".to_string(),
                          user_id: "".to_string(),
                      },
                      model_config: ModelConfig {
                          model_name: request.model.clone(),
                          model_url: None,
                          user_prompt: "".to_string(),
                          temperature: Some(0.0),
                          max_tokens_to_sample: -1,
                          stop_sequences: None,
                          top_p: Some(1.0),
                          top_k: None,
                          metadata: None,
                      },
                  })
              })
              .collect();
  
          let function_calls = join_all(function_calls_futures).await;
  
          if function_calls.len() > 0 {
              // if any error in function_calls, return error
              // if function_calls.iter().any(|f| f.is_err()) {
              //     error!("Error in function calling: {:?}", function_calls);
              //     println!("Error in function calling: {:?}", function_calls);
              //     return Err((
              //         StatusCode::INTERNAL_SERVER_ERROR,
              //         "Error in function calling".to_string(),
              //     ));
              // }
  
              return Ok(JsonResponse(CreateChatCompletionResponse {
                  usage: None,                       // TODO
                  id: "chatcmpl-abc123".to_string(), // TODO
                  model: request.model.clone(),
                  created: chrono::Utc::now().timestamp() as u32,
                  system_fingerprint: None,
                  object: "chat.completion".to_string(),
                  choices: vec![ChatChoice {
                      logprobs: None,
                      index: 0,
                      finish_reason: Some(FinishReason::ToolCalls),
                      message: ChatCompletionResponseMessage {
                          role: Role::Assistant,
                          content: None,
                          function_call: None,
                          tool_calls: Some(
                              function_calls
                                  .iter()
                                  .filter(|f| f.is_ok()) // TODO: handle error
                                  .map(|f| f.as_ref().unwrap().clone())
                                  .map(|f| ChatCompletionMessageToolCall {
                                      id: uuid::Uuid::new_v4().to_string(),
                                      r#type: ChatCompletionToolType::Function,
                                      function: FunctionCall {
                                          name: f.name.clone(),
                                          arguments: f.arguments.clone(),
                                      },
                                  })
                                  .collect(),
                          ),
                      },
                  }],
              })
              .into_response());
          }
  
          let response = client
              .chat()
              .create(request)
              .await
              .map_err(|e| (StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))?;
          Ok(JsonResponse(response).into_response())
      } else {
          // return error not supported
          return Err((
              StatusCode::INTERNAL_SERVER_ERROR,
              "Streaming is not supported yet".to_string(),
          ));
          // let mut stream = client
          //     .chat()
          //     .create_stream(request)
          //     .await
          //     .map_err(|e| (StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))?;
  
          // let sse_stream = try_stream! {
          //     while let Some(result) = stream.next().await {
          //         match result {
          //             Ok(response) => {
          //                 for chat_choice in response.choices.iter() {
          //                     if let Some(ref content) = chat_choice.delta.content {
          //                         yield Event::default().data(content.clone());
          //                     }
          //                 }
          //             }
          //             Err(err) => {
          //                 println!("Error: {}", err);
          //                 tracing::error!("Error: {}", err);
          //             }
          //         }
          //     }
          // };
  
          // Ok(Sse::new(sse_stream)
          //     .keep_alive(KeepAlive::default())
          //     .into_response())
      }
  }
  *)
  Definition chat_handler
      (__arg0
        :
        axum.json.Json.t async_openai.types.chat.CreateChatCompletionRequest.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val
                    (axum.json.Json.t
                      async_openai.types.chat.CreateChatCompletionRequest.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (http.response.Response.t
                        (http_body.combinators.box_body.UnsyncBoxBody.t
                          bytes.bytes.Bytes.t
                          axum_core.error.Error.t))
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.json.Json.Build_t _ =>
                        let γ0_0 := axum.json.Json.Get_0 γ in
                        let* request := M.copy γ0_0 in
                        let* model_name : M.Val alloc.string.String.t :=
                          let* α0 :
                              (ref alloc.string.String.t) ->
                                M alloc.string.String.t :=
                            ltac:(M.get_method (fun ℐ =>
                              core.clone.Clone.clone
                                (Self := alloc.string.String.t)
                                (Trait := ℐ))) in
                          let* α1 : alloc.string.String.t :=
                            M.call
                              (α0
                                (borrow
                                  (async_openai.types.chat.CreateChatCompletionRequest.Get_model
                                    request))) in
                          M.alloc α1 in
                        let* model_url : M.Val alloc.string.String.t :=
                          let* α0 : ref str.t := M.read (mk_str "MODEL_URL") in
                          let* α1 :
                              core.result.Result.t
                                alloc.string.String.t
                                std.env.VarError.t :=
                            M.call (std.env.var α0) in
                          let* α2 : alloc.string.String.t :=
                            M.call
                              ((core.result.Result.t
                                    alloc.string.String.t
                                    std.env.VarError.t)::["unwrap_or_else"]
                                α1
                                (fun (α0 : std.env.VarError.t) =>
                                  (let* α0 := M.alloc α0 in
                                  match_operator
                                    α0
                                    [
                                      fun γ =>
                                        (let* α0 :
                                            (ref str.t) ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.convert.From.from
                                              (Self := alloc.string.String.t)
                                              (T := ref str.t)
                                              (Trait := ℐ))) in
                                        let* α1 : ref str.t :=
                                          M.read
                                            (mk_str
                                              "http://localhost:8000/v1/chat/completions") in
                                        M.call (α0 α1)) :
                                        M alloc.string.String.t
                                    ]) :
                                  M alloc.string.String.t)) in
                          M.alloc α2 in
                        let* base_url : M.Val alloc.string.String.t :=
                          let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.deref.Deref.deref
                                (Self := alloc.string.String.t)
                                (Trait := ℐ))) in
                          let* α1 : ref str.t :=
                            M.call (α0 (borrow model_url)) in
                          let* α2 :
                              core.result.Result.t
                                alloc.string.String.t
                                url.parser.ParseError.t :=
                            M.call
                              (assistants_api_communication.chat.extract_base_url
                                α1) in
                          let* α3 : alloc.string.String.t :=
                            M.call
                              ((core.result.Result.t
                                    alloc.string.String.t
                                    url.parser.ParseError.t)::["unwrap_or_else"]
                                α2
                                (fun (α0 : url.parser.ParseError.t) =>
                                  (let* α0 := M.alloc α0 in
                                  match_operator
                                    α0
                                    [
                                      fun γ =>
                                        (M.read model_url) :
                                        M alloc.string.String.t
                                    ]) :
                                  M alloc.string.String.t)) in
                          M.alloc α3 in
                        let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.deref.Deref.deref
                              (Self := alloc.string.String.t)
                              (Trait := ℐ))) in
                        let* α1 : ref str.t :=
                          M.call (α0 (borrow model_name)) in
                        let* α2 : ref str.t := M.read (mk_str "/") in
                        let* α3 : bool.t :=
                          M.call (str.t::["contains"] α1 α2) in
                        let* α4 : M.Val bool.t := M.alloc α3 in
                        let* α5 : bool.t := M.read (use α4) in
                        let* α6 :
                            M.Val
                              (alloc.string.String.t * alloc.string.String.t) :=
                          if α5 then
                            let* α0 : ref str.t :=
                              M.read (mk_str "MODEL_API_KEY") in
                            let* α1 :
                                core.result.Result.t
                                  alloc.string.String.t
                                  std.env.VarError.t :=
                              M.call (std.env.var α0) in
                            let* α2 : alloc.string.String.t :=
                              M.call
                                ((core.result.Result.t
                                      alloc.string.String.t
                                      std.env.VarError.t)::["unwrap_or_default"]
                                  α1) in
                            let* α3 : alloc.string.String.t :=
                              M.read base_url in
                            M.alloc (α2, α3)
                          else
                            let* α0 : ref str.t :=
                              M.read (mk_str "OPENAI_API_KEY") in
                            let* α1 :
                                core.result.Result.t
                                  alloc.string.String.t
                                  std.env.VarError.t :=
                              M.call (std.env.var α0) in
                            let* α2 : alloc.string.String.t :=
                              M.call
                                ((core.result.Result.t
                                      alloc.string.String.t
                                      std.env.VarError.t)::["unwrap_or_default"]
                                  α1) in
                            let* α3 : (ref str.t) -> M alloc.string.String.t :=
                              ltac:(M.get_method (fun ℐ =>
                                core.convert.From.from
                                  (Self := alloc.string.String.t)
                                  (T := ref str.t)
                                  (Trait := ℐ))) in
                            let* α4 : ref str.t :=
                              M.read (mk_str "https://api.openai.com") in
                            let* α5 : alloc.string.String.t := M.call (α3 α4) in
                            M.alloc (α2, α5) in
                        let* α0 :
                            M.Val
                              (core.result.Result.t
                                (http.response.Response.t
                                  (http_body.combinators.box_body.UnsyncBoxBody.t
                                    bytes.bytes.Bytes.t
                                    axum_core.error.Error.t))
                                (http.status.StatusCode.t
                                *
                                alloc.string.String.t)) :=
                          match_operator
                            α6
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | (_, _) =>
                                  let γ0_0 := Tuple.Access.left γ in
                                  let γ0_1 := Tuple.Access.right γ in
                                  let* api_key := M.copy γ0_0 in
                                  let* base_url := M.copy γ0_1 in
                                  let* client :
                                      M.Val
                                        (async_openai.client.Client.t
                                          async_openai.config.OpenAIConfig.t) :=
                                    let* α0 :
                                        async_openai.config.OpenAIConfig.t :=
                                      M.call
                                        async_openai.config.OpenAIConfig.t::["new"] in
                                    let* α1 :
                                        async_openai.config.OpenAIConfig.t :=
                                      M.call
                                        (async_openai.config.OpenAIConfig.t::["with_api_key"]
                                          α0
                                          (borrow api_key)) in
                                    let* α2 :
                                        async_openai.config.OpenAIConfig.t :=
                                      M.call
                                        (async_openai.config.OpenAIConfig.t::["with_api_base"]
                                          α1
                                          (borrow base_url)) in
                                    let* α3 :
                                        async_openai.client.Client.t
                                          async_openai.config.OpenAIConfig.t :=
                                      M.call
                                        ((async_openai.client.Client.t
                                              async_openai.config.OpenAIConfig.t)::["with_config"]
                                          α2) in
                                    M.alloc α3 in
                                  let* is_streaming : M.Val bool.t :=
                                    let* α0 : core.option.Option.t bool.t :=
                                      M.read
                                        (async_openai.types.chat.CreateChatCompletionRequest.Get_stream
                                          request) in
                                    let* α1 : bool.t :=
                                      M.call
                                        ((core.option.Option.t
                                              bool.t)::["unwrap_or"]
                                          α0
                                          false) in
                                    M.alloc α1 in
                                  let* α0 : bool.t := M.read is_streaming in
                                  let* α1 : M.Val bool.t :=
                                    M.alloc (UnOp.not α0) in
                                  let* α2 : bool.t := M.read (use α1) in
                                  if α2 then
                                    let* tools :
                                        M.Val
                                          (alloc.vec.Vec.t
                                            async_openai.types.chat.ChatCompletionTool.t
                                            alloc.alloc.Global.t) :=
                                      let* α0 :
                                          (ref
                                              (alloc.vec.Vec.t
                                                async_openai.types.chat.ChatCompletionTool.t
                                                alloc.alloc.Global.t))
                                            ->
                                            M
                                              (alloc.vec.Vec.t
                                                async_openai.types.chat.ChatCompletionTool.t
                                                alloc.alloc.Global.t) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.clone.Clone.clone
                                            (Self :=
                                              alloc.vec.Vec.t
                                                async_openai.types.chat.ChatCompletionTool.t
                                                alloc.alloc.Global.t)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.option.Option.t
                                            (ref
                                              (alloc.vec.Vec.t
                                                async_openai.types.chat.ChatCompletionTool.t
                                                alloc.alloc.Global.t)) :=
                                        M.call
                                          ((core.option.Option.t
                                                (alloc.vec.Vec.t
                                                  async_openai.types.chat.ChatCompletionTool.t
                                                  alloc.alloc.Global.t))::["as_ref"]
                                            (borrow
                                              (async_openai.types.chat.CreateChatCompletionRequest.Get_tools
                                                request))) in
                                      let* α2 :
                                          alloc.vec.Vec.t
                                            async_openai.types.chat.ChatCompletionTool.t
                                            alloc.alloc.Global.t :=
                                        M.call
                                          (alloc.vec.Vec.t
                                              async_openai.types.chat.ChatCompletionTool.t
                                              alloc.alloc.Global.t)::["new"] in
                                      let* α3 :
                                          M.Val
                                            (alloc.vec.Vec.t
                                              async_openai.types.chat.ChatCompletionTool.t
                                              alloc.alloc.Global.t) :=
                                        M.alloc α2 in
                                      let* α4 :
                                          ref
                                            (alloc.vec.Vec.t
                                              async_openai.types.chat.ChatCompletionTool.t
                                              alloc.alloc.Global.t) :=
                                        M.call
                                          ((core.option.Option.t
                                                (ref
                                                  (alloc.vec.Vec.t
                                                    async_openai.types.chat.ChatCompletionTool.t
                                                    alloc.alloc.Global.t)))::["unwrap_or"]
                                            α1
                                            (borrow α3)) in
                                      let* α5 :
                                          alloc.vec.Vec.t
                                            async_openai.types.chat.ChatCompletionTool.t
                                            alloc.alloc.Global.t :=
                                        M.call (α0 α4) in
                                      M.alloc α5 in
                                    let* function_calls_futures :
                                        M.Val
                                          (alloc.vec.Vec.t
                                            _
                                            alloc.alloc.Global.t) :=
                                      let* α0 :
                                          (core.iter.adapters.map.Map.t
                                              (core.slice.iter.Iter.t
                                                async_openai.types.chat.ChatCompletionTool.t)
                                              ((ref
                                                  async_openai.types.chat.ChatCompletionTool.t)
                                                ->
                                                M _))
                                            ->
                                            M
                                              (alloc.vec.Vec.t
                                                _
                                                alloc.alloc.Global.t) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.iter.traits.iterator.Iterator.collect
                                            (Self :=
                                              core.iter.adapters.map.Map.t
                                                (core.slice.iter.Iter.t
                                                  async_openai.types.chat.ChatCompletionTool.t)
                                                ((ref
                                                    async_openai.types.chat.ChatCompletionTool.t)
                                                  ->
                                                  M _))
                                            (B :=
                                              alloc.vec.Vec.t
                                                _
                                                alloc.alloc.Global.t)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          (core.slice.iter.Iter.t
                                              async_openai.types.chat.ChatCompletionTool.t)
                                            ->
                                            ((ref
                                                async_openai.types.chat.ChatCompletionTool.t)
                                              ->
                                              M _)
                                            ->
                                            M
                                              (core.iter.adapters.map.Map.t
                                                (core.slice.iter.Iter.t
                                                  async_openai.types.chat.ChatCompletionTool.t)
                                                ((ref
                                                    async_openai.types.chat.ChatCompletionTool.t)
                                                  ->
                                                  M _)) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.iter.traits.iterator.Iterator.map
                                            (Self :=
                                              core.slice.iter.Iter.t
                                                async_openai.types.chat.ChatCompletionTool.t)
                                            (B := _)
                                            (F :=
                                              (ref
                                                  async_openai.types.chat.ChatCompletionTool.t)
                                                ->
                                                M _)
                                            (Trait := ℐ))) in
                                      let* α2 :
                                          (ref
                                              (alloc.vec.Vec.t
                                                async_openai.types.chat.ChatCompletionTool.t
                                                alloc.alloc.Global.t))
                                            ->
                                            M (ref _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.deref.Deref.deref
                                            (Self :=
                                              alloc.vec.Vec.t
                                                async_openai.types.chat.ChatCompletionTool.t
                                                alloc.alloc.Global.t)
                                            (Trait := ℐ))) in
                                      let* α3 :
                                          ref
                                            (slice
                                              async_openai.types.chat.ChatCompletionTool.t) :=
                                        M.call (α2 (borrow tools)) in
                                      let* α4 :
                                          core.slice.iter.Iter.t
                                            async_openai.types.chat.ChatCompletionTool.t :=
                                        M.call
                                          ((slice
                                                async_openai.types.chat.ChatCompletionTool.t)::["iter"]
                                            α3) in
                                      let* α5 :
                                          core.iter.adapters.map.Map.t
                                            (core.slice.iter.Iter.t
                                              async_openai.types.chat.ChatCompletionTool.t)
                                            ((ref
                                                async_openai.types.chat.ChatCompletionTool.t)
                                              ->
                                              M _) :=
                                        M.call
                                          (α1
                                            α4
                                            (fun
                                                (α0 :
                                                  ref
                                                    async_openai.types.chat.ChatCompletionTool.t) =>
                                              (let* α0 := M.alloc α0 in
                                              match_operator
                                                α0
                                                [
                                                  fun γ =>
                                                    (let* tool := M.copy γ in
                                                    let* α0 :
                                                        (ref
                                                            (alloc.vec.Vec.t
                                                              async_openai.types.chat.ChatCompletionRequestMessage.t
                                                              alloc.alloc.Global.t))
                                                          ->
                                                          M
                                                            (alloc.vec.Vec.t
                                                              async_openai.types.chat.ChatCompletionRequestMessage.t
                                                              alloc.alloc.Global.t) :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.clone.Clone.clone
                                                          (Self :=
                                                            alloc.vec.Vec.t
                                                              async_openai.types.chat.ChatCompletionRequestMessage.t
                                                              alloc.alloc.Global.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 :
                                                        alloc.vec.Vec.t
                                                          async_openai.types.chat.ChatCompletionRequestMessage.t
                                                          alloc.alloc.Global.t :=
                                                      M.call
                                                        (α0
                                                          (borrow
                                                            (async_openai.types.chat.CreateChatCompletionRequest.Get_messages
                                                              request))) in
                                                    let* α2 :
                                                        M.Val
                                                          (alloc.vec.Vec.t
                                                            async_openai.types.chat.ChatCompletionRequestMessage.t
                                                            alloc.alloc.Global.t) :=
                                                      M.alloc α1 in
                                                    let* α3 :
                                                        core.result.Result.t
                                                          alloc.string.String.t
                                                          serde_json.error.Error.t :=
                                                      M.call
                                                        (serde_json.ser.to_string
                                                          (borrow α2)) in
                                                    let* α4 :
                                                        alloc.string.String.t :=
                                                      M.call
                                                        ((core.result.Result.t
                                                              alloc.string.String.t
                                                              serde_json.error.Error.t)::["unwrap"]
                                                          α3) in
                                                    let* α5 :
                                                        (ref
                                                            async_openai.types.chat.FunctionObject.t)
                                                          ->
                                                          M
                                                            async_openai.types.chat.FunctionObject.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.clone.Clone.clone
                                                          (Self :=
                                                            async_openai.types.chat.FunctionObject.t)
                                                          (Trait := ℐ))) in
                                                    let* α6 :
                                                        ref
                                                          async_openai.types.chat.ChatCompletionTool.t :=
                                                      M.read tool in
                                                    let* α7 :
                                                        async_openai.types.chat.FunctionObject.t :=
                                                      M.call
                                                        (α5
                                                          (borrow
                                                            (async_openai.types.chat.ChatCompletionTool.Get_function
                                                              (deref α6)))) in
                                                    let* α8 :
                                                        (ref str.t) ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        alloc.string.ToString.to_string
                                                          (Self := str.t)
                                                          (Trait := ℐ))) in
                                                    let* α9 : ref str.t :=
                                                      M.read (mk_str "") in
                                                    let* α10 :
                                                        alloc.string.String.t :=
                                                      M.call (α8 α9) in
                                                    let* α11 :
                                                        (ref str.t) ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        alloc.string.ToString.to_string
                                                          (Self := str.t)
                                                          (Trait := ℐ))) in
                                                    let* α12 : ref str.t :=
                                                      M.read (mk_str "") in
                                                    let* α13 :
                                                        alloc.string.String.t :=
                                                      M.call (α11 α12) in
                                                    let* α14 :
                                                        (ref
                                                            alloc.string.String.t)
                                                          ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.clone.Clone.clone
                                                          (Self :=
                                                            alloc.string.String.t)
                                                          (Trait := ℐ))) in
                                                    let* α15 :
                                                        alloc.string.String.t :=
                                                      M.call
                                                        (α14
                                                          (borrow
                                                            (async_openai.types.chat.CreateChatCompletionRequest.Get_model
                                                              request))) in
                                                    let* α16 :
                                                        (ref str.t) ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        alloc.string.ToString.to_string
                                                          (Self := str.t)
                                                          (Trait := ℐ))) in
                                                    let* α17 : ref str.t :=
                                                      M.read (mk_str "") in
                                                    let* α18 :
                                                        alloc.string.String.t :=
                                                      M.call (α16 α17) in
                                                    let* α19 : f32.t :=
                                                      M.read
                                                        (UnsupportedLiteral :
                                                          M.Val f32.t) in
                                                    let* α20 : f32.t :=
                                                      M.read
                                                        (UnsupportedLiteral :
                                                          M.Val f32.t) in
                                                    M.call
                                                      (assistants_core.function_calling.generate_function_call
                                                        {|
                                                          assistants_core.models.FunctionCallInput.user_context :=
                                                            α4;
                                                          assistants_core.models.FunctionCallInput.function :=
                                                            {|
                                                              assistants_core.models.Function.metadata :=
                                                                core.option.Option.None;
                                                              assistants_core.models.Function.inner :=
                                                                α7;
                                                              assistants_core.models.Function.assistant_id :=
                                                                α10;
                                                              assistants_core.models.Function.user_id :=
                                                                α13;
                                                            |};
                                                          assistants_core.models.FunctionCallInput.model_config :=
                                                            {|
                                                              assistants_core.function_calling.ModelConfig.model_name :=
                                                                α15;
                                                              assistants_core.function_calling.ModelConfig.model_url :=
                                                                core.option.Option.None;
                                                              assistants_core.function_calling.ModelConfig.user_prompt :=
                                                                α18;
                                                              assistants_core.function_calling.ModelConfig.temperature :=
                                                                core.option.Option.Some
                                                                  α19;
                                                              assistants_core.function_calling.ModelConfig.max_tokens_to_sample :=
                                                                (Integer.of_Z
                                                                    (-1)) :
                                                                  i32.t;
                                                              assistants_core.function_calling.ModelConfig.stop_sequences :=
                                                                core.option.Option.None;
                                                              assistants_core.function_calling.ModelConfig.top_p :=
                                                                core.option.Option.Some
                                                                  α20;
                                                              assistants_core.function_calling.ModelConfig.top_k :=
                                                                core.option.Option.None;
                                                              assistants_core.function_calling.ModelConfig.metadata :=
                                                                core.option.Option.None;
                                                            |};
                                                        |})) :
                                                    M _
                                                ]) :
                                              M _)) in
                                      let* α6 :
                                          alloc.vec.Vec.t
                                            _
                                            alloc.alloc.Global.t :=
                                        M.call (α0 α5) in
                                      M.alloc α6 in
                                    let* function_calls :
                                        M.Val
                                          (alloc.vec.Vec.t
                                            (core.result.Result.t
                                              assistants_core.function_calling.FunctionCallWithMetadata.t
                                              assistants_core.function_calling.FunctionCallError.t)
                                            alloc.alloc.Global.t) :=
                                      let* α0 :
                                          (futures_util.future.join_all.JoinAll.t
                                              _)
                                            ->
                                            M _ :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.future.into_future.IntoFuture.into_future
                                            (Self :=
                                              futures_util.future.join_all.JoinAll.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          alloc.vec.Vec.t
                                            _
                                            alloc.alloc.Global.t :=
                                        M.read function_calls_futures in
                                      let* α2 :
                                          futures_util.future.join_all.JoinAll.t
                                            _ :=
                                        M.call
                                          (futures_util.future.join_all.join_all
                                            α1) in
                                      let* α3 :
                                          futures_util.future.join_all.JoinAll.t
                                            _ :=
                                        M.call (α0 α2) in
                                      let* α4 :
                                          M.Val
                                            (futures_util.future.join_all.JoinAll.t
                                              _) :=
                                        M.alloc α3 in
                                      let* α5 :
                                          M.Val
                                            (alloc.vec.Vec.t
                                              (core.result.Result.t
                                                assistants_core.function_calling.FunctionCallWithMetadata.t
                                                assistants_core.function_calling.FunctionCallError.t)
                                              alloc.alloc.Global.t) :=
                                        match_operator
                                          α4
                                          [
                                            fun γ =>
                                              (let* __awaitee := M.copy γ in
                                              M.loop
                                                (let* _ : M.Val unit :=
                                                  let* α0 :
                                                      (core.pin.Pin.t
                                                          (mut_ref
                                                            (futures_util.future.join_all.JoinAll.t
                                                              _)))
                                                        ->
                                                        (mut_ref
                                                          core.task.wake.Context.t)
                                                        ->
                                                        M
                                                          (core.task.poll.Poll.t
                                                            _) :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.future.future.Future.poll
                                                        (Self :=
                                                          futures_util.future.join_all.JoinAll.t
                                                            _)
                                                        (Trait := ℐ))) in
                                                  let* α1 :
                                                      core.pin.Pin.t
                                                        (mut_ref
                                                          (futures_util.future.join_all.JoinAll.t
                                                            _)) :=
                                                    M.call
                                                      ((core.pin.Pin.t
                                                            (mut_ref
                                                              (futures_util.future.join_all.JoinAll.t
                                                                _)))::["new_unchecked"]
                                                        (borrow_mut
                                                          __awaitee)) in
                                                  let* α2 :
                                                      core.future.ResumeTy.t :=
                                                    M.read _task_context in
                                                  let* α3 :
                                                      mut_ref
                                                        core.task.wake.Context.t :=
                                                    M.call
                                                      (core.future.get_context
                                                        α2) in
                                                  let* α4 :
                                                      core.task.poll.Poll.t
                                                        (alloc.vec.Vec.t
                                                          (core.result.Result.t
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t
                                                            assistants_core.function_calling.FunctionCallError.t)
                                                          alloc.alloc.Global.t) :=
                                                    M.call (α0 α1 α3) in
                                                  let* α5 :
                                                      M.Val
                                                        (core.task.poll.Poll.t
                                                          (alloc.vec.Vec.t
                                                            (core.result.Result.t
                                                              assistants_core.function_calling.FunctionCallWithMetadata.t
                                                              assistants_core.function_calling.FunctionCallError.t)
                                                            alloc.alloc.Global.t)) :=
                                                    M.alloc α4 in
                                                  match_operator
                                                    α5
                                                    [
                                                      fun γ =>
                                                        (let* α0 := M.read γ in
                                                        match α0 with
                                                        |
                                                            core.task.poll.Poll.Ready
                                                              _
                                                            =>
                                                          let γ0_0 :=
                                                            core.task.poll.Poll.Get_Ready_0
                                                              γ in
                                                          let* result :=
                                                            M.copy γ0_0 in
                                                          let* α0 :
                                                              M.Val never.t :=
                                                            M.break in
                                                          let* α1 :=
                                                            M.read α0 in
                                                          let* α2 : unit :=
                                                            never_to_any α1 in
                                                          M.alloc α2
                                                        | _ => M.break_match
                                                        end) :
                                                        M (M.Val unit);
                                                      fun γ =>
                                                        (let* α0 := M.read γ in
                                                        match α0 with
                                                        |
                                                            core.task.poll.Poll.Pending
                                                            =>
                                                          M.alloc tt
                                                        | _ => M.break_match
                                                        end) :
                                                        M (M.Val unit)
                                                    ] in
                                                let* _ : M.Val unit :=
                                                  let* α0 : M.Val unit :=
                                                    M.alloc tt in
                                                  let* α1 :
                                                      M.Val
                                                        core.future.ResumeTy.t :=
                                                    yield α0 in
                                                  let* α2 :
                                                      core.future.ResumeTy.t :=
                                                    M.read α1 in
                                                  assign _task_context α2 in
                                                M.alloc tt)) :
                                              M
                                                (M.Val
                                                  (alloc.vec.Vec.t
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t)
                                                    alloc.alloc.Global.t))
                                          ] in
                                      M.copy α5 in
                                    let* _ : M.Val unit :=
                                      let* α0 : usize.t :=
                                        M.call
                                          ((alloc.vec.Vec.t
                                                (core.result.Result.t
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  assistants_core.function_calling.FunctionCallError.t)
                                                alloc.alloc.Global.t)::["len"]
                                            (borrow function_calls)) in
                                      let* α1 : M.Val bool.t :=
                                        M.alloc
                                          (BinOp.Pure.gt
                                            α0
                                            ((Integer.of_Z 0) : usize.t)) in
                                      let* α2 : bool.t := M.read (use α1) in
                                      if α2 then
                                        let* α0 :
                                            (axum.json.Json.t
                                                async_openai.types.chat.CreateChatCompletionResponse.t)
                                              ->
                                              M
                                                (http.response.Response.t
                                                  (http_body.combinators.box_body.UnsyncBoxBody.t
                                                    bytes.bytes.Bytes.t
                                                    axum_core.error.Error.t)) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            axum_core.response.into_response.IntoResponse.into_response
                                              (Self :=
                                                axum.json.Json.t
                                                  async_openai.types.chat.CreateChatCompletionResponse.t)
                                              (Trait := ℐ))) in
                                        let* α1 :
                                            (ref str.t) ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            alloc.string.ToString.to_string
                                              (Self := str.t)
                                              (Trait := ℐ))) in
                                        let* α2 : ref str.t :=
                                          M.read (mk_str "chatcmpl-abc123") in
                                        let* α3 : alloc.string.String.t :=
                                          M.call (α1 α2) in
                                        let* α4 :
                                            (ref alloc.string.String.t) ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.clone.Clone.clone
                                              (Self := alloc.string.String.t)
                                              (Trait := ℐ))) in
                                        let* α5 : alloc.string.String.t :=
                                          M.call
                                            (α4
                                              (borrow
                                                (async_openai.types.chat.CreateChatCompletionRequest.Get_model
                                                  request))) in
                                        let* α6 :
                                            chrono.datetime.DateTime.t
                                              chrono.offset.utc.Utc.t :=
                                          M.call
                                            chrono.offset.utc.Utc.t::["now"] in
                                        let* α7 :
                                            M.Val
                                              (chrono.datetime.DateTime.t
                                                chrono.offset.utc.Utc.t) :=
                                          M.alloc α6 in
                                        let* α8 : i64.t :=
                                          M.call
                                            ((chrono.datetime.DateTime.t
                                                  chrono.offset.utc.Utc.t)::["timestamp"]
                                              (borrow α7)) in
                                        let* α9 :
                                            (ref str.t) ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            alloc.string.ToString.to_string
                                              (Self := str.t)
                                              (Trait := ℐ))) in
                                        let* α10 : ref str.t :=
                                          M.read (mk_str "chat.completion") in
                                        let* α11 : alloc.string.String.t :=
                                          M.call (α9 α10) in
                                        let* α12 :
                                            (core.iter.adapters.map.Map.t
                                                (core.iter.adapters.map.Map.t
                                                  (core.iter.adapters.filter.Filter.t
                                                    (core.slice.iter.Iter.t
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t))
                                                    ((ref
                                                        (ref
                                                          (core.result.Result.t
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t
                                                            assistants_core.function_calling.FunctionCallError.t)))
                                                      ->
                                                      M bool.t))
                                                  ((ref
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t))
                                                    ->
                                                    M
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t))
                                                (assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  ->
                                                  M
                                                    async_openai.types.chat.ChatCompletionMessageToolCall.t))
                                              ->
                                              M
                                                (alloc.vec.Vec.t
                                                  async_openai.types.chat.ChatCompletionMessageToolCall.t
                                                  alloc.alloc.Global.t) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.iter.traits.iterator.Iterator.collect
                                              (Self :=
                                                core.iter.adapters.map.Map.t
                                                  (core.iter.adapters.map.Map.t
                                                    (core.iter.adapters.filter.Filter.t
                                                      (core.slice.iter.Iter.t
                                                        (core.result.Result.t
                                                          assistants_core.function_calling.FunctionCallWithMetadata.t
                                                          assistants_core.function_calling.FunctionCallError.t))
                                                      ((ref
                                                          (ref
                                                            (core.result.Result.t
                                                              assistants_core.function_calling.FunctionCallWithMetadata.t
                                                              assistants_core.function_calling.FunctionCallError.t)))
                                                        ->
                                                        M bool.t))
                                                    ((ref
                                                        (core.result.Result.t
                                                          assistants_core.function_calling.FunctionCallWithMetadata.t
                                                          assistants_core.function_calling.FunctionCallError.t))
                                                      ->
                                                      M
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t))
                                                  (assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    ->
                                                    M
                                                      async_openai.types.chat.ChatCompletionMessageToolCall.t))
                                              (B :=
                                                alloc.vec.Vec.t
                                                  async_openai.types.chat.ChatCompletionMessageToolCall.t
                                                  alloc.alloc.Global.t)
                                              (Trait := ℐ))) in
                                        let* α13 :
                                            (core.iter.adapters.map.Map.t
                                                (core.iter.adapters.filter.Filter.t
                                                  (core.slice.iter.Iter.t
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t))
                                                  ((ref
                                                      (ref
                                                        (core.result.Result.t
                                                          assistants_core.function_calling.FunctionCallWithMetadata.t
                                                          assistants_core.function_calling.FunctionCallError.t)))
                                                    ->
                                                    M bool.t))
                                                ((ref
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t))
                                                  ->
                                                  M
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t))
                                              ->
                                              (assistants_core.function_calling.FunctionCallWithMetadata.t
                                                ->
                                                M
                                                  async_openai.types.chat.ChatCompletionMessageToolCall.t)
                                              ->
                                              M
                                                (core.iter.adapters.map.Map.t
                                                  (core.iter.adapters.map.Map.t
                                                    (core.iter.adapters.filter.Filter.t
                                                      (core.slice.iter.Iter.t
                                                        (core.result.Result.t
                                                          assistants_core.function_calling.FunctionCallWithMetadata.t
                                                          assistants_core.function_calling.FunctionCallError.t))
                                                      ((ref
                                                          (ref
                                                            (core.result.Result.t
                                                              assistants_core.function_calling.FunctionCallWithMetadata.t
                                                              assistants_core.function_calling.FunctionCallError.t)))
                                                        ->
                                                        M bool.t))
                                                    ((ref
                                                        (core.result.Result.t
                                                          assistants_core.function_calling.FunctionCallWithMetadata.t
                                                          assistants_core.function_calling.FunctionCallError.t))
                                                      ->
                                                      M
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t))
                                                  (assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    ->
                                                    M
                                                      async_openai.types.chat.ChatCompletionMessageToolCall.t)) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.iter.traits.iterator.Iterator.map
                                              (Self :=
                                                core.iter.adapters.map.Map.t
                                                  (core.iter.adapters.filter.Filter.t
                                                    (core.slice.iter.Iter.t
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t))
                                                    ((ref
                                                        (ref
                                                          (core.result.Result.t
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t
                                                            assistants_core.function_calling.FunctionCallError.t)))
                                                      ->
                                                      M bool.t))
                                                  ((ref
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t))
                                                    ->
                                                    M
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t))
                                              (B :=
                                                async_openai.types.chat.ChatCompletionMessageToolCall.t)
                                              (F :=
                                                assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  ->
                                                  M
                                                    async_openai.types.chat.ChatCompletionMessageToolCall.t)
                                              (Trait := ℐ))) in
                                        let* α14 :
                                            (core.iter.adapters.filter.Filter.t
                                                (core.slice.iter.Iter.t
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t))
                                                ((ref
                                                    (ref
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t)))
                                                  ->
                                                  M bool.t))
                                              ->
                                              ((ref
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t))
                                                ->
                                                M
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t)
                                              ->
                                              M
                                                (core.iter.adapters.map.Map.t
                                                  (core.iter.adapters.filter.Filter.t
                                                    (core.slice.iter.Iter.t
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t))
                                                    ((ref
                                                        (ref
                                                          (core.result.Result.t
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t
                                                            assistants_core.function_calling.FunctionCallError.t)))
                                                      ->
                                                      M bool.t))
                                                  ((ref
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t))
                                                    ->
                                                    M
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t)) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.iter.traits.iterator.Iterator.map
                                              (Self :=
                                                core.iter.adapters.filter.Filter.t
                                                  (core.slice.iter.Iter.t
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t))
                                                  ((ref
                                                      (ref
                                                        (core.result.Result.t
                                                          assistants_core.function_calling.FunctionCallWithMetadata.t
                                                          assistants_core.function_calling.FunctionCallError.t)))
                                                    ->
                                                    M bool.t))
                                              (B :=
                                                assistants_core.function_calling.FunctionCallWithMetadata.t)
                                              (F :=
                                                (ref
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t))
                                                  ->
                                                  M
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t)
                                              (Trait := ℐ))) in
                                        let* α15 :
                                            (core.slice.iter.Iter.t
                                                (core.result.Result.t
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  assistants_core.function_calling.FunctionCallError.t))
                                              ->
                                              ((ref
                                                  (ref
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t)))
                                                ->
                                                M bool.t)
                                              ->
                                              M
                                                (core.iter.adapters.filter.Filter.t
                                                  (core.slice.iter.Iter.t
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t))
                                                  ((ref
                                                      (ref
                                                        (core.result.Result.t
                                                          assistants_core.function_calling.FunctionCallWithMetadata.t
                                                          assistants_core.function_calling.FunctionCallError.t)))
                                                    ->
                                                    M bool.t)) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.iter.traits.iterator.Iterator.filter
                                              (Self :=
                                                core.slice.iter.Iter.t
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t))
                                              (P :=
                                                (ref
                                                    (ref
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t)))
                                                  ->
                                                  M bool.t)
                                              (Trait := ℐ))) in
                                        let* α16 :
                                            (ref
                                                (alloc.vec.Vec.t
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t)
                                                  alloc.alloc.Global.t))
                                              ->
                                              M (ref _) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.ops.deref.Deref.deref
                                              (Self :=
                                                alloc.vec.Vec.t
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t)
                                                  alloc.alloc.Global.t)
                                              (Trait := ℐ))) in
                                        let* α17 :
                                            ref
                                              (slice
                                                (core.result.Result.t
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  assistants_core.function_calling.FunctionCallError.t)) :=
                                          M.call
                                            (α16 (borrow function_calls)) in
                                        let* α18 :
                                            core.slice.iter.Iter.t
                                              (core.result.Result.t
                                                assistants_core.function_calling.FunctionCallWithMetadata.t
                                                assistants_core.function_calling.FunctionCallError.t) :=
                                          M.call
                                            ((slice
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t))::["iter"]
                                              α17) in
                                        let* α19 :
                                            core.iter.adapters.filter.Filter.t
                                              (core.slice.iter.Iter.t
                                                (core.result.Result.t
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  assistants_core.function_calling.FunctionCallError.t))
                                              ((ref
                                                  (ref
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t)))
                                                ->
                                                M bool.t) :=
                                          M.call
                                            (α15
                                              α18
                                              (fun
                                                  (α0 :
                                                    ref
                                                      (ref
                                                        (core.result.Result.t
                                                          assistants_core.function_calling.FunctionCallWithMetadata.t
                                                          assistants_core.function_calling.FunctionCallError.t))) =>
                                                (let* α0 := M.alloc α0 in
                                                match_operator
                                                  α0
                                                  [
                                                    fun γ =>
                                                      (let* f := M.copy γ in
                                                      let* α0 :
                                                          ref
                                                            (ref
                                                              (core.result.Result.t
                                                                assistants_core.function_calling.FunctionCallWithMetadata.t
                                                                assistants_core.function_calling.FunctionCallError.t)) :=
                                                        M.read f in
                                                      let* α1 :
                                                          ref
                                                            (core.result.Result.t
                                                              assistants_core.function_calling.FunctionCallWithMetadata.t
                                                              assistants_core.function_calling.FunctionCallError.t) :=
                                                        M.read (deref α0) in
                                                      M.call
                                                        ((core.result.Result.t
                                                              assistants_core.function_calling.FunctionCallWithMetadata.t
                                                              assistants_core.function_calling.FunctionCallError.t)::["is_ok"]
                                                          α1)) :
                                                      M bool.t
                                                  ]) :
                                                M bool.t)) in
                                        let* α20 :
                                            core.iter.adapters.map.Map.t
                                              (core.iter.adapters.filter.Filter.t
                                                (core.slice.iter.Iter.t
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t))
                                                ((ref
                                                    (ref
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t)))
                                                  ->
                                                  M bool.t))
                                              ((ref
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t))
                                                ->
                                                M
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t) :=
                                          M.call
                                            (α14
                                              α19
                                              (fun
                                                  (α0 :
                                                    ref
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t)) =>
                                                (let* α0 := M.alloc α0 in
                                                match_operator
                                                  α0
                                                  [
                                                    fun γ =>
                                                      (let* f := M.copy γ in
                                                      let* α0 :
                                                          (ref
                                                              assistants_core.function_calling.FunctionCallWithMetadata.t)
                                                            ->
                                                            M
                                                              assistants_core.function_calling.FunctionCallWithMetadata.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.clone.Clone.clone
                                                            (Self :=
                                                              assistants_core.function_calling.FunctionCallWithMetadata.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          ref
                                                            (core.result.Result.t
                                                              assistants_core.function_calling.FunctionCallWithMetadata.t
                                                              assistants_core.function_calling.FunctionCallError.t) :=
                                                        M.read f in
                                                      let* α2 :
                                                          core.result.Result.t
                                                            (ref
                                                              assistants_core.function_calling.FunctionCallWithMetadata.t)
                                                            (ref
                                                              assistants_core.function_calling.FunctionCallError.t) :=
                                                        M.call
                                                          ((core.result.Result.t
                                                                assistants_core.function_calling.FunctionCallWithMetadata.t
                                                                assistants_core.function_calling.FunctionCallError.t)::["as_ref"]
                                                            α1) in
                                                      let* α3 :
                                                          ref
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t :=
                                                        M.call
                                                          ((core.result.Result.t
                                                                (ref
                                                                  assistants_core.function_calling.FunctionCallWithMetadata.t)
                                                                (ref
                                                                  assistants_core.function_calling.FunctionCallError.t))::["unwrap"]
                                                            α2) in
                                                      M.call (α0 α3)) :
                                                      M
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  ]) :
                                                M
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t)) in
                                        let* α21 :
                                            core.iter.adapters.map.Map.t
                                              (core.iter.adapters.map.Map.t
                                                (core.iter.adapters.filter.Filter.t
                                                  (core.slice.iter.Iter.t
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t))
                                                  ((ref
                                                      (ref
                                                        (core.result.Result.t
                                                          assistants_core.function_calling.FunctionCallWithMetadata.t
                                                          assistants_core.function_calling.FunctionCallError.t)))
                                                    ->
                                                    M bool.t))
                                                ((ref
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t))
                                                  ->
                                                  M
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t))
                                              (assistants_core.function_calling.FunctionCallWithMetadata.t
                                                ->
                                                M
                                                  async_openai.types.chat.ChatCompletionMessageToolCall.t) :=
                                          M.call
                                            (α13
                                              α20
                                              (fun
                                                  (α0 :
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t) =>
                                                (let* α0 := M.alloc α0 in
                                                match_operator
                                                  α0
                                                  [
                                                    fun γ =>
                                                      (let* f := M.copy γ in
                                                      let* α0 :
                                                          (ref uuid.Uuid.t) ->
                                                            M
                                                              alloc.string.String.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          alloc.string.ToString.to_string
                                                            (Self :=
                                                              uuid.Uuid.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 : uuid.Uuid.t :=
                                                        M.call
                                                          uuid.Uuid.t::["new_v4"] in
                                                      let* α2 :
                                                          M.Val uuid.Uuid.t :=
                                                        M.alloc α1 in
                                                      let* α3 :
                                                          alloc.string.String.t :=
                                                        M.call
                                                          (α0 (borrow α2)) in
                                                      let* α4 :
                                                          (ref
                                                              alloc.string.String.t)
                                                            ->
                                                            M
                                                              alloc.string.String.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.clone.Clone.clone
                                                            (Self :=
                                                              alloc.string.String.t)
                                                            (Trait := ℐ))) in
                                                      let* α5 :
                                                          alloc.string.String.t :=
                                                        M.call
                                                          (α4
                                                            (borrow
                                                              (assistants_core.function_calling.FunctionCallWithMetadata.Get_name
                                                                f))) in
                                                      let* α6 :
                                                          (ref
                                                              alloc.string.String.t)
                                                            ->
                                                            M
                                                              alloc.string.String.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.clone.Clone.clone
                                                            (Self :=
                                                              alloc.string.String.t)
                                                            (Trait := ℐ))) in
                                                      let* α7 :
                                                          alloc.string.String.t :=
                                                        M.call
                                                          (α6
                                                            (borrow
                                                              (assistants_core.function_calling.FunctionCallWithMetadata.Get_arguments
                                                                f))) in
                                                      M.pure
                                                        {|
                                                          async_openai.types.chat.ChatCompletionMessageToolCall.id :=
                                                            α3;
                                                          async_openai.types.chat.ChatCompletionMessageToolCall.type :=
                                                            async_openai.types.chat.ChatCompletionToolType.Function;
                                                          async_openai.types.chat.ChatCompletionMessageToolCall.function :=
                                                            {|
                                                              async_openai.types.chat.FunctionCall.name :=
                                                                α5;
                                                              async_openai.types.chat.FunctionCall.arguments :=
                                                                α7;
                                                            |};
                                                        |}) :
                                                      M
                                                        async_openai.types.chat.ChatCompletionMessageToolCall.t
                                                  ]) :
                                                M
                                                  async_openai.types.chat.ChatCompletionMessageToolCall.t)) in
                                        let* α22 :
                                            alloc.vec.Vec.t
                                              async_openai.types.chat.ChatCompletionMessageToolCall.t
                                              alloc.alloc.Global.t :=
                                          M.call (α12 α21) in
                                        let* α23 :
                                            M.Val
                                              (array
                                                async_openai.types.chat.ChatChoice.t) :=
                                          M.alloc
                                            [
                                              {|
                                                async_openai.types.chat.ChatChoice.logprobs :=
                                                  core.option.Option.None;
                                                async_openai.types.chat.ChatChoice.index :=
                                                  (Integer.of_Z 0) : u32.t;
                                                async_openai.types.chat.ChatChoice.finish_reason :=
                                                  core.option.Option.Some
                                                    async_openai.types.chat.FinishReason.ToolCalls;
                                                async_openai.types.chat.ChatChoice.message :=
                                                  {|
                                                    async_openai.types.chat.ChatCompletionResponseMessage.role :=
                                                      async_openai.types.chat.Role.Assistant;
                                                    async_openai.types.chat.ChatCompletionResponseMessage.content :=
                                                      core.option.Option.None;
                                                    async_openai.types.chat.ChatCompletionResponseMessage.function_call :=
                                                      core.option.Option.None;
                                                    async_openai.types.chat.ChatCompletionResponseMessage.tool_calls :=
                                                      core.option.Option.Some
                                                        α22;
                                                  |};
                                              |}
                                            ] in
                                        let* α24 :
                                            M.Val
                                              (alloc.boxed.Box.t
                                                (array
                                                  async_openai.types.chat.ChatChoice.t)
                                                alloc.alloc.Global.t) :=
                                          M.call
                                            ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                                              α23) in
                                        let* α25 :
                                            alloc.boxed.Box.t
                                              (array
                                                async_openai.types.chat.ChatChoice.t)
                                              alloc.alloc.Global.t :=
                                          M.read α24 in
                                        let* α26 :
                                            alloc.vec.Vec.t
                                              async_openai.types.chat.ChatChoice.t
                                              alloc.alloc.Global.t :=
                                          M.call
                                            ((slice
                                                  async_openai.types.chat.ChatChoice.t)::["into_vec"]
                                              (pointer_coercion
                                                "Unsize"
                                                α25)) in
                                        let* α27 :
                                            http.response.Response.t
                                              (http_body.combinators.box_body.UnsyncBoxBody.t
                                                bytes.bytes.Bytes.t
                                                axum_core.error.Error.t) :=
                                          M.call
                                            (α0
                                              (axum.json.Json.Build_t
                                                {|
                                                  async_openai.types.chat.CreateChatCompletionResponse.usage :=
                                                    core.option.Option.None;
                                                  async_openai.types.chat.CreateChatCompletionResponse.id :=
                                                    α3;
                                                  async_openai.types.chat.CreateChatCompletionResponse.model :=
                                                    α5;
                                                  async_openai.types.chat.CreateChatCompletionResponse.created :=
                                                    rust_cast α8;
                                                  async_openai.types.chat.CreateChatCompletionResponse.system_fingerprint :=
                                                    core.option.Option.None;
                                                  async_openai.types.chat.CreateChatCompletionResponse.object :=
                                                    α11;
                                                  async_openai.types.chat.CreateChatCompletionResponse.choices :=
                                                    α26;
                                                |})) in
                                        let* α28 : M.Val never.t :=
                                          return_ (core.result.Result.Ok α27) in
                                        let* α29 := M.read α28 in
                                        let* α30 : unit := never_to_any α29 in
                                        M.alloc α30
                                      else
                                        M.alloc tt in
                                    let* response :
                                        M.Val
                                          async_openai.types.chat.CreateChatCompletionResponse.t :=
                                      let* α0 :
                                          (core.result.Result.t
                                              async_openai.types.chat.CreateChatCompletionResponse.t
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t))
                                            ->
                                            M
                                              (core.ops.control_flow.ControlFlow.t
                                                _
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.Try.branch
                                            (Self :=
                                              core.result.Result.t
                                                async_openai.types.chat.CreateChatCompletionResponse.t
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t))
                                            (Trait := ℐ))) in
                                      let* α1 : _ -> M _ :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.future.into_future.IntoFuture.into_future
                                            (Self := _)
                                            (Trait := ℐ))) in
                                      let* α2 :
                                          async_openai.chat.Chat.t
                                            async_openai.config.OpenAIConfig.t :=
                                        M.call
                                          ((async_openai.client.Client.t
                                                async_openai.config.OpenAIConfig.t)::["chat"]
                                            (borrow client)) in
                                      let* α3 :
                                          M.Val
                                            (async_openai.chat.Chat.t
                                              async_openai.config.OpenAIConfig.t) :=
                                        M.alloc α2 in
                                      let* α4 :
                                          async_openai.types.chat.CreateChatCompletionRequest.t :=
                                        M.read request in
                                      let* α5 : _ :=
                                        M.call
                                          ((async_openai.chat.Chat.t
                                                async_openai.config.OpenAIConfig.t)::["create"]
                                            (borrow α3)
                                            α4) in
                                      let* α6 : _ := M.call (α1 α5) in
                                      let* α7 : M.Val _ := M.alloc α6 in
                                      let* α8 :
                                          M.Val
                                            (core.result.Result.t
                                              async_openai.types.chat.CreateChatCompletionResponse.t
                                              async_openai.error.OpenAIError.t) :=
                                        match_operator
                                          α7
                                          [
                                            fun γ =>
                                              (let* __awaitee := M.copy γ in
                                              M.loop
                                                (let* _ : M.Val unit :=
                                                  let* α0 :
                                                      (core.pin.Pin.t
                                                          (mut_ref _))
                                                        ->
                                                        (mut_ref
                                                          core.task.wake.Context.t)
                                                        ->
                                                        M
                                                          (core.task.poll.Poll.t
                                                            _) :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.future.future.Future.poll
                                                        (Self := _)
                                                        (Trait := ℐ))) in
                                                  let* α1 :
                                                      core.pin.Pin.t
                                                        (mut_ref _) :=
                                                    M.call
                                                      ((core.pin.Pin.t
                                                            (mut_ref
                                                              _))::["new_unchecked"]
                                                        (borrow_mut
                                                          __awaitee)) in
                                                  let* α2 :
                                                      core.future.ResumeTy.t :=
                                                    M.read _task_context in
                                                  let* α3 :
                                                      mut_ref
                                                        core.task.wake.Context.t :=
                                                    M.call
                                                      (core.future.get_context
                                                        α2) in
                                                  let* α4 :
                                                      core.task.poll.Poll.t
                                                        (core.result.Result.t
                                                          async_openai.types.chat.CreateChatCompletionResponse.t
                                                          async_openai.error.OpenAIError.t) :=
                                                    M.call (α0 α1 α3) in
                                                  let* α5 :
                                                      M.Val
                                                        (core.task.poll.Poll.t
                                                          (core.result.Result.t
                                                            async_openai.types.chat.CreateChatCompletionResponse.t
                                                            async_openai.error.OpenAIError.t)) :=
                                                    M.alloc α4 in
                                                  match_operator
                                                    α5
                                                    [
                                                      fun γ =>
                                                        (let* α0 := M.read γ in
                                                        match α0 with
                                                        |
                                                            core.task.poll.Poll.Ready
                                                              _
                                                            =>
                                                          let γ0_0 :=
                                                            core.task.poll.Poll.Get_Ready_0
                                                              γ in
                                                          let* result :=
                                                            M.copy γ0_0 in
                                                          let* α0 :
                                                              M.Val never.t :=
                                                            M.break in
                                                          let* α1 :=
                                                            M.read α0 in
                                                          let* α2 : unit :=
                                                            never_to_any α1 in
                                                          M.alloc α2
                                                        | _ => M.break_match
                                                        end) :
                                                        M (M.Val unit);
                                                      fun γ =>
                                                        (let* α0 := M.read γ in
                                                        match α0 with
                                                        |
                                                            core.task.poll.Poll.Pending
                                                            =>
                                                          M.alloc tt
                                                        | _ => M.break_match
                                                        end) :
                                                        M (M.Val unit)
                                                    ] in
                                                let* _ : M.Val unit :=
                                                  let* α0 : M.Val unit :=
                                                    M.alloc tt in
                                                  let* α1 :
                                                      M.Val
                                                        core.future.ResumeTy.t :=
                                                    yield α0 in
                                                  let* α2 :
                                                      core.future.ResumeTy.t :=
                                                    M.read α1 in
                                                  assign _task_context α2 in
                                                M.alloc tt)) :
                                              M
                                                (M.Val
                                                  (core.result.Result.t
                                                    async_openai.types.chat.CreateChatCompletionResponse.t
                                                    async_openai.error.OpenAIError.t))
                                          ] in
                                      let* α9 :
                                          core.result.Result.t
                                            async_openai.types.chat.CreateChatCompletionResponse.t
                                            async_openai.error.OpenAIError.t :=
                                        M.read α8 in
                                      let* α10 :
                                          core.result.Result.t
                                            async_openai.types.chat.CreateChatCompletionResponse.t
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t) :=
                                        M.call
                                          ((core.result.Result.t
                                                async_openai.types.chat.CreateChatCompletionResponse.t
                                                async_openai.error.OpenAIError.t)::["map_err"]
                                            α9
                                            (fun
                                                (α0 :
                                                  async_openai.error.OpenAIError.t) =>
                                              (let* α0 := M.alloc α0 in
                                              match_operator
                                                α0
                                                [
                                                  fun γ =>
                                                    (let* e := M.copy γ in
                                                    let* α0 :
                                                        http.status.StatusCode.t :=
                                                      M.read
                                                        http.status.INTERNAL_SERVER_ERROR in
                                                    let* α1 :
                                                        (ref
                                                            async_openai.error.OpenAIError.t)
                                                          ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        alloc.string.ToString.to_string
                                                          (Self :=
                                                            async_openai.error.OpenAIError.t)
                                                          (Trait := ℐ))) in
                                                    let* α2 :
                                                        alloc.string.String.t :=
                                                      M.call (α1 (borrow e)) in
                                                    M.pure (α0, α2)) :
                                                    M
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)
                                                ]) :
                                              M
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t))) in
                                      let* α11 :
                                          core.ops.control_flow.ControlFlow.t
                                            (core.result.Result.t
                                              core.convert.Infallible.t
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t))
                                            async_openai.types.chat.CreateChatCompletionResponse.t :=
                                        M.call (α0 α10) in
                                      let* α12 :
                                          M.Val
                                            (core.ops.control_flow.ControlFlow.t
                                              (core.result.Result.t
                                                core.convert.Infallible.t
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t))
                                              async_openai.types.chat.CreateChatCompletionResponse.t) :=
                                        M.alloc α11 in
                                      let* α13 :
                                          M.Val
                                            async_openai.types.chat.CreateChatCompletionResponse.t :=
                                        match_operator
                                          α12
                                          [
                                            fun γ =>
                                              (let* α0 := M.read γ in
                                              match α0 with
                                              |
                                                  core.ops.control_flow.ControlFlow.Break
                                                    _
                                                  =>
                                                let γ0_0 :=
                                                  core.ops.control_flow.ControlFlow.Get_Break_0
                                                    γ in
                                                let* residual := M.copy γ0_0 in
                                                let* α0 :
                                                    (core.result.Result.t
                                                        core.convert.Infallible.t
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t))
                                                      ->
                                                      M
                                                        (core.result.Result.t
                                                          (http.response.Response.t
                                                            (http_body.combinators.box_body.UnsyncBoxBody.t
                                                              bytes.bytes.Bytes.t
                                                              axum_core.error.Error.t))
                                                          (http.status.StatusCode.t
                                                          *
                                                          alloc.string.String.t)) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.ops.try_trait.FromResidual.from_residual
                                                      (Self :=
                                                        core.result.Result.t
                                                          (http.response.Response.t
                                                            (http_body.combinators.box_body.UnsyncBoxBody.t
                                                              bytes.bytes.Bytes.t
                                                              axum_core.error.Error.t))
                                                          (http.status.StatusCode.t
                                                          *
                                                          alloc.string.String.t))
                                                      (R :=
                                                        core.result.Result.t
                                                          core.convert.Infallible.t
                                                          (http.status.StatusCode.t
                                                          *
                                                          alloc.string.String.t))
                                                      (Trait := ℐ))) in
                                                let* α1 :
                                                    core.result.Result.t
                                                      core.convert.Infallible.t
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t) :=
                                                  M.read residual in
                                                let* α2 :
                                                    core.result.Result.t
                                                      (http.response.Response.t
                                                        (http_body.combinators.box_body.UnsyncBoxBody.t
                                                          bytes.bytes.Bytes.t
                                                          axum_core.error.Error.t))
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t) :=
                                                  M.call (α0 α1) in
                                                let* α3 : M.Val never.t :=
                                                  return_ α2 in
                                                let* α4 := M.read α3 in
                                                let* α5 :
                                                    async_openai.types.chat.CreateChatCompletionResponse.t :=
                                                  never_to_any α4 in
                                                M.alloc α5
                                              | _ => M.break_match
                                              end) :
                                              M
                                                (M.Val
                                                  async_openai.types.chat.CreateChatCompletionResponse.t);
                                            fun γ =>
                                              (let* α0 := M.read γ in
                                              match α0 with
                                              |
                                                  core.ops.control_flow.ControlFlow.Continue
                                                    _
                                                  =>
                                                let γ0_0 :=
                                                  core.ops.control_flow.ControlFlow.Get_Continue_0
                                                    γ in
                                                let* val := M.copy γ0_0 in
                                                M.pure val
                                              | _ => M.break_match
                                              end) :
                                              M
                                                (M.Val
                                                  async_openai.types.chat.CreateChatCompletionResponse.t)
                                          ] in
                                      M.copy α13 in
                                    let* α0 :
                                        (axum.json.Json.t
                                            async_openai.types.chat.CreateChatCompletionResponse.t)
                                          ->
                                          M
                                            (http.response.Response.t
                                              (http_body.combinators.box_body.UnsyncBoxBody.t
                                                bytes.bytes.Bytes.t
                                                axum_core.error.Error.t)) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        axum_core.response.into_response.IntoResponse.into_response
                                          (Self :=
                                            axum.json.Json.t
                                              async_openai.types.chat.CreateChatCompletionResponse.t)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        async_openai.types.chat.CreateChatCompletionResponse.t :=
                                      M.read response in
                                    let* α2 :
                                        http.response.Response.t
                                          (http_body.combinators.box_body.UnsyncBoxBody.t
                                            bytes.bytes.Bytes.t
                                            axum_core.error.Error.t) :=
                                      M.call (α0 (axum.json.Json.Build_t α1)) in
                                    M.alloc (core.result.Result.Ok α2)
                                  else
                                    let* α0 : http.status.StatusCode.t :=
                                      M.read
                                        http.status.INTERNAL_SERVER_ERROR in
                                    let* α1 :
                                        (ref str.t) ->
                                          M alloc.string.String.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        alloc.string.ToString.to_string
                                          (Self := str.t)
                                          (Trait := ℐ))) in
                                    let* α2 : ref str.t :=
                                      M.read
                                        (mk_str
                                          "Streaming is not supported yet") in
                                    let* α3 : alloc.string.String.t :=
                                      M.call (α1 α2) in
                                    let* α4 : M.Val never.t :=
                                      return_
                                        (core.result.Result.Err (α0, α3)) in
                                    let* α5 := M.read α4 in
                                    let* α6 :
                                        core.result.Result.t
                                          (http.response.Response.t
                                            (http_body.combinators.box_body.UnsyncBoxBody.t
                                              bytes.bytes.Bytes.t
                                              axum_core.error.Error.t))
                                          (http.status.StatusCode.t
                                          *
                                          alloc.string.String.t) :=
                                      never_to_any α5 in
                                    M.alloc α6
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (http.response.Response.t
                                        (http_body.combinators.box_body.UnsyncBoxBody.t
                                          bytes.bytes.Bytes.t
                                          axum_core.error.Error.t))
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ] in
                        M.pure (use α0)
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (http.response.Response.t
                              (http_body.combinators.box_body.UnsyncBoxBody.t
                                bytes.bytes.Bytes.t
                                axum_core.error.Error.t))
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (http.response.Response.t
                    (http_body.combinators.box_body.UnsyncBoxBody.t
                      bytes.bytes.Bytes.t
                      axum_core.error.Error.t))
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (http.response.Response.t
              (http_body.combinators.box_body.UnsyncBoxBody.t
                bytes.bytes.Bytes.t
                axum_core.error.Error.t))
            (http.status.StatusCode.t * alloc.string.String.t))).
End chat.

(*
fn extract_base_url(model_url: &str) -> Result<String, url::ParseError> {
    let url = Url::parse(model_url)?;
    let base_url = url.join("/")?;
    Ok(base_url.as_str().to_string())
}
*)
Definition extract_base_url
    (model_url : ref str.t)
    : M (core.result.Result.t alloc.string.String.t url.parser.ParseError.t) :=
  let* model_url := M.alloc model_url in
  let return_ :=
    M.return_
      (R :=
        core.result.Result.t alloc.string.String.t url.parser.ParseError.t) in
  M.catch_return
    (let* url : M.Val url.Url.t :=
      let* α0 :
          (core.result.Result.t url.Url.t url.parser.ParseError.t) ->
            M (core.ops.control_flow.ControlFlow.t _ _) :=
        ltac:(M.get_method (fun ℐ =>
          core.ops.try_trait.Try.branch
            (Self := core.result.Result.t url.Url.t url.parser.ParseError.t)
            (Trait := ℐ))) in
      let* α1 : ref str.t := M.read model_url in
      let* α2 : core.result.Result.t url.Url.t url.parser.ParseError.t :=
        M.call (url.Url.t::["parse"] α1) in
      let* α3 :
          core.ops.control_flow.ControlFlow.t
            (core.result.Result.t
              core.convert.Infallible.t
              url.parser.ParseError.t)
            url.Url.t :=
        M.call (α0 α2) in
      let* α4 :
          M.Val
            (core.ops.control_flow.ControlFlow.t
              (core.result.Result.t
                core.convert.Infallible.t
                url.parser.ParseError.t)
              url.Url.t) :=
        M.alloc α3 in
      let* α5 : M.Val url.Url.t :=
        match_operator
          α4
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t
                        core.convert.Infallible.t
                        url.parser.ParseError.t)
                      ->
                      M
                        (core.result.Result.t
                          alloc.string.String.t
                          url.parser.ParseError.t) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self :=
                        core.result.Result.t
                          alloc.string.String.t
                          url.parser.ParseError.t)
                      (R :=
                        core.result.Result.t
                          core.convert.Infallible.t
                          url.parser.ParseError.t)
                      (Trait := ℐ))) in
                let* α1 :
                    core.result.Result.t
                      core.convert.Infallible.t
                      url.parser.ParseError.t :=
                  M.read residual in
                let* α2 :
                    core.result.Result.t
                      alloc.string.String.t
                      url.parser.ParseError.t :=
                  M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : url.Url.t := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val url.Url.t);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val url.Url.t)
          ] in
      M.copy α5 in
    let* base_url : M.Val url.Url.t :=
      let* α0 :
          (core.result.Result.t url.Url.t url.parser.ParseError.t) ->
            M (core.ops.control_flow.ControlFlow.t _ _) :=
        ltac:(M.get_method (fun ℐ =>
          core.ops.try_trait.Try.branch
            (Self := core.result.Result.t url.Url.t url.parser.ParseError.t)
            (Trait := ℐ))) in
      let* α1 : ref str.t := M.read (mk_str "/") in
      let* α2 : core.result.Result.t url.Url.t url.parser.ParseError.t :=
        M.call (url.Url.t::["join"] (borrow url) α1) in
      let* α3 :
          core.ops.control_flow.ControlFlow.t
            (core.result.Result.t
              core.convert.Infallible.t
              url.parser.ParseError.t)
            url.Url.t :=
        M.call (α0 α2) in
      let* α4 :
          M.Val
            (core.ops.control_flow.ControlFlow.t
              (core.result.Result.t
                core.convert.Infallible.t
                url.parser.ParseError.t)
              url.Url.t) :=
        M.alloc α3 in
      let* α5 : M.Val url.Url.t :=
        match_operator
          α4
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t
                        core.convert.Infallible.t
                        url.parser.ParseError.t)
                      ->
                      M
                        (core.result.Result.t
                          alloc.string.String.t
                          url.parser.ParseError.t) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self :=
                        core.result.Result.t
                          alloc.string.String.t
                          url.parser.ParseError.t)
                      (R :=
                        core.result.Result.t
                          core.convert.Infallible.t
                          url.parser.ParseError.t)
                      (Trait := ℐ))) in
                let* α1 :
                    core.result.Result.t
                      core.convert.Infallible.t
                      url.parser.ParseError.t :=
                  M.read residual in
                let* α2 :
                    core.result.Result.t
                      alloc.string.String.t
                      url.parser.ParseError.t :=
                  M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : url.Url.t := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val url.Url.t);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val url.Url.t)
          ] in
      M.copy α5 in
    let* α0 : (ref str.t) -> M alloc.string.String.t :=
      ltac:(M.get_method (fun ℐ =>
        alloc.string.ToString.to_string (Self := str.t) (Trait := ℐ))) in
    let* α1 : ref str.t := M.call (url.Url.t::["as_str"] (borrow base_url)) in
    let* α2 : alloc.string.String.t := M.call (α0 α1) in
    let* α0 :
        M.Val
          (core.result.Result.t
            alloc.string.String.t
            url.parser.ParseError.t) :=
      M.alloc (core.result.Result.Ok α2) in
    M.read α0).

(*
pub async fn chat_handler(
    Json(request): Json<CreateChatCompletionRequest>,
) -> Result<Response, (StatusCode, String)> {
    let model_name = request.model.clone();
    // set stream to true

    let model_url = std::env::var("MODEL_URL")
        .unwrap_or_else(|_| String::from("http://localhost:8000/v1/chat/completions"));
    let base_url = extract_base_url(&model_url).unwrap_or_else(|_| model_url);
    let (api_key, base_url) = if model_name.contains("/") {
        // Open Source model
        (std::env::var("MODEL_API_KEY").unwrap_or_default(), base_url)
    } else {
        // OpenAI model
        (
            std::env::var("OPENAI_API_KEY").unwrap_or_default(),
            String::from("https://api.openai.com"),
        )
    };
    let client = Client::with_config(
        OpenAIConfig::new()
            .with_api_key(&api_key)
            .with_api_base(&base_url),
    );
    // let client = Client::new();

    let is_streaming = request.stream.unwrap_or(false);
    if !is_streaming {
        let tools = request.tools.as_ref().unwrap_or(&Vec::new()).clone();
        // if tools has function
        let function_calls_futures: Vec<_> = tools
            .iter()
            .map(|tool| {
                generate_function_call(FunctionCallInput {
                    user_context: serde_json::to_string(&request.messages.clone()).unwrap(),
                    function: Function {
                        metadata: None,
                        inner: tool.function.clone(),
                        assistant_id: "".to_string(),
                        user_id: "".to_string(),
                    },
                    model_config: ModelConfig {
                        model_name: request.model.clone(),
                        model_url: None,
                        user_prompt: "".to_string(),
                        temperature: Some(0.0),
                        max_tokens_to_sample: -1,
                        stop_sequences: None,
                        top_p: Some(1.0),
                        top_k: None,
                        metadata: None,
                    },
                })
            })
            .collect();

        let function_calls = join_all(function_calls_futures).await;

        if function_calls.len() > 0 {
            // if any error in function_calls, return error
            // if function_calls.iter().any(|f| f.is_err()) {
            //     error!("Error in function calling: {:?}", function_calls);
            //     println!("Error in function calling: {:?}", function_calls);
            //     return Err((
            //         StatusCode::INTERNAL_SERVER_ERROR,
            //         "Error in function calling".to_string(),
            //     ));
            // }

            return Ok(JsonResponse(CreateChatCompletionResponse {
                usage: None,                       // TODO
                id: "chatcmpl-abc123".to_string(), // TODO
                model: request.model.clone(),
                created: chrono::Utc::now().timestamp() as u32,
                system_fingerprint: None,
                object: "chat.completion".to_string(),
                choices: vec![ChatChoice {
                    logprobs: None,
                    index: 0,
                    finish_reason: Some(FinishReason::ToolCalls),
                    message: ChatCompletionResponseMessage {
                        role: Role::Assistant,
                        content: None,
                        function_call: None,
                        tool_calls: Some(
                            function_calls
                                .iter()
                                .filter(|f| f.is_ok()) // TODO: handle error
                                .map(|f| f.as_ref().unwrap().clone())
                                .map(|f| ChatCompletionMessageToolCall {
                                    id: uuid::Uuid::new_v4().to_string(),
                                    r#type: ChatCompletionToolType::Function,
                                    function: FunctionCall {
                                        name: f.name.clone(),
                                        arguments: f.arguments.clone(),
                                    },
                                })
                                .collect(),
                        ),
                    },
                }],
            })
            .into_response());
        }

        let response = client
            .chat()
            .create(request)
            .await
            .map_err(|e| (StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))?;
        Ok(JsonResponse(response).into_response())
    } else {
        // return error not supported
        return Err((
            StatusCode::INTERNAL_SERVER_ERROR,
            "Streaming is not supported yet".to_string(),
        ));
        // let mut stream = client
        //     .chat()
        //     .create_stream(request)
        //     .await
        //     .map_err(|e| (StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))?;

        // let sse_stream = try_stream! {
        //     while let Some(result) = stream.next().await {
        //         match result {
        //             Ok(response) => {
        //                 for chat_choice in response.choices.iter() {
        //                     if let Some(ref content) = chat_choice.delta.content {
        //                         yield Event::default().data(content.clone());
        //                     }
        //                 }
        //             }
        //             Err(err) => {
        //                 println!("Error: {}", err);
        //                 tracing::error!("Error: {}", err);
        //             }
        //         }
        //     }
        // };

        // Ok(Sse::new(sse_stream)
        //     .keep_alive(KeepAlive::default())
        //     .into_response())
    }
}
*)
Definition chat_handler
    (__arg0
      :
      axum.json.Json.t async_openai.types.chat.CreateChatCompletionRequest.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val
                  (axum.json.Json.t
                    async_openai.types.chat.CreateChatCompletionRequest.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (http.response.Response.t
                      (http_body.combinators.box_body.UnsyncBoxBody.t
                        bytes.bytes.Bytes.t
                        axum_core.error.Error.t))
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.json.Json.Build_t _ =>
                      let γ0_0 := axum.json.Json.Get_0 γ in
                      let* request := M.copy γ0_0 in
                      let* model_name : M.Val alloc.string.String.t :=
                        let* α0 :
                            (ref alloc.string.String.t) ->
                              M alloc.string.String.t :=
                          ltac:(M.get_method (fun ℐ =>
                            core.clone.Clone.clone
                              (Self := alloc.string.String.t)
                              (Trait := ℐ))) in
                        let* α1 : alloc.string.String.t :=
                          M.call
                            (α0
                              (borrow
                                (async_openai.types.chat.CreateChatCompletionRequest.Get_model
                                  request))) in
                        M.alloc α1 in
                      let* model_url : M.Val alloc.string.String.t :=
                        let* α0 : ref str.t := M.read (mk_str "MODEL_URL") in
                        let* α1 :
                            core.result.Result.t
                              alloc.string.String.t
                              std.env.VarError.t :=
                          M.call (std.env.var α0) in
                        let* α2 : alloc.string.String.t :=
                          M.call
                            ((core.result.Result.t
                                  alloc.string.String.t
                                  std.env.VarError.t)::["unwrap_or_else"]
                              α1
                              (fun (α0 : std.env.VarError.t) =>
                                (let* α0 := M.alloc α0 in
                                match_operator
                                  α0
                                  [
                                    fun γ =>
                                      (let* α0 :
                                          (ref str.t) ->
                                            M alloc.string.String.t :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.convert.From.from
                                            (Self := alloc.string.String.t)
                                            (T := ref str.t)
                                            (Trait := ℐ))) in
                                      let* α1 : ref str.t :=
                                        M.read
                                          (mk_str
                                            "http://localhost:8000/v1/chat/completions") in
                                      M.call (α0 α1)) :
                                      M alloc.string.String.t
                                  ]) :
                                M alloc.string.String.t)) in
                        M.alloc α2 in
                      let* base_url : M.Val alloc.string.String.t :=
                        let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.deref.Deref.deref
                              (Self := alloc.string.String.t)
                              (Trait := ℐ))) in
                        let* α1 : ref str.t := M.call (α0 (borrow model_url)) in
                        let* α2 :
                            core.result.Result.t
                              alloc.string.String.t
                              url.parser.ParseError.t :=
                          M.call
                            (assistants_api_communication.chat.extract_base_url
                              α1) in
                        let* α3 : alloc.string.String.t :=
                          M.call
                            ((core.result.Result.t
                                  alloc.string.String.t
                                  url.parser.ParseError.t)::["unwrap_or_else"]
                              α2
                              (fun (α0 : url.parser.ParseError.t) =>
                                (let* α0 := M.alloc α0 in
                                match_operator
                                  α0
                                  [
                                    fun γ =>
                                      (M.read model_url) :
                                      M alloc.string.String.t
                                  ]) :
                                M alloc.string.String.t)) in
                        M.alloc α3 in
                      let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                        ltac:(M.get_method (fun ℐ =>
                          core.ops.deref.Deref.deref
                            (Self := alloc.string.String.t)
                            (Trait := ℐ))) in
                      let* α1 : ref str.t := M.call (α0 (borrow model_name)) in
                      let* α2 : ref str.t := M.read (mk_str "/") in
                      let* α3 : bool.t := M.call (str.t::["contains"] α1 α2) in
                      let* α4 : M.Val bool.t := M.alloc α3 in
                      let* α5 : bool.t := M.read (use α4) in
                      let* α6 :
                          M.Val
                            (alloc.string.String.t * alloc.string.String.t) :=
                        if α5 then
                          let* α0 : ref str.t :=
                            M.read (mk_str "MODEL_API_KEY") in
                          let* α1 :
                              core.result.Result.t
                                alloc.string.String.t
                                std.env.VarError.t :=
                            M.call (std.env.var α0) in
                          let* α2 : alloc.string.String.t :=
                            M.call
                              ((core.result.Result.t
                                    alloc.string.String.t
                                    std.env.VarError.t)::["unwrap_or_default"]
                                α1) in
                          let* α3 : alloc.string.String.t := M.read base_url in
                          M.alloc (α2, α3)
                        else
                          let* α0 : ref str.t :=
                            M.read (mk_str "OPENAI_API_KEY") in
                          let* α1 :
                              core.result.Result.t
                                alloc.string.String.t
                                std.env.VarError.t :=
                            M.call (std.env.var α0) in
                          let* α2 : alloc.string.String.t :=
                            M.call
                              ((core.result.Result.t
                                    alloc.string.String.t
                                    std.env.VarError.t)::["unwrap_or_default"]
                                α1) in
                          let* α3 : (ref str.t) -> M alloc.string.String.t :=
                            ltac:(M.get_method (fun ℐ =>
                              core.convert.From.from
                                (Self := alloc.string.String.t)
                                (T := ref str.t)
                                (Trait := ℐ))) in
                          let* α4 : ref str.t :=
                            M.read (mk_str "https://api.openai.com") in
                          let* α5 : alloc.string.String.t := M.call (α3 α4) in
                          M.alloc (α2, α5) in
                      let* α0 :
                          M.Val
                            (core.result.Result.t
                              (http.response.Response.t
                                (http_body.combinators.box_body.UnsyncBoxBody.t
                                  bytes.bytes.Bytes.t
                                  axum_core.error.Error.t))
                              (http.status.StatusCode.t
                              *
                              alloc.string.String.t)) :=
                        match_operator
                          α6
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | (_, _) =>
                                let γ0_0 := Tuple.Access.left γ in
                                let γ0_1 := Tuple.Access.right γ in
                                let* api_key := M.copy γ0_0 in
                                let* base_url := M.copy γ0_1 in
                                let* client :
                                    M.Val
                                      (async_openai.client.Client.t
                                        async_openai.config.OpenAIConfig.t) :=
                                  let* α0 :
                                      async_openai.config.OpenAIConfig.t :=
                                    M.call
                                      async_openai.config.OpenAIConfig.t::["new"] in
                                  let* α1 :
                                      async_openai.config.OpenAIConfig.t :=
                                    M.call
                                      (async_openai.config.OpenAIConfig.t::["with_api_key"]
                                        α0
                                        (borrow api_key)) in
                                  let* α2 :
                                      async_openai.config.OpenAIConfig.t :=
                                    M.call
                                      (async_openai.config.OpenAIConfig.t::["with_api_base"]
                                        α1
                                        (borrow base_url)) in
                                  let* α3 :
                                      async_openai.client.Client.t
                                        async_openai.config.OpenAIConfig.t :=
                                    M.call
                                      ((async_openai.client.Client.t
                                            async_openai.config.OpenAIConfig.t)::["with_config"]
                                        α2) in
                                  M.alloc α3 in
                                let* is_streaming : M.Val bool.t :=
                                  let* α0 : core.option.Option.t bool.t :=
                                    M.read
                                      (async_openai.types.chat.CreateChatCompletionRequest.Get_stream
                                        request) in
                                  let* α1 : bool.t :=
                                    M.call
                                      ((core.option.Option.t
                                            bool.t)::["unwrap_or"]
                                        α0
                                        false) in
                                  M.alloc α1 in
                                let* α0 : bool.t := M.read is_streaming in
                                let* α1 : M.Val bool.t :=
                                  M.alloc (UnOp.not α0) in
                                let* α2 : bool.t := M.read (use α1) in
                                if α2 then
                                  let* tools :
                                      M.Val
                                        (alloc.vec.Vec.t
                                          async_openai.types.chat.ChatCompletionTool.t
                                          alloc.alloc.Global.t) :=
                                    let* α0 :
                                        (ref
                                            (alloc.vec.Vec.t
                                              async_openai.types.chat.ChatCompletionTool.t
                                              alloc.alloc.Global.t))
                                          ->
                                          M
                                            (alloc.vec.Vec.t
                                              async_openai.types.chat.ChatCompletionTool.t
                                              alloc.alloc.Global.t) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.clone.Clone.clone
                                          (Self :=
                                            alloc.vec.Vec.t
                                              async_openai.types.chat.ChatCompletionTool.t
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        core.option.Option.t
                                          (ref
                                            (alloc.vec.Vec.t
                                              async_openai.types.chat.ChatCompletionTool.t
                                              alloc.alloc.Global.t)) :=
                                      M.call
                                        ((core.option.Option.t
                                              (alloc.vec.Vec.t
                                                async_openai.types.chat.ChatCompletionTool.t
                                                alloc.alloc.Global.t))::["as_ref"]
                                          (borrow
                                            (async_openai.types.chat.CreateChatCompletionRequest.Get_tools
                                              request))) in
                                    let* α2 :
                                        alloc.vec.Vec.t
                                          async_openai.types.chat.ChatCompletionTool.t
                                          alloc.alloc.Global.t :=
                                      M.call
                                        (alloc.vec.Vec.t
                                            async_openai.types.chat.ChatCompletionTool.t
                                            alloc.alloc.Global.t)::["new"] in
                                    let* α3 :
                                        M.Val
                                          (alloc.vec.Vec.t
                                            async_openai.types.chat.ChatCompletionTool.t
                                            alloc.alloc.Global.t) :=
                                      M.alloc α2 in
                                    let* α4 :
                                        ref
                                          (alloc.vec.Vec.t
                                            async_openai.types.chat.ChatCompletionTool.t
                                            alloc.alloc.Global.t) :=
                                      M.call
                                        ((core.option.Option.t
                                              (ref
                                                (alloc.vec.Vec.t
                                                  async_openai.types.chat.ChatCompletionTool.t
                                                  alloc.alloc.Global.t)))::["unwrap_or"]
                                          α1
                                          (borrow α3)) in
                                    let* α5 :
                                        alloc.vec.Vec.t
                                          async_openai.types.chat.ChatCompletionTool.t
                                          alloc.alloc.Global.t :=
                                      M.call (α0 α4) in
                                    M.alloc α5 in
                                  let* function_calls_futures :
                                      M.Val
                                        (alloc.vec.Vec.t
                                          _
                                          alloc.alloc.Global.t) :=
                                    let* α0 :
                                        (core.iter.adapters.map.Map.t
                                            (core.slice.iter.Iter.t
                                              async_openai.types.chat.ChatCompletionTool.t)
                                            ((ref
                                                async_openai.types.chat.ChatCompletionTool.t)
                                              ->
                                              M _))
                                          ->
                                          M
                                            (alloc.vec.Vec.t
                                              _
                                              alloc.alloc.Global.t) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.iter.traits.iterator.Iterator.collect
                                          (Self :=
                                            core.iter.adapters.map.Map.t
                                              (core.slice.iter.Iter.t
                                                async_openai.types.chat.ChatCompletionTool.t)
                                              ((ref
                                                  async_openai.types.chat.ChatCompletionTool.t)
                                                ->
                                                M _))
                                          (B :=
                                            alloc.vec.Vec.t
                                              _
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        (core.slice.iter.Iter.t
                                            async_openai.types.chat.ChatCompletionTool.t)
                                          ->
                                          ((ref
                                              async_openai.types.chat.ChatCompletionTool.t)
                                            ->
                                            M _)
                                          ->
                                          M
                                            (core.iter.adapters.map.Map.t
                                              (core.slice.iter.Iter.t
                                                async_openai.types.chat.ChatCompletionTool.t)
                                              ((ref
                                                  async_openai.types.chat.ChatCompletionTool.t)
                                                ->
                                                M _)) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.iter.traits.iterator.Iterator.map
                                          (Self :=
                                            core.slice.iter.Iter.t
                                              async_openai.types.chat.ChatCompletionTool.t)
                                          (B := _)
                                          (F :=
                                            (ref
                                                async_openai.types.chat.ChatCompletionTool.t)
                                              ->
                                              M _)
                                          (Trait := ℐ))) in
                                    let* α2 :
                                        (ref
                                            (alloc.vec.Vec.t
                                              async_openai.types.chat.ChatCompletionTool.t
                                              alloc.alloc.Global.t))
                                          ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self :=
                                            alloc.vec.Vec.t
                                              async_openai.types.chat.ChatCompletionTool.t
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ))) in
                                    let* α3 :
                                        ref
                                          (slice
                                            async_openai.types.chat.ChatCompletionTool.t) :=
                                      M.call (α2 (borrow tools)) in
                                    let* α4 :
                                        core.slice.iter.Iter.t
                                          async_openai.types.chat.ChatCompletionTool.t :=
                                      M.call
                                        ((slice
                                              async_openai.types.chat.ChatCompletionTool.t)::["iter"]
                                          α3) in
                                    let* α5 :
                                        core.iter.adapters.map.Map.t
                                          (core.slice.iter.Iter.t
                                            async_openai.types.chat.ChatCompletionTool.t)
                                          ((ref
                                              async_openai.types.chat.ChatCompletionTool.t)
                                            ->
                                            M _) :=
                                      M.call
                                        (α1
                                          α4
                                          (fun
                                              (α0 :
                                                ref
                                                  async_openai.types.chat.ChatCompletionTool.t) =>
                                            (let* α0 := M.alloc α0 in
                                            match_operator
                                              α0
                                              [
                                                fun γ =>
                                                  (let* tool := M.copy γ in
                                                  let* α0 :
                                                      (ref
                                                          (alloc.vec.Vec.t
                                                            async_openai.types.chat.ChatCompletionRequestMessage.t
                                                            alloc.alloc.Global.t))
                                                        ->
                                                        M
                                                          (alloc.vec.Vec.t
                                                            async_openai.types.chat.ChatCompletionRequestMessage.t
                                                            alloc.alloc.Global.t) :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.clone.Clone.clone
                                                        (Self :=
                                                          alloc.vec.Vec.t
                                                            async_openai.types.chat.ChatCompletionRequestMessage.t
                                                            alloc.alloc.Global.t)
                                                        (Trait := ℐ))) in
                                                  let* α1 :
                                                      alloc.vec.Vec.t
                                                        async_openai.types.chat.ChatCompletionRequestMessage.t
                                                        alloc.alloc.Global.t :=
                                                    M.call
                                                      (α0
                                                        (borrow
                                                          (async_openai.types.chat.CreateChatCompletionRequest.Get_messages
                                                            request))) in
                                                  let* α2 :
                                                      M.Val
                                                        (alloc.vec.Vec.t
                                                          async_openai.types.chat.ChatCompletionRequestMessage.t
                                                          alloc.alloc.Global.t) :=
                                                    M.alloc α1 in
                                                  let* α3 :
                                                      core.result.Result.t
                                                        alloc.string.String.t
                                                        serde_json.error.Error.t :=
                                                    M.call
                                                      (serde_json.ser.to_string
                                                        (borrow α2)) in
                                                  let* α4 :
                                                      alloc.string.String.t :=
                                                    M.call
                                                      ((core.result.Result.t
                                                            alloc.string.String.t
                                                            serde_json.error.Error.t)::["unwrap"]
                                                        α3) in
                                                  let* α5 :
                                                      (ref
                                                          async_openai.types.chat.FunctionObject.t)
                                                        ->
                                                        M
                                                          async_openai.types.chat.FunctionObject.t :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.clone.Clone.clone
                                                        (Self :=
                                                          async_openai.types.chat.FunctionObject.t)
                                                        (Trait := ℐ))) in
                                                  let* α6 :
                                                      ref
                                                        async_openai.types.chat.ChatCompletionTool.t :=
                                                    M.read tool in
                                                  let* α7 :
                                                      async_openai.types.chat.FunctionObject.t :=
                                                    M.call
                                                      (α5
                                                        (borrow
                                                          (async_openai.types.chat.ChatCompletionTool.Get_function
                                                            (deref α6)))) in
                                                  let* α8 :
                                                      (ref str.t) ->
                                                        M
                                                          alloc.string.String.t :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      alloc.string.ToString.to_string
                                                        (Self := str.t)
                                                        (Trait := ℐ))) in
                                                  let* α9 : ref str.t :=
                                                    M.read (mk_str "") in
                                                  let* α10 :
                                                      alloc.string.String.t :=
                                                    M.call (α8 α9) in
                                                  let* α11 :
                                                      (ref str.t) ->
                                                        M
                                                          alloc.string.String.t :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      alloc.string.ToString.to_string
                                                        (Self := str.t)
                                                        (Trait := ℐ))) in
                                                  let* α12 : ref str.t :=
                                                    M.read (mk_str "") in
                                                  let* α13 :
                                                      alloc.string.String.t :=
                                                    M.call (α11 α12) in
                                                  let* α14 :
                                                      (ref
                                                          alloc.string.String.t)
                                                        ->
                                                        M
                                                          alloc.string.String.t :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.clone.Clone.clone
                                                        (Self :=
                                                          alloc.string.String.t)
                                                        (Trait := ℐ))) in
                                                  let* α15 :
                                                      alloc.string.String.t :=
                                                    M.call
                                                      (α14
                                                        (borrow
                                                          (async_openai.types.chat.CreateChatCompletionRequest.Get_model
                                                            request))) in
                                                  let* α16 :
                                                      (ref str.t) ->
                                                        M
                                                          alloc.string.String.t :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      alloc.string.ToString.to_string
                                                        (Self := str.t)
                                                        (Trait := ℐ))) in
                                                  let* α17 : ref str.t :=
                                                    M.read (mk_str "") in
                                                  let* α18 :
                                                      alloc.string.String.t :=
                                                    M.call (α16 α17) in
                                                  let* α19 : f32.t :=
                                                    M.read
                                                      (UnsupportedLiteral :
                                                        M.Val f32.t) in
                                                  let* α20 : f32.t :=
                                                    M.read
                                                      (UnsupportedLiteral :
                                                        M.Val f32.t) in
                                                  M.call
                                                    (assistants_core.function_calling.generate_function_call
                                                      {|
                                                        assistants_core.models.FunctionCallInput.user_context :=
                                                          α4;
                                                        assistants_core.models.FunctionCallInput.function :=
                                                          {|
                                                            assistants_core.models.Function.metadata :=
                                                              core.option.Option.None;
                                                            assistants_core.models.Function.inner :=
                                                              α7;
                                                            assistants_core.models.Function.assistant_id :=
                                                              α10;
                                                            assistants_core.models.Function.user_id :=
                                                              α13;
                                                          |};
                                                        assistants_core.models.FunctionCallInput.model_config :=
                                                          {|
                                                            assistants_core.function_calling.ModelConfig.model_name :=
                                                              α15;
                                                            assistants_core.function_calling.ModelConfig.model_url :=
                                                              core.option.Option.None;
                                                            assistants_core.function_calling.ModelConfig.user_prompt :=
                                                              α18;
                                                            assistants_core.function_calling.ModelConfig.temperature :=
                                                              core.option.Option.Some
                                                                α19;
                                                            assistants_core.function_calling.ModelConfig.max_tokens_to_sample :=
                                                              (Integer.of_Z
                                                                  (-1)) :
                                                                i32.t;
                                                            assistants_core.function_calling.ModelConfig.stop_sequences :=
                                                              core.option.Option.None;
                                                            assistants_core.function_calling.ModelConfig.top_p :=
                                                              core.option.Option.Some
                                                                α20;
                                                            assistants_core.function_calling.ModelConfig.top_k :=
                                                              core.option.Option.None;
                                                            assistants_core.function_calling.ModelConfig.metadata :=
                                                              core.option.Option.None;
                                                          |};
                                                      |})) :
                                                  M _
                                              ]) :
                                            M _)) in
                                    let* α6 :
                                        alloc.vec.Vec.t
                                          _
                                          alloc.alloc.Global.t :=
                                      M.call (α0 α5) in
                                    M.alloc α6 in
                                  let* function_calls :
                                      M.Val
                                        (alloc.vec.Vec.t
                                          (core.result.Result.t
                                            assistants_core.function_calling.FunctionCallWithMetadata.t
                                            assistants_core.function_calling.FunctionCallError.t)
                                          alloc.alloc.Global.t) :=
                                    let* α0 :
                                        (futures_util.future.join_all.JoinAll.t
                                            _)
                                          ->
                                          M _ :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.future.into_future.IntoFuture.into_future
                                          (Self :=
                                            futures_util.future.join_all.JoinAll.t
                                              _)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        alloc.vec.Vec.t
                                          _
                                          alloc.alloc.Global.t :=
                                      M.read function_calls_futures in
                                    let* α2 :
                                        futures_util.future.join_all.JoinAll.t
                                          _ :=
                                      M.call
                                        (futures_util.future.join_all.join_all
                                          α1) in
                                    let* α3 :
                                        futures_util.future.join_all.JoinAll.t
                                          _ :=
                                      M.call (α0 α2) in
                                    let* α4 :
                                        M.Val
                                          (futures_util.future.join_all.JoinAll.t
                                            _) :=
                                      M.alloc α3 in
                                    let* α5 :
                                        M.Val
                                          (alloc.vec.Vec.t
                                            (core.result.Result.t
                                              assistants_core.function_calling.FunctionCallWithMetadata.t
                                              assistants_core.function_calling.FunctionCallError.t)
                                            alloc.alloc.Global.t) :=
                                      match_operator
                                        α4
                                        [
                                          fun γ =>
                                            (let* __awaitee := M.copy γ in
                                            M.loop
                                              (let* _ : M.Val unit :=
                                                let* α0 :
                                                    (core.pin.Pin.t
                                                        (mut_ref
                                                          (futures_util.future.join_all.JoinAll.t
                                                            _)))
                                                      ->
                                                      (mut_ref
                                                        core.task.wake.Context.t)
                                                      ->
                                                      M
                                                        (core.task.poll.Poll.t
                                                          _) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.future.future.Future.poll
                                                      (Self :=
                                                        futures_util.future.join_all.JoinAll.t
                                                          _)
                                                      (Trait := ℐ))) in
                                                let* α1 :
                                                    core.pin.Pin.t
                                                      (mut_ref
                                                        (futures_util.future.join_all.JoinAll.t
                                                          _)) :=
                                                  M.call
                                                    ((core.pin.Pin.t
                                                          (mut_ref
                                                            (futures_util.future.join_all.JoinAll.t
                                                              _)))::["new_unchecked"]
                                                      (borrow_mut __awaitee)) in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read _task_context in
                                                let* α3 :
                                                    mut_ref
                                                      core.task.wake.Context.t :=
                                                  M.call
                                                    (core.future.get_context
                                                      α2) in
                                                let* α4 :
                                                    core.task.poll.Poll.t
                                                      (alloc.vec.Vec.t
                                                        (core.result.Result.t
                                                          assistants_core.function_calling.FunctionCallWithMetadata.t
                                                          assistants_core.function_calling.FunctionCallError.t)
                                                        alloc.alloc.Global.t) :=
                                                  M.call (α0 α1 α3) in
                                                let* α5 :
                                                    M.Val
                                                      (core.task.poll.Poll.t
                                                        (alloc.vec.Vec.t
                                                          (core.result.Result.t
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t
                                                            assistants_core.function_calling.FunctionCallError.t)
                                                          alloc.alloc.Global.t)) :=
                                                  M.alloc α4 in
                                                match_operator
                                                  α5
                                                  [
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Ready
                                                            _
                                                          =>
                                                        let γ0_0 :=
                                                          core.task.poll.Poll.Get_Ready_0
                                                            γ in
                                                        let* result :=
                                                          M.copy γ0_0 in
                                                        let* α0 :
                                                            M.Val never.t :=
                                                          M.break in
                                                        let* α1 := M.read α0 in
                                                        let* α2 : unit :=
                                                          never_to_any α1 in
                                                        M.alloc α2
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit);
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Pending
                                                          =>
                                                        M.alloc tt
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit)
                                                  ] in
                                              let* _ : M.Val unit :=
                                                let* α0 : M.Val unit :=
                                                  M.alloc tt in
                                                let* α1 :
                                                    M.Val
                                                      core.future.ResumeTy.t :=
                                                  yield α0 in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read α1 in
                                                assign _task_context α2 in
                                              M.alloc tt)) :
                                            M
                                              (M.Val
                                                (alloc.vec.Vec.t
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t)
                                                  alloc.alloc.Global.t))
                                        ] in
                                    M.copy α5 in
                                  let* _ : M.Val unit :=
                                    let* α0 : usize.t :=
                                      M.call
                                        ((alloc.vec.Vec.t
                                              (core.result.Result.t
                                                assistants_core.function_calling.FunctionCallWithMetadata.t
                                                assistants_core.function_calling.FunctionCallError.t)
                                              alloc.alloc.Global.t)::["len"]
                                          (borrow function_calls)) in
                                    let* α1 : M.Val bool.t :=
                                      M.alloc
                                        (BinOp.Pure.gt
                                          α0
                                          ((Integer.of_Z 0) : usize.t)) in
                                    let* α2 : bool.t := M.read (use α1) in
                                    if α2 then
                                      let* α0 :
                                          (axum.json.Json.t
                                              async_openai.types.chat.CreateChatCompletionResponse.t)
                                            ->
                                            M
                                              (http.response.Response.t
                                                (http_body.combinators.box_body.UnsyncBoxBody.t
                                                  bytes.bytes.Bytes.t
                                                  axum_core.error.Error.t)) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          axum_core.response.into_response.IntoResponse.into_response
                                            (Self :=
                                              axum.json.Json.t
                                                async_openai.types.chat.CreateChatCompletionResponse.t)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          (ref str.t) ->
                                            M alloc.string.String.t :=
                                        ltac:(M.get_method (fun ℐ =>
                                          alloc.string.ToString.to_string
                                            (Self := str.t)
                                            (Trait := ℐ))) in
                                      let* α2 : ref str.t :=
                                        M.read (mk_str "chatcmpl-abc123") in
                                      let* α3 : alloc.string.String.t :=
                                        M.call (α1 α2) in
                                      let* α4 :
                                          (ref alloc.string.String.t) ->
                                            M alloc.string.String.t :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.clone.Clone.clone
                                            (Self := alloc.string.String.t)
                                            (Trait := ℐ))) in
                                      let* α5 : alloc.string.String.t :=
                                        M.call
                                          (α4
                                            (borrow
                                              (async_openai.types.chat.CreateChatCompletionRequest.Get_model
                                                request))) in
                                      let* α6 :
                                          chrono.datetime.DateTime.t
                                            chrono.offset.utc.Utc.t :=
                                        M.call
                                          chrono.offset.utc.Utc.t::["now"] in
                                      let* α7 :
                                          M.Val
                                            (chrono.datetime.DateTime.t
                                              chrono.offset.utc.Utc.t) :=
                                        M.alloc α6 in
                                      let* α8 : i64.t :=
                                        M.call
                                          ((chrono.datetime.DateTime.t
                                                chrono.offset.utc.Utc.t)::["timestamp"]
                                            (borrow α7)) in
                                      let* α9 :
                                          (ref str.t) ->
                                            M alloc.string.String.t :=
                                        ltac:(M.get_method (fun ℐ =>
                                          alloc.string.ToString.to_string
                                            (Self := str.t)
                                            (Trait := ℐ))) in
                                      let* α10 : ref str.t :=
                                        M.read (mk_str "chat.completion") in
                                      let* α11 : alloc.string.String.t :=
                                        M.call (α9 α10) in
                                      let* α12 :
                                          (core.iter.adapters.map.Map.t
                                              (core.iter.adapters.map.Map.t
                                                (core.iter.adapters.filter.Filter.t
                                                  (core.slice.iter.Iter.t
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t))
                                                  ((ref
                                                      (ref
                                                        (core.result.Result.t
                                                          assistants_core.function_calling.FunctionCallWithMetadata.t
                                                          assistants_core.function_calling.FunctionCallError.t)))
                                                    ->
                                                    M bool.t))
                                                ((ref
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t))
                                                  ->
                                                  M
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t))
                                              (assistants_core.function_calling.FunctionCallWithMetadata.t
                                                ->
                                                M
                                                  async_openai.types.chat.ChatCompletionMessageToolCall.t))
                                            ->
                                            M
                                              (alloc.vec.Vec.t
                                                async_openai.types.chat.ChatCompletionMessageToolCall.t
                                                alloc.alloc.Global.t) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.iter.traits.iterator.Iterator.collect
                                            (Self :=
                                              core.iter.adapters.map.Map.t
                                                (core.iter.adapters.map.Map.t
                                                  (core.iter.adapters.filter.Filter.t
                                                    (core.slice.iter.Iter.t
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t))
                                                    ((ref
                                                        (ref
                                                          (core.result.Result.t
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t
                                                            assistants_core.function_calling.FunctionCallError.t)))
                                                      ->
                                                      M bool.t))
                                                  ((ref
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t))
                                                    ->
                                                    M
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t))
                                                (assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  ->
                                                  M
                                                    async_openai.types.chat.ChatCompletionMessageToolCall.t))
                                            (B :=
                                              alloc.vec.Vec.t
                                                async_openai.types.chat.ChatCompletionMessageToolCall.t
                                                alloc.alloc.Global.t)
                                            (Trait := ℐ))) in
                                      let* α13 :
                                          (core.iter.adapters.map.Map.t
                                              (core.iter.adapters.filter.Filter.t
                                                (core.slice.iter.Iter.t
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t))
                                                ((ref
                                                    (ref
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t)))
                                                  ->
                                                  M bool.t))
                                              ((ref
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t))
                                                ->
                                                M
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t))
                                            ->
                                            (assistants_core.function_calling.FunctionCallWithMetadata.t
                                              ->
                                              M
                                                async_openai.types.chat.ChatCompletionMessageToolCall.t)
                                            ->
                                            M
                                              (core.iter.adapters.map.Map.t
                                                (core.iter.adapters.map.Map.t
                                                  (core.iter.adapters.filter.Filter.t
                                                    (core.slice.iter.Iter.t
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t))
                                                    ((ref
                                                        (ref
                                                          (core.result.Result.t
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t
                                                            assistants_core.function_calling.FunctionCallError.t)))
                                                      ->
                                                      M bool.t))
                                                  ((ref
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t))
                                                    ->
                                                    M
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t))
                                                (assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  ->
                                                  M
                                                    async_openai.types.chat.ChatCompletionMessageToolCall.t)) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.iter.traits.iterator.Iterator.map
                                            (Self :=
                                              core.iter.adapters.map.Map.t
                                                (core.iter.adapters.filter.Filter.t
                                                  (core.slice.iter.Iter.t
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t))
                                                  ((ref
                                                      (ref
                                                        (core.result.Result.t
                                                          assistants_core.function_calling.FunctionCallWithMetadata.t
                                                          assistants_core.function_calling.FunctionCallError.t)))
                                                    ->
                                                    M bool.t))
                                                ((ref
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t))
                                                  ->
                                                  M
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t))
                                            (B :=
                                              async_openai.types.chat.ChatCompletionMessageToolCall.t)
                                            (F :=
                                              assistants_core.function_calling.FunctionCallWithMetadata.t
                                                ->
                                                M
                                                  async_openai.types.chat.ChatCompletionMessageToolCall.t)
                                            (Trait := ℐ))) in
                                      let* α14 :
                                          (core.iter.adapters.filter.Filter.t
                                              (core.slice.iter.Iter.t
                                                (core.result.Result.t
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  assistants_core.function_calling.FunctionCallError.t))
                                              ((ref
                                                  (ref
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t)))
                                                ->
                                                M bool.t))
                                            ->
                                            ((ref
                                                (core.result.Result.t
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  assistants_core.function_calling.FunctionCallError.t))
                                              ->
                                              M
                                                assistants_core.function_calling.FunctionCallWithMetadata.t)
                                            ->
                                            M
                                              (core.iter.adapters.map.Map.t
                                                (core.iter.adapters.filter.Filter.t
                                                  (core.slice.iter.Iter.t
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t))
                                                  ((ref
                                                      (ref
                                                        (core.result.Result.t
                                                          assistants_core.function_calling.FunctionCallWithMetadata.t
                                                          assistants_core.function_calling.FunctionCallError.t)))
                                                    ->
                                                    M bool.t))
                                                ((ref
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t))
                                                  ->
                                                  M
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t)) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.iter.traits.iterator.Iterator.map
                                            (Self :=
                                              core.iter.adapters.filter.Filter.t
                                                (core.slice.iter.Iter.t
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t))
                                                ((ref
                                                    (ref
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t)))
                                                  ->
                                                  M bool.t))
                                            (B :=
                                              assistants_core.function_calling.FunctionCallWithMetadata.t)
                                            (F :=
                                              (ref
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t))
                                                ->
                                                M
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t)
                                            (Trait := ℐ))) in
                                      let* α15 :
                                          (core.slice.iter.Iter.t
                                              (core.result.Result.t
                                                assistants_core.function_calling.FunctionCallWithMetadata.t
                                                assistants_core.function_calling.FunctionCallError.t))
                                            ->
                                            ((ref
                                                (ref
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t)))
                                              ->
                                              M bool.t)
                                            ->
                                            M
                                              (core.iter.adapters.filter.Filter.t
                                                (core.slice.iter.Iter.t
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t))
                                                ((ref
                                                    (ref
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t)))
                                                  ->
                                                  M bool.t)) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.iter.traits.iterator.Iterator.filter
                                            (Self :=
                                              core.slice.iter.Iter.t
                                                (core.result.Result.t
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  assistants_core.function_calling.FunctionCallError.t))
                                            (P :=
                                              (ref
                                                  (ref
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t)))
                                                ->
                                                M bool.t)
                                            (Trait := ℐ))) in
                                      let* α16 :
                                          (ref
                                              (alloc.vec.Vec.t
                                                (core.result.Result.t
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  assistants_core.function_calling.FunctionCallError.t)
                                                alloc.alloc.Global.t))
                                            ->
                                            M (ref _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.deref.Deref.deref
                                            (Self :=
                                              alloc.vec.Vec.t
                                                (core.result.Result.t
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  assistants_core.function_calling.FunctionCallError.t)
                                                alloc.alloc.Global.t)
                                            (Trait := ℐ))) in
                                      let* α17 :
                                          ref
                                            (slice
                                              (core.result.Result.t
                                                assistants_core.function_calling.FunctionCallWithMetadata.t
                                                assistants_core.function_calling.FunctionCallError.t)) :=
                                        M.call (α16 (borrow function_calls)) in
                                      let* α18 :
                                          core.slice.iter.Iter.t
                                            (core.result.Result.t
                                              assistants_core.function_calling.FunctionCallWithMetadata.t
                                              assistants_core.function_calling.FunctionCallError.t) :=
                                        M.call
                                          ((slice
                                                (core.result.Result.t
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  assistants_core.function_calling.FunctionCallError.t))::["iter"]
                                            α17) in
                                      let* α19 :
                                          core.iter.adapters.filter.Filter.t
                                            (core.slice.iter.Iter.t
                                              (core.result.Result.t
                                                assistants_core.function_calling.FunctionCallWithMetadata.t
                                                assistants_core.function_calling.FunctionCallError.t))
                                            ((ref
                                                (ref
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t)))
                                              ->
                                              M bool.t) :=
                                        M.call
                                          (α15
                                            α18
                                            (fun
                                                (α0 :
                                                  ref
                                                    (ref
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t))) =>
                                              (let* α0 := M.alloc α0 in
                                              match_operator
                                                α0
                                                [
                                                  fun γ =>
                                                    (let* f := M.copy γ in
                                                    let* α0 :
                                                        ref
                                                          (ref
                                                            (core.result.Result.t
                                                              assistants_core.function_calling.FunctionCallWithMetadata.t
                                                              assistants_core.function_calling.FunctionCallError.t)) :=
                                                      M.read f in
                                                    let* α1 :
                                                        ref
                                                          (core.result.Result.t
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t
                                                            assistants_core.function_calling.FunctionCallError.t) :=
                                                      M.read (deref α0) in
                                                    M.call
                                                      ((core.result.Result.t
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t
                                                            assistants_core.function_calling.FunctionCallError.t)::["is_ok"]
                                                        α1)) :
                                                    M bool.t
                                                ]) :
                                              M bool.t)) in
                                      let* α20 :
                                          core.iter.adapters.map.Map.t
                                            (core.iter.adapters.filter.Filter.t
                                              (core.slice.iter.Iter.t
                                                (core.result.Result.t
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  assistants_core.function_calling.FunctionCallError.t))
                                              ((ref
                                                  (ref
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t)))
                                                ->
                                                M bool.t))
                                            ((ref
                                                (core.result.Result.t
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t
                                                  assistants_core.function_calling.FunctionCallError.t))
                                              ->
                                              M
                                                assistants_core.function_calling.FunctionCallWithMetadata.t) :=
                                        M.call
                                          (α14
                                            α19
                                            (fun
                                                (α0 :
                                                  ref
                                                    (core.result.Result.t
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                      assistants_core.function_calling.FunctionCallError.t)) =>
                                              (let* α0 := M.alloc α0 in
                                              match_operator
                                                α0
                                                [
                                                  fun γ =>
                                                    (let* f := M.copy γ in
                                                    let* α0 :
                                                        (ref
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t)
                                                          ->
                                                          M
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.clone.Clone.clone
                                                          (Self :=
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 :
                                                        ref
                                                          (core.result.Result.t
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t
                                                            assistants_core.function_calling.FunctionCallError.t) :=
                                                      M.read f in
                                                    let* α2 :
                                                        core.result.Result.t
                                                          (ref
                                                            assistants_core.function_calling.FunctionCallWithMetadata.t)
                                                          (ref
                                                            assistants_core.function_calling.FunctionCallError.t) :=
                                                      M.call
                                                        ((core.result.Result.t
                                                              assistants_core.function_calling.FunctionCallWithMetadata.t
                                                              assistants_core.function_calling.FunctionCallError.t)::["as_ref"]
                                                          α1) in
                                                    let* α3 :
                                                        ref
                                                          assistants_core.function_calling.FunctionCallWithMetadata.t :=
                                                      M.call
                                                        ((core.result.Result.t
                                                              (ref
                                                                assistants_core.function_calling.FunctionCallWithMetadata.t)
                                                              (ref
                                                                assistants_core.function_calling.FunctionCallError.t))::["unwrap"]
                                                          α2) in
                                                    M.call (α0 α3)) :
                                                    M
                                                      assistants_core.function_calling.FunctionCallWithMetadata.t
                                                ]) :
                                              M
                                                assistants_core.function_calling.FunctionCallWithMetadata.t)) in
                                      let* α21 :
                                          core.iter.adapters.map.Map.t
                                            (core.iter.adapters.map.Map.t
                                              (core.iter.adapters.filter.Filter.t
                                                (core.slice.iter.Iter.t
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t))
                                                ((ref
                                                    (ref
                                                      (core.result.Result.t
                                                        assistants_core.function_calling.FunctionCallWithMetadata.t
                                                        assistants_core.function_calling.FunctionCallError.t)))
                                                  ->
                                                  M bool.t))
                                              ((ref
                                                  (core.result.Result.t
                                                    assistants_core.function_calling.FunctionCallWithMetadata.t
                                                    assistants_core.function_calling.FunctionCallError.t))
                                                ->
                                                M
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t))
                                            (assistants_core.function_calling.FunctionCallWithMetadata.t
                                              ->
                                              M
                                                async_openai.types.chat.ChatCompletionMessageToolCall.t) :=
                                        M.call
                                          (α13
                                            α20
                                            (fun
                                                (α0 :
                                                  assistants_core.function_calling.FunctionCallWithMetadata.t) =>
                                              (let* α0 := M.alloc α0 in
                                              match_operator
                                                α0
                                                [
                                                  fun γ =>
                                                    (let* f := M.copy γ in
                                                    let* α0 :
                                                        (ref uuid.Uuid.t) ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        alloc.string.ToString.to_string
                                                          (Self := uuid.Uuid.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 : uuid.Uuid.t :=
                                                      M.call
                                                        uuid.Uuid.t::["new_v4"] in
                                                    let* α2 :
                                                        M.Val uuid.Uuid.t :=
                                                      M.alloc α1 in
                                                    let* α3 :
                                                        alloc.string.String.t :=
                                                      M.call (α0 (borrow α2)) in
                                                    let* α4 :
                                                        (ref
                                                            alloc.string.String.t)
                                                          ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.clone.Clone.clone
                                                          (Self :=
                                                            alloc.string.String.t)
                                                          (Trait := ℐ))) in
                                                    let* α5 :
                                                        alloc.string.String.t :=
                                                      M.call
                                                        (α4
                                                          (borrow
                                                            (assistants_core.function_calling.FunctionCallWithMetadata.Get_name
                                                              f))) in
                                                    let* α6 :
                                                        (ref
                                                            alloc.string.String.t)
                                                          ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.clone.Clone.clone
                                                          (Self :=
                                                            alloc.string.String.t)
                                                          (Trait := ℐ))) in
                                                    let* α7 :
                                                        alloc.string.String.t :=
                                                      M.call
                                                        (α6
                                                          (borrow
                                                            (assistants_core.function_calling.FunctionCallWithMetadata.Get_arguments
                                                              f))) in
                                                    M.pure
                                                      {|
                                                        async_openai.types.chat.ChatCompletionMessageToolCall.id :=
                                                          α3;
                                                        async_openai.types.chat.ChatCompletionMessageToolCall.type :=
                                                          async_openai.types.chat.ChatCompletionToolType.Function;
                                                        async_openai.types.chat.ChatCompletionMessageToolCall.function :=
                                                          {|
                                                            async_openai.types.chat.FunctionCall.name :=
                                                              α5;
                                                            async_openai.types.chat.FunctionCall.arguments :=
                                                              α7;
                                                          |};
                                                      |}) :
                                                    M
                                                      async_openai.types.chat.ChatCompletionMessageToolCall.t
                                                ]) :
                                              M
                                                async_openai.types.chat.ChatCompletionMessageToolCall.t)) in
                                      let* α22 :
                                          alloc.vec.Vec.t
                                            async_openai.types.chat.ChatCompletionMessageToolCall.t
                                            alloc.alloc.Global.t :=
                                        M.call (α12 α21) in
                                      let* α23 :
                                          M.Val
                                            (array
                                              async_openai.types.chat.ChatChoice.t) :=
                                        M.alloc
                                          [
                                            {|
                                              async_openai.types.chat.ChatChoice.logprobs :=
                                                core.option.Option.None;
                                              async_openai.types.chat.ChatChoice.index :=
                                                (Integer.of_Z 0) : u32.t;
                                              async_openai.types.chat.ChatChoice.finish_reason :=
                                                core.option.Option.Some
                                                  async_openai.types.chat.FinishReason.ToolCalls;
                                              async_openai.types.chat.ChatChoice.message :=
                                                {|
                                                  async_openai.types.chat.ChatCompletionResponseMessage.role :=
                                                    async_openai.types.chat.Role.Assistant;
                                                  async_openai.types.chat.ChatCompletionResponseMessage.content :=
                                                    core.option.Option.None;
                                                  async_openai.types.chat.ChatCompletionResponseMessage.function_call :=
                                                    core.option.Option.None;
                                                  async_openai.types.chat.ChatCompletionResponseMessage.tool_calls :=
                                                    core.option.Option.Some α22;
                                                |};
                                            |}
                                          ] in
                                      let* α24 :
                                          M.Val
                                            (alloc.boxed.Box.t
                                              (array
                                                async_openai.types.chat.ChatChoice.t)
                                              alloc.alloc.Global.t) :=
                                        M.call
                                          ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                                            α23) in
                                      let* α25 :
                                          alloc.boxed.Box.t
                                            (array
                                              async_openai.types.chat.ChatChoice.t)
                                            alloc.alloc.Global.t :=
                                        M.read α24 in
                                      let* α26 :
                                          alloc.vec.Vec.t
                                            async_openai.types.chat.ChatChoice.t
                                            alloc.alloc.Global.t :=
                                        M.call
                                          ((slice
                                                async_openai.types.chat.ChatChoice.t)::["into_vec"]
                                            (pointer_coercion "Unsize" α25)) in
                                      let* α27 :
                                          http.response.Response.t
                                            (http_body.combinators.box_body.UnsyncBoxBody.t
                                              bytes.bytes.Bytes.t
                                              axum_core.error.Error.t) :=
                                        M.call
                                          (α0
                                            (axum.json.Json.Build_t
                                              {|
                                                async_openai.types.chat.CreateChatCompletionResponse.usage :=
                                                  core.option.Option.None;
                                                async_openai.types.chat.CreateChatCompletionResponse.id :=
                                                  α3;
                                                async_openai.types.chat.CreateChatCompletionResponse.model :=
                                                  α5;
                                                async_openai.types.chat.CreateChatCompletionResponse.created :=
                                                  rust_cast α8;
                                                async_openai.types.chat.CreateChatCompletionResponse.system_fingerprint :=
                                                  core.option.Option.None;
                                                async_openai.types.chat.CreateChatCompletionResponse.object :=
                                                  α11;
                                                async_openai.types.chat.CreateChatCompletionResponse.choices :=
                                                  α26;
                                              |})) in
                                      let* α28 : M.Val never.t :=
                                        return_ (core.result.Result.Ok α27) in
                                      let* α29 := M.read α28 in
                                      let* α30 : unit := never_to_any α29 in
                                      M.alloc α30
                                    else
                                      M.alloc tt in
                                  let* response :
                                      M.Val
                                        async_openai.types.chat.CreateChatCompletionResponse.t :=
                                    let* α0 :
                                        (core.result.Result.t
                                            async_openai.types.chat.CreateChatCompletionResponse.t
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t))
                                          ->
                                          M
                                            (core.ops.control_flow.ControlFlow.t
                                              _
                                              _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.try_trait.Try.branch
                                          (Self :=
                                            core.result.Result.t
                                              async_openai.types.chat.CreateChatCompletionResponse.t
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t))
                                          (Trait := ℐ))) in
                                    let* α1 : _ -> M _ :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.future.into_future.IntoFuture.into_future
                                          (Self := _)
                                          (Trait := ℐ))) in
                                    let* α2 :
                                        async_openai.chat.Chat.t
                                          async_openai.config.OpenAIConfig.t :=
                                      M.call
                                        ((async_openai.client.Client.t
                                              async_openai.config.OpenAIConfig.t)::["chat"]
                                          (borrow client)) in
                                    let* α3 :
                                        M.Val
                                          (async_openai.chat.Chat.t
                                            async_openai.config.OpenAIConfig.t) :=
                                      M.alloc α2 in
                                    let* α4 :
                                        async_openai.types.chat.CreateChatCompletionRequest.t :=
                                      M.read request in
                                    let* α5 : _ :=
                                      M.call
                                        ((async_openai.chat.Chat.t
                                              async_openai.config.OpenAIConfig.t)::["create"]
                                          (borrow α3)
                                          α4) in
                                    let* α6 : _ := M.call (α1 α5) in
                                    let* α7 : M.Val _ := M.alloc α6 in
                                    let* α8 :
                                        M.Val
                                          (core.result.Result.t
                                            async_openai.types.chat.CreateChatCompletionResponse.t
                                            async_openai.error.OpenAIError.t) :=
                                      match_operator
                                        α7
                                        [
                                          fun γ =>
                                            (let* __awaitee := M.copy γ in
                                            M.loop
                                              (let* _ : M.Val unit :=
                                                let* α0 :
                                                    (core.pin.Pin.t (mut_ref _))
                                                      ->
                                                      (mut_ref
                                                        core.task.wake.Context.t)
                                                      ->
                                                      M
                                                        (core.task.poll.Poll.t
                                                          _) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.future.future.Future.poll
                                                      (Self := _)
                                                      (Trait := ℐ))) in
                                                let* α1 :
                                                    core.pin.Pin.t
                                                      (mut_ref _) :=
                                                  M.call
                                                    ((core.pin.Pin.t
                                                          (mut_ref
                                                            _))::["new_unchecked"]
                                                      (borrow_mut __awaitee)) in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read _task_context in
                                                let* α3 :
                                                    mut_ref
                                                      core.task.wake.Context.t :=
                                                  M.call
                                                    (core.future.get_context
                                                      α2) in
                                                let* α4 :
                                                    core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        async_openai.types.chat.CreateChatCompletionResponse.t
                                                        async_openai.error.OpenAIError.t) :=
                                                  M.call (α0 α1 α3) in
                                                let* α5 :
                                                    M.Val
                                                      (core.task.poll.Poll.t
                                                        (core.result.Result.t
                                                          async_openai.types.chat.CreateChatCompletionResponse.t
                                                          async_openai.error.OpenAIError.t)) :=
                                                  M.alloc α4 in
                                                match_operator
                                                  α5
                                                  [
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Ready
                                                            _
                                                          =>
                                                        let γ0_0 :=
                                                          core.task.poll.Poll.Get_Ready_0
                                                            γ in
                                                        let* result :=
                                                          M.copy γ0_0 in
                                                        let* α0 :
                                                            M.Val never.t :=
                                                          M.break in
                                                        let* α1 := M.read α0 in
                                                        let* α2 : unit :=
                                                          never_to_any α1 in
                                                        M.alloc α2
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit);
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Pending
                                                          =>
                                                        M.alloc tt
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit)
                                                  ] in
                                              let* _ : M.Val unit :=
                                                let* α0 : M.Val unit :=
                                                  M.alloc tt in
                                                let* α1 :
                                                    M.Val
                                                      core.future.ResumeTy.t :=
                                                  yield α0 in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read α1 in
                                                assign _task_context α2 in
                                              M.alloc tt)) :
                                            M
                                              (M.Val
                                                (core.result.Result.t
                                                  async_openai.types.chat.CreateChatCompletionResponse.t
                                                  async_openai.error.OpenAIError.t))
                                        ] in
                                    let* α9 :
                                        core.result.Result.t
                                          async_openai.types.chat.CreateChatCompletionResponse.t
                                          async_openai.error.OpenAIError.t :=
                                      M.read α8 in
                                    let* α10 :
                                        core.result.Result.t
                                          async_openai.types.chat.CreateChatCompletionResponse.t
                                          (http.status.StatusCode.t
                                          *
                                          alloc.string.String.t) :=
                                      M.call
                                        ((core.result.Result.t
                                              async_openai.types.chat.CreateChatCompletionResponse.t
                                              async_openai.error.OpenAIError.t)::["map_err"]
                                          α9
                                          (fun
                                              (α0 :
                                                async_openai.error.OpenAIError.t) =>
                                            (let* α0 := M.alloc α0 in
                                            match_operator
                                              α0
                                              [
                                                fun γ =>
                                                  (let* e := M.copy γ in
                                                  let* α0 :
                                                      http.status.StatusCode.t :=
                                                    M.read
                                                      http.status.INTERNAL_SERVER_ERROR in
                                                  let* α1 :
                                                      (ref
                                                          async_openai.error.OpenAIError.t)
                                                        ->
                                                        M
                                                          alloc.string.String.t :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      alloc.string.ToString.to_string
                                                        (Self :=
                                                          async_openai.error.OpenAIError.t)
                                                        (Trait := ℐ))) in
                                                  let* α2 :
                                                      alloc.string.String.t :=
                                                    M.call (α1 (borrow e)) in
                                                  M.pure (α0, α2)) :
                                                  M
                                                    (http.status.StatusCode.t
                                                    *
                                                    alloc.string.String.t)
                                              ]) :
                                            M
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t))) in
                                    let* α11 :
                                        core.ops.control_flow.ControlFlow.t
                                          (core.result.Result.t
                                            core.convert.Infallible.t
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t))
                                          async_openai.types.chat.CreateChatCompletionResponse.t :=
                                      M.call (α0 α10) in
                                    let* α12 :
                                        M.Val
                                          (core.ops.control_flow.ControlFlow.t
                                            (core.result.Result.t
                                              core.convert.Infallible.t
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t))
                                            async_openai.types.chat.CreateChatCompletionResponse.t) :=
                                      M.alloc α11 in
                                    let* α13 :
                                        M.Val
                                          async_openai.types.chat.CreateChatCompletionResponse.t :=
                                      match_operator
                                        α12
                                        [
                                          fun γ =>
                                            (let* α0 := M.read γ in
                                            match α0 with
                                            |
                                                core.ops.control_flow.ControlFlow.Break
                                                  _
                                                =>
                                              let γ0_0 :=
                                                core.ops.control_flow.ControlFlow.Get_Break_0
                                                  γ in
                                              let* residual := M.copy γ0_0 in
                                              let* α0 :
                                                  (core.result.Result.t
                                                      core.convert.Infallible.t
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t))
                                                    ->
                                                    M
                                                      (core.result.Result.t
                                                        (http.response.Response.t
                                                          (http_body.combinators.box_body.UnsyncBoxBody.t
                                                            bytes.bytes.Bytes.t
                                                            axum_core.error.Error.t))
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)) :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.ops.try_trait.FromResidual.from_residual
                                                    (Self :=
                                                      core.result.Result.t
                                                        (http.response.Response.t
                                                          (http_body.combinators.box_body.UnsyncBoxBody.t
                                                            bytes.bytes.Bytes.t
                                                            axum_core.error.Error.t))
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t))
                                                    (R :=
                                                      core.result.Result.t
                                                        core.convert.Infallible.t
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t))
                                                    (Trait := ℐ))) in
                                              let* α1 :
                                                  core.result.Result.t
                                                    core.convert.Infallible.t
                                                    (http.status.StatusCode.t
                                                    *
                                                    alloc.string.String.t) :=
                                                M.read residual in
                                              let* α2 :
                                                  core.result.Result.t
                                                    (http.response.Response.t
                                                      (http_body.combinators.box_body.UnsyncBoxBody.t
                                                        bytes.bytes.Bytes.t
                                                        axum_core.error.Error.t))
                                                    (http.status.StatusCode.t
                                                    *
                                                    alloc.string.String.t) :=
                                                M.call (α0 α1) in
                                              let* α3 : M.Val never.t :=
                                                return_ α2 in
                                              let* α4 := M.read α3 in
                                              let* α5 :
                                                  async_openai.types.chat.CreateChatCompletionResponse.t :=
                                                never_to_any α4 in
                                              M.alloc α5
                                            | _ => M.break_match
                                            end) :
                                            M
                                              (M.Val
                                                async_openai.types.chat.CreateChatCompletionResponse.t);
                                          fun γ =>
                                            (let* α0 := M.read γ in
                                            match α0 with
                                            |
                                                core.ops.control_flow.ControlFlow.Continue
                                                  _
                                                =>
                                              let γ0_0 :=
                                                core.ops.control_flow.ControlFlow.Get_Continue_0
                                                  γ in
                                              let* val := M.copy γ0_0 in
                                              M.pure val
                                            | _ => M.break_match
                                            end) :
                                            M
                                              (M.Val
                                                async_openai.types.chat.CreateChatCompletionResponse.t)
                                        ] in
                                    M.copy α13 in
                                  let* α0 :
                                      (axum.json.Json.t
                                          async_openai.types.chat.CreateChatCompletionResponse.t)
                                        ->
                                        M
                                          (http.response.Response.t
                                            (http_body.combinators.box_body.UnsyncBoxBody.t
                                              bytes.bytes.Bytes.t
                                              axum_core.error.Error.t)) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      axum_core.response.into_response.IntoResponse.into_response
                                        (Self :=
                                          axum.json.Json.t
                                            async_openai.types.chat.CreateChatCompletionResponse.t)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      async_openai.types.chat.CreateChatCompletionResponse.t :=
                                    M.read response in
                                  let* α2 :
                                      http.response.Response.t
                                        (http_body.combinators.box_body.UnsyncBoxBody.t
                                          bytes.bytes.Bytes.t
                                          axum_core.error.Error.t) :=
                                    M.call (α0 (axum.json.Json.Build_t α1)) in
                                  M.alloc (core.result.Result.Ok α2)
                                else
                                  let* α0 : http.status.StatusCode.t :=
                                    M.read http.status.INTERNAL_SERVER_ERROR in
                                  let* α1 :
                                      (ref str.t) -> M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      alloc.string.ToString.to_string
                                        (Self := str.t)
                                        (Trait := ℐ))) in
                                  let* α2 : ref str.t :=
                                    M.read
                                      (mk_str
                                        "Streaming is not supported yet") in
                                  let* α3 : alloc.string.String.t :=
                                    M.call (α1 α2) in
                                  let* α4 : M.Val never.t :=
                                    return_ (core.result.Result.Err (α0, α3)) in
                                  let* α5 := M.read α4 in
                                  let* α6 :
                                      core.result.Result.t
                                        (http.response.Response.t
                                          (http_body.combinators.box_body.UnsyncBoxBody.t
                                            bytes.bytes.Bytes.t
                                            axum_core.error.Error.t))
                                        (http.status.StatusCode.t
                                        *
                                        alloc.string.String.t) :=
                                    never_to_any α5 in
                                  M.alloc α6
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (http.response.Response.t
                                      (http_body.combinators.box_body.UnsyncBoxBody.t
                                        bytes.bytes.Bytes.t
                                        axum_core.error.Error.t))
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ] in
                      M.pure (use α0)
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (http.response.Response.t
                            (http_body.combinators.box_body.UnsyncBoxBody.t
                              bytes.bytes.Bytes.t
                              axum_core.error.Error.t))
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (http.response.Response.t
                  (http_body.combinators.box_body.UnsyncBoxBody.t
                    bytes.bytes.Bytes.t
                    axum_core.error.Error.t))
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (http.response.Response.t
            (http_body.combinators.box_body.UnsyncBoxBody.t
              bytes.bytes.Bytes.t
              axum_core.error.Error.t))
          (http.status.StatusCode.t * alloc.string.String.t))).

Module files.
  (*
  pub async fn retrieve_file_handler(
      Path(file_id): Path<String>,
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<OpenAIFile>, (StatusCode, String)> {
      match app_state.file_storage.retrieve_file(&file_id).await {
          Ok(file) => Ok(JsonResponse(OpenAIFile {
              id: file_id,
              object: "object".to_string(),
              bytes: file.len() as u32,
              created_at: 0,
              filename: "unknown".to_string(),
              purpose: OpenAIFilePurpose::Assistants,
              status: Some("unknown".to_string()),
              status_details: Some("unknown".to_string()),
          })),
          Err(e) => {
              error!("Failed to retrieve file: {:?}", e);
              Err((
                  StatusCode::INTERNAL_SERVER_ERROR,
                  "Failed to retrieve file".to_string(),
              ))
          }
      }
  }
  *)
  Definition retrieve_file_handler
      (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t async_openai.types.file.OpenAIFile.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* file_id := M.copy γ0_0 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* α0 : _ -> M _ :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.future.into_future.IntoFuture.into_future
                                      (Self := _)
                                      (Trait := ℐ))) in
                                let* α1 :
                                    (ref
                                        (alloc.sync.Arc.t
                                          assistants_core.file_storage.FileStorage.t
                                          alloc.alloc.Global.t))
                                      ->
                                      M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.deref.Deref.deref
                                      (Self :=
                                        alloc.sync.Arc.t
                                          assistants_core.file_storage.FileStorage.t
                                          alloc.alloc.Global.t)
                                      (Trait := ℐ))) in
                                let* α2 :
                                    ref
                                      assistants_core.file_storage.FileStorage.t :=
                                  M.call
                                    (α1
                                      (borrow
                                        (assistants_api_communication.models.AppState.Get_file_storage
                                          app_state))) in
                                let* α3 :
                                    (ref alloc.string.String.t) -> M (ref _) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.ops.deref.Deref.deref
                                      (Self := alloc.string.String.t)
                                      (Trait := ℐ))) in
                                let* α4 : ref str.t :=
                                  M.call (α3 (borrow file_id)) in
                                let* α5 : _ :=
                                  M.call
                                    (assistants_core.file_storage.FileStorage.t::["retrieve_file"]
                                      α2
                                      α4) in
                                let* α6 : _ := M.call (α0 α5) in
                                let* α7 : M.Val _ := M.alloc α6 in
                                let* α8 :
                                    M.Val
                                      (core.result.Result.t
                                        bytes.bytes.Bytes.t
                                        (alloc.boxed.Box.t
                                          (dyn [core.error.Error.Trait])
                                          alloc.alloc.Global.t)) :=
                                  match_operator
                                    α7
                                    [
                                      fun γ =>
                                        (let* __awaitee := M.copy γ in
                                        M.loop
                                          (let* _ : M.Val unit :=
                                            let* α0 :
                                                (core.pin.Pin.t (mut_ref _)) ->
                                                  (mut_ref
                                                    core.task.wake.Context.t)
                                                  ->
                                                  M (core.task.poll.Poll.t _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.future.future.Future.poll
                                                  (Self := _)
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                core.pin.Pin.t (mut_ref _) :=
                                              M.call
                                                ((core.pin.Pin.t
                                                      (mut_ref
                                                        _))::["new_unchecked"]
                                                  (borrow_mut __awaitee)) in
                                            let* α2 : core.future.ResumeTy.t :=
                                              M.read _task_context in
                                            let* α3 :
                                                mut_ref
                                                  core.task.wake.Context.t :=
                                              M.call
                                                (core.future.get_context α2) in
                                            let* α4 :
                                                core.task.poll.Poll.t
                                                  (core.result.Result.t
                                                    bytes.bytes.Bytes.t
                                                    (alloc.boxed.Box.t
                                                      (dyn
                                                        [core.error.Error.Trait])
                                                      alloc.alloc.Global.t)) :=
                                              M.call (α0 α1 α3) in
                                            let* α5 :
                                                M.Val
                                                  (core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      bytes.bytes.Bytes.t
                                                      (alloc.boxed.Box.t
                                                        (dyn
                                                          [core.error.Error.Trait])
                                                        alloc.alloc.Global.t))) :=
                                              M.alloc α4 in
                                            match_operator
                                              α5
                                              [
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  |
                                                      core.task.poll.Poll.Ready
                                                        _
                                                      =>
                                                    let γ0_0 :=
                                                      core.task.poll.Poll.Get_Ready_0
                                                        γ in
                                                    let* result :=
                                                      M.copy γ0_0 in
                                                    let* α0 : M.Val never.t :=
                                                      M.break in
                                                    let* α1 := M.read α0 in
                                                    let* α2 : unit :=
                                                      never_to_any α1 in
                                                    M.alloc α2
                                                  | _ => M.break_match
                                                  end) :
                                                  M (M.Val unit);
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  |
                                                      core.task.poll.Poll.Pending
                                                      =>
                                                    M.alloc tt
                                                  | _ => M.break_match
                                                  end) :
                                                  M (M.Val unit)
                                              ] in
                                          let* _ : M.Val unit :=
                                            let* α0 : M.Val unit :=
                                              M.alloc tt in
                                            let* α1 :
                                                M.Val core.future.ResumeTy.t :=
                                              yield α0 in
                                            let* α2 : core.future.ResumeTy.t :=
                                              M.read α1 in
                                            assign _task_context α2 in
                                          M.alloc tt)) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              bytes.bytes.Bytes.t
                                              (alloc.boxed.Box.t
                                                (dyn [core.error.Error.Trait])
                                                alloc.alloc.Global.t)))
                                    ] in
                                let* α9 :
                                    M.Val
                                      (core.result.Result.t
                                        (axum.json.Json.t
                                          async_openai.types.file.OpenAIFile.t)
                                        (http.status.StatusCode.t
                                        *
                                        alloc.string.String.t)) :=
                                  match_operator
                                    α8
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Ok _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Ok_0 γ in
                                          let* file := M.copy γ0_0 in
                                          let* α0 : alloc.string.String.t :=
                                            M.read file_id in
                                          let* α1 :
                                              (ref str.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := str.t)
                                                (Trait := ℐ))) in
                                          let* α2 : ref str.t :=
                                            M.read (mk_str "object") in
                                          let* α3 : alloc.string.String.t :=
                                            M.call (α1 α2) in
                                          let* α4 : usize.t :=
                                            M.call
                                              (bytes.bytes.Bytes.t::["len"]
                                                (borrow file)) in
                                          let* α5 :
                                              (ref str.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := str.t)
                                                (Trait := ℐ))) in
                                          let* α6 : ref str.t :=
                                            M.read (mk_str "unknown") in
                                          let* α7 : alloc.string.String.t :=
                                            M.call (α5 α6) in
                                          let* α8 :
                                              (ref str.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := str.t)
                                                (Trait := ℐ))) in
                                          let* α9 : ref str.t :=
                                            M.read (mk_str "unknown") in
                                          let* α10 : alloc.string.String.t :=
                                            M.call (α8 α9) in
                                          let* α11 :
                                              (ref str.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := str.t)
                                                (Trait := ℐ))) in
                                          let* α12 : ref str.t :=
                                            M.read (mk_str "unknown") in
                                          let* α13 : alloc.string.String.t :=
                                            M.call (α11 α12) in
                                          M.alloc
                                            (core.result.Result.Ok
                                              (axum.json.Json.Build_t
                                                {|
                                                  async_openai.types.file.OpenAIFile.id :=
                                                    α0;
                                                  async_openai.types.file.OpenAIFile.object :=
                                                    α3;
                                                  async_openai.types.file.OpenAIFile.bytes :=
                                                    rust_cast α4;
                                                  async_openai.types.file.OpenAIFile.created_at :=
                                                    (Integer.of_Z 0) : u32.t;
                                                  async_openai.types.file.OpenAIFile.filename :=
                                                    α7;
                                                  async_openai.types.file.OpenAIFile.purpose :=
                                                    async_openai.types.file.OpenAIFilePurpose.Assistants;
                                                  async_openai.types.file.OpenAIFile.status :=
                                                    core.option.Option.Some α10;
                                                  async_openai.types.file.OpenAIFile.status_details :=
                                                    core.option.Option.Some α13;
                                                |}))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.file.OpenAIFile.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)));
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Err _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Err_0 γ in
                                          let* e := M.copy γ0_0 in
                                          let* _ : M.Val unit :=
                                            let* lvl : M.Val log.Level.t :=
                                              M.alloc log.Level.Error in
                                            let* α0 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : bool.t :=
                                              M.call
                                                (α0
                                                  (borrow lvl)
                                                  (borrow
                                                    log.STATIC_MAX_LEVEL)) in
                                            let* α2 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α3 : log.LevelFilter.t :=
                                              M.call log.max_level in
                                            let* α4 : M.Val log.LevelFilter.t :=
                                              M.alloc α3 in
                                            let* α5 : bool.t :=
                                              M.call
                                                (α2 (borrow lvl) (borrow α4)) in
                                            let* α6 : M.Val bool.t :=
                                              M.alloc (BinOp.Pure.and α1 α5) in
                                            let* α7 : bool.t :=
                                              M.read (use α6) in
                                            if α7 then
                                              let* _ : M.Val unit :=
                                                let* α0 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "Failed to retrieve file: ") in
                                                let* α1 :
                                                    M.Val (array (ref str.t)) :=
                                                  M.alloc [ α0 ] in
                                                let* α2 :
                                                    core.fmt.rt.Argument.t :=
                                                  M.call
                                                    (core.fmt.rt.Argument.t::["new_debug"]
                                                      (borrow e)) in
                                                let* α3 :
                                                    M.Val
                                                      (array
                                                        core.fmt.rt.Argument.t) :=
                                                  M.alloc [ α2 ] in
                                                let* α4 :
                                                    core.fmt.Arguments.t :=
                                                  M.call
                                                    (core.fmt.Arguments.t::["new_v1"]
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α1))
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α3))) in
                                                let* α5 : log.Level.t :=
                                                  M.read lvl in
                                                let* α6 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::files") in
                                                let* α7 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::files") in
                                                let* α8 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants-api-communication/src/files.rs") in
                                                let* α9 :
                                                    M.Val
                                                      (((ref str.t)
                                                      *
                                                      (ref str.t))
                                                      *
                                                      (ref str.t)) :=
                                                  M.alloc (α6, α7, α8) in
                                                let* α10 : unit :=
                                                  M.call
                                                    (log.__private_api.log
                                                      α4
                                                      α5
                                                      (borrow α9)
                                                      ((Integer.of_Z 31) :
                                                        u32.t)
                                                      core.option.Option.None) in
                                                M.alloc α10 in
                                              M.alloc tt
                                            else
                                              M.alloc tt in
                                          let* α0 : http.status.StatusCode.t :=
                                            M.read
                                              http.status.INTERNAL_SERVER_ERROR in
                                          let* α1 :
                                              (ref str.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := str.t)
                                                (Trait := ℐ))) in
                                          let* α2 : ref str.t :=
                                            M.read
                                              (mk_str
                                                "Failed to retrieve file") in
                                          let* α3 : alloc.string.String.t :=
                                            M.call (α1 α2) in
                                          M.alloc
                                            (core.result.Result.Err (α0, α3))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.file.OpenAIFile.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ] in
                                M.pure (use α9)
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.file.OpenAIFile.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.file.OpenAIFile.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t async_openai.types.file.OpenAIFile.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.file.OpenAIFile.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn upload_file_handler(
      State(app_state): State<AppState>,
      mut multipart: Multipart,
  ) -> Result<JsonResponse<OpenAIFile>, (StatusCode, String)> {
      let mut file_data = Vec::new();
      let mut purpose = String::new();
      let mut content_type = String::new();
  
      while let Some(mut field) = multipart.next_field().await.unwrap() {
          let name = field.name().unwrap().to_string();
  
          if name == "file" {
              content_type = field.content_type().unwrap_or("text/plain").to_string();
              while let Some(chunk) = field.chunk().await.unwrap() {
                  file_data.extend_from_slice(&chunk);
              }
          } else if name == "purpose" {
              purpose = String::from_utf8(field.bytes().await.unwrap().to_vec()).unwrap();
          }
      }
  
      if file_data.is_empty() || purpose.is_empty() {
          return Err((
              StatusCode::BAD_REQUEST,
              "Missing file or purpose".to_string(),
          ));
      }
  
      // Create a temporary file with the same content type
      let mut temp_file = tempfile::Builder::new()
          .suffix(&format!(
              ".{}",
              content_type.split("/").collect::<Vec<&str>>()[1]
          ))
          .tempfile()
          .unwrap();
  
      // Write the file data to the temporary file
      temp_file.write_all(&file_data).unwrap();
  
      // Get the path of the temporary file.
      let temp_file_path = temp_file.path();
  
      // Upload the file.
      info!("Uploading file: {:?}", temp_file_path);
      let file_id = app_state
          .file_storage
          .upload_file(&temp_file_path)
          .await
          .unwrap();
      info!("Uploaded file: {:?}", file_id);
  
      // Inside upload_file_handler function, after writing the file data to the temporary file
      if content_type.starts_with("text/") {
          let file_data_str = String::from_utf8(file_data.clone()).unwrap();
          split_and_insert(
              &app_state.pool,
              &file_data_str,
              100, // TODO
              &file_id,
              None,
          )
          .await
          .unwrap();
      }
  
      Ok(JsonResponse(OpenAIFile {
          id: file_id,
          object: "object".to_string(),
          bytes: file_data.len() as u32,
          created_at: 0,
          filename: "unknown".to_string(), // TODO
          purpose: OpenAIFilePurpose::Assistants,
          status: Some("success".to_string()),
          status_details: Some("unknown".to_string()),
      }))
  }
  *)
  Definition upload_file_handler
      (__arg0
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      (multipart : axum.extract.multipart.Multipart.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* multipart := M.alloc multipart in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val
                    (axum.extract.state.State.t
                      assistants_api_communication.models.AppState.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t async_openai.types.file.OpenAIFile.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.state.State.Build_t _ =>
                        let γ0_0 := axum.extract.state.State.Get_0 γ in
                        let* app_state := M.copy γ0_0 in
                        let* multipart :
                            M.Val axum.extract.multipart.Multipart.t :=
                          M.copy multipart in
                        let* file_data :
                            M.Val (alloc.vec.Vec.t u8.t alloc.alloc.Global.t) :=
                          let* α0 : alloc.vec.Vec.t u8.t alloc.alloc.Global.t :=
                            M.call
                              (alloc.vec.Vec.t
                                  u8.t
                                  alloc.alloc.Global.t)::["new"] in
                          M.alloc α0 in
                        let* purpose : M.Val alloc.string.String.t :=
                          let* α0 : alloc.string.String.t :=
                            M.call alloc.string.String.t::["new"] in
                          M.alloc α0 in
                        let* content_type : M.Val alloc.string.String.t :=
                          let* α0 : alloc.string.String.t :=
                            M.call alloc.string.String.t::["new"] in
                          M.alloc α0 in
                        let* _ : M.Val unit :=
                          M.loop
                            (let* α0 : _ -> M _ :=
                              ltac:(M.get_method (fun ℐ =>
                                core.future.into_future.IntoFuture.into_future
                                  (Self := _)
                                  (Trait := ℐ))) in
                            let* α1 : _ :=
                              M.call
                                (axum.extract.multipart.Multipart.t::["next_field"]
                                  (borrow_mut multipart)) in
                            let* α2 : _ := M.call (α0 α1) in
                            let* α3 : M.Val _ := M.alloc α2 in
                            let* α4 :
                                M.Val
                                  (core.result.Result.t
                                    (core.option.Option.t
                                      axum.extract.multipart.Field.t)
                                    axum.extract.multipart.MultipartError.t) :=
                              match_operator
                                α3
                                [
                                  fun γ =>
                                    (let* __awaitee := M.copy γ in
                                    M.loop
                                      (let* _ : M.Val unit :=
                                        let* α0 :
                                            (core.pin.Pin.t (mut_ref _)) ->
                                              (mut_ref core.task.wake.Context.t)
                                              ->
                                              M (core.task.poll.Poll.t _) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.future.future.Future.poll
                                              (Self := _)
                                              (Trait := ℐ))) in
                                        let* α1 : core.pin.Pin.t (mut_ref _) :=
                                          M.call
                                            ((core.pin.Pin.t
                                                  (mut_ref
                                                    _))::["new_unchecked"]
                                              (borrow_mut __awaitee)) in
                                        let* α2 : core.future.ResumeTy.t :=
                                          M.read _task_context in
                                        let* α3 :
                                            mut_ref core.task.wake.Context.t :=
                                          M.call (core.future.get_context α2) in
                                        let* α4 :
                                            core.task.poll.Poll.t
                                              (core.result.Result.t
                                                (core.option.Option.t
                                                  axum.extract.multipart.Field.t)
                                                axum.extract.multipart.MultipartError.t) :=
                                          M.call (α0 α1 α3) in
                                        let* α5 :
                                            M.Val
                                              (core.task.poll.Poll.t
                                                (core.result.Result.t
                                                  (core.option.Option.t
                                                    axum.extract.multipart.Field.t)
                                                  axum.extract.multipart.MultipartError.t)) :=
                                          M.alloc α4 in
                                        match_operator
                                          α5
                                          [
                                            fun γ =>
                                              (let* α0 := M.read γ in
                                              match α0 with
                                              | core.task.poll.Poll.Ready _ =>
                                                let γ0_0 :=
                                                  core.task.poll.Poll.Get_Ready_0
                                                    γ in
                                                let* result := M.copy γ0_0 in
                                                let* α0 : M.Val never.t :=
                                                  M.break in
                                                let* α1 := M.read α0 in
                                                let* α2 : unit :=
                                                  never_to_any α1 in
                                                M.alloc α2
                                              | _ => M.break_match
                                              end) :
                                              M (M.Val unit);
                                            fun γ =>
                                              (let* α0 := M.read γ in
                                              match α0 with
                                              | core.task.poll.Poll.Pending =>
                                                M.alloc tt
                                              | _ => M.break_match
                                              end) :
                                              M (M.Val unit)
                                          ] in
                                      let* _ : M.Val unit :=
                                        let* α0 : M.Val unit := M.alloc tt in
                                        let* α1 :
                                            M.Val core.future.ResumeTy.t :=
                                          yield α0 in
                                        let* α2 : core.future.ResumeTy.t :=
                                          M.read α1 in
                                        assign _task_context α2 in
                                      M.alloc tt)) :
                                    M
                                      (M.Val
                                        (core.result.Result.t
                                          (core.option.Option.t
                                            axum.extract.multipart.Field.t)
                                          axum.extract.multipart.MultipartError.t))
                                ] in
                            let* α5 :
                                core.result.Result.t
                                  (core.option.Option.t
                                    axum.extract.multipart.Field.t)
                                  axum.extract.multipart.MultipartError.t :=
                              M.read α4 in
                            let* α6 :
                                core.option.Option.t
                                  axum.extract.multipart.Field.t :=
                              M.call
                                ((core.result.Result.t
                                      (core.option.Option.t
                                        axum.extract.multipart.Field.t)
                                      axum.extract.multipart.MultipartError.t)::["unwrap"]
                                  α5) in
                            let* α7 :
                                M.Val
                                  (core.option.Option.t
                                    axum.extract.multipart.Field.t) :=
                              M.alloc α6 in
                            match_operator
                              α7
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.option.Option.Some _ =>
                                    let γ0_0 :=
                                      core.option.Option.Get_Some_0 γ in
                                    let* field := M.copy γ0_0 in
                                    let* name : M.Val alloc.string.String.t :=
                                      let* α0 :
                                          (ref str.t) ->
                                            M alloc.string.String.t :=
                                        ltac:(M.get_method (fun ℐ =>
                                          alloc.string.ToString.to_string
                                            (Self := str.t)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.option.Option.t (ref str.t) :=
                                        M.call
                                          (axum.extract.multipart.Field.t::["name"]
                                            (borrow field)) in
                                      let* α2 : ref str.t :=
                                        M.call
                                          ((core.option.Option.t
                                                (ref str.t))::["unwrap"]
                                            α1) in
                                      let* α3 : alloc.string.String.t :=
                                        M.call (α0 α2) in
                                      M.alloc α3 in
                                    let* α0 :
                                        (ref alloc.string.String.t) ->
                                          (ref (ref str.t)) ->
                                          M bool.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.cmp.PartialEq.eq
                                          (Self := alloc.string.String.t)
                                          (Rhs := ref str.t)
                                          (Trait := ℐ))) in
                                    let* α1 : bool.t :=
                                      M.call
                                        (α0
                                          (borrow name)
                                          (borrow (mk_str "file"))) in
                                    let* α2 : M.Val bool.t := M.alloc α1 in
                                    let* α3 : bool.t := M.read (use α2) in
                                    if α3 then
                                      let* _ : M.Val unit :=
                                        let* α0 :
                                            (ref str.t) ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            alloc.string.ToString.to_string
                                              (Self := str.t)
                                              (Trait := ℐ))) in
                                        let* α1 :
                                            core.option.Option.t (ref str.t) :=
                                          M.call
                                            (axum.extract.multipart.Field.t::["content_type"]
                                              (borrow field)) in
                                        let* α2 : ref str.t :=
                                          M.read (mk_str "text/plain") in
                                        let* α3 : ref str.t :=
                                          M.call
                                            ((core.option.Option.t
                                                  (ref str.t))::["unwrap_or"]
                                              α1
                                              α2) in
                                        let* α4 : alloc.string.String.t :=
                                          M.call (α0 α3) in
                                        assign content_type α4 in
                                      M.loop
                                        (let* α0 : _ -> M _ :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.future.into_future.IntoFuture.into_future
                                              (Self := _)
                                              (Trait := ℐ))) in
                                        let* α1 : _ :=
                                          M.call
                                            (axum.extract.multipart.Field.t::["chunk"]
                                              (borrow_mut field)) in
                                        let* α2 : _ := M.call (α0 α1) in
                                        let* α3 : M.Val _ := M.alloc α2 in
                                        let* α4 :
                                            M.Val
                                              (core.result.Result.t
                                                (core.option.Option.t
                                                  bytes.bytes.Bytes.t)
                                                axum.extract.multipart.MultipartError.t) :=
                                          match_operator
                                            α3
                                            [
                                              fun γ =>
                                                (let* __awaitee := M.copy γ in
                                                M.loop
                                                  (let* _ : M.Val unit :=
                                                    let* α0 :
                                                        (core.pin.Pin.t
                                                            (mut_ref _))
                                                          ->
                                                          (mut_ref
                                                            core.task.wake.Context.t)
                                                          ->
                                                          M
                                                            (core.task.poll.Poll.t
                                                              _) :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.future.future.Future.poll
                                                          (Self := _)
                                                          (Trait := ℐ))) in
                                                    let* α1 :
                                                        core.pin.Pin.t
                                                          (mut_ref _) :=
                                                      M.call
                                                        ((core.pin.Pin.t
                                                              (mut_ref
                                                                _))::["new_unchecked"]
                                                          (borrow_mut
                                                            __awaitee)) in
                                                    let* α2 :
                                                        core.future.ResumeTy.t :=
                                                      M.read _task_context in
                                                    let* α3 :
                                                        mut_ref
                                                          core.task.wake.Context.t :=
                                                      M.call
                                                        (core.future.get_context
                                                          α2) in
                                                    let* α4 :
                                                        core.task.poll.Poll.t
                                                          (core.result.Result.t
                                                            (core.option.Option.t
                                                              bytes.bytes.Bytes.t)
                                                            axum.extract.multipart.MultipartError.t) :=
                                                      M.call (α0 α1 α3) in
                                                    let* α5 :
                                                        M.Val
                                                          (core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              (core.option.Option.t
                                                                bytes.bytes.Bytes.t)
                                                              axum.extract.multipart.MultipartError.t)) :=
                                                      M.alloc α4 in
                                                    match_operator
                                                      α5
                                                      [
                                                        fun γ =>
                                                          (let* α0 :=
                                                            M.read γ in
                                                          match α0 with
                                                          |
                                                              core.task.poll.Poll.Ready
                                                                _
                                                              =>
                                                            let γ0_0 :=
                                                              core.task.poll.Poll.Get_Ready_0
                                                                γ in
                                                            let* result :=
                                                              M.copy γ0_0 in
                                                            let* α0 :
                                                                M.Val never.t :=
                                                              M.break in
                                                            let* α1 :=
                                                              M.read α0 in
                                                            let* α2 : unit :=
                                                              never_to_any α1 in
                                                            M.alloc α2
                                                          | _ => M.break_match
                                                          end) :
                                                          M (M.Val unit);
                                                        fun γ =>
                                                          (let* α0 :=
                                                            M.read γ in
                                                          match α0 with
                                                          |
                                                              core.task.poll.Poll.Pending
                                                              =>
                                                            M.alloc tt
                                                          | _ => M.break_match
                                                          end) :
                                                          M (M.Val unit)
                                                      ] in
                                                  let* _ : M.Val unit :=
                                                    let* α0 : M.Val unit :=
                                                      M.alloc tt in
                                                    let* α1 :
                                                        M.Val
                                                          core.future.ResumeTy.t :=
                                                      yield α0 in
                                                    let* α2 :
                                                        core.future.ResumeTy.t :=
                                                      M.read α1 in
                                                    assign _task_context α2 in
                                                  M.alloc tt)) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (core.option.Option.t
                                                        bytes.bytes.Bytes.t)
                                                      axum.extract.multipart.MultipartError.t))
                                            ] in
                                        let* α5 :
                                            core.result.Result.t
                                              (core.option.Option.t
                                                bytes.bytes.Bytes.t)
                                              axum.extract.multipart.MultipartError.t :=
                                          M.read α4 in
                                        let* α6 :
                                            core.option.Option.t
                                              bytes.bytes.Bytes.t :=
                                          M.call
                                            ((core.result.Result.t
                                                  (core.option.Option.t
                                                    bytes.bytes.Bytes.t)
                                                  axum.extract.multipart.MultipartError.t)::["unwrap"]
                                              α5) in
                                        let* α7 :
                                            M.Val
                                              (core.option.Option.t
                                                bytes.bytes.Bytes.t) :=
                                          M.alloc α6 in
                                        match_operator
                                          α7
                                          [
                                            fun γ =>
                                              (let* α0 := M.read γ in
                                              match α0 with
                                              | core.option.Option.Some _ =>
                                                let γ0_0 :=
                                                  core.option.Option.Get_Some_0
                                                    γ in
                                                let* chunk := M.copy γ0_0 in
                                                let* _ : M.Val unit :=
                                                  let* α0 :
                                                      (ref bytes.bytes.Bytes.t)
                                                        ->
                                                        M (ref _) :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.ops.deref.Deref.deref
                                                        (Self :=
                                                          bytes.bytes.Bytes.t)
                                                        (Trait := ℐ))) in
                                                  let* α1 : ref (slice u8.t) :=
                                                    M.call
                                                      (α0 (borrow chunk)) in
                                                  let* α2 : unit :=
                                                    M.call
                                                      ((alloc.vec.Vec.t
                                                            u8.t
                                                            alloc.alloc.Global.t)::["extend_from_slice"]
                                                        (borrow_mut file_data)
                                                        α1) in
                                                  M.alloc α2 in
                                                M.alloc tt
                                              | _ => M.break_match
                                              end) :
                                              M (M.Val unit);
                                            fun γ =>
                                              (let* _ : M.Val unit :=
                                                let* α0 : M.Val never.t :=
                                                  M.break in
                                                let* α1 := M.read α0 in
                                                let* α2 : unit :=
                                                  never_to_any α1 in
                                                M.alloc α2 in
                                              let* α0 : M.Val unit :=
                                                M.alloc tt in
                                              let* α1 := M.read α0 in
                                              let* α2 : unit :=
                                                never_to_any α1 in
                                              M.alloc α2) :
                                              M (M.Val unit)
                                          ])
                                    else
                                      let* α0 :
                                          (ref alloc.string.String.t) ->
                                            (ref (ref str.t)) ->
                                            M bool.t :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.cmp.PartialEq.eq
                                            (Self := alloc.string.String.t)
                                            (Rhs := ref str.t)
                                            (Trait := ℐ))) in
                                      let* α1 : bool.t :=
                                        M.call
                                          (α0
                                            (borrow name)
                                            (borrow (mk_str "purpose"))) in
                                      let* α2 : M.Val bool.t := M.alloc α1 in
                                      let* α3 : bool.t := M.read (use α2) in
                                      if α3 then
                                        let* _ : M.Val unit :=
                                          let* α0 :
                                              (ref bytes.bytes.Bytes.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := bytes.bytes.Bytes.t)
                                                (Trait := ℐ))) in
                                          let* α1 : _ -> M _ :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.future.into_future.IntoFuture.into_future
                                                (Self := _)
                                                (Trait := ℐ))) in
                                          let* α2 :
                                              axum.extract.multipart.Field.t :=
                                            M.read field in
                                          let* α3 : _ :=
                                            M.call
                                              (axum.extract.multipart.Field.t::["bytes"]
                                                α2) in
                                          let* α4 : _ := M.call (α1 α3) in
                                          let* α5 : M.Val _ := M.alloc α4 in
                                          let* α6 :
                                              M.Val
                                                (core.result.Result.t
                                                  bytes.bytes.Bytes.t
                                                  axum.extract.multipart.MultipartError.t) :=
                                            match_operator
                                              α5
                                              [
                                                fun γ =>
                                                  (let* __awaitee := M.copy γ in
                                                  M.loop
                                                    (let* _ : M.Val unit :=
                                                      let* α0 :
                                                          (core.pin.Pin.t
                                                              (mut_ref _))
                                                            ->
                                                            (mut_ref
                                                              core.task.wake.Context.t)
                                                            ->
                                                            M
                                                              (core.task.poll.Poll.t
                                                                _) :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.future.future.Future.poll
                                                            (Self := _)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          core.pin.Pin.t
                                                            (mut_ref _) :=
                                                        M.call
                                                          ((core.pin.Pin.t
                                                                (mut_ref
                                                                  _))::["new_unchecked"]
                                                            (borrow_mut
                                                              __awaitee)) in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read _task_context in
                                                      let* α3 :
                                                          mut_ref
                                                            core.task.wake.Context.t :=
                                                        M.call
                                                          (core.future.get_context
                                                            α2) in
                                                      let* α4 :
                                                          core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              bytes.bytes.Bytes.t
                                                              axum.extract.multipart.MultipartError.t) :=
                                                        M.call (α0 α1 α3) in
                                                      let* α5 :
                                                          M.Val
                                                            (core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                bytes.bytes.Bytes.t
                                                                axum.extract.multipart.MultipartError.t)) :=
                                                        M.alloc α4 in
                                                      match_operator
                                                        α5
                                                        [
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Ready
                                                                  _
                                                                =>
                                                              let γ0_0 :=
                                                                core.task.poll.Poll.Get_Ready_0
                                                                  γ in
                                                              let* result :=
                                                                M.copy γ0_0 in
                                                              let* α0 :
                                                                  M.Val
                                                                    never.t :=
                                                                M.break in
                                                              let* α1 :=
                                                                M.read α0 in
                                                              let* α2 : unit :=
                                                                never_to_any
                                                                  α1 in
                                                              M.alloc α2
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit);
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Pending
                                                                =>
                                                              M.alloc tt
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit)
                                                        ] in
                                                    let* _ : M.Val unit :=
                                                      let* α0 : M.Val unit :=
                                                        M.alloc tt in
                                                      let* α1 :
                                                          M.Val
                                                            core.future.ResumeTy.t :=
                                                        yield α0 in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read α1 in
                                                      assign _task_context α2 in
                                                    M.alloc tt)) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        bytes.bytes.Bytes.t
                                                        axum.extract.multipart.MultipartError.t))
                                              ] in
                                          let* α7 :
                                              core.result.Result.t
                                                bytes.bytes.Bytes.t
                                                axum.extract.multipart.MultipartError.t :=
                                            M.read α6 in
                                          let* α8 : bytes.bytes.Bytes.t :=
                                            M.call
                                              ((core.result.Result.t
                                                    bytes.bytes.Bytes.t
                                                    axum.extract.multipart.MultipartError.t)::["unwrap"]
                                                α7) in
                                          let* α9 : M.Val bytes.bytes.Bytes.t :=
                                            M.alloc α8 in
                                          let* α10 : ref (slice u8.t) :=
                                            M.call (α0 (borrow α9)) in
                                          let* α11 :
                                              alloc.vec.Vec.t
                                                u8.t
                                                alloc.alloc.Global.t :=
                                            M.call
                                              ((slice u8.t)::["to_vec"] α10) in
                                          let* α12 :
                                              core.result.Result.t
                                                alloc.string.String.t
                                                alloc.string.FromUtf8Error.t :=
                                            M.call
                                              (alloc.string.String.t::["from_utf8"]
                                                α11) in
                                          let* α13 : alloc.string.String.t :=
                                            M.call
                                              ((core.result.Result.t
                                                    alloc.string.String.t
                                                    alloc.string.FromUtf8Error.t)::["unwrap"]
                                                α12) in
                                          assign purpose α13 in
                                        M.alloc tt
                                      else
                                        M.alloc tt
                                  | _ => M.break_match
                                  end) :
                                  M (M.Val unit);
                                fun γ =>
                                  (let* _ : M.Val unit :=
                                    let* α0 : M.Val never.t := M.break in
                                    let* α1 := M.read α0 in
                                    let* α2 : unit := never_to_any α1 in
                                    M.alloc α2 in
                                  let* α0 : M.Val unit := M.alloc tt in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2) :
                                  M (M.Val unit)
                              ]) in
                        let* _ : M.Val unit :=
                          let* α0 : bool.t :=
                            M.call
                              ((alloc.vec.Vec.t
                                    u8.t
                                    alloc.alloc.Global.t)::["is_empty"]
                                (borrow file_data)) in
                          let* α1 : bool.t :=
                            M.call
                              (alloc.string.String.t::["is_empty"]
                                (borrow purpose)) in
                          let* α2 : M.Val bool.t :=
                            M.alloc (BinOp.Pure.or α0 α1) in
                          let* α3 : bool.t := M.read (use α2) in
                          if α3 then
                            let* α0 : http.status.StatusCode.t :=
                              M.read http.status.BAD_REQUEST in
                            let* α1 : (ref str.t) -> M alloc.string.String.t :=
                              ltac:(M.get_method (fun ℐ =>
                                alloc.string.ToString.to_string
                                  (Self := str.t)
                                  (Trait := ℐ))) in
                            let* α2 : ref str.t :=
                              M.read (mk_str "Missing file or purpose") in
                            let* α3 : alloc.string.String.t := M.call (α1 α2) in
                            let* α4 : M.Val never.t :=
                              return_ (core.result.Result.Err (α0, α3)) in
                            let* α5 := M.read α4 in
                            let* α6 : unit := never_to_any α5 in
                            M.alloc α6
                          else
                            M.alloc tt in
                        let* temp_file :
                            M.Val
                              (tempfile.file.NamedTempFile.t std.fs.File.t) :=
                          let* α0 : tempfile.Builder.t :=
                            M.call tempfile.Builder.t::["new"] in
                          let* α1 : M.Val tempfile.Builder.t := M.alloc α0 in
                          let* res : M.Val alloc.string.String.t :=
                            let* α0 : ref str.t := M.read (mk_str ".") in
                            let* α1 : M.Val (array (ref str.t)) :=
                              M.alloc [ α0 ] in
                            let* α2 :
                                (ref
                                    (alloc.vec.Vec.t
                                      (ref str.t)
                                      alloc.alloc.Global.t))
                                  ->
                                  usize.t ->
                                  M (ref _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.index.Index.index
                                  (Self :=
                                    alloc.vec.Vec.t
                                      (ref str.t)
                                      alloc.alloc.Global.t)
                                  (Idx := usize.t)
                                  (Trait := ℐ))) in
                            let* α3 :
                                (core.str.iter.Split.t (ref str.t)) ->
                                  M
                                    (alloc.vec.Vec.t
                                      (ref str.t)
                                      alloc.alloc.Global.t) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.collect
                                  (Self := core.str.iter.Split.t (ref str.t))
                                  (B :=
                                    alloc.vec.Vec.t
                                      (ref str.t)
                                      alloc.alloc.Global.t)
                                  (Trait := ℐ))) in
                            let* α4 :
                                (ref alloc.string.String.t) -> M (ref _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.deref.Deref.deref
                                  (Self := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α5 : ref str.t :=
                              M.call (α4 (borrow content_type)) in
                            let* α6 : ref str.t := M.read (mk_str "/") in
                            let* α7 : core.str.iter.Split.t (ref str.t) :=
                              M.call (str.t::["split"] α5 α6) in
                            let* α8 :
                                alloc.vec.Vec.t
                                  (ref str.t)
                                  alloc.alloc.Global.t :=
                              M.call (α3 α7) in
                            let* α9 :
                                M.Val
                                  (alloc.vec.Vec.t
                                    (ref str.t)
                                    alloc.alloc.Global.t) :=
                              M.alloc α8 in
                            let* α10 : ref (ref str.t) :=
                              M.call
                                (α2 (borrow α9) ((Integer.of_Z 1) : usize.t)) in
                            let* α11 : core.fmt.rt.Argument.t :=
                              M.call
                                (core.fmt.rt.Argument.t::["new_display"] α10) in
                            let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
                              M.alloc [ α11 ] in
                            let* α13 : core.fmt.Arguments.t :=
                              M.call
                                (core.fmt.Arguments.t::["new_v1"]
                                  (pointer_coercion "Unsize" (borrow α1))
                                  (pointer_coercion "Unsize" (borrow α12))) in
                            let* α14 : alloc.string.String.t :=
                              M.call (alloc.fmt.format α13) in
                            M.alloc α14 in
                          let* α2 : mut_ref tempfile.Builder.t :=
                            M.call
                              (tempfile.Builder.t::["suffix"]
                                (borrow_mut α1)
                                (borrow res)) in
                          let* α3 :
                              core.result.Result.t
                                (tempfile.file.NamedTempFile.t std.fs.File.t)
                                std.io.error.Error.t :=
                            M.call
                              (tempfile.Builder.t::["tempfile"]
                                (borrow (deref α2))) in
                          let* α4 :
                              tempfile.file.NamedTempFile.t std.fs.File.t :=
                            M.call
                              ((core.result.Result.t
                                    (tempfile.file.NamedTempFile.t
                                      std.fs.File.t)
                                    std.io.error.Error.t)::["unwrap"]
                                α3) in
                          M.alloc α4 in
                        let* _ : M.Val unit :=
                          let* α0 :
                              (mut_ref
                                  (tempfile.file.NamedTempFile.t std.fs.File.t))
                                ->
                                (ref (slice u8.t)) ->
                                M
                                  (core.result.Result.t
                                    unit
                                    std.io.error.Error.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              std.io.Write.write_all
                                (Self :=
                                  tempfile.file.NamedTempFile.t std.fs.File.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              (ref (alloc.vec.Vec.t u8.t alloc.alloc.Global.t))
                                ->
                                M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.deref.Deref.deref
                                (Self :=
                                  alloc.vec.Vec.t u8.t alloc.alloc.Global.t)
                                (Trait := ℐ))) in
                          let* α2 : ref (slice u8.t) :=
                            M.call (α1 (borrow file_data)) in
                          let* α3 :
                              core.result.Result.t unit std.io.error.Error.t :=
                            M.call (α0 (borrow_mut temp_file) α2) in
                          let* α4 : unit :=
                            M.call
                              ((core.result.Result.t
                                    unit
                                    std.io.error.Error.t)::["unwrap"]
                                α3) in
                          M.alloc α4 in
                        let* temp_file_path : M.Val (ref std.path.Path.t) :=
                          let* α0 : ref std.path.Path.t :=
                            M.call
                              ((tempfile.file.NamedTempFile.t
                                    std.fs.File.t)::["path"]
                                (borrow temp_file)) in
                          M.alloc α0 in
                        let* _ : M.Val unit :=
                          let* lvl : M.Val log.Level.t :=
                            M.alloc log.Level.Info in
                          let* α0 :
                              (ref log.Level.t) ->
                                (ref log.LevelFilter.t) ->
                                M bool.t :=
                            ltac:(M.get_method (fun ℐ =>
                              core.cmp.PartialOrd.le
                                (Self := log.Level.t)
                                (Rhs := log.LevelFilter.t)
                                (Trait := ℐ))) in
                          let* α1 : bool.t :=
                            M.call
                              (α0 (borrow lvl) (borrow log.STATIC_MAX_LEVEL)) in
                          let* α2 :
                              (ref log.Level.t) ->
                                (ref log.LevelFilter.t) ->
                                M bool.t :=
                            ltac:(M.get_method (fun ℐ =>
                              core.cmp.PartialOrd.le
                                (Self := log.Level.t)
                                (Rhs := log.LevelFilter.t)
                                (Trait := ℐ))) in
                          let* α3 : log.LevelFilter.t := M.call log.max_level in
                          let* α4 : M.Val log.LevelFilter.t := M.alloc α3 in
                          let* α5 : bool.t :=
                            M.call (α2 (borrow lvl) (borrow α4)) in
                          let* α6 : M.Val bool.t :=
                            M.alloc (BinOp.Pure.and α1 α5) in
                          let* α7 : bool.t := M.read (use α6) in
                          if α7 then
                            let* _ : M.Val unit :=
                              let* α0 : ref str.t :=
                                M.read (mk_str "Uploading file: ") in
                              let* α1 : M.Val (array (ref str.t)) :=
                                M.alloc [ α0 ] in
                              let* α2 : core.fmt.rt.Argument.t :=
                                M.call
                                  (core.fmt.rt.Argument.t::["new_debug"]
                                    (borrow temp_file_path)) in
                              let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                                M.alloc [ α2 ] in
                              let* α4 : core.fmt.Arguments.t :=
                                M.call
                                  (core.fmt.Arguments.t::["new_v1"]
                                    (pointer_coercion "Unsize" (borrow α1))
                                    (pointer_coercion "Unsize" (borrow α3))) in
                              let* α5 : log.Level.t := M.read lvl in
                              let* α6 : ref str.t :=
                                M.read
                                  (mk_str
                                    "assistants_api_communication::files") in
                              let* α7 : ref str.t :=
                                M.read
                                  (mk_str
                                    "assistants_api_communication::files") in
                              let* α8 : ref str.t :=
                                M.read
                                  (mk_str
                                    "assistants-api-communication/src/files.rs") in
                              let* α9 :
                                  M.Val
                                    (((ref str.t) * (ref str.t))
                                    *
                                    (ref str.t)) :=
                                M.alloc (α6, α7, α8) in
                              let* α10 : unit :=
                                M.call
                                  (log.__private_api.log
                                    α4
                                    α5
                                    (borrow α9)
                                    ((Integer.of_Z 84) : u32.t)
                                    core.option.Option.None) in
                              M.alloc α10 in
                            M.alloc tt
                          else
                            M.alloc tt in
                        let* file_id : M.Val alloc.string.String.t :=
                          let* α0 : _ -> M _ :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.into_future.IntoFuture.into_future
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 :
                              (ref
                                  (alloc.sync.Arc.t
                                    assistants_core.file_storage.FileStorage.t
                                    alloc.alloc.Global.t))
                                ->
                                M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.deref.Deref.deref
                                (Self :=
                                  alloc.sync.Arc.t
                                    assistants_core.file_storage.FileStorage.t
                                    alloc.alloc.Global.t)
                                (Trait := ℐ))) in
                          let* α2 :
                              ref assistants_core.file_storage.FileStorage.t :=
                            M.call
                              (α1
                                (borrow
                                  (assistants_api_communication.models.AppState.Get_file_storage
                                    app_state))) in
                          let* α3 : ref std.path.Path.t :=
                            M.read temp_file_path in
                          let* α4 : _ :=
                            M.call
                              (assistants_core.file_storage.FileStorage.t::["upload_file"]
                                α2
                                α3) in
                          let* α5 : _ := M.call (α0 α4) in
                          let* α6 : M.Val _ := M.alloc α5 in
                          let* α7 :
                              M.Val
                                (core.result.Result.t
                                  alloc.string.String.t
                                  (alloc.boxed.Box.t
                                    (dyn [core.error.Error.Trait])
                                    alloc.alloc.Global.t)) :=
                            match_operator
                              α6
                              [
                                fun γ =>
                                  (let* __awaitee := M.copy γ in
                                  M.loop
                                    (let* _ : M.Val unit :=
                                      let* α0 :
                                          (core.pin.Pin.t (mut_ref _)) ->
                                            (mut_ref core.task.wake.Context.t)
                                            ->
                                            M (core.task.poll.Poll.t _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.future.future.Future.poll
                                            (Self := _)
                                            (Trait := ℐ))) in
                                      let* α1 : core.pin.Pin.t (mut_ref _) :=
                                        M.call
                                          ((core.pin.Pin.t
                                                (mut_ref _))::["new_unchecked"]
                                            (borrow_mut __awaitee)) in
                                      let* α2 : core.future.ResumeTy.t :=
                                        M.read _task_context in
                                      let* α3 :
                                          mut_ref core.task.wake.Context.t :=
                                        M.call (core.future.get_context α2) in
                                      let* α4 :
                                          core.task.poll.Poll.t
                                            (core.result.Result.t
                                              alloc.string.String.t
                                              (alloc.boxed.Box.t
                                                (dyn [core.error.Error.Trait])
                                                alloc.alloc.Global.t)) :=
                                        M.call (α0 α1 α3) in
                                      let* α5 :
                                          M.Val
                                            (core.task.poll.Poll.t
                                              (core.result.Result.t
                                                alloc.string.String.t
                                                (alloc.boxed.Box.t
                                                  (dyn [core.error.Error.Trait])
                                                  alloc.alloc.Global.t))) :=
                                        M.alloc α4 in
                                      match_operator
                                        α5
                                        [
                                          fun γ =>
                                            (let* α0 := M.read γ in
                                            match α0 with
                                            | core.task.poll.Poll.Ready _ =>
                                              let γ0_0 :=
                                                core.task.poll.Poll.Get_Ready_0
                                                  γ in
                                              let* result := M.copy γ0_0 in
                                              let* α0 : M.Val never.t :=
                                                M.break in
                                              let* α1 := M.read α0 in
                                              let* α2 : unit :=
                                                never_to_any α1 in
                                              M.alloc α2
                                            | _ => M.break_match
                                            end) :
                                            M (M.Val unit);
                                          fun γ =>
                                            (let* α0 := M.read γ in
                                            match α0 with
                                            | core.task.poll.Poll.Pending =>
                                              M.alloc tt
                                            | _ => M.break_match
                                            end) :
                                            M (M.Val unit)
                                        ] in
                                    let* _ : M.Val unit :=
                                      let* α0 : M.Val unit := M.alloc tt in
                                      let* α1 : M.Val core.future.ResumeTy.t :=
                                        yield α0 in
                                      let* α2 : core.future.ResumeTy.t :=
                                        M.read α1 in
                                      assign _task_context α2 in
                                    M.alloc tt)) :
                                  M
                                    (M.Val
                                      (core.result.Result.t
                                        alloc.string.String.t
                                        (alloc.boxed.Box.t
                                          (dyn [core.error.Error.Trait])
                                          alloc.alloc.Global.t)))
                              ] in
                          let* α8 :
                              core.result.Result.t
                                alloc.string.String.t
                                (alloc.boxed.Box.t
                                  (dyn [core.error.Error.Trait])
                                  alloc.alloc.Global.t) :=
                            M.read α7 in
                          let* α9 : alloc.string.String.t :=
                            M.call
                              ((core.result.Result.t
                                    alloc.string.String.t
                                    (alloc.boxed.Box.t
                                      (dyn [core.error.Error.Trait])
                                      alloc.alloc.Global.t))::["unwrap"]
                                α8) in
                          M.alloc α9 in
                        let* _ : M.Val unit :=
                          let* lvl : M.Val log.Level.t :=
                            M.alloc log.Level.Info in
                          let* α0 :
                              (ref log.Level.t) ->
                                (ref log.LevelFilter.t) ->
                                M bool.t :=
                            ltac:(M.get_method (fun ℐ =>
                              core.cmp.PartialOrd.le
                                (Self := log.Level.t)
                                (Rhs := log.LevelFilter.t)
                                (Trait := ℐ))) in
                          let* α1 : bool.t :=
                            M.call
                              (α0 (borrow lvl) (borrow log.STATIC_MAX_LEVEL)) in
                          let* α2 :
                              (ref log.Level.t) ->
                                (ref log.LevelFilter.t) ->
                                M bool.t :=
                            ltac:(M.get_method (fun ℐ =>
                              core.cmp.PartialOrd.le
                                (Self := log.Level.t)
                                (Rhs := log.LevelFilter.t)
                                (Trait := ℐ))) in
                          let* α3 : log.LevelFilter.t := M.call log.max_level in
                          let* α4 : M.Val log.LevelFilter.t := M.alloc α3 in
                          let* α5 : bool.t :=
                            M.call (α2 (borrow lvl) (borrow α4)) in
                          let* α6 : M.Val bool.t :=
                            M.alloc (BinOp.Pure.and α1 α5) in
                          let* α7 : bool.t := M.read (use α6) in
                          if α7 then
                            let* _ : M.Val unit :=
                              let* α0 : ref str.t :=
                                M.read (mk_str "Uploaded file: ") in
                              let* α1 : M.Val (array (ref str.t)) :=
                                M.alloc [ α0 ] in
                              let* α2 : core.fmt.rt.Argument.t :=
                                M.call
                                  (core.fmt.rt.Argument.t::["new_debug"]
                                    (borrow file_id)) in
                              let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                                M.alloc [ α2 ] in
                              let* α4 : core.fmt.Arguments.t :=
                                M.call
                                  (core.fmt.Arguments.t::["new_v1"]
                                    (pointer_coercion "Unsize" (borrow α1))
                                    (pointer_coercion "Unsize" (borrow α3))) in
                              let* α5 : log.Level.t := M.read lvl in
                              let* α6 : ref str.t :=
                                M.read
                                  (mk_str
                                    "assistants_api_communication::files") in
                              let* α7 : ref str.t :=
                                M.read
                                  (mk_str
                                    "assistants_api_communication::files") in
                              let* α8 : ref str.t :=
                                M.read
                                  (mk_str
                                    "assistants-api-communication/src/files.rs") in
                              let* α9 :
                                  M.Val
                                    (((ref str.t) * (ref str.t))
                                    *
                                    (ref str.t)) :=
                                M.alloc (α6, α7, α8) in
                              let* α10 : unit :=
                                M.call
                                  (log.__private_api.log
                                    α4
                                    α5
                                    (borrow α9)
                                    ((Integer.of_Z 90) : u32.t)
                                    core.option.Option.None) in
                              M.alloc α10 in
                            M.alloc tt
                          else
                            M.alloc tt in
                        let* _ : M.Val unit :=
                          let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.deref.Deref.deref
                                (Self := alloc.string.String.t)
                                (Trait := ℐ))) in
                          let* α1 : ref str.t :=
                            M.call (α0 (borrow content_type)) in
                          let* α2 : ref str.t := M.read (mk_str "text/") in
                          let* α3 : bool.t :=
                            M.call (str.t::["starts_with"] α1 α2) in
                          let* α4 : M.Val bool.t := M.alloc α3 in
                          let* α5 : bool.t := M.read (use α4) in
                          if α5 then
                            let* file_data_str : M.Val alloc.string.String.t :=
                              let* α0 :
                                  (ref
                                      (alloc.vec.Vec.t
                                        u8.t
                                        alloc.alloc.Global.t))
                                    ->
                                    M
                                      (alloc.vec.Vec.t
                                        u8.t
                                        alloc.alloc.Global.t) :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.clone.Clone.clone
                                    (Self :=
                                      alloc.vec.Vec.t u8.t alloc.alloc.Global.t)
                                    (Trait := ℐ))) in
                              let* α1 :
                                  alloc.vec.Vec.t u8.t alloc.alloc.Global.t :=
                                M.call (α0 (borrow file_data)) in
                              let* α2 :
                                  core.result.Result.t
                                    alloc.string.String.t
                                    alloc.string.FromUtf8Error.t :=
                                M.call
                                  (alloc.string.String.t::["from_utf8"] α1) in
                              let* α3 : alloc.string.String.t :=
                                M.call
                                  ((core.result.Result.t
                                        alloc.string.String.t
                                        alloc.string.FromUtf8Error.t)::["unwrap"]
                                    α2) in
                              M.alloc α3 in
                            let* _ :
                                M.Val
                                  (alloc.vec.Vec.t
                                    assistants_core.models.Chunk.t
                                    alloc.alloc.Global.t) :=
                              let* α0 : _ -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.future.into_future.IntoFuture.into_future
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 :
                                  (ref
                                      (alloc.sync.Arc.t
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t)
                                        alloc.alloc.Global.t))
                                    ->
                                    M (ref _) :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.ops.deref.Deref.deref
                                    (Self :=
                                      alloc.sync.Arc.t
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t)
                                        alloc.alloc.Global.t)
                                    (Trait := ℐ))) in
                              let* α2 :
                                  ref
                                    (sqlx_core.pool.Pool.t
                                      sqlx_postgres.database.Postgres.t) :=
                                M.call
                                  (α1
                                    (borrow
                                      (assistants_api_communication.models.AppState.Get_pool
                                        app_state))) in
                              let* α3 :
                                  (ref alloc.string.String.t) -> M (ref _) :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.ops.deref.Deref.deref
                                    (Self := alloc.string.String.t)
                                    (Trait := ℐ))) in
                              let* α4 : ref str.t :=
                                M.call (α3 (borrow file_data_str)) in
                              let* α5 :
                                  (ref alloc.string.String.t) -> M (ref _) :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.ops.deref.Deref.deref
                                    (Self := alloc.string.String.t)
                                    (Trait := ℐ))) in
                              let* α6 : ref str.t :=
                                M.call (α5 (borrow file_id)) in
                              let* α7 : _ :=
                                M.call
                                  (assistants_core.retrieval.split_and_insert
                                    α2
                                    α4
                                    ((Integer.of_Z 100) : usize.t)
                                    α6
                                    core.option.Option.None) in
                              let* α8 : _ := M.call (α0 α7) in
                              let* α9 : M.Val _ := M.alloc α8 in
                              let* α10 :
                                  M.Val
                                    (core.result.Result.t
                                      (alloc.vec.Vec.t
                                        assistants_core.models.Chunk.t
                                        alloc.alloc.Global.t)
                                      sqlx_core.error.Error.t) :=
                                match_operator
                                  α9
                                  [
                                    fun γ =>
                                      (let* __awaitee := M.copy γ in
                                      M.loop
                                        (let* _ : M.Val unit :=
                                          let* α0 :
                                              (core.pin.Pin.t (mut_ref _)) ->
                                                (mut_ref
                                                  core.task.wake.Context.t)
                                                ->
                                                M (core.task.poll.Poll.t _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.future.future.Future.poll
                                                (Self := _)
                                                (Trait := ℐ))) in
                                          let* α1 :
                                              core.pin.Pin.t (mut_ref _) :=
                                            M.call
                                              ((core.pin.Pin.t
                                                    (mut_ref
                                                      _))::["new_unchecked"]
                                                (borrow_mut __awaitee)) in
                                          let* α2 : core.future.ResumeTy.t :=
                                            M.read _task_context in
                                          let* α3 :
                                              mut_ref
                                                core.task.wake.Context.t :=
                                            M.call
                                              (core.future.get_context α2) in
                                          let* α4 :
                                              core.task.poll.Poll.t
                                                (core.result.Result.t
                                                  (alloc.vec.Vec.t
                                                    assistants_core.models.Chunk.t
                                                    alloc.alloc.Global.t)
                                                  sqlx_core.error.Error.t) :=
                                            M.call (α0 α1 α3) in
                                          let* α5 :
                                              M.Val
                                                (core.task.poll.Poll.t
                                                  (core.result.Result.t
                                                    (alloc.vec.Vec.t
                                                      assistants_core.models.Chunk.t
                                                      alloc.alloc.Global.t)
                                                    sqlx_core.error.Error.t)) :=
                                            M.alloc α4 in
                                          match_operator
                                            α5
                                            [
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.task.poll.Poll.Ready _ =>
                                                  let γ0_0 :=
                                                    core.task.poll.Poll.Get_Ready_0
                                                      γ in
                                                  let* result := M.copy γ0_0 in
                                                  let* α0 : M.Val never.t :=
                                                    M.break in
                                                  let* α1 := M.read α0 in
                                                  let* α2 : unit :=
                                                    never_to_any α1 in
                                                  M.alloc α2
                                                | _ => M.break_match
                                                end) :
                                                M (M.Val unit);
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.task.poll.Poll.Pending =>
                                                  M.alloc tt
                                                | _ => M.break_match
                                                end) :
                                                M (M.Val unit)
                                            ] in
                                        let* _ : M.Val unit :=
                                          let* α0 : M.Val unit := M.alloc tt in
                                          let* α1 :
                                              M.Val core.future.ResumeTy.t :=
                                            yield α0 in
                                          let* α2 : core.future.ResumeTy.t :=
                                            M.read α1 in
                                          assign _task_context α2 in
                                        M.alloc tt)) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (alloc.vec.Vec.t
                                              assistants_core.models.Chunk.t
                                              alloc.alloc.Global.t)
                                            sqlx_core.error.Error.t))
                                  ] in
                              let* α11 :
                                  core.result.Result.t
                                    (alloc.vec.Vec.t
                                      assistants_core.models.Chunk.t
                                      alloc.alloc.Global.t)
                                    sqlx_core.error.Error.t :=
                                M.read α10 in
                              let* α12 :
                                  alloc.vec.Vec.t
                                    assistants_core.models.Chunk.t
                                    alloc.alloc.Global.t :=
                                M.call
                                  ((core.result.Result.t
                                        (alloc.vec.Vec.t
                                          assistants_core.models.Chunk.t
                                          alloc.alloc.Global.t)
                                        sqlx_core.error.Error.t)::["unwrap"]
                                    α11) in
                              M.alloc α12 in
                            M.alloc tt
                          else
                            M.alloc tt in
                        let* α0 : alloc.string.String.t := M.read file_id in
                        let* α1 : (ref str.t) -> M alloc.string.String.t :=
                          ltac:(M.get_method (fun ℐ =>
                            alloc.string.ToString.to_string
                              (Self := str.t)
                              (Trait := ℐ))) in
                        let* α2 : ref str.t := M.read (mk_str "object") in
                        let* α3 : alloc.string.String.t := M.call (α1 α2) in
                        let* α4 : usize.t :=
                          M.call
                            ((alloc.vec.Vec.t
                                  u8.t
                                  alloc.alloc.Global.t)::["len"]
                              (borrow file_data)) in
                        let* α5 : (ref str.t) -> M alloc.string.String.t :=
                          ltac:(M.get_method (fun ℐ =>
                            alloc.string.ToString.to_string
                              (Self := str.t)
                              (Trait := ℐ))) in
                        let* α6 : ref str.t := M.read (mk_str "unknown") in
                        let* α7 : alloc.string.String.t := M.call (α5 α6) in
                        let* α8 : (ref str.t) -> M alloc.string.String.t :=
                          ltac:(M.get_method (fun ℐ =>
                            alloc.string.ToString.to_string
                              (Self := str.t)
                              (Trait := ℐ))) in
                        let* α9 : ref str.t := M.read (mk_str "success") in
                        let* α10 : alloc.string.String.t := M.call (α8 α9) in
                        let* α11 : (ref str.t) -> M alloc.string.String.t :=
                          ltac:(M.get_method (fun ℐ =>
                            alloc.string.ToString.to_string
                              (Self := str.t)
                              (Trait := ℐ))) in
                        let* α12 : ref str.t := M.read (mk_str "unknown") in
                        let* α13 : alloc.string.String.t := M.call (α11 α12) in
                        let* α0 :
                            M.Val
                              (core.result.Result.t
                                (axum.json.Json.t
                                  async_openai.types.file.OpenAIFile.t)
                                (http.status.StatusCode.t
                                *
                                alloc.string.String.t)) :=
                          M.alloc
                            (core.result.Result.Ok
                              (axum.json.Json.Build_t
                                {|
                                  async_openai.types.file.OpenAIFile.id := α0;
                                  async_openai.types.file.OpenAIFile.object :=
                                    α3;
                                  async_openai.types.file.OpenAIFile.bytes :=
                                    rust_cast α4;
                                  async_openai.types.file.OpenAIFile.created_at :=
                                    (Integer.of_Z 0) : u32.t;
                                  async_openai.types.file.OpenAIFile.filename :=
                                    α7;
                                  async_openai.types.file.OpenAIFile.purpose :=
                                    async_openai.types.file.OpenAIFilePurpose.Assistants;
                                  async_openai.types.file.OpenAIFile.status :=
                                    core.option.Option.Some α10;
                                  async_openai.types.file.OpenAIFile.status_details :=
                                    core.option.Option.Some α13;
                                |})) in
                        M.pure (use α0)
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.file.OpenAIFile.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t async_openai.types.file.OpenAIFile.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.file.OpenAIFile.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
End files.

(*
pub async fn retrieve_file_handler(
    Path(file_id): Path<String>,
    State(app_state): State<AppState>,
) -> Result<JsonResponse<OpenAIFile>, (StatusCode, String)> {
    match app_state.file_storage.retrieve_file(&file_id).await {
        Ok(file) => Ok(JsonResponse(OpenAIFile {
            id: file_id,
            object: "object".to_string(),
            bytes: file.len() as u32,
            created_at: 0,
            filename: "unknown".to_string(),
            purpose: OpenAIFilePurpose::Assistants,
            status: Some("unknown".to_string()),
            status_details: Some("unknown".to_string()),
        })),
        Err(e) => {
            error!("Failed to retrieve file: {:?}", e);
            Err((
                StatusCode::INTERNAL_SERVER_ERROR,
                "Failed to retrieve file".to_string(),
            ))
        }
    }
}
*)
Definition retrieve_file_handler
    (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t async_openai.types.file.OpenAIFile.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* file_id := M.copy γ0_0 in
                      let* __arg1 :
                          M.Val
                            (axum.extract.state.State.t
                              assistants_api_communication.models.AppState.t) :=
                        M.copy __arg1 in
                      match_operator
                        __arg1
                        [
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | axum.extract.state.State.Build_t _ =>
                              let γ0_0 := axum.extract.state.State.Get_0 γ in
                              let* app_state := M.copy γ0_0 in
                              let* α0 : _ -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.future.into_future.IntoFuture.into_future
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 :
                                  (ref
                                      (alloc.sync.Arc.t
                                        assistants_core.file_storage.FileStorage.t
                                        alloc.alloc.Global.t))
                                    ->
                                    M (ref _) :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.ops.deref.Deref.deref
                                    (Self :=
                                      alloc.sync.Arc.t
                                        assistants_core.file_storage.FileStorage.t
                                        alloc.alloc.Global.t)
                                    (Trait := ℐ))) in
                              let* α2 :
                                  ref
                                    assistants_core.file_storage.FileStorage.t :=
                                M.call
                                  (α1
                                    (borrow
                                      (assistants_api_communication.models.AppState.Get_file_storage
                                        app_state))) in
                              let* α3 :
                                  (ref alloc.string.String.t) -> M (ref _) :=
                                ltac:(M.get_method (fun ℐ =>
                                  core.ops.deref.Deref.deref
                                    (Self := alloc.string.String.t)
                                    (Trait := ℐ))) in
                              let* α4 : ref str.t :=
                                M.call (α3 (borrow file_id)) in
                              let* α5 : _ :=
                                M.call
                                  (assistants_core.file_storage.FileStorage.t::["retrieve_file"]
                                    α2
                                    α4) in
                              let* α6 : _ := M.call (α0 α5) in
                              let* α7 : M.Val _ := M.alloc α6 in
                              let* α8 :
                                  M.Val
                                    (core.result.Result.t
                                      bytes.bytes.Bytes.t
                                      (alloc.boxed.Box.t
                                        (dyn [core.error.Error.Trait])
                                        alloc.alloc.Global.t)) :=
                                match_operator
                                  α7
                                  [
                                    fun γ =>
                                      (let* __awaitee := M.copy γ in
                                      M.loop
                                        (let* _ : M.Val unit :=
                                          let* α0 :
                                              (core.pin.Pin.t (mut_ref _)) ->
                                                (mut_ref
                                                  core.task.wake.Context.t)
                                                ->
                                                M (core.task.poll.Poll.t _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.future.future.Future.poll
                                                (Self := _)
                                                (Trait := ℐ))) in
                                          let* α1 :
                                              core.pin.Pin.t (mut_ref _) :=
                                            M.call
                                              ((core.pin.Pin.t
                                                    (mut_ref
                                                      _))::["new_unchecked"]
                                                (borrow_mut __awaitee)) in
                                          let* α2 : core.future.ResumeTy.t :=
                                            M.read _task_context in
                                          let* α3 :
                                              mut_ref
                                                core.task.wake.Context.t :=
                                            M.call
                                              (core.future.get_context α2) in
                                          let* α4 :
                                              core.task.poll.Poll.t
                                                (core.result.Result.t
                                                  bytes.bytes.Bytes.t
                                                  (alloc.boxed.Box.t
                                                    (dyn
                                                      [core.error.Error.Trait])
                                                    alloc.alloc.Global.t)) :=
                                            M.call (α0 α1 α3) in
                                          let* α5 :
                                              M.Val
                                                (core.task.poll.Poll.t
                                                  (core.result.Result.t
                                                    bytes.bytes.Bytes.t
                                                    (alloc.boxed.Box.t
                                                      (dyn
                                                        [core.error.Error.Trait])
                                                      alloc.alloc.Global.t))) :=
                                            M.alloc α4 in
                                          match_operator
                                            α5
                                            [
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.task.poll.Poll.Ready _ =>
                                                  let γ0_0 :=
                                                    core.task.poll.Poll.Get_Ready_0
                                                      γ in
                                                  let* result := M.copy γ0_0 in
                                                  let* α0 : M.Val never.t :=
                                                    M.break in
                                                  let* α1 := M.read α0 in
                                                  let* α2 : unit :=
                                                    never_to_any α1 in
                                                  M.alloc α2
                                                | _ => M.break_match
                                                end) :
                                                M (M.Val unit);
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.task.poll.Poll.Pending =>
                                                  M.alloc tt
                                                | _ => M.break_match
                                                end) :
                                                M (M.Val unit)
                                            ] in
                                        let* _ : M.Val unit :=
                                          let* α0 : M.Val unit := M.alloc tt in
                                          let* α1 :
                                              M.Val core.future.ResumeTy.t :=
                                            yield α0 in
                                          let* α2 : core.future.ResumeTy.t :=
                                            M.read α1 in
                                          assign _task_context α2 in
                                        M.alloc tt)) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            bytes.bytes.Bytes.t
                                            (alloc.boxed.Box.t
                                              (dyn [core.error.Error.Trait])
                                              alloc.alloc.Global.t)))
                                  ] in
                              let* α9 :
                                  M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.file.OpenAIFile.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)) :=
                                match_operator
                                  α8
                                  [
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | core.result.Result.Ok _ =>
                                        let γ0_0 :=
                                          core.result.Result.Get_Ok_0 γ in
                                        let* file := M.copy γ0_0 in
                                        let* α0 : alloc.string.String.t :=
                                          M.read file_id in
                                        let* α1 :
                                            (ref str.t) ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            alloc.string.ToString.to_string
                                              (Self := str.t)
                                              (Trait := ℐ))) in
                                        let* α2 : ref str.t :=
                                          M.read (mk_str "object") in
                                        let* α3 : alloc.string.String.t :=
                                          M.call (α1 α2) in
                                        let* α4 : usize.t :=
                                          M.call
                                            (bytes.bytes.Bytes.t::["len"]
                                              (borrow file)) in
                                        let* α5 :
                                            (ref str.t) ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            alloc.string.ToString.to_string
                                              (Self := str.t)
                                              (Trait := ℐ))) in
                                        let* α6 : ref str.t :=
                                          M.read (mk_str "unknown") in
                                        let* α7 : alloc.string.String.t :=
                                          M.call (α5 α6) in
                                        let* α8 :
                                            (ref str.t) ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            alloc.string.ToString.to_string
                                              (Self := str.t)
                                              (Trait := ℐ))) in
                                        let* α9 : ref str.t :=
                                          M.read (mk_str "unknown") in
                                        let* α10 : alloc.string.String.t :=
                                          M.call (α8 α9) in
                                        let* α11 :
                                            (ref str.t) ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            alloc.string.ToString.to_string
                                              (Self := str.t)
                                              (Trait := ℐ))) in
                                        let* α12 : ref str.t :=
                                          M.read (mk_str "unknown") in
                                        let* α13 : alloc.string.String.t :=
                                          M.call (α11 α12) in
                                        M.alloc
                                          (core.result.Result.Ok
                                            (axum.json.Json.Build_t
                                              {|
                                                async_openai.types.file.OpenAIFile.id :=
                                                  α0;
                                                async_openai.types.file.OpenAIFile.object :=
                                                  α3;
                                                async_openai.types.file.OpenAIFile.bytes :=
                                                  rust_cast α4;
                                                async_openai.types.file.OpenAIFile.created_at :=
                                                  (Integer.of_Z 0) : u32.t;
                                                async_openai.types.file.OpenAIFile.filename :=
                                                  α7;
                                                async_openai.types.file.OpenAIFile.purpose :=
                                                  async_openai.types.file.OpenAIFilePurpose.Assistants;
                                                async_openai.types.file.OpenAIFile.status :=
                                                  core.option.Option.Some α10;
                                                async_openai.types.file.OpenAIFile.status_details :=
                                                  core.option.Option.Some α13;
                                              |}))
                                      | _ => M.break_match
                                      end) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (axum.json.Json.t
                                              async_openai.types.file.OpenAIFile.t)
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t)));
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | core.result.Result.Err _ =>
                                        let γ0_0 :=
                                          core.result.Result.Get_Err_0 γ in
                                        let* e := M.copy γ0_0 in
                                        let* _ : M.Val unit :=
                                          let* lvl : M.Val log.Level.t :=
                                            M.alloc log.Level.Error in
                                          let* α0 :
                                              (ref log.Level.t) ->
                                                (ref log.LevelFilter.t) ->
                                                M bool.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.cmp.PartialOrd.le
                                                (Self := log.Level.t)
                                                (Rhs := log.LevelFilter.t)
                                                (Trait := ℐ))) in
                                          let* α1 : bool.t :=
                                            M.call
                                              (α0
                                                (borrow lvl)
                                                (borrow
                                                  log.STATIC_MAX_LEVEL)) in
                                          let* α2 :
                                              (ref log.Level.t) ->
                                                (ref log.LevelFilter.t) ->
                                                M bool.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.cmp.PartialOrd.le
                                                (Self := log.Level.t)
                                                (Rhs := log.LevelFilter.t)
                                                (Trait := ℐ))) in
                                          let* α3 : log.LevelFilter.t :=
                                            M.call log.max_level in
                                          let* α4 : M.Val log.LevelFilter.t :=
                                            M.alloc α3 in
                                          let* α5 : bool.t :=
                                            M.call
                                              (α2 (borrow lvl) (borrow α4)) in
                                          let* α6 : M.Val bool.t :=
                                            M.alloc (BinOp.Pure.and α1 α5) in
                                          let* α7 : bool.t := M.read (use α6) in
                                          if α7 then
                                            let* _ : M.Val unit :=
                                              let* α0 : ref str.t :=
                                                M.read
                                                  (mk_str
                                                    "Failed to retrieve file: ") in
                                              let* α1 :
                                                  M.Val (array (ref str.t)) :=
                                                M.alloc [ α0 ] in
                                              let* α2 :
                                                  core.fmt.rt.Argument.t :=
                                                M.call
                                                  (core.fmt.rt.Argument.t::["new_debug"]
                                                    (borrow e)) in
                                              let* α3 :
                                                  M.Val
                                                    (array
                                                      core.fmt.rt.Argument.t) :=
                                                M.alloc [ α2 ] in
                                              let* α4 : core.fmt.Arguments.t :=
                                                M.call
                                                  (core.fmt.Arguments.t::["new_v1"]
                                                    (pointer_coercion
                                                      "Unsize"
                                                      (borrow α1))
                                                    (pointer_coercion
                                                      "Unsize"
                                                      (borrow α3))) in
                                              let* α5 : log.Level.t :=
                                                M.read lvl in
                                              let* α6 : ref str.t :=
                                                M.read
                                                  (mk_str
                                                    "assistants_api_communication::files") in
                                              let* α7 : ref str.t :=
                                                M.read
                                                  (mk_str
                                                    "assistants_api_communication::files") in
                                              let* α8 : ref str.t :=
                                                M.read
                                                  (mk_str
                                                    "assistants-api-communication/src/files.rs") in
                                              let* α9 :
                                                  M.Val
                                                    (((ref str.t) * (ref str.t))
                                                    *
                                                    (ref str.t)) :=
                                                M.alloc (α6, α7, α8) in
                                              let* α10 : unit :=
                                                M.call
                                                  (log.__private_api.log
                                                    α4
                                                    α5
                                                    (borrow α9)
                                                    ((Integer.of_Z 31) : u32.t)
                                                    core.option.Option.None) in
                                              M.alloc α10 in
                                            M.alloc tt
                                          else
                                            M.alloc tt in
                                        let* α0 : http.status.StatusCode.t :=
                                          M.read
                                            http.status.INTERNAL_SERVER_ERROR in
                                        let* α1 :
                                            (ref str.t) ->
                                              M alloc.string.String.t :=
                                          ltac:(M.get_method (fun ℐ =>
                                            alloc.string.ToString.to_string
                                              (Self := str.t)
                                              (Trait := ℐ))) in
                                        let* α2 : ref str.t :=
                                          M.read
                                            (mk_str
                                              "Failed to retrieve file") in
                                        let* α3 : alloc.string.String.t :=
                                          M.call (α1 α2) in
                                        M.alloc
                                          (core.result.Result.Err (α0, α3))
                                      | _ => M.break_match
                                      end) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (axum.json.Json.t
                                              async_openai.types.file.OpenAIFile.t)
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t)))
                                  ] in
                              M.pure (use α9)
                            end) :
                            M
                              (M.Val
                                (core.result.Result.t
                                  (axum.json.Json.t
                                    async_openai.types.file.OpenAIFile.t)
                                  (http.status.StatusCode.t
                                  *
                                  alloc.string.String.t)))
                        ]
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.file.OpenAIFile.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t async_openai.types.file.OpenAIFile.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.file.OpenAIFile.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn upload_file_handler(
    State(app_state): State<AppState>,
    mut multipart: Multipart,
) -> Result<JsonResponse<OpenAIFile>, (StatusCode, String)> {
    let mut file_data = Vec::new();
    let mut purpose = String::new();
    let mut content_type = String::new();

    while let Some(mut field) = multipart.next_field().await.unwrap() {
        let name = field.name().unwrap().to_string();

        if name == "file" {
            content_type = field.content_type().unwrap_or("text/plain").to_string();
            while let Some(chunk) = field.chunk().await.unwrap() {
                file_data.extend_from_slice(&chunk);
            }
        } else if name == "purpose" {
            purpose = String::from_utf8(field.bytes().await.unwrap().to_vec()).unwrap();
        }
    }

    if file_data.is_empty() || purpose.is_empty() {
        return Err((
            StatusCode::BAD_REQUEST,
            "Missing file or purpose".to_string(),
        ));
    }

    // Create a temporary file with the same content type
    let mut temp_file = tempfile::Builder::new()
        .suffix(&format!(
            ".{}",
            content_type.split("/").collect::<Vec<&str>>()[1]
        ))
        .tempfile()
        .unwrap();

    // Write the file data to the temporary file
    temp_file.write_all(&file_data).unwrap();

    // Get the path of the temporary file.
    let temp_file_path = temp_file.path();

    // Upload the file.
    info!("Uploading file: {:?}", temp_file_path);
    let file_id = app_state
        .file_storage
        .upload_file(&temp_file_path)
        .await
        .unwrap();
    info!("Uploaded file: {:?}", file_id);

    // Inside upload_file_handler function, after writing the file data to the temporary file
    if content_type.starts_with("text/") {
        let file_data_str = String::from_utf8(file_data.clone()).unwrap();
        split_and_insert(
            &app_state.pool,
            &file_data_str,
            100, // TODO
            &file_id,
            None,
        )
        .await
        .unwrap();
    }

    Ok(JsonResponse(OpenAIFile {
        id: file_id,
        object: "object".to_string(),
        bytes: file_data.len() as u32,
        created_at: 0,
        filename: "unknown".to_string(), // TODO
        purpose: OpenAIFilePurpose::Assistants,
        status: Some("success".to_string()),
        status_details: Some("unknown".to_string()),
    }))
}
*)
Definition upload_file_handler
    (__arg0
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    (multipart : axum.extract.multipart.Multipart.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* multipart := M.alloc multipart in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val
                  (axum.extract.state.State.t
                    assistants_api_communication.models.AppState.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t async_openai.types.file.OpenAIFile.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.state.State.Build_t _ =>
                      let γ0_0 := axum.extract.state.State.Get_0 γ in
                      let* app_state := M.copy γ0_0 in
                      let* multipart :
                          M.Val axum.extract.multipart.Multipart.t :=
                        M.copy multipart in
                      let* file_data :
                          M.Val (alloc.vec.Vec.t u8.t alloc.alloc.Global.t) :=
                        let* α0 : alloc.vec.Vec.t u8.t alloc.alloc.Global.t :=
                          M.call
                            (alloc.vec.Vec.t
                                u8.t
                                alloc.alloc.Global.t)::["new"] in
                        M.alloc α0 in
                      let* purpose : M.Val alloc.string.String.t :=
                        let* α0 : alloc.string.String.t :=
                          M.call alloc.string.String.t::["new"] in
                        M.alloc α0 in
                      let* content_type : M.Val alloc.string.String.t :=
                        let* α0 : alloc.string.String.t :=
                          M.call alloc.string.String.t::["new"] in
                        M.alloc α0 in
                      let* _ : M.Val unit :=
                        M.loop
                          (let* α0 : _ -> M _ :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.into_future.IntoFuture.into_future
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 : _ :=
                            M.call
                              (axum.extract.multipart.Multipart.t::["next_field"]
                                (borrow_mut multipart)) in
                          let* α2 : _ := M.call (α0 α1) in
                          let* α3 : M.Val _ := M.alloc α2 in
                          let* α4 :
                              M.Val
                                (core.result.Result.t
                                  (core.option.Option.t
                                    axum.extract.multipart.Field.t)
                                  axum.extract.multipart.MultipartError.t) :=
                            match_operator
                              α3
                              [
                                fun γ =>
                                  (let* __awaitee := M.copy γ in
                                  M.loop
                                    (let* _ : M.Val unit :=
                                      let* α0 :
                                          (core.pin.Pin.t (mut_ref _)) ->
                                            (mut_ref core.task.wake.Context.t)
                                            ->
                                            M (core.task.poll.Poll.t _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.future.future.Future.poll
                                            (Self := _)
                                            (Trait := ℐ))) in
                                      let* α1 : core.pin.Pin.t (mut_ref _) :=
                                        M.call
                                          ((core.pin.Pin.t
                                                (mut_ref _))::["new_unchecked"]
                                            (borrow_mut __awaitee)) in
                                      let* α2 : core.future.ResumeTy.t :=
                                        M.read _task_context in
                                      let* α3 :
                                          mut_ref core.task.wake.Context.t :=
                                        M.call (core.future.get_context α2) in
                                      let* α4 :
                                          core.task.poll.Poll.t
                                            (core.result.Result.t
                                              (core.option.Option.t
                                                axum.extract.multipart.Field.t)
                                              axum.extract.multipart.MultipartError.t) :=
                                        M.call (α0 α1 α3) in
                                      let* α5 :
                                          M.Val
                                            (core.task.poll.Poll.t
                                              (core.result.Result.t
                                                (core.option.Option.t
                                                  axum.extract.multipart.Field.t)
                                                axum.extract.multipart.MultipartError.t)) :=
                                        M.alloc α4 in
                                      match_operator
                                        α5
                                        [
                                          fun γ =>
                                            (let* α0 := M.read γ in
                                            match α0 with
                                            | core.task.poll.Poll.Ready _ =>
                                              let γ0_0 :=
                                                core.task.poll.Poll.Get_Ready_0
                                                  γ in
                                              let* result := M.copy γ0_0 in
                                              let* α0 : M.Val never.t :=
                                                M.break in
                                              let* α1 := M.read α0 in
                                              let* α2 : unit :=
                                                never_to_any α1 in
                                              M.alloc α2
                                            | _ => M.break_match
                                            end) :
                                            M (M.Val unit);
                                          fun γ =>
                                            (let* α0 := M.read γ in
                                            match α0 with
                                            | core.task.poll.Poll.Pending =>
                                              M.alloc tt
                                            | _ => M.break_match
                                            end) :
                                            M (M.Val unit)
                                        ] in
                                    let* _ : M.Val unit :=
                                      let* α0 : M.Val unit := M.alloc tt in
                                      let* α1 : M.Val core.future.ResumeTy.t :=
                                        yield α0 in
                                      let* α2 : core.future.ResumeTy.t :=
                                        M.read α1 in
                                      assign _task_context α2 in
                                    M.alloc tt)) :
                                  M
                                    (M.Val
                                      (core.result.Result.t
                                        (core.option.Option.t
                                          axum.extract.multipart.Field.t)
                                        axum.extract.multipart.MultipartError.t))
                              ] in
                          let* α5 :
                              core.result.Result.t
                                (core.option.Option.t
                                  axum.extract.multipart.Field.t)
                                axum.extract.multipart.MultipartError.t :=
                            M.read α4 in
                          let* α6 :
                              core.option.Option.t
                                axum.extract.multipart.Field.t :=
                            M.call
                              ((core.result.Result.t
                                    (core.option.Option.t
                                      axum.extract.multipart.Field.t)
                                    axum.extract.multipart.MultipartError.t)::["unwrap"]
                                α5) in
                          let* α7 :
                              M.Val
                                (core.option.Option.t
                                  axum.extract.multipart.Field.t) :=
                            M.alloc α6 in
                          match_operator
                            α7
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.option.Option.Some _ =>
                                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                                  let* field := M.copy γ0_0 in
                                  let* name : M.Val alloc.string.String.t :=
                                    let* α0 :
                                        (ref str.t) ->
                                          M alloc.string.String.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        alloc.string.ToString.to_string
                                          (Self := str.t)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        core.option.Option.t (ref str.t) :=
                                      M.call
                                        (axum.extract.multipart.Field.t::["name"]
                                          (borrow field)) in
                                    let* α2 : ref str.t :=
                                      M.call
                                        ((core.option.Option.t
                                              (ref str.t))::["unwrap"]
                                          α1) in
                                    let* α3 : alloc.string.String.t :=
                                      M.call (α0 α2) in
                                    M.alloc α3 in
                                  let* α0 :
                                      (ref alloc.string.String.t) ->
                                        (ref (ref str.t)) ->
                                        M bool.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.cmp.PartialEq.eq
                                        (Self := alloc.string.String.t)
                                        (Rhs := ref str.t)
                                        (Trait := ℐ))) in
                                  let* α1 : bool.t :=
                                    M.call
                                      (α0
                                        (borrow name)
                                        (borrow (mk_str "file"))) in
                                  let* α2 : M.Val bool.t := M.alloc α1 in
                                  let* α3 : bool.t := M.read (use α2) in
                                  if α3 then
                                    let* _ : M.Val unit :=
                                      let* α0 :
                                          (ref str.t) ->
                                            M alloc.string.String.t :=
                                        ltac:(M.get_method (fun ℐ =>
                                          alloc.string.ToString.to_string
                                            (Self := str.t)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.option.Option.t (ref str.t) :=
                                        M.call
                                          (axum.extract.multipart.Field.t::["content_type"]
                                            (borrow field)) in
                                      let* α2 : ref str.t :=
                                        M.read (mk_str "text/plain") in
                                      let* α3 : ref str.t :=
                                        M.call
                                          ((core.option.Option.t
                                                (ref str.t))::["unwrap_or"]
                                            α1
                                            α2) in
                                      let* α4 : alloc.string.String.t :=
                                        M.call (α0 α3) in
                                      assign content_type α4 in
                                    M.loop
                                      (let* α0 : _ -> M _ :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.future.into_future.IntoFuture.into_future
                                            (Self := _)
                                            (Trait := ℐ))) in
                                      let* α1 : _ :=
                                        M.call
                                          (axum.extract.multipart.Field.t::["chunk"]
                                            (borrow_mut field)) in
                                      let* α2 : _ := M.call (α0 α1) in
                                      let* α3 : M.Val _ := M.alloc α2 in
                                      let* α4 :
                                          M.Val
                                            (core.result.Result.t
                                              (core.option.Option.t
                                                bytes.bytes.Bytes.t)
                                              axum.extract.multipart.MultipartError.t) :=
                                        match_operator
                                          α3
                                          [
                                            fun γ =>
                                              (let* __awaitee := M.copy γ in
                                              M.loop
                                                (let* _ : M.Val unit :=
                                                  let* α0 :
                                                      (core.pin.Pin.t
                                                          (mut_ref _))
                                                        ->
                                                        (mut_ref
                                                          core.task.wake.Context.t)
                                                        ->
                                                        M
                                                          (core.task.poll.Poll.t
                                                            _) :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.future.future.Future.poll
                                                        (Self := _)
                                                        (Trait := ℐ))) in
                                                  let* α1 :
                                                      core.pin.Pin.t
                                                        (mut_ref _) :=
                                                    M.call
                                                      ((core.pin.Pin.t
                                                            (mut_ref
                                                              _))::["new_unchecked"]
                                                        (borrow_mut
                                                          __awaitee)) in
                                                  let* α2 :
                                                      core.future.ResumeTy.t :=
                                                    M.read _task_context in
                                                  let* α3 :
                                                      mut_ref
                                                        core.task.wake.Context.t :=
                                                    M.call
                                                      (core.future.get_context
                                                        α2) in
                                                  let* α4 :
                                                      core.task.poll.Poll.t
                                                        (core.result.Result.t
                                                          (core.option.Option.t
                                                            bytes.bytes.Bytes.t)
                                                          axum.extract.multipart.MultipartError.t) :=
                                                    M.call (α0 α1 α3) in
                                                  let* α5 :
                                                      M.Val
                                                        (core.task.poll.Poll.t
                                                          (core.result.Result.t
                                                            (core.option.Option.t
                                                              bytes.bytes.Bytes.t)
                                                            axum.extract.multipart.MultipartError.t)) :=
                                                    M.alloc α4 in
                                                  match_operator
                                                    α5
                                                    [
                                                      fun γ =>
                                                        (let* α0 := M.read γ in
                                                        match α0 with
                                                        |
                                                            core.task.poll.Poll.Ready
                                                              _
                                                            =>
                                                          let γ0_0 :=
                                                            core.task.poll.Poll.Get_Ready_0
                                                              γ in
                                                          let* result :=
                                                            M.copy γ0_0 in
                                                          let* α0 :
                                                              M.Val never.t :=
                                                            M.break in
                                                          let* α1 :=
                                                            M.read α0 in
                                                          let* α2 : unit :=
                                                            never_to_any α1 in
                                                          M.alloc α2
                                                        | _ => M.break_match
                                                        end) :
                                                        M (M.Val unit);
                                                      fun γ =>
                                                        (let* α0 := M.read γ in
                                                        match α0 with
                                                        |
                                                            core.task.poll.Poll.Pending
                                                            =>
                                                          M.alloc tt
                                                        | _ => M.break_match
                                                        end) :
                                                        M (M.Val unit)
                                                    ] in
                                                let* _ : M.Val unit :=
                                                  let* α0 : M.Val unit :=
                                                    M.alloc tt in
                                                  let* α1 :
                                                      M.Val
                                                        core.future.ResumeTy.t :=
                                                    yield α0 in
                                                  let* α2 :
                                                      core.future.ResumeTy.t :=
                                                    M.read α1 in
                                                  assign _task_context α2 in
                                                M.alloc tt)) :
                                              M
                                                (M.Val
                                                  (core.result.Result.t
                                                    (core.option.Option.t
                                                      bytes.bytes.Bytes.t)
                                                    axum.extract.multipart.MultipartError.t))
                                          ] in
                                      let* α5 :
                                          core.result.Result.t
                                            (core.option.Option.t
                                              bytes.bytes.Bytes.t)
                                            axum.extract.multipart.MultipartError.t :=
                                        M.read α4 in
                                      let* α6 :
                                          core.option.Option.t
                                            bytes.bytes.Bytes.t :=
                                        M.call
                                          ((core.result.Result.t
                                                (core.option.Option.t
                                                  bytes.bytes.Bytes.t)
                                                axum.extract.multipart.MultipartError.t)::["unwrap"]
                                            α5) in
                                      let* α7 :
                                          M.Val
                                            (core.option.Option.t
                                              bytes.bytes.Bytes.t) :=
                                        M.alloc α6 in
                                      match_operator
                                        α7
                                        [
                                          fun γ =>
                                            (let* α0 := M.read γ in
                                            match α0 with
                                            | core.option.Option.Some _ =>
                                              let γ0_0 :=
                                                core.option.Option.Get_Some_0
                                                  γ in
                                              let* chunk := M.copy γ0_0 in
                                              let* _ : M.Val unit :=
                                                let* α0 :
                                                    (ref bytes.bytes.Bytes.t) ->
                                                      M (ref _) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.ops.deref.Deref.deref
                                                      (Self :=
                                                        bytes.bytes.Bytes.t)
                                                      (Trait := ℐ))) in
                                                let* α1 : ref (slice u8.t) :=
                                                  M.call (α0 (borrow chunk)) in
                                                let* α2 : unit :=
                                                  M.call
                                                    ((alloc.vec.Vec.t
                                                          u8.t
                                                          alloc.alloc.Global.t)::["extend_from_slice"]
                                                      (borrow_mut file_data)
                                                      α1) in
                                                M.alloc α2 in
                                              M.alloc tt
                                            | _ => M.break_match
                                            end) :
                                            M (M.Val unit);
                                          fun γ =>
                                            (let* _ : M.Val unit :=
                                              let* α0 : M.Val never.t :=
                                                M.break in
                                              let* α1 := M.read α0 in
                                              let* α2 : unit :=
                                                never_to_any α1 in
                                              M.alloc α2 in
                                            let* α0 : M.Val unit :=
                                              M.alloc tt in
                                            let* α1 := M.read α0 in
                                            let* α2 : unit := never_to_any α1 in
                                            M.alloc α2) :
                                            M (M.Val unit)
                                        ])
                                  else
                                    let* α0 :
                                        (ref alloc.string.String.t) ->
                                          (ref (ref str.t)) ->
                                          M bool.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.cmp.PartialEq.eq
                                          (Self := alloc.string.String.t)
                                          (Rhs := ref str.t)
                                          (Trait := ℐ))) in
                                    let* α1 : bool.t :=
                                      M.call
                                        (α0
                                          (borrow name)
                                          (borrow (mk_str "purpose"))) in
                                    let* α2 : M.Val bool.t := M.alloc α1 in
                                    let* α3 : bool.t := M.read (use α2) in
                                    if α3 then
                                      let* _ : M.Val unit :=
                                        let* α0 :
                                            (ref bytes.bytes.Bytes.t) ->
                                              M (ref _) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.ops.deref.Deref.deref
                                              (Self := bytes.bytes.Bytes.t)
                                              (Trait := ℐ))) in
                                        let* α1 : _ -> M _ :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.future.into_future.IntoFuture.into_future
                                              (Self := _)
                                              (Trait := ℐ))) in
                                        let* α2 :
                                            axum.extract.multipart.Field.t :=
                                          M.read field in
                                        let* α3 : _ :=
                                          M.call
                                            (axum.extract.multipart.Field.t::["bytes"]
                                              α2) in
                                        let* α4 : _ := M.call (α1 α3) in
                                        let* α5 : M.Val _ := M.alloc α4 in
                                        let* α6 :
                                            M.Val
                                              (core.result.Result.t
                                                bytes.bytes.Bytes.t
                                                axum.extract.multipart.MultipartError.t) :=
                                          match_operator
                                            α5
                                            [
                                              fun γ =>
                                                (let* __awaitee := M.copy γ in
                                                M.loop
                                                  (let* _ : M.Val unit :=
                                                    let* α0 :
                                                        (core.pin.Pin.t
                                                            (mut_ref _))
                                                          ->
                                                          (mut_ref
                                                            core.task.wake.Context.t)
                                                          ->
                                                          M
                                                            (core.task.poll.Poll.t
                                                              _) :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.future.future.Future.poll
                                                          (Self := _)
                                                          (Trait := ℐ))) in
                                                    let* α1 :
                                                        core.pin.Pin.t
                                                          (mut_ref _) :=
                                                      M.call
                                                        ((core.pin.Pin.t
                                                              (mut_ref
                                                                _))::["new_unchecked"]
                                                          (borrow_mut
                                                            __awaitee)) in
                                                    let* α2 :
                                                        core.future.ResumeTy.t :=
                                                      M.read _task_context in
                                                    let* α3 :
                                                        mut_ref
                                                          core.task.wake.Context.t :=
                                                      M.call
                                                        (core.future.get_context
                                                          α2) in
                                                    let* α4 :
                                                        core.task.poll.Poll.t
                                                          (core.result.Result.t
                                                            bytes.bytes.Bytes.t
                                                            axum.extract.multipart.MultipartError.t) :=
                                                      M.call (α0 α1 α3) in
                                                    let* α5 :
                                                        M.Val
                                                          (core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              bytes.bytes.Bytes.t
                                                              axum.extract.multipart.MultipartError.t)) :=
                                                      M.alloc α4 in
                                                    match_operator
                                                      α5
                                                      [
                                                        fun γ =>
                                                          (let* α0 :=
                                                            M.read γ in
                                                          match α0 with
                                                          |
                                                              core.task.poll.Poll.Ready
                                                                _
                                                              =>
                                                            let γ0_0 :=
                                                              core.task.poll.Poll.Get_Ready_0
                                                                γ in
                                                            let* result :=
                                                              M.copy γ0_0 in
                                                            let* α0 :
                                                                M.Val never.t :=
                                                              M.break in
                                                            let* α1 :=
                                                              M.read α0 in
                                                            let* α2 : unit :=
                                                              never_to_any α1 in
                                                            M.alloc α2
                                                          | _ => M.break_match
                                                          end) :
                                                          M (M.Val unit);
                                                        fun γ =>
                                                          (let* α0 :=
                                                            M.read γ in
                                                          match α0 with
                                                          |
                                                              core.task.poll.Poll.Pending
                                                              =>
                                                            M.alloc tt
                                                          | _ => M.break_match
                                                          end) :
                                                          M (M.Val unit)
                                                      ] in
                                                  let* _ : M.Val unit :=
                                                    let* α0 : M.Val unit :=
                                                      M.alloc tt in
                                                    let* α1 :
                                                        M.Val
                                                          core.future.ResumeTy.t :=
                                                      yield α0 in
                                                    let* α2 :
                                                        core.future.ResumeTy.t :=
                                                      M.read α1 in
                                                    assign _task_context α2 in
                                                  M.alloc tt)) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      bytes.bytes.Bytes.t
                                                      axum.extract.multipart.MultipartError.t))
                                            ] in
                                        let* α7 :
                                            core.result.Result.t
                                              bytes.bytes.Bytes.t
                                              axum.extract.multipart.MultipartError.t :=
                                          M.read α6 in
                                        let* α8 : bytes.bytes.Bytes.t :=
                                          M.call
                                            ((core.result.Result.t
                                                  bytes.bytes.Bytes.t
                                                  axum.extract.multipart.MultipartError.t)::["unwrap"]
                                              α7) in
                                        let* α9 : M.Val bytes.bytes.Bytes.t :=
                                          M.alloc α8 in
                                        let* α10 : ref (slice u8.t) :=
                                          M.call (α0 (borrow α9)) in
                                        let* α11 :
                                            alloc.vec.Vec.t
                                              u8.t
                                              alloc.alloc.Global.t :=
                                          M.call
                                            ((slice u8.t)::["to_vec"] α10) in
                                        let* α12 :
                                            core.result.Result.t
                                              alloc.string.String.t
                                              alloc.string.FromUtf8Error.t :=
                                          M.call
                                            (alloc.string.String.t::["from_utf8"]
                                              α11) in
                                        let* α13 : alloc.string.String.t :=
                                          M.call
                                            ((core.result.Result.t
                                                  alloc.string.String.t
                                                  alloc.string.FromUtf8Error.t)::["unwrap"]
                                              α12) in
                                        assign purpose α13 in
                                      M.alloc tt
                                    else
                                      M.alloc tt
                                | _ => M.break_match
                                end) :
                                M (M.Val unit);
                              fun γ =>
                                (let* _ : M.Val unit :=
                                  let* α0 : M.Val never.t := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2 in
                                let* α0 : M.Val unit := M.alloc tt in
                                let* α1 := M.read α0 in
                                let* α2 : unit := never_to_any α1 in
                                M.alloc α2) :
                                M (M.Val unit)
                            ]) in
                      let* _ : M.Val unit :=
                        let* α0 : bool.t :=
                          M.call
                            ((alloc.vec.Vec.t
                                  u8.t
                                  alloc.alloc.Global.t)::["is_empty"]
                              (borrow file_data)) in
                        let* α1 : bool.t :=
                          M.call
                            (alloc.string.String.t::["is_empty"]
                              (borrow purpose)) in
                        let* α2 : M.Val bool.t :=
                          M.alloc (BinOp.Pure.or α0 α1) in
                        let* α3 : bool.t := M.read (use α2) in
                        if α3 then
                          let* α0 : http.status.StatusCode.t :=
                            M.read http.status.BAD_REQUEST in
                          let* α1 : (ref str.t) -> M alloc.string.String.t :=
                            ltac:(M.get_method (fun ℐ =>
                              alloc.string.ToString.to_string
                                (Self := str.t)
                                (Trait := ℐ))) in
                          let* α2 : ref str.t :=
                            M.read (mk_str "Missing file or purpose") in
                          let* α3 : alloc.string.String.t := M.call (α1 α2) in
                          let* α4 : M.Val never.t :=
                            return_ (core.result.Result.Err (α0, α3)) in
                          let* α5 := M.read α4 in
                          let* α6 : unit := never_to_any α5 in
                          M.alloc α6
                        else
                          M.alloc tt in
                      let* temp_file :
                          M.Val (tempfile.file.NamedTempFile.t std.fs.File.t) :=
                        let* α0 : tempfile.Builder.t :=
                          M.call tempfile.Builder.t::["new"] in
                        let* α1 : M.Val tempfile.Builder.t := M.alloc α0 in
                        let* res : M.Val alloc.string.String.t :=
                          let* α0 : ref str.t := M.read (mk_str ".") in
                          let* α1 : M.Val (array (ref str.t)) :=
                            M.alloc [ α0 ] in
                          let* α2 :
                              (ref
                                  (alloc.vec.Vec.t
                                    (ref str.t)
                                    alloc.alloc.Global.t))
                                ->
                                usize.t ->
                                M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.index.Index.index
                                (Self :=
                                  alloc.vec.Vec.t
                                    (ref str.t)
                                    alloc.alloc.Global.t)
                                (Idx := usize.t)
                                (Trait := ℐ))) in
                          let* α3 :
                              (core.str.iter.Split.t (ref str.t)) ->
                                M
                                  (alloc.vec.Vec.t
                                    (ref str.t)
                                    alloc.alloc.Global.t) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.iter.traits.iterator.Iterator.collect
                                (Self := core.str.iter.Split.t (ref str.t))
                                (B :=
                                  alloc.vec.Vec.t
                                    (ref str.t)
                                    alloc.alloc.Global.t)
                                (Trait := ℐ))) in
                          let* α4 : (ref alloc.string.String.t) -> M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.deref.Deref.deref
                                (Self := alloc.string.String.t)
                                (Trait := ℐ))) in
                          let* α5 : ref str.t :=
                            M.call (α4 (borrow content_type)) in
                          let* α6 : ref str.t := M.read (mk_str "/") in
                          let* α7 : core.str.iter.Split.t (ref str.t) :=
                            M.call (str.t::["split"] α5 α6) in
                          let* α8 :
                              alloc.vec.Vec.t
                                (ref str.t)
                                alloc.alloc.Global.t :=
                            M.call (α3 α7) in
                          let* α9 :
                              M.Val
                                (alloc.vec.Vec.t
                                  (ref str.t)
                                  alloc.alloc.Global.t) :=
                            M.alloc α8 in
                          let* α10 : ref (ref str.t) :=
                            M.call
                              (α2 (borrow α9) ((Integer.of_Z 1) : usize.t)) in
                          let* α11 : core.fmt.rt.Argument.t :=
                            M.call
                              (core.fmt.rt.Argument.t::["new_display"] α10) in
                          let* α12 : M.Val (array core.fmt.rt.Argument.t) :=
                            M.alloc [ α11 ] in
                          let* α13 : core.fmt.Arguments.t :=
                            M.call
                              (core.fmt.Arguments.t::["new_v1"]
                                (pointer_coercion "Unsize" (borrow α1))
                                (pointer_coercion "Unsize" (borrow α12))) in
                          let* α14 : alloc.string.String.t :=
                            M.call (alloc.fmt.format α13) in
                          M.alloc α14 in
                        let* α2 : mut_ref tempfile.Builder.t :=
                          M.call
                            (tempfile.Builder.t::["suffix"]
                              (borrow_mut α1)
                              (borrow res)) in
                        let* α3 :
                            core.result.Result.t
                              (tempfile.file.NamedTempFile.t std.fs.File.t)
                              std.io.error.Error.t :=
                          M.call
                            (tempfile.Builder.t::["tempfile"]
                              (borrow (deref α2))) in
                        let* α4 : tempfile.file.NamedTempFile.t std.fs.File.t :=
                          M.call
                            ((core.result.Result.t
                                  (tempfile.file.NamedTempFile.t std.fs.File.t)
                                  std.io.error.Error.t)::["unwrap"]
                              α3) in
                        M.alloc α4 in
                      let* _ : M.Val unit :=
                        let* α0 :
                            (mut_ref
                                (tempfile.file.NamedTempFile.t std.fs.File.t))
                              ->
                              (ref (slice u8.t)) ->
                              M
                                (core.result.Result.t
                                  unit
                                  std.io.error.Error.t) :=
                          ltac:(M.get_method (fun ℐ =>
                            std.io.Write.write_all
                              (Self :=
                                tempfile.file.NamedTempFile.t std.fs.File.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            (ref (alloc.vec.Vec.t u8.t alloc.alloc.Global.t)) ->
                              M (ref _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.deref.Deref.deref
                              (Self :=
                                alloc.vec.Vec.t u8.t alloc.alloc.Global.t)
                              (Trait := ℐ))) in
                        let* α2 : ref (slice u8.t) :=
                          M.call (α1 (borrow file_data)) in
                        let* α3 :
                            core.result.Result.t unit std.io.error.Error.t :=
                          M.call (α0 (borrow_mut temp_file) α2) in
                        let* α4 : unit :=
                          M.call
                            ((core.result.Result.t
                                  unit
                                  std.io.error.Error.t)::["unwrap"]
                              α3) in
                        M.alloc α4 in
                      let* temp_file_path : M.Val (ref std.path.Path.t) :=
                        let* α0 : ref std.path.Path.t :=
                          M.call
                            ((tempfile.file.NamedTempFile.t
                                  std.fs.File.t)::["path"]
                              (borrow temp_file)) in
                        M.alloc α0 in
                      let* _ : M.Val unit :=
                        let* lvl : M.Val log.Level.t :=
                          M.alloc log.Level.Info in
                        let* α0 :
                            (ref log.Level.t) ->
                              (ref log.LevelFilter.t) ->
                              M bool.t :=
                          ltac:(M.get_method (fun ℐ =>
                            core.cmp.PartialOrd.le
                              (Self := log.Level.t)
                              (Rhs := log.LevelFilter.t)
                              (Trait := ℐ))) in
                        let* α1 : bool.t :=
                          M.call
                            (α0 (borrow lvl) (borrow log.STATIC_MAX_LEVEL)) in
                        let* α2 :
                            (ref log.Level.t) ->
                              (ref log.LevelFilter.t) ->
                              M bool.t :=
                          ltac:(M.get_method (fun ℐ =>
                            core.cmp.PartialOrd.le
                              (Self := log.Level.t)
                              (Rhs := log.LevelFilter.t)
                              (Trait := ℐ))) in
                        let* α3 : log.LevelFilter.t := M.call log.max_level in
                        let* α4 : M.Val log.LevelFilter.t := M.alloc α3 in
                        let* α5 : bool.t :=
                          M.call (α2 (borrow lvl) (borrow α4)) in
                        let* α6 : M.Val bool.t :=
                          M.alloc (BinOp.Pure.and α1 α5) in
                        let* α7 : bool.t := M.read (use α6) in
                        if α7 then
                          let* _ : M.Val unit :=
                            let* α0 : ref str.t :=
                              M.read (mk_str "Uploading file: ") in
                            let* α1 : M.Val (array (ref str.t)) :=
                              M.alloc [ α0 ] in
                            let* α2 : core.fmt.rt.Argument.t :=
                              M.call
                                (core.fmt.rt.Argument.t::["new_debug"]
                                  (borrow temp_file_path)) in
                            let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                              M.alloc [ α2 ] in
                            let* α4 : core.fmt.Arguments.t :=
                              M.call
                                (core.fmt.Arguments.t::["new_v1"]
                                  (pointer_coercion "Unsize" (borrow α1))
                                  (pointer_coercion "Unsize" (borrow α3))) in
                            let* α5 : log.Level.t := M.read lvl in
                            let* α6 : ref str.t :=
                              M.read
                                (mk_str
                                  "assistants_api_communication::files") in
                            let* α7 : ref str.t :=
                              M.read
                                (mk_str
                                  "assistants_api_communication::files") in
                            let* α8 : ref str.t :=
                              M.read
                                (mk_str
                                  "assistants-api-communication/src/files.rs") in
                            let* α9 :
                                M.Val
                                  (((ref str.t) * (ref str.t)) * (ref str.t)) :=
                              M.alloc (α6, α7, α8) in
                            let* α10 : unit :=
                              M.call
                                (log.__private_api.log
                                  α4
                                  α5
                                  (borrow α9)
                                  ((Integer.of_Z 84) : u32.t)
                                  core.option.Option.None) in
                            M.alloc α10 in
                          M.alloc tt
                        else
                          M.alloc tt in
                      let* file_id : M.Val alloc.string.String.t :=
                        let* α0 : _ -> M _ :=
                          ltac:(M.get_method (fun ℐ =>
                            core.future.into_future.IntoFuture.into_future
                              (Self := _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (ref
                                (alloc.sync.Arc.t
                                  assistants_core.file_storage.FileStorage.t
                                  alloc.alloc.Global.t))
                              ->
                              M (ref _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.deref.Deref.deref
                              (Self :=
                                alloc.sync.Arc.t
                                  assistants_core.file_storage.FileStorage.t
                                  alloc.alloc.Global.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            ref assistants_core.file_storage.FileStorage.t :=
                          M.call
                            (α1
                              (borrow
                                (assistants_api_communication.models.AppState.Get_file_storage
                                  app_state))) in
                        let* α3 : ref std.path.Path.t :=
                          M.read temp_file_path in
                        let* α4 : _ :=
                          M.call
                            (assistants_core.file_storage.FileStorage.t::["upload_file"]
                              α2
                              α3) in
                        let* α5 : _ := M.call (α0 α4) in
                        let* α6 : M.Val _ := M.alloc α5 in
                        let* α7 :
                            M.Val
                              (core.result.Result.t
                                alloc.string.String.t
                                (alloc.boxed.Box.t
                                  (dyn [core.error.Error.Trait])
                                  alloc.alloc.Global.t)) :=
                          match_operator
                            α6
                            [
                              fun γ =>
                                (let* __awaitee := M.copy γ in
                                M.loop
                                  (let* _ : M.Val unit :=
                                    let* α0 :
                                        (core.pin.Pin.t (mut_ref _)) ->
                                          (mut_ref core.task.wake.Context.t) ->
                                          M (core.task.poll.Poll.t _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.future.future.Future.poll
                                          (Self := _)
                                          (Trait := ℐ))) in
                                    let* α1 : core.pin.Pin.t (mut_ref _) :=
                                      M.call
                                        ((core.pin.Pin.t
                                              (mut_ref _))::["new_unchecked"]
                                          (borrow_mut __awaitee)) in
                                    let* α2 : core.future.ResumeTy.t :=
                                      M.read _task_context in
                                    let* α3 :
                                        mut_ref core.task.wake.Context.t :=
                                      M.call (core.future.get_context α2) in
                                    let* α4 :
                                        core.task.poll.Poll.t
                                          (core.result.Result.t
                                            alloc.string.String.t
                                            (alloc.boxed.Box.t
                                              (dyn [core.error.Error.Trait])
                                              alloc.alloc.Global.t)) :=
                                      M.call (α0 α1 α3) in
                                    let* α5 :
                                        M.Val
                                          (core.task.poll.Poll.t
                                            (core.result.Result.t
                                              alloc.string.String.t
                                              (alloc.boxed.Box.t
                                                (dyn [core.error.Error.Trait])
                                                alloc.alloc.Global.t))) :=
                                      M.alloc α4 in
                                    match_operator
                                      α5
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.task.poll.Poll.Ready _ =>
                                            let γ0_0 :=
                                              core.task.poll.Poll.Get_Ready_0
                                                γ in
                                            let* result := M.copy γ0_0 in
                                            let* α0 : M.Val never.t :=
                                              M.break in
                                            let* α1 := M.read α0 in
                                            let* α2 : unit := never_to_any α1 in
                                            M.alloc α2
                                          | _ => M.break_match
                                          end) :
                                          M (M.Val unit);
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.task.poll.Poll.Pending =>
                                            M.alloc tt
                                          | _ => M.break_match
                                          end) :
                                          M (M.Val unit)
                                      ] in
                                  let* _ : M.Val unit :=
                                    let* α0 : M.Val unit := M.alloc tt in
                                    let* α1 : M.Val core.future.ResumeTy.t :=
                                      yield α0 in
                                    let* α2 : core.future.ResumeTy.t :=
                                      M.read α1 in
                                    assign _task_context α2 in
                                  M.alloc tt)) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      (alloc.boxed.Box.t
                                        (dyn [core.error.Error.Trait])
                                        alloc.alloc.Global.t)))
                            ] in
                        let* α8 :
                            core.result.Result.t
                              alloc.string.String.t
                              (alloc.boxed.Box.t
                                (dyn [core.error.Error.Trait])
                                alloc.alloc.Global.t) :=
                          M.read α7 in
                        let* α9 : alloc.string.String.t :=
                          M.call
                            ((core.result.Result.t
                                  alloc.string.String.t
                                  (alloc.boxed.Box.t
                                    (dyn [core.error.Error.Trait])
                                    alloc.alloc.Global.t))::["unwrap"]
                              α8) in
                        M.alloc α9 in
                      let* _ : M.Val unit :=
                        let* lvl : M.Val log.Level.t :=
                          M.alloc log.Level.Info in
                        let* α0 :
                            (ref log.Level.t) ->
                              (ref log.LevelFilter.t) ->
                              M bool.t :=
                          ltac:(M.get_method (fun ℐ =>
                            core.cmp.PartialOrd.le
                              (Self := log.Level.t)
                              (Rhs := log.LevelFilter.t)
                              (Trait := ℐ))) in
                        let* α1 : bool.t :=
                          M.call
                            (α0 (borrow lvl) (borrow log.STATIC_MAX_LEVEL)) in
                        let* α2 :
                            (ref log.Level.t) ->
                              (ref log.LevelFilter.t) ->
                              M bool.t :=
                          ltac:(M.get_method (fun ℐ =>
                            core.cmp.PartialOrd.le
                              (Self := log.Level.t)
                              (Rhs := log.LevelFilter.t)
                              (Trait := ℐ))) in
                        let* α3 : log.LevelFilter.t := M.call log.max_level in
                        let* α4 : M.Val log.LevelFilter.t := M.alloc α3 in
                        let* α5 : bool.t :=
                          M.call (α2 (borrow lvl) (borrow α4)) in
                        let* α6 : M.Val bool.t :=
                          M.alloc (BinOp.Pure.and α1 α5) in
                        let* α7 : bool.t := M.read (use α6) in
                        if α7 then
                          let* _ : M.Val unit :=
                            let* α0 : ref str.t :=
                              M.read (mk_str "Uploaded file: ") in
                            let* α1 : M.Val (array (ref str.t)) :=
                              M.alloc [ α0 ] in
                            let* α2 : core.fmt.rt.Argument.t :=
                              M.call
                                (core.fmt.rt.Argument.t::["new_debug"]
                                  (borrow file_id)) in
                            let* α3 : M.Val (array core.fmt.rt.Argument.t) :=
                              M.alloc [ α2 ] in
                            let* α4 : core.fmt.Arguments.t :=
                              M.call
                                (core.fmt.Arguments.t::["new_v1"]
                                  (pointer_coercion "Unsize" (borrow α1))
                                  (pointer_coercion "Unsize" (borrow α3))) in
                            let* α5 : log.Level.t := M.read lvl in
                            let* α6 : ref str.t :=
                              M.read
                                (mk_str
                                  "assistants_api_communication::files") in
                            let* α7 : ref str.t :=
                              M.read
                                (mk_str
                                  "assistants_api_communication::files") in
                            let* α8 : ref str.t :=
                              M.read
                                (mk_str
                                  "assistants-api-communication/src/files.rs") in
                            let* α9 :
                                M.Val
                                  (((ref str.t) * (ref str.t)) * (ref str.t)) :=
                              M.alloc (α6, α7, α8) in
                            let* α10 : unit :=
                              M.call
                                (log.__private_api.log
                                  α4
                                  α5
                                  (borrow α9)
                                  ((Integer.of_Z 90) : u32.t)
                                  core.option.Option.None) in
                            M.alloc α10 in
                          M.alloc tt
                        else
                          M.alloc tt in
                      let* _ : M.Val unit :=
                        let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.deref.Deref.deref
                              (Self := alloc.string.String.t)
                              (Trait := ℐ))) in
                        let* α1 : ref str.t :=
                          M.call (α0 (borrow content_type)) in
                        let* α2 : ref str.t := M.read (mk_str "text/") in
                        let* α3 : bool.t :=
                          M.call (str.t::["starts_with"] α1 α2) in
                        let* α4 : M.Val bool.t := M.alloc α3 in
                        let* α5 : bool.t := M.read (use α4) in
                        if α5 then
                          let* file_data_str : M.Val alloc.string.String.t :=
                            let* α0 :
                                (ref
                                    (alloc.vec.Vec.t u8.t alloc.alloc.Global.t))
                                  ->
                                  M
                                    (alloc.vec.Vec.t
                                      u8.t
                                      alloc.alloc.Global.t) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.clone.Clone.clone
                                  (Self :=
                                    alloc.vec.Vec.t u8.t alloc.alloc.Global.t)
                                  (Trait := ℐ))) in
                            let* α1 :
                                alloc.vec.Vec.t u8.t alloc.alloc.Global.t :=
                              M.call (α0 (borrow file_data)) in
                            let* α2 :
                                core.result.Result.t
                                  alloc.string.String.t
                                  alloc.string.FromUtf8Error.t :=
                              M.call
                                (alloc.string.String.t::["from_utf8"] α1) in
                            let* α3 : alloc.string.String.t :=
                              M.call
                                ((core.result.Result.t
                                      alloc.string.String.t
                                      alloc.string.FromUtf8Error.t)::["unwrap"]
                                  α2) in
                            M.alloc α3 in
                          let* _ :
                              M.Val
                                (alloc.vec.Vec.t
                                  assistants_core.models.Chunk.t
                                  alloc.alloc.Global.t) :=
                            let* α0 : _ -> M _ :=
                              ltac:(M.get_method (fun ℐ =>
                                core.future.into_future.IntoFuture.into_future
                                  (Self := _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (ref
                                    (alloc.sync.Arc.t
                                      (sqlx_core.pool.Pool.t
                                        sqlx_postgres.database.Postgres.t)
                                      alloc.alloc.Global.t))
                                  ->
                                  M (ref _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.deref.Deref.deref
                                  (Self :=
                                    alloc.sync.Arc.t
                                      (sqlx_core.pool.Pool.t
                                        sqlx_postgres.database.Postgres.t)
                                      alloc.alloc.Global.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                ref
                                  (sqlx_core.pool.Pool.t
                                    sqlx_postgres.database.Postgres.t) :=
                              M.call
                                (α1
                                  (borrow
                                    (assistants_api_communication.models.AppState.Get_pool
                                      app_state))) in
                            let* α3 :
                                (ref alloc.string.String.t) -> M (ref _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.deref.Deref.deref
                                  (Self := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α4 : ref str.t :=
                              M.call (α3 (borrow file_data_str)) in
                            let* α5 :
                                (ref alloc.string.String.t) -> M (ref _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.deref.Deref.deref
                                  (Self := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α6 : ref str.t :=
                              M.call (α5 (borrow file_id)) in
                            let* α7 : _ :=
                              M.call
                                (assistants_core.retrieval.split_and_insert
                                  α2
                                  α4
                                  ((Integer.of_Z 100) : usize.t)
                                  α6
                                  core.option.Option.None) in
                            let* α8 : _ := M.call (α0 α7) in
                            let* α9 : M.Val _ := M.alloc α8 in
                            let* α10 :
                                M.Val
                                  (core.result.Result.t
                                    (alloc.vec.Vec.t
                                      assistants_core.models.Chunk.t
                                      alloc.alloc.Global.t)
                                    sqlx_core.error.Error.t) :=
                              match_operator
                                α9
                                [
                                  fun γ =>
                                    (let* __awaitee := M.copy γ in
                                    M.loop
                                      (let* _ : M.Val unit :=
                                        let* α0 :
                                            (core.pin.Pin.t (mut_ref _)) ->
                                              (mut_ref core.task.wake.Context.t)
                                              ->
                                              M (core.task.poll.Poll.t _) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.future.future.Future.poll
                                              (Self := _)
                                              (Trait := ℐ))) in
                                        let* α1 : core.pin.Pin.t (mut_ref _) :=
                                          M.call
                                            ((core.pin.Pin.t
                                                  (mut_ref
                                                    _))::["new_unchecked"]
                                              (borrow_mut __awaitee)) in
                                        let* α2 : core.future.ResumeTy.t :=
                                          M.read _task_context in
                                        let* α3 :
                                            mut_ref core.task.wake.Context.t :=
                                          M.call (core.future.get_context α2) in
                                        let* α4 :
                                            core.task.poll.Poll.t
                                              (core.result.Result.t
                                                (alloc.vec.Vec.t
                                                  assistants_core.models.Chunk.t
                                                  alloc.alloc.Global.t)
                                                sqlx_core.error.Error.t) :=
                                          M.call (α0 α1 α3) in
                                        let* α5 :
                                            M.Val
                                              (core.task.poll.Poll.t
                                                (core.result.Result.t
                                                  (alloc.vec.Vec.t
                                                    assistants_core.models.Chunk.t
                                                    alloc.alloc.Global.t)
                                                  sqlx_core.error.Error.t)) :=
                                          M.alloc α4 in
                                        match_operator
                                          α5
                                          [
                                            fun γ =>
                                              (let* α0 := M.read γ in
                                              match α0 with
                                              | core.task.poll.Poll.Ready _ =>
                                                let γ0_0 :=
                                                  core.task.poll.Poll.Get_Ready_0
                                                    γ in
                                                let* result := M.copy γ0_0 in
                                                let* α0 : M.Val never.t :=
                                                  M.break in
                                                let* α1 := M.read α0 in
                                                let* α2 : unit :=
                                                  never_to_any α1 in
                                                M.alloc α2
                                              | _ => M.break_match
                                              end) :
                                              M (M.Val unit);
                                            fun γ =>
                                              (let* α0 := M.read γ in
                                              match α0 with
                                              | core.task.poll.Poll.Pending =>
                                                M.alloc tt
                                              | _ => M.break_match
                                              end) :
                                              M (M.Val unit)
                                          ] in
                                      let* _ : M.Val unit :=
                                        let* α0 : M.Val unit := M.alloc tt in
                                        let* α1 :
                                            M.Val core.future.ResumeTy.t :=
                                          yield α0 in
                                        let* α2 : core.future.ResumeTy.t :=
                                          M.read α1 in
                                        assign _task_context α2 in
                                      M.alloc tt)) :
                                    M
                                      (M.Val
                                        (core.result.Result.t
                                          (alloc.vec.Vec.t
                                            assistants_core.models.Chunk.t
                                            alloc.alloc.Global.t)
                                          sqlx_core.error.Error.t))
                                ] in
                            let* α11 :
                                core.result.Result.t
                                  (alloc.vec.Vec.t
                                    assistants_core.models.Chunk.t
                                    alloc.alloc.Global.t)
                                  sqlx_core.error.Error.t :=
                              M.read α10 in
                            let* α12 :
                                alloc.vec.Vec.t
                                  assistants_core.models.Chunk.t
                                  alloc.alloc.Global.t :=
                              M.call
                                ((core.result.Result.t
                                      (alloc.vec.Vec.t
                                        assistants_core.models.Chunk.t
                                        alloc.alloc.Global.t)
                                      sqlx_core.error.Error.t)::["unwrap"]
                                  α11) in
                            M.alloc α12 in
                          M.alloc tt
                        else
                          M.alloc tt in
                      let* α0 : alloc.string.String.t := M.read file_id in
                      let* α1 : (ref str.t) -> M alloc.string.String.t :=
                        ltac:(M.get_method (fun ℐ =>
                          alloc.string.ToString.to_string
                            (Self := str.t)
                            (Trait := ℐ))) in
                      let* α2 : ref str.t := M.read (mk_str "object") in
                      let* α3 : alloc.string.String.t := M.call (α1 α2) in
                      let* α4 : usize.t :=
                        M.call
                          ((alloc.vec.Vec.t u8.t alloc.alloc.Global.t)::["len"]
                            (borrow file_data)) in
                      let* α5 : (ref str.t) -> M alloc.string.String.t :=
                        ltac:(M.get_method (fun ℐ =>
                          alloc.string.ToString.to_string
                            (Self := str.t)
                            (Trait := ℐ))) in
                      let* α6 : ref str.t := M.read (mk_str "unknown") in
                      let* α7 : alloc.string.String.t := M.call (α5 α6) in
                      let* α8 : (ref str.t) -> M alloc.string.String.t :=
                        ltac:(M.get_method (fun ℐ =>
                          alloc.string.ToString.to_string
                            (Self := str.t)
                            (Trait := ℐ))) in
                      let* α9 : ref str.t := M.read (mk_str "success") in
                      let* α10 : alloc.string.String.t := M.call (α8 α9) in
                      let* α11 : (ref str.t) -> M alloc.string.String.t :=
                        ltac:(M.get_method (fun ℐ =>
                          alloc.string.ToString.to_string
                            (Self := str.t)
                            (Trait := ℐ))) in
                      let* α12 : ref str.t := M.read (mk_str "unknown") in
                      let* α13 : alloc.string.String.t := M.call (α11 α12) in
                      let* α0 :
                          M.Val
                            (core.result.Result.t
                              (axum.json.Json.t
                                async_openai.types.file.OpenAIFile.t)
                              (http.status.StatusCode.t
                              *
                              alloc.string.String.t)) :=
                        M.alloc
                          (core.result.Result.Ok
                            (axum.json.Json.Build_t
                              {|
                                async_openai.types.file.OpenAIFile.id := α0;
                                async_openai.types.file.OpenAIFile.object := α3;
                                async_openai.types.file.OpenAIFile.bytes :=
                                  rust_cast α4;
                                async_openai.types.file.OpenAIFile.created_at :=
                                  (Integer.of_Z 0) : u32.t;
                                async_openai.types.file.OpenAIFile.filename :=
                                  α7;
                                async_openai.types.file.OpenAIFile.purpose :=
                                  async_openai.types.file.OpenAIFilePurpose.Assistants;
                                async_openai.types.file.OpenAIFile.status :=
                                  core.option.Option.Some α10;
                                async_openai.types.file.OpenAIFile.status_details :=
                                  core.option.Option.Some α13;
                              |})) in
                      M.pure (use α0)
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.file.OpenAIFile.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t async_openai.types.file.OpenAIFile.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.file.OpenAIFile.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

Module messages.
  (*
  pub async fn add_message_handler(
      Path((thread_id,)): Path<(String,)>,
      State(app_state): State<AppState>,
      Json(message): Json<CreateMessageRequest>,
  ) -> Result<JsonResponse<MessageObject>, (StatusCode, String)> {
      let user_id = Uuid::default().to_string();
  
      let content = vec![MessageContent::Text(MessageContentTextObject {
          r#type: "text".to_string(),
          text: TextData {
              value: message.content,
              annotations: vec![],
          },
      })];
      let message = add_message_to_thread(
          &app_state.pool,
          &thread_id,
          MessageRole::User,
          content,
          &user_id,
          None,
      )
      .await;
      match message {
          Ok(message) => Ok(JsonResponse(message.inner)),
          Err(e) => {
              let error_message = e.to_string();
              error!("Failed to add message: {}", error_message);
              Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
          }
      }
  }
  *)
  Definition add_message_handler
      (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      (__arg2
        :
        axum.json.Json.t async_openai.types.message.CreateMessageRequest.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    let* __arg2 := M.alloc __arg2 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t
                        async_openai.types.message.MessageObject.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_) =>
                          let γ1_0 := γ0_0 in
                          let* thread_id := M.copy γ1_0 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* __arg2 :
                                      M.Val
                                        (axum.json.Json.t
                                          async_openai.types.message.CreateMessageRequest.t) :=
                                    M.copy __arg2 in
                                  match_operator
                                    __arg2
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | axum.json.Json.Build_t _ =>
                                          let γ0_0 := axum.json.Json.Get_0 γ in
                                          let* message := M.copy γ0_0 in
                                          let* user_id :
                                              M.Val alloc.string.String.t :=
                                            let* α0 :
                                                (ref uuid.Uuid.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self := uuid.Uuid.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : M uuid.Uuid.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.default.Default.default
                                                  (Self := uuid.Uuid.t)
                                                  (Trait := ℐ))) in
                                            let* α2 : uuid.Uuid.t :=
                                              M.call α1 in
                                            let* α3 : M.Val uuid.Uuid.t :=
                                              M.alloc α2 in
                                            let* α4 : alloc.string.String.t :=
                                              M.call (α0 (borrow α3)) in
                                            M.alloc α4 in
                                          let* content :
                                              M.Val
                                                (alloc.vec.Vec.t
                                                  async_openai.types.message.MessageContent.t
                                                  alloc.alloc.Global.t) :=
                                            let* α0 :
                                                (ref str.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self := str.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : ref str.t :=
                                              M.read (mk_str "text") in
                                            let* α2 : alloc.string.String.t :=
                                              M.call (α0 α1) in
                                            let* α3 : alloc.string.String.t :=
                                              M.read
                                                (async_openai.types.message.CreateMessageRequest.Get_content
                                                  message) in
                                            let* α4 :
                                                alloc.vec.Vec.t
                                                  async_openai.types.message.MessageContentTextAnnotations.t
                                                  alloc.alloc.Global.t :=
                                              M.call
                                                (alloc.vec.Vec.t
                                                    async_openai.types.message.MessageContentTextAnnotations.t
                                                    alloc.alloc.Global.t)::["new"] in
                                            let* α5 :
                                                M.Val
                                                  (array
                                                    async_openai.types.message.MessageContent.t) :=
                                              M.alloc
                                                [
                                                  async_openai.types.message.MessageContent.Text
                                                    {|
                                                      async_openai.types.message.MessageContentTextObject.type :=
                                                        α2;
                                                      async_openai.types.message.MessageContentTextObject.text :=
                                                        {|
                                                          async_openai.types.message.TextData.value :=
                                                            α3;
                                                          async_openai.types.message.TextData.annotations :=
                                                            α4;
                                                        |};
                                                    |}
                                                ] in
                                            let* α6 :
                                                M.Val
                                                  (alloc.boxed.Box.t
                                                    (array
                                                      async_openai.types.message.MessageContent.t)
                                                    alloc.alloc.Global.t) :=
                                              M.call
                                                ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                                                  α5) in
                                            let* α7 :
                                                alloc.boxed.Box.t
                                                  (array
                                                    async_openai.types.message.MessageContent.t)
                                                  alloc.alloc.Global.t :=
                                              M.read α6 in
                                            let* α8 :
                                                alloc.vec.Vec.t
                                                  async_openai.types.message.MessageContent.t
                                                  alloc.alloc.Global.t :=
                                              M.call
                                                ((slice
                                                      async_openai.types.message.MessageContent.t)::["into_vec"]
                                                  (pointer_coercion
                                                    "Unsize"
                                                    α7)) in
                                            M.alloc α8 in
                                          let* message :
                                              M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Message.t
                                                  sqlx_core.error.Error.t) :=
                                            let* α0 : _ -> M _ :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.future.into_future.IntoFuture.into_future
                                                  (Self := _)
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                (ref
                                                    (alloc.sync.Arc.t
                                                      (sqlx_core.pool.Pool.t
                                                        sqlx_postgres.database.Postgres.t)
                                                      alloc.alloc.Global.t))
                                                  ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.sync.Arc.t
                                                      (sqlx_core.pool.Pool.t
                                                        sqlx_postgres.database.Postgres.t)
                                                      alloc.alloc.Global.t)
                                                  (Trait := ℐ))) in
                                            let* α2 :
                                                ref
                                                  (sqlx_core.pool.Pool.t
                                                    sqlx_postgres.database.Postgres.t) :=
                                              M.call
                                                (α1
                                                  (borrow
                                                    (assistants_api_communication.models.AppState.Get_pool
                                                      app_state))) in
                                            let* α3 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α4 : ref str.t :=
                                              M.call (α3 (borrow thread_id)) in
                                            let* α5 :
                                                alloc.vec.Vec.t
                                                  async_openai.types.message.MessageContent.t
                                                  alloc.alloc.Global.t :=
                                              M.read content in
                                            let* α6 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α7 : ref str.t :=
                                              M.call (α6 (borrow user_id)) in
                                            let* α8 : _ :=
                                              M.call
                                                (assistants_core.messages.add_message_to_thread
                                                  α2
                                                  α4
                                                  async_openai.types.message.MessageRole.User
                                                  α5
                                                  α7
                                                  core.option.Option.None) in
                                            let* α9 : _ := M.call (α0 α8) in
                                            let* α10 : M.Val _ := M.alloc α9 in
                                            let* α11 :
                                                M.Val
                                                  (core.result.Result.t
                                                    assistants_core.models.Message.t
                                                    sqlx_core.error.Error.t) :=
                                              match_operator
                                                α10
                                                [
                                                  fun γ =>
                                                    (let* __awaitee :=
                                                      M.copy γ in
                                                    M.loop
                                                      (let* _ : M.Val unit :=
                                                        let* α0 :
                                                            (core.pin.Pin.t
                                                                (mut_ref _))
                                                              ->
                                                              (mut_ref
                                                                core.task.wake.Context.t)
                                                              ->
                                                              M
                                                                (core.task.poll.Poll.t
                                                                  _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.future.future.Future.poll
                                                              (Self := _)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            core.pin.Pin.t
                                                              (mut_ref _) :=
                                                          M.call
                                                            ((core.pin.Pin.t
                                                                  (mut_ref
                                                                    _))::["new_unchecked"]
                                                              (borrow_mut
                                                                __awaitee)) in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read
                                                            _task_context in
                                                        let* α3 :
                                                            mut_ref
                                                              core.task.wake.Context.t :=
                                                          M.call
                                                            (core.future.get_context
                                                              α2) in
                                                        let* α4 :
                                                            core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                assistants_core.models.Message.t
                                                                sqlx_core.error.Error.t) :=
                                                          M.call (α0 α1 α3) in
                                                        let* α5 :
                                                            M.Val
                                                              (core.task.poll.Poll.t
                                                                (core.result.Result.t
                                                                  assistants_core.models.Message.t
                                                                  sqlx_core.error.Error.t)) :=
                                                          M.alloc α4 in
                                                        match_operator
                                                          α5
                                                          [
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Ready
                                                                    _
                                                                  =>
                                                                let γ0_0 :=
                                                                  core.task.poll.Poll.Get_Ready_0
                                                                    γ in
                                                                let* result :=
                                                                  M.copy γ0_0 in
                                                                let* α0 :
                                                                    M.Val
                                                                      never.t :=
                                                                  M.break in
                                                                let* α1 :=
                                                                  M.read α0 in
                                                                let* α2 :
                                                                    unit :=
                                                                  never_to_any
                                                                    α1 in
                                                                M.alloc α2
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit);
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Pending
                                                                  =>
                                                                M.alloc tt
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit)
                                                          ] in
                                                      let* _ : M.Val unit :=
                                                        let* α0 : M.Val unit :=
                                                          M.alloc tt in
                                                        let* α1 :
                                                            M.Val
                                                              core.future.ResumeTy.t :=
                                                          yield α0 in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read α1 in
                                                        assign
                                                          _task_context
                                                          α2 in
                                                      M.alloc tt)) :
                                                    M
                                                      (M.Val
                                                        (core.result.Result.t
                                                          assistants_core.models.Message.t
                                                          sqlx_core.error.Error.t))
                                                ] in
                                            M.copy α11 in
                                          let* α0 :
                                              M.Val
                                                (core.result.Result.t
                                                  (axum.json.Json.t
                                                    async_openai.types.message.MessageObject.t)
                                                  (http.status.StatusCode.t
                                                  *
                                                  alloc.string.String.t)) :=
                                            match_operator
                                              message
                                              [
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Ok _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Ok_0
                                                        γ in
                                                    let* message :=
                                                      M.copy γ0_0 in
                                                    let* α0 :
                                                        async_openai.types.message.MessageObject.t :=
                                                      M.read
                                                        (assistants_core.models.Message.Get_inner
                                                          message) in
                                                    M.alloc
                                                      (core.result.Result.Ok
                                                        (axum.json.Json.Build_t
                                                          α0))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.message.MessageObject.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)));
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Err _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Err_0
                                                        γ in
                                                    let* e := M.copy γ0_0 in
                                                    let* error_message :
                                                        M.Val
                                                          alloc.string.String.t :=
                                                      let* α0 :
                                                          (ref
                                                              sqlx_core.error.Error.t)
                                                            ->
                                                            M
                                                              alloc.string.String.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          alloc.string.ToString.to_string
                                                            (Self :=
                                                              sqlx_core.error.Error.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          alloc.string.String.t :=
                                                        M.call
                                                          (α0 (borrow e)) in
                                                      M.alloc α1 in
                                                    let* _ : M.Val unit :=
                                                      let* lvl :
                                                          M.Val log.Level.t :=
                                                        M.alloc
                                                          log.Level.Error in
                                                      let* α0 :
                                                          (ref log.Level.t) ->
                                                            (ref
                                                              log.LevelFilter.t)
                                                            ->
                                                            M bool.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.cmp.PartialOrd.le
                                                            (Self :=
                                                              log.Level.t)
                                                            (Rhs :=
                                                              log.LevelFilter.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 : bool.t :=
                                                        M.call
                                                          (α0
                                                            (borrow lvl)
                                                            (borrow
                                                              log.STATIC_MAX_LEVEL)) in
                                                      let* α2 :
                                                          (ref log.Level.t) ->
                                                            (ref
                                                              log.LevelFilter.t)
                                                            ->
                                                            M bool.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.cmp.PartialOrd.le
                                                            (Self :=
                                                              log.Level.t)
                                                            (Rhs :=
                                                              log.LevelFilter.t)
                                                            (Trait := ℐ))) in
                                                      let* α3 :
                                                          log.LevelFilter.t :=
                                                        M.call log.max_level in
                                                      let* α4 :
                                                          M.Val
                                                            log.LevelFilter.t :=
                                                        M.alloc α3 in
                                                      let* α5 : bool.t :=
                                                        M.call
                                                          (α2
                                                            (borrow lvl)
                                                            (borrow α4)) in
                                                      let* α6 : M.Val bool.t :=
                                                        M.alloc
                                                          (BinOp.Pure.and
                                                            α1
                                                            α5) in
                                                      let* α7 : bool.t :=
                                                        M.read (use α6) in
                                                      if α7 then
                                                        let* _ : M.Val unit :=
                                                          let* α0 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "Failed to add message: ") in
                                                          let* α1 :
                                                              M.Val
                                                                (array
                                                                  (ref
                                                                    str.t)) :=
                                                            M.alloc [ α0 ] in
                                                          let* α2 :
                                                              core.fmt.rt.Argument.t :=
                                                            M.call
                                                              (core.fmt.rt.Argument.t::["new_display"]
                                                                (borrow
                                                                  error_message)) in
                                                          let* α3 :
                                                              M.Val
                                                                (array
                                                                  core.fmt.rt.Argument.t) :=
                                                            M.alloc [ α2 ] in
                                                          let* α4 :
                                                              core.fmt.Arguments.t :=
                                                            M.call
                                                              (core.fmt.Arguments.t::["new_v1"]
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow α1))
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow
                                                                    α3))) in
                                                          let* α5 :
                                                              log.Level.t :=
                                                            M.read lvl in
                                                          let* α6 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants_api_communication::messages") in
                                                          let* α7 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants_api_communication::messages") in
                                                          let* α8 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants-api-communication/src/messages.rs") in
                                                          let* α9 :
                                                              M.Val
                                                                (((ref str.t)
                                                                *
                                                                (ref str.t))
                                                                *
                                                                (ref str.t)) :=
                                                            M.alloc
                                                              (α6, α7, α8) in
                                                          let* α10 : unit :=
                                                            M.call
                                                              (log.__private_api.log
                                                                α4
                                                                α5
                                                                (borrow α9)
                                                                ((Integer.of_Z
                                                                    48) :
                                                                  u32.t)
                                                                core.option.Option.None) in
                                                          M.alloc α10 in
                                                        M.alloc tt
                                                      else
                                                        M.alloc tt in
                                                    let* α0 :
                                                        http.status.StatusCode.t :=
                                                      M.read
                                                        http.status.INTERNAL_SERVER_ERROR in
                                                    let* α1 :
                                                        alloc.string.String.t :=
                                                      M.read error_message in
                                                    M.alloc
                                                      (core.result.Result.Err
                                                        (α0, α1))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.message.MessageObject.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)))
                                              ] in
                                          M.pure (use α0)
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.message.MessageObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ]
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.message.MessageObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.message.MessageObject.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t async_openai.types.message.MessageObject.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.message.MessageObject.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn get_message_handler(
      Path((thread_id, message_id)): Path<(String, String)>,
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<MessageObject>, (StatusCode, String)> {
      let message = get_message(
          &app_state.pool,
          &thread_id,
          &message_id,
          &Uuid::default().to_string(),
      )
      .await;
      match message {
          Ok(message) => Ok(JsonResponse(message.inner)),
          Err(e) => {
              let error_message = e.to_string();
              error!("Failed to get message: {}", error_message);
              Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
          }
      }
  }
  *)
  Definition get_message_handler
      (__arg0
        :
        axum.extract.path.Path.t
          (alloc.string.String.t * alloc.string.String.t))
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val
                    (axum.extract.path.Path.t
                      (alloc.string.String.t * alloc.string.String.t)) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t
                        async_openai.types.message.MessageObject.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_, _) =>
                          let γ1_0 := Tuple.Access.left γ0_0 in
                          let γ1_1 := Tuple.Access.right γ0_0 in
                          let* thread_id := M.copy γ1_0 in
                          let* message_id := M.copy γ1_1 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* message :
                                      M.Val
                                        (core.result.Result.t
                                          assistants_core.models.Message.t
                                          sqlx_core.error.Error.t) :=
                                    let* α0 : _ -> M _ :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.future.into_future.IntoFuture.into_future
                                          (Self := _)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        (ref
                                            (alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t))
                                          ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self :=
                                            alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ))) in
                                    let* α2 :
                                        ref
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t) :=
                                      M.call
                                        (α1
                                          (borrow
                                            (assistants_api_communication.models.AppState.Get_pool
                                              app_state))) in
                                    let* α3 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α4 : ref str.t :=
                                      M.call (α3 (borrow thread_id)) in
                                    let* α5 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α6 : ref str.t :=
                                      M.call (α5 (borrow message_id)) in
                                    let* α7 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α8 :
                                        (ref uuid.Uuid.t) ->
                                          M alloc.string.String.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        alloc.string.ToString.to_string
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α9 : M uuid.Uuid.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.default.Default.default
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α10 : uuid.Uuid.t := M.call α9 in
                                    let* α11 : M.Val uuid.Uuid.t :=
                                      M.alloc α10 in
                                    let* α12 : alloc.string.String.t :=
                                      M.call (α8 (borrow α11)) in
                                    let* α13 : M.Val alloc.string.String.t :=
                                      M.alloc α12 in
                                    let* α14 : ref str.t :=
                                      M.call (α7 (borrow α13)) in
                                    let* α15 : _ :=
                                      M.call
                                        (assistants_core.messages.get_message
                                          α2
                                          α4
                                          α6
                                          α14) in
                                    let* α16 : _ := M.call (α0 α15) in
                                    let* α17 : M.Val _ := M.alloc α16 in
                                    let* α18 :
                                        M.Val
                                          (core.result.Result.t
                                            assistants_core.models.Message.t
                                            sqlx_core.error.Error.t) :=
                                      match_operator
                                        α17
                                        [
                                          fun γ =>
                                            (let* __awaitee := M.copy γ in
                                            M.loop
                                              (let* _ : M.Val unit :=
                                                let* α0 :
                                                    (core.pin.Pin.t (mut_ref _))
                                                      ->
                                                      (mut_ref
                                                        core.task.wake.Context.t)
                                                      ->
                                                      M
                                                        (core.task.poll.Poll.t
                                                          _) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.future.future.Future.poll
                                                      (Self := _)
                                                      (Trait := ℐ))) in
                                                let* α1 :
                                                    core.pin.Pin.t
                                                      (mut_ref _) :=
                                                  M.call
                                                    ((core.pin.Pin.t
                                                          (mut_ref
                                                            _))::["new_unchecked"]
                                                      (borrow_mut __awaitee)) in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read _task_context in
                                                let* α3 :
                                                    mut_ref
                                                      core.task.wake.Context.t :=
                                                  M.call
                                                    (core.future.get_context
                                                      α2) in
                                                let* α4 :
                                                    core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        assistants_core.models.Message.t
                                                        sqlx_core.error.Error.t) :=
                                                  M.call (α0 α1 α3) in
                                                let* α5 :
                                                    M.Val
                                                      (core.task.poll.Poll.t
                                                        (core.result.Result.t
                                                          assistants_core.models.Message.t
                                                          sqlx_core.error.Error.t)) :=
                                                  M.alloc α4 in
                                                match_operator
                                                  α5
                                                  [
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Ready
                                                            _
                                                          =>
                                                        let γ0_0 :=
                                                          core.task.poll.Poll.Get_Ready_0
                                                            γ in
                                                        let* result :=
                                                          M.copy γ0_0 in
                                                        let* α0 :
                                                            M.Val never.t :=
                                                          M.break in
                                                        let* α1 := M.read α0 in
                                                        let* α2 : unit :=
                                                          never_to_any α1 in
                                                        M.alloc α2
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit);
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Pending
                                                          =>
                                                        M.alloc tt
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit)
                                                  ] in
                                              let* _ : M.Val unit :=
                                                let* α0 : M.Val unit :=
                                                  M.alloc tt in
                                                let* α1 :
                                                    M.Val
                                                      core.future.ResumeTy.t :=
                                                  yield α0 in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read α1 in
                                                assign _task_context α2 in
                                              M.alloc tt)) :
                                            M
                                              (M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Message.t
                                                  sqlx_core.error.Error.t))
                                        ] in
                                    M.copy α18 in
                                  let* α0 :
                                      M.Val
                                        (core.result.Result.t
                                          (axum.json.Json.t
                                            async_openai.types.message.MessageObject.t)
                                          (http.status.StatusCode.t
                                          *
                                          alloc.string.String.t)) :=
                                    match_operator
                                      message
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Ok _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Ok_0 γ in
                                            let* message := M.copy γ0_0 in
                                            let* α0 :
                                                async_openai.types.message.MessageObject.t :=
                                              M.read
                                                (assistants_core.models.Message.Get_inner
                                                  message) in
                                            M.alloc
                                              (core.result.Result.Ok
                                                (axum.json.Json.Build_t α0))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.message.MessageObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)));
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Err _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Err_0 γ in
                                            let* e := M.copy γ0_0 in
                                            let* error_message :
                                                M.Val alloc.string.String.t :=
                                              let* α0 :
                                                  (ref sqlx_core.error.Error.t)
                                                    ->
                                                    M alloc.string.String.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  alloc.string.ToString.to_string
                                                    (Self :=
                                                      sqlx_core.error.Error.t)
                                                    (Trait := ℐ))) in
                                              let* α1 : alloc.string.String.t :=
                                                M.call (α0 (borrow e)) in
                                              M.alloc α1 in
                                            let* _ : M.Val unit :=
                                              let* lvl : M.Val log.Level.t :=
                                                M.alloc log.Level.Error in
                                              let* α0 :
                                                  (ref log.Level.t) ->
                                                    (ref log.LevelFilter.t) ->
                                                    M bool.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.cmp.PartialOrd.le
                                                    (Self := log.Level.t)
                                                    (Rhs := log.LevelFilter.t)
                                                    (Trait := ℐ))) in
                                              let* α1 : bool.t :=
                                                M.call
                                                  (α0
                                                    (borrow lvl)
                                                    (borrow
                                                      log.STATIC_MAX_LEVEL)) in
                                              let* α2 :
                                                  (ref log.Level.t) ->
                                                    (ref log.LevelFilter.t) ->
                                                    M bool.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.cmp.PartialOrd.le
                                                    (Self := log.Level.t)
                                                    (Rhs := log.LevelFilter.t)
                                                    (Trait := ℐ))) in
                                              let* α3 : log.LevelFilter.t :=
                                                M.call log.max_level in
                                              let* α4 :
                                                  M.Val log.LevelFilter.t :=
                                                M.alloc α3 in
                                              let* α5 : bool.t :=
                                                M.call
                                                  (α2
                                                    (borrow lvl)
                                                    (borrow α4)) in
                                              let* α6 : M.Val bool.t :=
                                                M.alloc
                                                  (BinOp.Pure.and α1 α5) in
                                              let* α7 : bool.t :=
                                                M.read (use α6) in
                                              if α7 then
                                                let* _ : M.Val unit :=
                                                  let* α0 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "Failed to get message: ") in
                                                  let* α1 :
                                                      M.Val
                                                        (array (ref str.t)) :=
                                                    M.alloc [ α0 ] in
                                                  let* α2 :
                                                      core.fmt.rt.Argument.t :=
                                                    M.call
                                                      (core.fmt.rt.Argument.t::["new_display"]
                                                        (borrow
                                                          error_message)) in
                                                  let* α3 :
                                                      M.Val
                                                        (array
                                                          core.fmt.rt.Argument.t) :=
                                                    M.alloc [ α2 ] in
                                                  let* α4 :
                                                      core.fmt.Arguments.t :=
                                                    M.call
                                                      (core.fmt.Arguments.t::["new_v1"]
                                                        (pointer_coercion
                                                          "Unsize"
                                                          (borrow α1))
                                                        (pointer_coercion
                                                          "Unsize"
                                                          (borrow α3))) in
                                                  let* α5 : log.Level.t :=
                                                    M.read lvl in
                                                  let* α6 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants_api_communication::messages") in
                                                  let* α7 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants_api_communication::messages") in
                                                  let* α8 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants-api-communication/src/messages.rs") in
                                                  let* α9 :
                                                      M.Val
                                                        (((ref str.t)
                                                        *
                                                        (ref str.t))
                                                        *
                                                        (ref str.t)) :=
                                                    M.alloc (α6, α7, α8) in
                                                  let* α10 : unit :=
                                                    M.call
                                                      (log.__private_api.log
                                                        α4
                                                        α5
                                                        (borrow α9)
                                                        ((Integer.of_Z 70) :
                                                          u32.t)
                                                        core.option.Option.None) in
                                                  M.alloc α10 in
                                                M.alloc tt
                                              else
                                                M.alloc tt in
                                            let* α0 :
                                                http.status.StatusCode.t :=
                                              M.read
                                                http.status.INTERNAL_SERVER_ERROR in
                                            let* α1 : alloc.string.String.t :=
                                              M.read error_message in
                                            M.alloc
                                              (core.result.Result.Err (α0, α1))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.message.MessageObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)))
                                      ] in
                                  M.pure (use α0)
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.message.MessageObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.message.MessageObject.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t async_openai.types.message.MessageObject.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.message.MessageObject.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn update_message_handler(
      Path((thread_id, message_id)): Path<(String, String)>,
      State(app_state): State<AppState>,
      Json(message_input): Json<ModifyMessageRequest>,
  ) -> Result<JsonResponse<MessageObject>, (StatusCode, String)> {
      let message = update_message(
          &app_state.pool,
          &thread_id,
          &message_id,
          &Uuid::default().to_string(),
          message_input.metadata,
      )
      .await;
      match message {
          Ok(message) => Ok(JsonResponse(message.inner)),
          Err(e) => {
              let error_message = e.to_string();
              error!("Failed to update message: {}", error_message);
              Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
          }
      }
  }
  *)
  Definition update_message_handler
      (__arg0
        :
        axum.extract.path.Path.t
          (alloc.string.String.t * alloc.string.String.t))
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      (__arg2
        :
        axum.json.Json.t async_openai.types.message.ModifyMessageRequest.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    let* __arg2 := M.alloc __arg2 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val
                    (axum.extract.path.Path.t
                      (alloc.string.String.t * alloc.string.String.t)) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t
                        async_openai.types.message.MessageObject.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_, _) =>
                          let γ1_0 := Tuple.Access.left γ0_0 in
                          let γ1_1 := Tuple.Access.right γ0_0 in
                          let* thread_id := M.copy γ1_0 in
                          let* message_id := M.copy γ1_1 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* __arg2 :
                                      M.Val
                                        (axum.json.Json.t
                                          async_openai.types.message.ModifyMessageRequest.t) :=
                                    M.copy __arg2 in
                                  match_operator
                                    __arg2
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | axum.json.Json.Build_t _ =>
                                          let γ0_0 := axum.json.Json.Get_0 γ in
                                          let* message_input := M.copy γ0_0 in
                                          let* message :
                                              M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Message.t
                                                  sqlx_core.error.Error.t) :=
                                            let* α0 : _ -> M _ :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.future.into_future.IntoFuture.into_future
                                                  (Self := _)
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                (ref
                                                    (alloc.sync.Arc.t
                                                      (sqlx_core.pool.Pool.t
                                                        sqlx_postgres.database.Postgres.t)
                                                      alloc.alloc.Global.t))
                                                  ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.sync.Arc.t
                                                      (sqlx_core.pool.Pool.t
                                                        sqlx_postgres.database.Postgres.t)
                                                      alloc.alloc.Global.t)
                                                  (Trait := ℐ))) in
                                            let* α2 :
                                                ref
                                                  (sqlx_core.pool.Pool.t
                                                    sqlx_postgres.database.Postgres.t) :=
                                              M.call
                                                (α1
                                                  (borrow
                                                    (assistants_api_communication.models.AppState.Get_pool
                                                      app_state))) in
                                            let* α3 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α4 : ref str.t :=
                                              M.call (α3 (borrow thread_id)) in
                                            let* α5 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α6 : ref str.t :=
                                              M.call (α5 (borrow message_id)) in
                                            let* α7 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α8 :
                                                (ref uuid.Uuid.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self := uuid.Uuid.t)
                                                  (Trait := ℐ))) in
                                            let* α9 : M uuid.Uuid.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.default.Default.default
                                                  (Self := uuid.Uuid.t)
                                                  (Trait := ℐ))) in
                                            let* α10 : uuid.Uuid.t :=
                                              M.call α9 in
                                            let* α11 : M.Val uuid.Uuid.t :=
                                              M.alloc α10 in
                                            let* α12 : alloc.string.String.t :=
                                              M.call (α8 (borrow α11)) in
                                            let* α13 :
                                                M.Val alloc.string.String.t :=
                                              M.alloc α12 in
                                            let* α14 : ref str.t :=
                                              M.call (α7 (borrow α13)) in
                                            let* α15 :
                                                core.option.Option.t
                                                  (std.collections.hash.map.HashMap.t
                                                    alloc.string.String.t
                                                    serde_json.value.Value.t
                                                    std.hash.random.RandomState.t) :=
                                              M.read
                                                (async_openai.types.message.ModifyMessageRequest.Get_metadata
                                                  message_input) in
                                            let* α16 : _ :=
                                              M.call
                                                (assistants_core.messages.update_message
                                                  α2
                                                  α4
                                                  α6
                                                  α14
                                                  α15) in
                                            let* α17 : _ := M.call (α0 α16) in
                                            let* α18 : M.Val _ := M.alloc α17 in
                                            let* α19 :
                                                M.Val
                                                  (core.result.Result.t
                                                    assistants_core.models.Message.t
                                                    sqlx_core.error.Error.t) :=
                                              match_operator
                                                α18
                                                [
                                                  fun γ =>
                                                    (let* __awaitee :=
                                                      M.copy γ in
                                                    M.loop
                                                      (let* _ : M.Val unit :=
                                                        let* α0 :
                                                            (core.pin.Pin.t
                                                                (mut_ref _))
                                                              ->
                                                              (mut_ref
                                                                core.task.wake.Context.t)
                                                              ->
                                                              M
                                                                (core.task.poll.Poll.t
                                                                  _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.future.future.Future.poll
                                                              (Self := _)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            core.pin.Pin.t
                                                              (mut_ref _) :=
                                                          M.call
                                                            ((core.pin.Pin.t
                                                                  (mut_ref
                                                                    _))::["new_unchecked"]
                                                              (borrow_mut
                                                                __awaitee)) in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read
                                                            _task_context in
                                                        let* α3 :
                                                            mut_ref
                                                              core.task.wake.Context.t :=
                                                          M.call
                                                            (core.future.get_context
                                                              α2) in
                                                        let* α4 :
                                                            core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                assistants_core.models.Message.t
                                                                sqlx_core.error.Error.t) :=
                                                          M.call (α0 α1 α3) in
                                                        let* α5 :
                                                            M.Val
                                                              (core.task.poll.Poll.t
                                                                (core.result.Result.t
                                                                  assistants_core.models.Message.t
                                                                  sqlx_core.error.Error.t)) :=
                                                          M.alloc α4 in
                                                        match_operator
                                                          α5
                                                          [
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Ready
                                                                    _
                                                                  =>
                                                                let γ0_0 :=
                                                                  core.task.poll.Poll.Get_Ready_0
                                                                    γ in
                                                                let* result :=
                                                                  M.copy γ0_0 in
                                                                let* α0 :
                                                                    M.Val
                                                                      never.t :=
                                                                  M.break in
                                                                let* α1 :=
                                                                  M.read α0 in
                                                                let* α2 :
                                                                    unit :=
                                                                  never_to_any
                                                                    α1 in
                                                                M.alloc α2
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit);
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Pending
                                                                  =>
                                                                M.alloc tt
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit)
                                                          ] in
                                                      let* _ : M.Val unit :=
                                                        let* α0 : M.Val unit :=
                                                          M.alloc tt in
                                                        let* α1 :
                                                            M.Val
                                                              core.future.ResumeTy.t :=
                                                          yield α0 in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read α1 in
                                                        assign
                                                          _task_context
                                                          α2 in
                                                      M.alloc tt)) :
                                                    M
                                                      (M.Val
                                                        (core.result.Result.t
                                                          assistants_core.models.Message.t
                                                          sqlx_core.error.Error.t))
                                                ] in
                                            M.copy α19 in
                                          let* α0 :
                                              M.Val
                                                (core.result.Result.t
                                                  (axum.json.Json.t
                                                    async_openai.types.message.MessageObject.t)
                                                  (http.status.StatusCode.t
                                                  *
                                                  alloc.string.String.t)) :=
                                            match_operator
                                              message
                                              [
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Ok _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Ok_0
                                                        γ in
                                                    let* message :=
                                                      M.copy γ0_0 in
                                                    let* α0 :
                                                        async_openai.types.message.MessageObject.t :=
                                                      M.read
                                                        (assistants_core.models.Message.Get_inner
                                                          message) in
                                                    M.alloc
                                                      (core.result.Result.Ok
                                                        (axum.json.Json.Build_t
                                                          α0))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.message.MessageObject.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)));
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Err _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Err_0
                                                        γ in
                                                    let* e := M.copy γ0_0 in
                                                    let* error_message :
                                                        M.Val
                                                          alloc.string.String.t :=
                                                      let* α0 :
                                                          (ref
                                                              sqlx_core.error.Error.t)
                                                            ->
                                                            M
                                                              alloc.string.String.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          alloc.string.ToString.to_string
                                                            (Self :=
                                                              sqlx_core.error.Error.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          alloc.string.String.t :=
                                                        M.call
                                                          (α0 (borrow e)) in
                                                      M.alloc α1 in
                                                    let* _ : M.Val unit :=
                                                      let* lvl :
                                                          M.Val log.Level.t :=
                                                        M.alloc
                                                          log.Level.Error in
                                                      let* α0 :
                                                          (ref log.Level.t) ->
                                                            (ref
                                                              log.LevelFilter.t)
                                                            ->
                                                            M bool.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.cmp.PartialOrd.le
                                                            (Self :=
                                                              log.Level.t)
                                                            (Rhs :=
                                                              log.LevelFilter.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 : bool.t :=
                                                        M.call
                                                          (α0
                                                            (borrow lvl)
                                                            (borrow
                                                              log.STATIC_MAX_LEVEL)) in
                                                      let* α2 :
                                                          (ref log.Level.t) ->
                                                            (ref
                                                              log.LevelFilter.t)
                                                            ->
                                                            M bool.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.cmp.PartialOrd.le
                                                            (Self :=
                                                              log.Level.t)
                                                            (Rhs :=
                                                              log.LevelFilter.t)
                                                            (Trait := ℐ))) in
                                                      let* α3 :
                                                          log.LevelFilter.t :=
                                                        M.call log.max_level in
                                                      let* α4 :
                                                          M.Val
                                                            log.LevelFilter.t :=
                                                        M.alloc α3 in
                                                      let* α5 : bool.t :=
                                                        M.call
                                                          (α2
                                                            (borrow lvl)
                                                            (borrow α4)) in
                                                      let* α6 : M.Val bool.t :=
                                                        M.alloc
                                                          (BinOp.Pure.and
                                                            α1
                                                            α5) in
                                                      let* α7 : bool.t :=
                                                        M.read (use α6) in
                                                      if α7 then
                                                        let* _ : M.Val unit :=
                                                          let* α0 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "Failed to update message: ") in
                                                          let* α1 :
                                                              M.Val
                                                                (array
                                                                  (ref
                                                                    str.t)) :=
                                                            M.alloc [ α0 ] in
                                                          let* α2 :
                                                              core.fmt.rt.Argument.t :=
                                                            M.call
                                                              (core.fmt.rt.Argument.t::["new_display"]
                                                                (borrow
                                                                  error_message)) in
                                                          let* α3 :
                                                              M.Val
                                                                (array
                                                                  core.fmt.rt.Argument.t) :=
                                                            M.alloc [ α2 ] in
                                                          let* α4 :
                                                              core.fmt.Arguments.t :=
                                                            M.call
                                                              (core.fmt.Arguments.t::["new_v1"]
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow α1))
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow
                                                                    α3))) in
                                                          let* α5 :
                                                              log.Level.t :=
                                                            M.read lvl in
                                                          let* α6 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants_api_communication::messages") in
                                                          let* α7 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants_api_communication::messages") in
                                                          let* α8 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants-api-communication/src/messages.rs") in
                                                          let* α9 :
                                                              M.Val
                                                                (((ref str.t)
                                                                *
                                                                (ref str.t))
                                                                *
                                                                (ref str.t)) :=
                                                            M.alloc
                                                              (α6, α7, α8) in
                                                          let* α10 : unit :=
                                                            M.call
                                                              (log.__private_api.log
                                                                α4
                                                                α5
                                                                (borrow α9)
                                                                ((Integer.of_Z
                                                                    94) :
                                                                  u32.t)
                                                                core.option.Option.None) in
                                                          M.alloc α10 in
                                                        M.alloc tt
                                                      else
                                                        M.alloc tt in
                                                    let* α0 :
                                                        http.status.StatusCode.t :=
                                                      M.read
                                                        http.status.INTERNAL_SERVER_ERROR in
                                                    let* α1 :
                                                        alloc.string.String.t :=
                                                      M.read error_message in
                                                    M.alloc
                                                      (core.result.Result.Err
                                                        (α0, α1))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.message.MessageObject.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)))
                                              ] in
                                          M.pure (use α0)
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.message.MessageObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ]
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.message.MessageObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.message.MessageObject.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t async_openai.types.message.MessageObject.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.message.MessageObject.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn delete_message_handler(
      // TODO: does not exist?
      Path((thread_id, message_id)): Path<(String, String)>,
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<()>, (StatusCode, String)> {
      let result = delete_message(
          &app_state.pool,
          &thread_id,
          &message_id,
          &Uuid::default().to_string(),
      )
      .await;
      match result {
          Ok(_) => Ok(JsonResponse(())),
          Err(e) => {
              let error_message = e.to_string();
              error!("Failed to delete message: {}", error_message);
              Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
          }
      }
  }
  *)
  Definition delete_message_handler
      (__arg0
        :
        axum.extract.path.Path.t
          (alloc.string.String.t * alloc.string.String.t))
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val
                    (axum.extract.path.Path.t
                      (alloc.string.String.t * alloc.string.String.t)) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t unit)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_, _) =>
                          let γ1_0 := Tuple.Access.left γ0_0 in
                          let γ1_1 := Tuple.Access.right γ0_0 in
                          let* thread_id := M.copy γ1_0 in
                          let* message_id := M.copy γ1_1 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* result :
                                      M.Val
                                        (core.result.Result.t
                                          unit
                                          sqlx_core.error.Error.t) :=
                                    let* α0 : _ -> M _ :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.future.into_future.IntoFuture.into_future
                                          (Self := _)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        (ref
                                            (alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t))
                                          ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self :=
                                            alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ))) in
                                    let* α2 :
                                        ref
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t) :=
                                      M.call
                                        (α1
                                          (borrow
                                            (assistants_api_communication.models.AppState.Get_pool
                                              app_state))) in
                                    let* α3 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α4 : ref str.t :=
                                      M.call (α3 (borrow thread_id)) in
                                    let* α5 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α6 : ref str.t :=
                                      M.call (α5 (borrow message_id)) in
                                    let* α7 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α8 :
                                        (ref uuid.Uuid.t) ->
                                          M alloc.string.String.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        alloc.string.ToString.to_string
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α9 : M uuid.Uuid.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.default.Default.default
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α10 : uuid.Uuid.t := M.call α9 in
                                    let* α11 : M.Val uuid.Uuid.t :=
                                      M.alloc α10 in
                                    let* α12 : alloc.string.String.t :=
                                      M.call (α8 (borrow α11)) in
                                    let* α13 : M.Val alloc.string.String.t :=
                                      M.alloc α12 in
                                    let* α14 : ref str.t :=
                                      M.call (α7 (borrow α13)) in
                                    let* α15 : _ :=
                                      M.call
                                        (assistants_core.messages.delete_message
                                          α2
                                          α4
                                          α6
                                          α14) in
                                    let* α16 : _ := M.call (α0 α15) in
                                    let* α17 : M.Val _ := M.alloc α16 in
                                    let* α18 :
                                        M.Val
                                          (core.result.Result.t
                                            unit
                                            sqlx_core.error.Error.t) :=
                                      match_operator
                                        α17
                                        [
                                          fun γ =>
                                            (let* __awaitee := M.copy γ in
                                            M.loop
                                              (let* _ : M.Val unit :=
                                                let* α0 :
                                                    (core.pin.Pin.t (mut_ref _))
                                                      ->
                                                      (mut_ref
                                                        core.task.wake.Context.t)
                                                      ->
                                                      M
                                                        (core.task.poll.Poll.t
                                                          _) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.future.future.Future.poll
                                                      (Self := _)
                                                      (Trait := ℐ))) in
                                                let* α1 :
                                                    core.pin.Pin.t
                                                      (mut_ref _) :=
                                                  M.call
                                                    ((core.pin.Pin.t
                                                          (mut_ref
                                                            _))::["new_unchecked"]
                                                      (borrow_mut __awaitee)) in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read _task_context in
                                                let* α3 :
                                                    mut_ref
                                                      core.task.wake.Context.t :=
                                                  M.call
                                                    (core.future.get_context
                                                      α2) in
                                                let* α4 :
                                                    core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        unit
                                                        sqlx_core.error.Error.t) :=
                                                  M.call (α0 α1 α3) in
                                                let* α5 :
                                                    M.Val
                                                      (core.task.poll.Poll.t
                                                        (core.result.Result.t
                                                          unit
                                                          sqlx_core.error.Error.t)) :=
                                                  M.alloc α4 in
                                                match_operator
                                                  α5
                                                  [
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Ready
                                                            _
                                                          =>
                                                        let γ0_0 :=
                                                          core.task.poll.Poll.Get_Ready_0
                                                            γ in
                                                        let* result :=
                                                          M.copy γ0_0 in
                                                        let* α0 :
                                                            M.Val never.t :=
                                                          M.break in
                                                        let* α1 := M.read α0 in
                                                        let* α2 : unit :=
                                                          never_to_any α1 in
                                                        M.alloc α2
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit);
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Pending
                                                          =>
                                                        M.alloc tt
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit)
                                                  ] in
                                              let* _ : M.Val unit :=
                                                let* α0 : M.Val unit :=
                                                  M.alloc tt in
                                                let* α1 :
                                                    M.Val
                                                      core.future.ResumeTy.t :=
                                                  yield α0 in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read α1 in
                                                assign _task_context α2 in
                                              M.alloc tt)) :
                                            M
                                              (M.Val
                                                (core.result.Result.t
                                                  unit
                                                  sqlx_core.error.Error.t))
                                        ] in
                                    M.copy α18 in
                                  let* α0 :
                                      M.Val
                                        (core.result.Result.t
                                          (axum.json.Json.t unit)
                                          (http.status.StatusCode.t
                                          *
                                          alloc.string.String.t)) :=
                                    match_operator
                                      result
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Ok _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Ok_0 γ in
                                            M.alloc
                                              (core.result.Result.Ok
                                                (axum.json.Json.Build_t tt))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t unit)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)));
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Err _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Err_0 γ in
                                            let* e := M.copy γ0_0 in
                                            let* error_message :
                                                M.Val alloc.string.String.t :=
                                              let* α0 :
                                                  (ref sqlx_core.error.Error.t)
                                                    ->
                                                    M alloc.string.String.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  alloc.string.ToString.to_string
                                                    (Self :=
                                                      sqlx_core.error.Error.t)
                                                    (Trait := ℐ))) in
                                              let* α1 : alloc.string.String.t :=
                                                M.call (α0 (borrow e)) in
                                              M.alloc α1 in
                                            let* _ : M.Val unit :=
                                              let* lvl : M.Val log.Level.t :=
                                                M.alloc log.Level.Error in
                                              let* α0 :
                                                  (ref log.Level.t) ->
                                                    (ref log.LevelFilter.t) ->
                                                    M bool.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.cmp.PartialOrd.le
                                                    (Self := log.Level.t)
                                                    (Rhs := log.LevelFilter.t)
                                                    (Trait := ℐ))) in
                                              let* α1 : bool.t :=
                                                M.call
                                                  (α0
                                                    (borrow lvl)
                                                    (borrow
                                                      log.STATIC_MAX_LEVEL)) in
                                              let* α2 :
                                                  (ref log.Level.t) ->
                                                    (ref log.LevelFilter.t) ->
                                                    M bool.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.cmp.PartialOrd.le
                                                    (Self := log.Level.t)
                                                    (Rhs := log.LevelFilter.t)
                                                    (Trait := ℐ))) in
                                              let* α3 : log.LevelFilter.t :=
                                                M.call log.max_level in
                                              let* α4 :
                                                  M.Val log.LevelFilter.t :=
                                                M.alloc α3 in
                                              let* α5 : bool.t :=
                                                M.call
                                                  (α2
                                                    (borrow lvl)
                                                    (borrow α4)) in
                                              let* α6 : M.Val bool.t :=
                                                M.alloc
                                                  (BinOp.Pure.and α1 α5) in
                                              let* α7 : bool.t :=
                                                M.read (use α6) in
                                              if α7 then
                                                let* _ : M.Val unit :=
                                                  let* α0 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "Failed to delete message: ") in
                                                  let* α1 :
                                                      M.Val
                                                        (array (ref str.t)) :=
                                                    M.alloc [ α0 ] in
                                                  let* α2 :
                                                      core.fmt.rt.Argument.t :=
                                                    M.call
                                                      (core.fmt.rt.Argument.t::["new_display"]
                                                        (borrow
                                                          error_message)) in
                                                  let* α3 :
                                                      M.Val
                                                        (array
                                                          core.fmt.rt.Argument.t) :=
                                                    M.alloc [ α2 ] in
                                                  let* α4 :
                                                      core.fmt.Arguments.t :=
                                                    M.call
                                                      (core.fmt.Arguments.t::["new_v1"]
                                                        (pointer_coercion
                                                          "Unsize"
                                                          (borrow α1))
                                                        (pointer_coercion
                                                          "Unsize"
                                                          (borrow α3))) in
                                                  let* α5 : log.Level.t :=
                                                    M.read lvl in
                                                  let* α6 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants_api_communication::messages") in
                                                  let* α7 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants_api_communication::messages") in
                                                  let* α8 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants-api-communication/src/messages.rs") in
                                                  let* α9 :
                                                      M.Val
                                                        (((ref str.t)
                                                        *
                                                        (ref str.t))
                                                        *
                                                        (ref str.t)) :=
                                                    M.alloc (α6, α7, α8) in
                                                  let* α10 : unit :=
                                                    M.call
                                                      (log.__private_api.log
                                                        α4
                                                        α5
                                                        (borrow α9)
                                                        ((Integer.of_Z 117) :
                                                          u32.t)
                                                        core.option.Option.None) in
                                                  M.alloc α10 in
                                                M.alloc tt
                                              else
                                                M.alloc tt in
                                            let* α0 :
                                                http.status.StatusCode.t :=
                                              M.read
                                                http.status.INTERNAL_SERVER_ERROR in
                                            let* α1 : alloc.string.String.t :=
                                              M.read error_message in
                                            M.alloc
                                              (core.result.Result.Err (α0, α1))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t unit)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)))
                                      ] in
                                  M.pure (use α0)
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t unit)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t unit)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t unit)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t unit)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn list_messages_handler(
      // TODO: impl pagination properly
      Path((thread_id,)): Path<(String,)>,
      Query(pagination_params): Query<ListMessagePaginationParams>,
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<ListMessagesResponse>, (StatusCode, String)> {
      // let PaginationParams {
      //     limit,
      //     order,
      //     after,
      //     before,
      // } = pagination_params;
      let messages = list_messages(
          &app_state.pool,
          &thread_id,
          &Uuid::default().to_string(),
          // limit,
          // order,
          // after,
          // before,
      )
      .await;
      match messages {
          Ok(messages) => Ok(JsonResponse(ListMessagesResponse {
              object: "list".to_string(),
              data: messages.clone().into_iter().map(|m| m.into()).collect(),
              first_id: messages.first().map(|m| m.inner.id.to_string()),
              last_id: messages.last().map(|m| m.inner.id.to_string()),
              // has_more: messages.len() == limit as usize,
              has_more: false,
          })),
          Err(e) => {
              let error_message = e.to_string();
              error!("Failed to list messages: {}", error_message);
              Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
          }
      }
  }
  *)
  Definition list_messages_handler
      (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
      (__arg1
        :
        axum.extract.query.Query.t
          assistants_api_communication.models.ListMessagePaginationParams.t)
      (__arg2
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    let* __arg2 := M.alloc __arg2 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t
                        async_openai.types.message.ListMessagesResponse.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_) =>
                          let γ1_0 := γ0_0 in
                          let* thread_id := M.copy γ1_0 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.query.Query.t
                                  assistants_api_communication.models.ListMessagePaginationParams.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.query.Query.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.query.Query.Get_0 γ in
                                  let* pagination_params := M.copy γ0_0 in
                                  let* __arg2 :
                                      M.Val
                                        (axum.extract.state.State.t
                                          assistants_api_communication.models.AppState.t) :=
                                    M.copy __arg2 in
                                  match_operator
                                    __arg2
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | axum.extract.state.State.Build_t _ =>
                                          let γ0_0 :=
                                            axum.extract.state.State.Get_0 γ in
                                          let* app_state := M.copy γ0_0 in
                                          let* messages :
                                              M.Val
                                                (core.result.Result.t
                                                  (alloc.vec.Vec.t
                                                    assistants_core.models.Message.t
                                                    alloc.alloc.Global.t)
                                                  sqlx_core.error.Error.t) :=
                                            let* α0 : _ -> M _ :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.future.into_future.IntoFuture.into_future
                                                  (Self := _)
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                (ref
                                                    (alloc.sync.Arc.t
                                                      (sqlx_core.pool.Pool.t
                                                        sqlx_postgres.database.Postgres.t)
                                                      alloc.alloc.Global.t))
                                                  ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.sync.Arc.t
                                                      (sqlx_core.pool.Pool.t
                                                        sqlx_postgres.database.Postgres.t)
                                                      alloc.alloc.Global.t)
                                                  (Trait := ℐ))) in
                                            let* α2 :
                                                ref
                                                  (sqlx_core.pool.Pool.t
                                                    sqlx_postgres.database.Postgres.t) :=
                                              M.call
                                                (α1
                                                  (borrow
                                                    (assistants_api_communication.models.AppState.Get_pool
                                                      app_state))) in
                                            let* α3 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α4 : ref str.t :=
                                              M.call (α3 (borrow thread_id)) in
                                            let* α5 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α6 :
                                                (ref uuid.Uuid.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self := uuid.Uuid.t)
                                                  (Trait := ℐ))) in
                                            let* α7 : M uuid.Uuid.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.default.Default.default
                                                  (Self := uuid.Uuid.t)
                                                  (Trait := ℐ))) in
                                            let* α8 : uuid.Uuid.t :=
                                              M.call α7 in
                                            let* α9 : M.Val uuid.Uuid.t :=
                                              M.alloc α8 in
                                            let* α10 : alloc.string.String.t :=
                                              M.call (α6 (borrow α9)) in
                                            let* α11 :
                                                M.Val alloc.string.String.t :=
                                              M.alloc α10 in
                                            let* α12 : ref str.t :=
                                              M.call (α5 (borrow α11)) in
                                            let* α13 : _ :=
                                              M.call
                                                (assistants_core.messages.list_messages
                                                  α2
                                                  α4
                                                  α12) in
                                            let* α14 : _ := M.call (α0 α13) in
                                            let* α15 : M.Val _ := M.alloc α14 in
                                            let* α16 :
                                                M.Val
                                                  (core.result.Result.t
                                                    (alloc.vec.Vec.t
                                                      assistants_core.models.Message.t
                                                      alloc.alloc.Global.t)
                                                    sqlx_core.error.Error.t) :=
                                              match_operator
                                                α15
                                                [
                                                  fun γ =>
                                                    (let* __awaitee :=
                                                      M.copy γ in
                                                    M.loop
                                                      (let* _ : M.Val unit :=
                                                        let* α0 :
                                                            (core.pin.Pin.t
                                                                (mut_ref _))
                                                              ->
                                                              (mut_ref
                                                                core.task.wake.Context.t)
                                                              ->
                                                              M
                                                                (core.task.poll.Poll.t
                                                                  _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.future.future.Future.poll
                                                              (Self := _)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            core.pin.Pin.t
                                                              (mut_ref _) :=
                                                          M.call
                                                            ((core.pin.Pin.t
                                                                  (mut_ref
                                                                    _))::["new_unchecked"]
                                                              (borrow_mut
                                                                __awaitee)) in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read
                                                            _task_context in
                                                        let* α3 :
                                                            mut_ref
                                                              core.task.wake.Context.t :=
                                                          M.call
                                                            (core.future.get_context
                                                              α2) in
                                                        let* α4 :
                                                            core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                (alloc.vec.Vec.t
                                                                  assistants_core.models.Message.t
                                                                  alloc.alloc.Global.t)
                                                                sqlx_core.error.Error.t) :=
                                                          M.call (α0 α1 α3) in
                                                        let* α5 :
                                                            M.Val
                                                              (core.task.poll.Poll.t
                                                                (core.result.Result.t
                                                                  (alloc.vec.Vec.t
                                                                    assistants_core.models.Message.t
                                                                    alloc.alloc.Global.t)
                                                                  sqlx_core.error.Error.t)) :=
                                                          M.alloc α4 in
                                                        match_operator
                                                          α5
                                                          [
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Ready
                                                                    _
                                                                  =>
                                                                let γ0_0 :=
                                                                  core.task.poll.Poll.Get_Ready_0
                                                                    γ in
                                                                let* result :=
                                                                  M.copy γ0_0 in
                                                                let* α0 :
                                                                    M.Val
                                                                      never.t :=
                                                                  M.break in
                                                                let* α1 :=
                                                                  M.read α0 in
                                                                let* α2 :
                                                                    unit :=
                                                                  never_to_any
                                                                    α1 in
                                                                M.alloc α2
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit);
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Pending
                                                                  =>
                                                                M.alloc tt
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit)
                                                          ] in
                                                      let* _ : M.Val unit :=
                                                        let* α0 : M.Val unit :=
                                                          M.alloc tt in
                                                        let* α1 :
                                                            M.Val
                                                              core.future.ResumeTy.t :=
                                                          yield α0 in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read α1 in
                                                        assign
                                                          _task_context
                                                          α2 in
                                                      M.alloc tt)) :
                                                    M
                                                      (M.Val
                                                        (core.result.Result.t
                                                          (alloc.vec.Vec.t
                                                            assistants_core.models.Message.t
                                                            alloc.alloc.Global.t)
                                                          sqlx_core.error.Error.t))
                                                ] in
                                            M.copy α16 in
                                          let* α0 :
                                              M.Val
                                                (core.result.Result.t
                                                  (axum.json.Json.t
                                                    async_openai.types.message.ListMessagesResponse.t)
                                                  (http.status.StatusCode.t
                                                  *
                                                  alloc.string.String.t)) :=
                                            match_operator
                                              messages
                                              [
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Ok _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Ok_0
                                                        γ in
                                                    let* messages :=
                                                      M.copy γ0_0 in
                                                    let* α0 :
                                                        (ref str.t) ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        alloc.string.ToString.to_string
                                                          (Self := str.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 : ref str.t :=
                                                      M.read (mk_str "list") in
                                                    let* α2 :
                                                        alloc.string.String.t :=
                                                      M.call (α0 α1) in
                                                    let* α3 :
                                                        (core.iter.adapters.map.Map.t
                                                            (alloc.vec.into_iter.IntoIter.t
                                                              assistants_core.models.Message.t
                                                              alloc.alloc.Global.t)
                                                            (assistants_core.models.Message.t
                                                              ->
                                                              M
                                                                async_openai.types.message.MessageObject.t))
                                                          ->
                                                          M
                                                            (alloc.vec.Vec.t
                                                              async_openai.types.message.MessageObject.t
                                                              alloc.alloc.Global.t) :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.iter.traits.iterator.Iterator.collect
                                                          (Self :=
                                                            core.iter.adapters.map.Map.t
                                                              (alloc.vec.into_iter.IntoIter.t
                                                                assistants_core.models.Message.t
                                                                alloc.alloc.Global.t)
                                                              (assistants_core.models.Message.t
                                                                ->
                                                                M
                                                                  async_openai.types.message.MessageObject.t))
                                                          (B :=
                                                            alloc.vec.Vec.t
                                                              async_openai.types.message.MessageObject.t
                                                              alloc.alloc.Global.t)
                                                          (Trait := ℐ))) in
                                                    let* α4 :
                                                        (alloc.vec.into_iter.IntoIter.t
                                                            assistants_core.models.Message.t
                                                            alloc.alloc.Global.t)
                                                          ->
                                                          (assistants_core.models.Message.t
                                                            ->
                                                            M
                                                              async_openai.types.message.MessageObject.t)
                                                          ->
                                                          M
                                                            (core.iter.adapters.map.Map.t
                                                              (alloc.vec.into_iter.IntoIter.t
                                                                assistants_core.models.Message.t
                                                                alloc.alloc.Global.t)
                                                              (assistants_core.models.Message.t
                                                                ->
                                                                M
                                                                  async_openai.types.message.MessageObject.t)) :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.iter.traits.iterator.Iterator.map
                                                          (Self :=
                                                            alloc.vec.into_iter.IntoIter.t
                                                              assistants_core.models.Message.t
                                                              alloc.alloc.Global.t)
                                                          (B :=
                                                            async_openai.types.message.MessageObject.t)
                                                          (F :=
                                                            assistants_core.models.Message.t
                                                              ->
                                                              M
                                                                async_openai.types.message.MessageObject.t)
                                                          (Trait := ℐ))) in
                                                    let* α5 :
                                                        (alloc.vec.Vec.t
                                                            assistants_core.models.Message.t
                                                            alloc.alloc.Global.t)
                                                          ->
                                                          M _ :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.iter.traits.collect.IntoIterator.into_iter
                                                          (Self :=
                                                            alloc.vec.Vec.t
                                                              assistants_core.models.Message.t
                                                              alloc.alloc.Global.t)
                                                          (Trait := ℐ))) in
                                                    let* α6 :
                                                        (ref
                                                            (alloc.vec.Vec.t
                                                              assistants_core.models.Message.t
                                                              alloc.alloc.Global.t))
                                                          ->
                                                          M
                                                            (alloc.vec.Vec.t
                                                              assistants_core.models.Message.t
                                                              alloc.alloc.Global.t) :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.clone.Clone.clone
                                                          (Self :=
                                                            alloc.vec.Vec.t
                                                              assistants_core.models.Message.t
                                                              alloc.alloc.Global.t)
                                                          (Trait := ℐ))) in
                                                    let* α7 :
                                                        alloc.vec.Vec.t
                                                          assistants_core.models.Message.t
                                                          alloc.alloc.Global.t :=
                                                      M.call
                                                        (α6
                                                          (borrow messages)) in
                                                    let* α8 :
                                                        alloc.vec.into_iter.IntoIter.t
                                                          assistants_core.models.Message.t
                                                          alloc.alloc.Global.t :=
                                                      M.call (α5 α7) in
                                                    let* α9 :
                                                        core.iter.adapters.map.Map.t
                                                          (alloc.vec.into_iter.IntoIter.t
                                                            assistants_core.models.Message.t
                                                            alloc.alloc.Global.t)
                                                          (assistants_core.models.Message.t
                                                            ->
                                                            M
                                                              async_openai.types.message.MessageObject.t) :=
                                                      M.call
                                                        (α4
                                                          α8
                                                          (fun
                                                              (α0 :
                                                                assistants_core.models.Message.t) =>
                                                            (let* α0 :=
                                                              M.alloc α0 in
                                                            match_operator
                                                              α0
                                                              [
                                                                fun γ =>
                                                                  (let* m :=
                                                                    M.copy γ in
                                                                  let* α0 :
                                                                      assistants_core.models.Message.t
                                                                        ->
                                                                        M
                                                                          async_openai.types.message.MessageObject.t :=
                                                                    ltac:(M.get_method (fun ℐ =>
                                                                      core.convert.Into.into
                                                                        (Self :=
                                                                          assistants_core.models.Message.t)
                                                                        (T :=
                                                                          async_openai.types.message.MessageObject.t)
                                                                        (Trait := ℐ))) in
                                                                  let* α1 :
                                                                      assistants_core.models.Message.t :=
                                                                    M.read m in
                                                                  M.call
                                                                    (α0 α1)) :
                                                                  M
                                                                    async_openai.types.message.MessageObject.t
                                                              ]) :
                                                            M
                                                              async_openai.types.message.MessageObject.t)) in
                                                    let* α10 :
                                                        alloc.vec.Vec.t
                                                          async_openai.types.message.MessageObject.t
                                                          alloc.alloc.Global.t :=
                                                      M.call (α3 α9) in
                                                    let* α11 :
                                                        (ref
                                                            (alloc.vec.Vec.t
                                                              assistants_core.models.Message.t
                                                              alloc.alloc.Global.t))
                                                          ->
                                                          M (ref _) :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.ops.deref.Deref.deref
                                                          (Self :=
                                                            alloc.vec.Vec.t
                                                              assistants_core.models.Message.t
                                                              alloc.alloc.Global.t)
                                                          (Trait := ℐ))) in
                                                    let* α12 :
                                                        ref
                                                          (slice
                                                            assistants_core.models.Message.t) :=
                                                      M.call
                                                        (α11
                                                          (borrow messages)) in
                                                    let* α13 :
                                                        core.option.Option.t
                                                          (ref
                                                            assistants_core.models.Message.t) :=
                                                      M.call
                                                        ((slice
                                                              assistants_core.models.Message.t)::["first"]
                                                          α12) in
                                                    let* α14 :
                                                        core.option.Option.t
                                                          alloc.string.String.t :=
                                                      M.call
                                                        ((core.option.Option.t
                                                              (ref
                                                                assistants_core.models.Message.t))::["map"]
                                                          α13
                                                          (fun
                                                              (α0 :
                                                                ref
                                                                  assistants_core.models.Message.t) =>
                                                            (let* α0 :=
                                                              M.alloc α0 in
                                                            match_operator
                                                              α0
                                                              [
                                                                fun γ =>
                                                                  (let* m :=
                                                                    M.copy γ in
                                                                  let* α0 :
                                                                      (ref
                                                                          alloc.string.String.t)
                                                                        ->
                                                                        M
                                                                          alloc.string.String.t :=
                                                                    ltac:(M.get_method (fun ℐ =>
                                                                      alloc.string.ToString.to_string
                                                                        (Self :=
                                                                          alloc.string.String.t)
                                                                        (Trait := ℐ))) in
                                                                  let* α1 :
                                                                      ref
                                                                        assistants_core.models.Message.t :=
                                                                    M.read m in
                                                                  M.call
                                                                    (α0
                                                                      (borrow
                                                                        (async_openai.types.message.MessageObject.Get_id
                                                                          (assistants_core.models.Message.Get_inner
                                                                            (deref
                                                                              α1)))))) :
                                                                  M
                                                                    alloc.string.String.t
                                                              ]) :
                                                            M
                                                              alloc.string.String.t)) in
                                                    let* α15 :
                                                        (ref
                                                            (alloc.vec.Vec.t
                                                              assistants_core.models.Message.t
                                                              alloc.alloc.Global.t))
                                                          ->
                                                          M (ref _) :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.ops.deref.Deref.deref
                                                          (Self :=
                                                            alloc.vec.Vec.t
                                                              assistants_core.models.Message.t
                                                              alloc.alloc.Global.t)
                                                          (Trait := ℐ))) in
                                                    let* α16 :
                                                        ref
                                                          (slice
                                                            assistants_core.models.Message.t) :=
                                                      M.call
                                                        (α15
                                                          (borrow messages)) in
                                                    let* α17 :
                                                        core.option.Option.t
                                                          (ref
                                                            assistants_core.models.Message.t) :=
                                                      M.call
                                                        ((slice
                                                              assistants_core.models.Message.t)::["last"]
                                                          α16) in
                                                    let* α18 :
                                                        core.option.Option.t
                                                          alloc.string.String.t :=
                                                      M.call
                                                        ((core.option.Option.t
                                                              (ref
                                                                assistants_core.models.Message.t))::["map"]
                                                          α17
                                                          (fun
                                                              (α0 :
                                                                ref
                                                                  assistants_core.models.Message.t) =>
                                                            (let* α0 :=
                                                              M.alloc α0 in
                                                            match_operator
                                                              α0
                                                              [
                                                                fun γ =>
                                                                  (let* m :=
                                                                    M.copy γ in
                                                                  let* α0 :
                                                                      (ref
                                                                          alloc.string.String.t)
                                                                        ->
                                                                        M
                                                                          alloc.string.String.t :=
                                                                    ltac:(M.get_method (fun ℐ =>
                                                                      alloc.string.ToString.to_string
                                                                        (Self :=
                                                                          alloc.string.String.t)
                                                                        (Trait := ℐ))) in
                                                                  let* α1 :
                                                                      ref
                                                                        assistants_core.models.Message.t :=
                                                                    M.read m in
                                                                  M.call
                                                                    (α0
                                                                      (borrow
                                                                        (async_openai.types.message.MessageObject.Get_id
                                                                          (assistants_core.models.Message.Get_inner
                                                                            (deref
                                                                              α1)))))) :
                                                                  M
                                                                    alloc.string.String.t
                                                              ]) :
                                                            M
                                                              alloc.string.String.t)) in
                                                    M.alloc
                                                      (core.result.Result.Ok
                                                        (axum.json.Json.Build_t
                                                          {|
                                                            async_openai.types.message.ListMessagesResponse.object :=
                                                              α2;
                                                            async_openai.types.message.ListMessagesResponse.data :=
                                                              α10;
                                                            async_openai.types.message.ListMessagesResponse.first_id :=
                                                              α14;
                                                            async_openai.types.message.ListMessagesResponse.last_id :=
                                                              α18;
                                                            async_openai.types.message.ListMessagesResponse.has_more :=
                                                              false;
                                                          |}))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.message.ListMessagesResponse.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)));
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Err _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Err_0
                                                        γ in
                                                    let* e := M.copy γ0_0 in
                                                    let* error_message :
                                                        M.Val
                                                          alloc.string.String.t :=
                                                      let* α0 :
                                                          (ref
                                                              sqlx_core.error.Error.t)
                                                            ->
                                                            M
                                                              alloc.string.String.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          alloc.string.ToString.to_string
                                                            (Self :=
                                                              sqlx_core.error.Error.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          alloc.string.String.t :=
                                                        M.call
                                                          (α0 (borrow e)) in
                                                      M.alloc α1 in
                                                    let* _ : M.Val unit :=
                                                      let* lvl :
                                                          M.Val log.Level.t :=
                                                        M.alloc
                                                          log.Level.Error in
                                                      let* α0 :
                                                          (ref log.Level.t) ->
                                                            (ref
                                                              log.LevelFilter.t)
                                                            ->
                                                            M bool.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.cmp.PartialOrd.le
                                                            (Self :=
                                                              log.Level.t)
                                                            (Rhs :=
                                                              log.LevelFilter.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 : bool.t :=
                                                        M.call
                                                          (α0
                                                            (borrow lvl)
                                                            (borrow
                                                              log.STATIC_MAX_LEVEL)) in
                                                      let* α2 :
                                                          (ref log.Level.t) ->
                                                            (ref
                                                              log.LevelFilter.t)
                                                            ->
                                                            M bool.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.cmp.PartialOrd.le
                                                            (Self :=
                                                              log.Level.t)
                                                            (Rhs :=
                                                              log.LevelFilter.t)
                                                            (Trait := ℐ))) in
                                                      let* α3 :
                                                          log.LevelFilter.t :=
                                                        M.call log.max_level in
                                                      let* α4 :
                                                          M.Val
                                                            log.LevelFilter.t :=
                                                        M.alloc α3 in
                                                      let* α5 : bool.t :=
                                                        M.call
                                                          (α2
                                                            (borrow lvl)
                                                            (borrow α4)) in
                                                      let* α6 : M.Val bool.t :=
                                                        M.alloc
                                                          (BinOp.Pure.and
                                                            α1
                                                            α5) in
                                                      let* α7 : bool.t :=
                                                        M.read (use α6) in
                                                      if α7 then
                                                        let* _ : M.Val unit :=
                                                          let* α0 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "Failed to list messages: ") in
                                                          let* α1 :
                                                              M.Val
                                                                (array
                                                                  (ref
                                                                    str.t)) :=
                                                            M.alloc [ α0 ] in
                                                          let* α2 :
                                                              core.fmt.rt.Argument.t :=
                                                            M.call
                                                              (core.fmt.rt.Argument.t::["new_display"]
                                                                (borrow
                                                                  error_message)) in
                                                          let* α3 :
                                                              M.Val
                                                                (array
                                                                  core.fmt.rt.Argument.t) :=
                                                            M.alloc [ α2 ] in
                                                          let* α4 :
                                                              core.fmt.Arguments.t :=
                                                            M.call
                                                              (core.fmt.Arguments.t::["new_v1"]
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow α1))
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow
                                                                    α3))) in
                                                          let* α5 :
                                                              log.Level.t :=
                                                            M.read lvl in
                                                          let* α6 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants_api_communication::messages") in
                                                          let* α7 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants_api_communication::messages") in
                                                          let* α8 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants-api-communication/src/messages.rs") in
                                                          let* α9 :
                                                              M.Val
                                                                (((ref str.t)
                                                                *
                                                                (ref str.t))
                                                                *
                                                                (ref str.t)) :=
                                                            M.alloc
                                                              (α6, α7, α8) in
                                                          let* α10 : unit :=
                                                            M.call
                                                              (log.__private_api.log
                                                                α4
                                                                α5
                                                                (borrow α9)
                                                                ((Integer.of_Z
                                                                    157) :
                                                                  u32.t)
                                                                core.option.Option.None) in
                                                          M.alloc α10 in
                                                        M.alloc tt
                                                      else
                                                        M.alloc tt in
                                                    let* α0 :
                                                        http.status.StatusCode.t :=
                                                      M.read
                                                        http.status.INTERNAL_SERVER_ERROR in
                                                    let* α1 :
                                                        alloc.string.String.t :=
                                                      M.read error_message in
                                                    M.alloc
                                                      (core.result.Result.Err
                                                        (α0, α1))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.message.ListMessagesResponse.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)))
                                              ] in
                                          M.pure (use α0)
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.message.ListMessagesResponse.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ]
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.message.ListMessagesResponse.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.message.ListMessagesResponse.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t
                    async_openai.types.message.ListMessagesResponse.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.message.ListMessagesResponse.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
End messages.

(*
pub async fn add_message_handler(
    Path((thread_id,)): Path<(String,)>,
    State(app_state): State<AppState>,
    Json(message): Json<CreateMessageRequest>,
) -> Result<JsonResponse<MessageObject>, (StatusCode, String)> {
    let user_id = Uuid::default().to_string();

    let content = vec![MessageContent::Text(MessageContentTextObject {
        r#type: "text".to_string(),
        text: TextData {
            value: message.content,
            annotations: vec![],
        },
    })];
    let message = add_message_to_thread(
        &app_state.pool,
        &thread_id,
        MessageRole::User,
        content,
        &user_id,
        None,
    )
    .await;
    match message {
        Ok(message) => Ok(JsonResponse(message.inner)),
        Err(e) => {
            let error_message = e.to_string();
            error!("Failed to add message: {}", error_message);
            Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
        }
    }
}
*)
Definition add_message_handler
    (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    (__arg2
      :
      axum.json.Json.t async_openai.types.message.CreateMessageRequest.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  let* __arg2 := M.alloc __arg2 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t
                      async_openai.types.message.MessageObject.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_) =>
                        let γ1_0 := γ0_0 in
                        let* thread_id := M.copy γ1_0 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* __arg2 :
                                    M.Val
                                      (axum.json.Json.t
                                        async_openai.types.message.CreateMessageRequest.t) :=
                                  M.copy __arg2 in
                                match_operator
                                  __arg2
                                  [
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | axum.json.Json.Build_t _ =>
                                        let γ0_0 := axum.json.Json.Get_0 γ in
                                        let* message := M.copy γ0_0 in
                                        let* user_id :
                                            M.Val alloc.string.String.t :=
                                          let* α0 :
                                              (ref uuid.Uuid.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α1 : M uuid.Uuid.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.default.Default.default
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α2 : uuid.Uuid.t := M.call α1 in
                                          let* α3 : M.Val uuid.Uuid.t :=
                                            M.alloc α2 in
                                          let* α4 : alloc.string.String.t :=
                                            M.call (α0 (borrow α3)) in
                                          M.alloc α4 in
                                        let* content :
                                            M.Val
                                              (alloc.vec.Vec.t
                                                async_openai.types.message.MessageContent.t
                                                alloc.alloc.Global.t) :=
                                          let* α0 :
                                              (ref str.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := str.t)
                                                (Trait := ℐ))) in
                                          let* α1 : ref str.t :=
                                            M.read (mk_str "text") in
                                          let* α2 : alloc.string.String.t :=
                                            M.call (α0 α1) in
                                          let* α3 : alloc.string.String.t :=
                                            M.read
                                              (async_openai.types.message.CreateMessageRequest.Get_content
                                                message) in
                                          let* α4 :
                                              alloc.vec.Vec.t
                                                async_openai.types.message.MessageContentTextAnnotations.t
                                                alloc.alloc.Global.t :=
                                            M.call
                                              (alloc.vec.Vec.t
                                                  async_openai.types.message.MessageContentTextAnnotations.t
                                                  alloc.alloc.Global.t)::["new"] in
                                          let* α5 :
                                              M.Val
                                                (array
                                                  async_openai.types.message.MessageContent.t) :=
                                            M.alloc
                                              [
                                                async_openai.types.message.MessageContent.Text
                                                  {|
                                                    async_openai.types.message.MessageContentTextObject.type :=
                                                      α2;
                                                    async_openai.types.message.MessageContentTextObject.text :=
                                                      {|
                                                        async_openai.types.message.TextData.value :=
                                                          α3;
                                                        async_openai.types.message.TextData.annotations :=
                                                          α4;
                                                      |};
                                                  |}
                                              ] in
                                          let* α6 :
                                              M.Val
                                                (alloc.boxed.Box.t
                                                  (array
                                                    async_openai.types.message.MessageContent.t)
                                                  alloc.alloc.Global.t) :=
                                            M.call
                                              ((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                                                α5) in
                                          let* α7 :
                                              alloc.boxed.Box.t
                                                (array
                                                  async_openai.types.message.MessageContent.t)
                                                alloc.alloc.Global.t :=
                                            M.read α6 in
                                          let* α8 :
                                              alloc.vec.Vec.t
                                                async_openai.types.message.MessageContent.t
                                                alloc.alloc.Global.t :=
                                            M.call
                                              ((slice
                                                    async_openai.types.message.MessageContent.t)::["into_vec"]
                                                (pointer_coercion
                                                  "Unsize"
                                                  α7)) in
                                          M.alloc α8 in
                                        let* message :
                                            M.Val
                                              (core.result.Result.t
                                                assistants_core.models.Message.t
                                                sqlx_core.error.Error.t) :=
                                          let* α0 : _ -> M _ :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.future.into_future.IntoFuture.into_future
                                                (Self := _)
                                                (Trait := ℐ))) in
                                          let* α1 :
                                              (ref
                                                  (alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t))
                                                ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self :=
                                                  alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α2 :
                                              ref
                                                (sqlx_core.pool.Pool.t
                                                  sqlx_postgres.database.Postgres.t) :=
                                            M.call
                                              (α1
                                                (borrow
                                                  (assistants_api_communication.models.AppState.Get_pool
                                                    app_state))) in
                                          let* α3 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α4 : ref str.t :=
                                            M.call (α3 (borrow thread_id)) in
                                          let* α5 :
                                              alloc.vec.Vec.t
                                                async_openai.types.message.MessageContent.t
                                                alloc.alloc.Global.t :=
                                            M.read content in
                                          let* α6 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α7 : ref str.t :=
                                            M.call (α6 (borrow user_id)) in
                                          let* α8 : _ :=
                                            M.call
                                              (assistants_core.messages.add_message_to_thread
                                                α2
                                                α4
                                                async_openai.types.message.MessageRole.User
                                                α5
                                                α7
                                                core.option.Option.None) in
                                          let* α9 : _ := M.call (α0 α8) in
                                          let* α10 : M.Val _ := M.alloc α9 in
                                          let* α11 :
                                              M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Message.t
                                                  sqlx_core.error.Error.t) :=
                                            match_operator
                                              α10
                                              [
                                                fun γ =>
                                                  (let* __awaitee := M.copy γ in
                                                  M.loop
                                                    (let* _ : M.Val unit :=
                                                      let* α0 :
                                                          (core.pin.Pin.t
                                                              (mut_ref _))
                                                            ->
                                                            (mut_ref
                                                              core.task.wake.Context.t)
                                                            ->
                                                            M
                                                              (core.task.poll.Poll.t
                                                                _) :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.future.future.Future.poll
                                                            (Self := _)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          core.pin.Pin.t
                                                            (mut_ref _) :=
                                                        M.call
                                                          ((core.pin.Pin.t
                                                                (mut_ref
                                                                  _))::["new_unchecked"]
                                                            (borrow_mut
                                                              __awaitee)) in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read _task_context in
                                                      let* α3 :
                                                          mut_ref
                                                            core.task.wake.Context.t :=
                                                        M.call
                                                          (core.future.get_context
                                                            α2) in
                                                      let* α4 :
                                                          core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              assistants_core.models.Message.t
                                                              sqlx_core.error.Error.t) :=
                                                        M.call (α0 α1 α3) in
                                                      let* α5 :
                                                          M.Val
                                                            (core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                assistants_core.models.Message.t
                                                                sqlx_core.error.Error.t)) :=
                                                        M.alloc α4 in
                                                      match_operator
                                                        α5
                                                        [
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Ready
                                                                  _
                                                                =>
                                                              let γ0_0 :=
                                                                core.task.poll.Poll.Get_Ready_0
                                                                  γ in
                                                              let* result :=
                                                                M.copy γ0_0 in
                                                              let* α0 :
                                                                  M.Val
                                                                    never.t :=
                                                                M.break in
                                                              let* α1 :=
                                                                M.read α0 in
                                                              let* α2 : unit :=
                                                                never_to_any
                                                                  α1 in
                                                              M.alloc α2
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit);
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Pending
                                                                =>
                                                              M.alloc tt
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit)
                                                        ] in
                                                    let* _ : M.Val unit :=
                                                      let* α0 : M.Val unit :=
                                                        M.alloc tt in
                                                      let* α1 :
                                                          M.Val
                                                            core.future.ResumeTy.t :=
                                                        yield α0 in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read α1 in
                                                      assign _task_context α2 in
                                                    M.alloc tt)) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        assistants_core.models.Message.t
                                                        sqlx_core.error.Error.t))
                                              ] in
                                          M.copy α11 in
                                        let* α0 :
                                            M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.message.MessageObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)) :=
                                          match_operator
                                            message
                                            [
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Ok _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Ok_0
                                                      γ in
                                                  let* message := M.copy γ0_0 in
                                                  let* α0 :
                                                      async_openai.types.message.MessageObject.t :=
                                                    M.read
                                                      (assistants_core.models.Message.Get_inner
                                                        message) in
                                                  M.alloc
                                                    (core.result.Result.Ok
                                                      (axum.json.Json.Build_t
                                                        α0))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.message.MessageObject.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)));
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Err _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Err_0
                                                      γ in
                                                  let* e := M.copy γ0_0 in
                                                  let* error_message :
                                                      M.Val
                                                        alloc.string.String.t :=
                                                    let* α0 :
                                                        (ref
                                                            sqlx_core.error.Error.t)
                                                          ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        alloc.string.ToString.to_string
                                                          (Self :=
                                                            sqlx_core.error.Error.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 :
                                                        alloc.string.String.t :=
                                                      M.call (α0 (borrow e)) in
                                                    M.alloc α1 in
                                                  let* _ : M.Val unit :=
                                                    let* lvl :
                                                        M.Val log.Level.t :=
                                                      M.alloc log.Level.Error in
                                                    let* α0 :
                                                        (ref log.Level.t) ->
                                                          (ref
                                                            log.LevelFilter.t)
                                                          ->
                                                          M bool.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.cmp.PartialOrd.le
                                                          (Self := log.Level.t)
                                                          (Rhs :=
                                                            log.LevelFilter.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 : bool.t :=
                                                      M.call
                                                        (α0
                                                          (borrow lvl)
                                                          (borrow
                                                            log.STATIC_MAX_LEVEL)) in
                                                    let* α2 :
                                                        (ref log.Level.t) ->
                                                          (ref
                                                            log.LevelFilter.t)
                                                          ->
                                                          M bool.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.cmp.PartialOrd.le
                                                          (Self := log.Level.t)
                                                          (Rhs :=
                                                            log.LevelFilter.t)
                                                          (Trait := ℐ))) in
                                                    let* α3 :
                                                        log.LevelFilter.t :=
                                                      M.call log.max_level in
                                                    let* α4 :
                                                        M.Val
                                                          log.LevelFilter.t :=
                                                      M.alloc α3 in
                                                    let* α5 : bool.t :=
                                                      M.call
                                                        (α2
                                                          (borrow lvl)
                                                          (borrow α4)) in
                                                    let* α6 : M.Val bool.t :=
                                                      M.alloc
                                                        (BinOp.Pure.and
                                                          α1
                                                          α5) in
                                                    let* α7 : bool.t :=
                                                      M.read (use α6) in
                                                    if α7 then
                                                      let* _ : M.Val unit :=
                                                        let* α0 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "Failed to add message: ") in
                                                        let* α1 :
                                                            M.Val
                                                              (array
                                                                (ref str.t)) :=
                                                          M.alloc [ α0 ] in
                                                        let* α2 :
                                                            core.fmt.rt.Argument.t :=
                                                          M.call
                                                            (core.fmt.rt.Argument.t::["new_display"]
                                                              (borrow
                                                                error_message)) in
                                                        let* α3 :
                                                            M.Val
                                                              (array
                                                                core.fmt.rt.Argument.t) :=
                                                          M.alloc [ α2 ] in
                                                        let* α4 :
                                                            core.fmt.Arguments.t :=
                                                          M.call
                                                            (core.fmt.Arguments.t::["new_v1"]
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α1))
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α3))) in
                                                        let* α5 : log.Level.t :=
                                                          M.read lvl in
                                                        let* α6 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants_api_communication::messages") in
                                                        let* α7 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants_api_communication::messages") in
                                                        let* α8 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants-api-communication/src/messages.rs") in
                                                        let* α9 :
                                                            M.Val
                                                              (((ref str.t)
                                                              *
                                                              (ref str.t))
                                                              *
                                                              (ref str.t)) :=
                                                          M.alloc
                                                            (α6, α7, α8) in
                                                        let* α10 : unit :=
                                                          M.call
                                                            (log.__private_api.log
                                                              α4
                                                              α5
                                                              (borrow α9)
                                                              ((Integer.of_Z
                                                                  48) :
                                                                u32.t)
                                                              core.option.Option.None) in
                                                        M.alloc α10 in
                                                      M.alloc tt
                                                    else
                                                      M.alloc tt in
                                                  let* α0 :
                                                      http.status.StatusCode.t :=
                                                    M.read
                                                      http.status.INTERNAL_SERVER_ERROR in
                                                  let* α1 :
                                                      alloc.string.String.t :=
                                                    M.read error_message in
                                                  M.alloc
                                                    (core.result.Result.Err
                                                      (α0, α1))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.message.MessageObject.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)))
                                            ] in
                                        M.pure (use α0)
                                      end) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (axum.json.Json.t
                                              async_openai.types.message.MessageObject.t)
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t)))
                                  ]
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.message.MessageObject.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.message.MessageObject.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t async_openai.types.message.MessageObject.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.message.MessageObject.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn get_message_handler(
    Path((thread_id, message_id)): Path<(String, String)>,
    State(app_state): State<AppState>,
) -> Result<JsonResponse<MessageObject>, (StatusCode, String)> {
    let message = get_message(
        &app_state.pool,
        &thread_id,
        &message_id,
        &Uuid::default().to_string(),
    )
    .await;
    match message {
        Ok(message) => Ok(JsonResponse(message.inner)),
        Err(e) => {
            let error_message = e.to_string();
            error!("Failed to get message: {}", error_message);
            Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
        }
    }
}
*)
Definition get_message_handler
    (__arg0
      :
      axum.extract.path.Path.t (alloc.string.String.t * alloc.string.String.t))
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val
                  (axum.extract.path.Path.t
                    (alloc.string.String.t * alloc.string.String.t)) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t
                      async_openai.types.message.MessageObject.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_, _) =>
                        let γ1_0 := Tuple.Access.left γ0_0 in
                        let γ1_1 := Tuple.Access.right γ0_0 in
                        let* thread_id := M.copy γ1_0 in
                        let* message_id := M.copy γ1_1 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* message :
                                    M.Val
                                      (core.result.Result.t
                                        assistants_core.models.Message.t
                                        sqlx_core.error.Error.t) :=
                                  let* α0 : _ -> M _ :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.future.into_future.IntoFuture.into_future
                                        (Self := _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      (ref
                                          (alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t))
                                        ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self :=
                                          alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α2 :
                                      ref
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t) :=
                                    M.call
                                      (α1
                                        (borrow
                                          (assistants_api_communication.models.AppState.Get_pool
                                            app_state))) in
                                  let* α3 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α4 : ref str.t :=
                                    M.call (α3 (borrow thread_id)) in
                                  let* α5 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α6 : ref str.t :=
                                    M.call (α5 (borrow message_id)) in
                                  let* α7 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α8 :
                                      (ref uuid.Uuid.t) ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      alloc.string.ToString.to_string
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α9 : M uuid.Uuid.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.default.Default.default
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α10 : uuid.Uuid.t := M.call α9 in
                                  let* α11 : M.Val uuid.Uuid.t := M.alloc α10 in
                                  let* α12 : alloc.string.String.t :=
                                    M.call (α8 (borrow α11)) in
                                  let* α13 : M.Val alloc.string.String.t :=
                                    M.alloc α12 in
                                  let* α14 : ref str.t :=
                                    M.call (α7 (borrow α13)) in
                                  let* α15 : _ :=
                                    M.call
                                      (assistants_core.messages.get_message
                                        α2
                                        α4
                                        α6
                                        α14) in
                                  let* α16 : _ := M.call (α0 α15) in
                                  let* α17 : M.Val _ := M.alloc α16 in
                                  let* α18 :
                                      M.Val
                                        (core.result.Result.t
                                          assistants_core.models.Message.t
                                          sqlx_core.error.Error.t) :=
                                    match_operator
                                      α17
                                      [
                                        fun γ =>
                                          (let* __awaitee := M.copy γ in
                                          M.loop
                                            (let* _ : M.Val unit :=
                                              let* α0 :
                                                  (core.pin.Pin.t (mut_ref _))
                                                    ->
                                                    (mut_ref
                                                      core.task.wake.Context.t)
                                                    ->
                                                    M
                                                      (core.task.poll.Poll.t
                                                        _) :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.future.future.Future.poll
                                                    (Self := _)
                                                    (Trait := ℐ))) in
                                              let* α1 :
                                                  core.pin.Pin.t (mut_ref _) :=
                                                M.call
                                                  ((core.pin.Pin.t
                                                        (mut_ref
                                                          _))::["new_unchecked"]
                                                    (borrow_mut __awaitee)) in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read _task_context in
                                              let* α3 :
                                                  mut_ref
                                                    core.task.wake.Context.t :=
                                                M.call
                                                  (core.future.get_context
                                                    α2) in
                                              let* α4 :
                                                  core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      assistants_core.models.Message.t
                                                      sqlx_core.error.Error.t) :=
                                                M.call (α0 α1 α3) in
                                              let* α5 :
                                                  M.Val
                                                    (core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        assistants_core.models.Message.t
                                                        sqlx_core.error.Error.t)) :=
                                                M.alloc α4 in
                                              match_operator
                                                α5
                                                [
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Ready
                                                          _
                                                        =>
                                                      let γ0_0 :=
                                                        core.task.poll.Poll.Get_Ready_0
                                                          γ in
                                                      let* result :=
                                                        M.copy γ0_0 in
                                                      let* α0 : M.Val never.t :=
                                                        M.break in
                                                      let* α1 := M.read α0 in
                                                      let* α2 : unit :=
                                                        never_to_any α1 in
                                                      M.alloc α2
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit);
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Pending
                                                        =>
                                                      M.alloc tt
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit)
                                                ] in
                                            let* _ : M.Val unit :=
                                              let* α0 : M.Val unit :=
                                                M.alloc tt in
                                              let* α1 :
                                                  M.Val
                                                    core.future.ResumeTy.t :=
                                                yield α0 in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read α1 in
                                              assign _task_context α2 in
                                            M.alloc tt)) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                assistants_core.models.Message.t
                                                sqlx_core.error.Error.t))
                                      ] in
                                  M.copy α18 in
                                let* α0 :
                                    M.Val
                                      (core.result.Result.t
                                        (axum.json.Json.t
                                          async_openai.types.message.MessageObject.t)
                                        (http.status.StatusCode.t
                                        *
                                        alloc.string.String.t)) :=
                                  match_operator
                                    message
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Ok _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Ok_0 γ in
                                          let* message := M.copy γ0_0 in
                                          let* α0 :
                                              async_openai.types.message.MessageObject.t :=
                                            M.read
                                              (assistants_core.models.Message.Get_inner
                                                message) in
                                          M.alloc
                                            (core.result.Result.Ok
                                              (axum.json.Json.Build_t α0))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.message.MessageObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)));
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Err _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Err_0 γ in
                                          let* e := M.copy γ0_0 in
                                          let* error_message :
                                              M.Val alloc.string.String.t :=
                                            let* α0 :
                                                (ref sqlx_core.error.Error.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self :=
                                                    sqlx_core.error.Error.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : alloc.string.String.t :=
                                              M.call (α0 (borrow e)) in
                                            M.alloc α1 in
                                          let* _ : M.Val unit :=
                                            let* lvl : M.Val log.Level.t :=
                                              M.alloc log.Level.Error in
                                            let* α0 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : bool.t :=
                                              M.call
                                                (α0
                                                  (borrow lvl)
                                                  (borrow
                                                    log.STATIC_MAX_LEVEL)) in
                                            let* α2 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α3 : log.LevelFilter.t :=
                                              M.call log.max_level in
                                            let* α4 : M.Val log.LevelFilter.t :=
                                              M.alloc α3 in
                                            let* α5 : bool.t :=
                                              M.call
                                                (α2 (borrow lvl) (borrow α4)) in
                                            let* α6 : M.Val bool.t :=
                                              M.alloc (BinOp.Pure.and α1 α5) in
                                            let* α7 : bool.t :=
                                              M.read (use α6) in
                                            if α7 then
                                              let* _ : M.Val unit :=
                                                let* α0 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "Failed to get message: ") in
                                                let* α1 :
                                                    M.Val (array (ref str.t)) :=
                                                  M.alloc [ α0 ] in
                                                let* α2 :
                                                    core.fmt.rt.Argument.t :=
                                                  M.call
                                                    (core.fmt.rt.Argument.t::["new_display"]
                                                      (borrow error_message)) in
                                                let* α3 :
                                                    M.Val
                                                      (array
                                                        core.fmt.rt.Argument.t) :=
                                                  M.alloc [ α2 ] in
                                                let* α4 :
                                                    core.fmt.Arguments.t :=
                                                  M.call
                                                    (core.fmt.Arguments.t::["new_v1"]
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α1))
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α3))) in
                                                let* α5 : log.Level.t :=
                                                  M.read lvl in
                                                let* α6 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::messages") in
                                                let* α7 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::messages") in
                                                let* α8 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants-api-communication/src/messages.rs") in
                                                let* α9 :
                                                    M.Val
                                                      (((ref str.t)
                                                      *
                                                      (ref str.t))
                                                      *
                                                      (ref str.t)) :=
                                                  M.alloc (α6, α7, α8) in
                                                let* α10 : unit :=
                                                  M.call
                                                    (log.__private_api.log
                                                      α4
                                                      α5
                                                      (borrow α9)
                                                      ((Integer.of_Z 70) :
                                                        u32.t)
                                                      core.option.Option.None) in
                                                M.alloc α10 in
                                              M.alloc tt
                                            else
                                              M.alloc tt in
                                          let* α0 : http.status.StatusCode.t :=
                                            M.read
                                              http.status.INTERNAL_SERVER_ERROR in
                                          let* α1 : alloc.string.String.t :=
                                            M.read error_message in
                                          M.alloc
                                            (core.result.Result.Err (α0, α1))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.message.MessageObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ] in
                                M.pure (use α0)
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.message.MessageObject.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.message.MessageObject.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t async_openai.types.message.MessageObject.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.message.MessageObject.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn update_message_handler(
    Path((thread_id, message_id)): Path<(String, String)>,
    State(app_state): State<AppState>,
    Json(message_input): Json<ModifyMessageRequest>,
) -> Result<JsonResponse<MessageObject>, (StatusCode, String)> {
    let message = update_message(
        &app_state.pool,
        &thread_id,
        &message_id,
        &Uuid::default().to_string(),
        message_input.metadata,
    )
    .await;
    match message {
        Ok(message) => Ok(JsonResponse(message.inner)),
        Err(e) => {
            let error_message = e.to_string();
            error!("Failed to update message: {}", error_message);
            Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
        }
    }
}
*)
Definition update_message_handler
    (__arg0
      :
      axum.extract.path.Path.t (alloc.string.String.t * alloc.string.String.t))
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    (__arg2
      :
      axum.json.Json.t async_openai.types.message.ModifyMessageRequest.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  let* __arg2 := M.alloc __arg2 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val
                  (axum.extract.path.Path.t
                    (alloc.string.String.t * alloc.string.String.t)) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t
                      async_openai.types.message.MessageObject.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_, _) =>
                        let γ1_0 := Tuple.Access.left γ0_0 in
                        let γ1_1 := Tuple.Access.right γ0_0 in
                        let* thread_id := M.copy γ1_0 in
                        let* message_id := M.copy γ1_1 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* __arg2 :
                                    M.Val
                                      (axum.json.Json.t
                                        async_openai.types.message.ModifyMessageRequest.t) :=
                                  M.copy __arg2 in
                                match_operator
                                  __arg2
                                  [
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | axum.json.Json.Build_t _ =>
                                        let γ0_0 := axum.json.Json.Get_0 γ in
                                        let* message_input := M.copy γ0_0 in
                                        let* message :
                                            M.Val
                                              (core.result.Result.t
                                                assistants_core.models.Message.t
                                                sqlx_core.error.Error.t) :=
                                          let* α0 : _ -> M _ :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.future.into_future.IntoFuture.into_future
                                                (Self := _)
                                                (Trait := ℐ))) in
                                          let* α1 :
                                              (ref
                                                  (alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t))
                                                ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self :=
                                                  alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α2 :
                                              ref
                                                (sqlx_core.pool.Pool.t
                                                  sqlx_postgres.database.Postgres.t) :=
                                            M.call
                                              (α1
                                                (borrow
                                                  (assistants_api_communication.models.AppState.Get_pool
                                                    app_state))) in
                                          let* α3 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α4 : ref str.t :=
                                            M.call (α3 (borrow thread_id)) in
                                          let* α5 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α6 : ref str.t :=
                                            M.call (α5 (borrow message_id)) in
                                          let* α7 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α8 :
                                              (ref uuid.Uuid.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α9 : M uuid.Uuid.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.default.Default.default
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α10 : uuid.Uuid.t := M.call α9 in
                                          let* α11 : M.Val uuid.Uuid.t :=
                                            M.alloc α10 in
                                          let* α12 : alloc.string.String.t :=
                                            M.call (α8 (borrow α11)) in
                                          let* α13 :
                                              M.Val alloc.string.String.t :=
                                            M.alloc α12 in
                                          let* α14 : ref str.t :=
                                            M.call (α7 (borrow α13)) in
                                          let* α15 :
                                              core.option.Option.t
                                                (std.collections.hash.map.HashMap.t
                                                  alloc.string.String.t
                                                  serde_json.value.Value.t
                                                  std.hash.random.RandomState.t) :=
                                            M.read
                                              (async_openai.types.message.ModifyMessageRequest.Get_metadata
                                                message_input) in
                                          let* α16 : _ :=
                                            M.call
                                              (assistants_core.messages.update_message
                                                α2
                                                α4
                                                α6
                                                α14
                                                α15) in
                                          let* α17 : _ := M.call (α0 α16) in
                                          let* α18 : M.Val _ := M.alloc α17 in
                                          let* α19 :
                                              M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Message.t
                                                  sqlx_core.error.Error.t) :=
                                            match_operator
                                              α18
                                              [
                                                fun γ =>
                                                  (let* __awaitee := M.copy γ in
                                                  M.loop
                                                    (let* _ : M.Val unit :=
                                                      let* α0 :
                                                          (core.pin.Pin.t
                                                              (mut_ref _))
                                                            ->
                                                            (mut_ref
                                                              core.task.wake.Context.t)
                                                            ->
                                                            M
                                                              (core.task.poll.Poll.t
                                                                _) :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.future.future.Future.poll
                                                            (Self := _)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          core.pin.Pin.t
                                                            (mut_ref _) :=
                                                        M.call
                                                          ((core.pin.Pin.t
                                                                (mut_ref
                                                                  _))::["new_unchecked"]
                                                            (borrow_mut
                                                              __awaitee)) in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read _task_context in
                                                      let* α3 :
                                                          mut_ref
                                                            core.task.wake.Context.t :=
                                                        M.call
                                                          (core.future.get_context
                                                            α2) in
                                                      let* α4 :
                                                          core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              assistants_core.models.Message.t
                                                              sqlx_core.error.Error.t) :=
                                                        M.call (α0 α1 α3) in
                                                      let* α5 :
                                                          M.Val
                                                            (core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                assistants_core.models.Message.t
                                                                sqlx_core.error.Error.t)) :=
                                                        M.alloc α4 in
                                                      match_operator
                                                        α5
                                                        [
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Ready
                                                                  _
                                                                =>
                                                              let γ0_0 :=
                                                                core.task.poll.Poll.Get_Ready_0
                                                                  γ in
                                                              let* result :=
                                                                M.copy γ0_0 in
                                                              let* α0 :
                                                                  M.Val
                                                                    never.t :=
                                                                M.break in
                                                              let* α1 :=
                                                                M.read α0 in
                                                              let* α2 : unit :=
                                                                never_to_any
                                                                  α1 in
                                                              M.alloc α2
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit);
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Pending
                                                                =>
                                                              M.alloc tt
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit)
                                                        ] in
                                                    let* _ : M.Val unit :=
                                                      let* α0 : M.Val unit :=
                                                        M.alloc tt in
                                                      let* α1 :
                                                          M.Val
                                                            core.future.ResumeTy.t :=
                                                        yield α0 in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read α1 in
                                                      assign _task_context α2 in
                                                    M.alloc tt)) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        assistants_core.models.Message.t
                                                        sqlx_core.error.Error.t))
                                              ] in
                                          M.copy α19 in
                                        let* α0 :
                                            M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.message.MessageObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)) :=
                                          match_operator
                                            message
                                            [
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Ok _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Ok_0
                                                      γ in
                                                  let* message := M.copy γ0_0 in
                                                  let* α0 :
                                                      async_openai.types.message.MessageObject.t :=
                                                    M.read
                                                      (assistants_core.models.Message.Get_inner
                                                        message) in
                                                  M.alloc
                                                    (core.result.Result.Ok
                                                      (axum.json.Json.Build_t
                                                        α0))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.message.MessageObject.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)));
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Err _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Err_0
                                                      γ in
                                                  let* e := M.copy γ0_0 in
                                                  let* error_message :
                                                      M.Val
                                                        alloc.string.String.t :=
                                                    let* α0 :
                                                        (ref
                                                            sqlx_core.error.Error.t)
                                                          ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        alloc.string.ToString.to_string
                                                          (Self :=
                                                            sqlx_core.error.Error.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 :
                                                        alloc.string.String.t :=
                                                      M.call (α0 (borrow e)) in
                                                    M.alloc α1 in
                                                  let* _ : M.Val unit :=
                                                    let* lvl :
                                                        M.Val log.Level.t :=
                                                      M.alloc log.Level.Error in
                                                    let* α0 :
                                                        (ref log.Level.t) ->
                                                          (ref
                                                            log.LevelFilter.t)
                                                          ->
                                                          M bool.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.cmp.PartialOrd.le
                                                          (Self := log.Level.t)
                                                          (Rhs :=
                                                            log.LevelFilter.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 : bool.t :=
                                                      M.call
                                                        (α0
                                                          (borrow lvl)
                                                          (borrow
                                                            log.STATIC_MAX_LEVEL)) in
                                                    let* α2 :
                                                        (ref log.Level.t) ->
                                                          (ref
                                                            log.LevelFilter.t)
                                                          ->
                                                          M bool.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.cmp.PartialOrd.le
                                                          (Self := log.Level.t)
                                                          (Rhs :=
                                                            log.LevelFilter.t)
                                                          (Trait := ℐ))) in
                                                    let* α3 :
                                                        log.LevelFilter.t :=
                                                      M.call log.max_level in
                                                    let* α4 :
                                                        M.Val
                                                          log.LevelFilter.t :=
                                                      M.alloc α3 in
                                                    let* α5 : bool.t :=
                                                      M.call
                                                        (α2
                                                          (borrow lvl)
                                                          (borrow α4)) in
                                                    let* α6 : M.Val bool.t :=
                                                      M.alloc
                                                        (BinOp.Pure.and
                                                          α1
                                                          α5) in
                                                    let* α7 : bool.t :=
                                                      M.read (use α6) in
                                                    if α7 then
                                                      let* _ : M.Val unit :=
                                                        let* α0 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "Failed to update message: ") in
                                                        let* α1 :
                                                            M.Val
                                                              (array
                                                                (ref str.t)) :=
                                                          M.alloc [ α0 ] in
                                                        let* α2 :
                                                            core.fmt.rt.Argument.t :=
                                                          M.call
                                                            (core.fmt.rt.Argument.t::["new_display"]
                                                              (borrow
                                                                error_message)) in
                                                        let* α3 :
                                                            M.Val
                                                              (array
                                                                core.fmt.rt.Argument.t) :=
                                                          M.alloc [ α2 ] in
                                                        let* α4 :
                                                            core.fmt.Arguments.t :=
                                                          M.call
                                                            (core.fmt.Arguments.t::["new_v1"]
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α1))
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α3))) in
                                                        let* α5 : log.Level.t :=
                                                          M.read lvl in
                                                        let* α6 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants_api_communication::messages") in
                                                        let* α7 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants_api_communication::messages") in
                                                        let* α8 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants-api-communication/src/messages.rs") in
                                                        let* α9 :
                                                            M.Val
                                                              (((ref str.t)
                                                              *
                                                              (ref str.t))
                                                              *
                                                              (ref str.t)) :=
                                                          M.alloc
                                                            (α6, α7, α8) in
                                                        let* α10 : unit :=
                                                          M.call
                                                            (log.__private_api.log
                                                              α4
                                                              α5
                                                              (borrow α9)
                                                              ((Integer.of_Z
                                                                  94) :
                                                                u32.t)
                                                              core.option.Option.None) in
                                                        M.alloc α10 in
                                                      M.alloc tt
                                                    else
                                                      M.alloc tt in
                                                  let* α0 :
                                                      http.status.StatusCode.t :=
                                                    M.read
                                                      http.status.INTERNAL_SERVER_ERROR in
                                                  let* α1 :
                                                      alloc.string.String.t :=
                                                    M.read error_message in
                                                  M.alloc
                                                    (core.result.Result.Err
                                                      (α0, α1))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.message.MessageObject.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)))
                                            ] in
                                        M.pure (use α0)
                                      end) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (axum.json.Json.t
                                              async_openai.types.message.MessageObject.t)
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t)))
                                  ]
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.message.MessageObject.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.message.MessageObject.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t async_openai.types.message.MessageObject.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.message.MessageObject.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn delete_message_handler(
    // TODO: does not exist?
    Path((thread_id, message_id)): Path<(String, String)>,
    State(app_state): State<AppState>,
) -> Result<JsonResponse<()>, (StatusCode, String)> {
    let result = delete_message(
        &app_state.pool,
        &thread_id,
        &message_id,
        &Uuid::default().to_string(),
    )
    .await;
    match result {
        Ok(_) => Ok(JsonResponse(())),
        Err(e) => {
            let error_message = e.to_string();
            error!("Failed to delete message: {}", error_message);
            Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
        }
    }
}
*)
Definition delete_message_handler
    (__arg0
      :
      axum.extract.path.Path.t (alloc.string.String.t * alloc.string.String.t))
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val
                  (axum.extract.path.Path.t
                    (alloc.string.String.t * alloc.string.String.t)) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t unit)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_, _) =>
                        let γ1_0 := Tuple.Access.left γ0_0 in
                        let γ1_1 := Tuple.Access.right γ0_0 in
                        let* thread_id := M.copy γ1_0 in
                        let* message_id := M.copy γ1_1 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* result :
                                    M.Val
                                      (core.result.Result.t
                                        unit
                                        sqlx_core.error.Error.t) :=
                                  let* α0 : _ -> M _ :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.future.into_future.IntoFuture.into_future
                                        (Self := _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      (ref
                                          (alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t))
                                        ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self :=
                                          alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α2 :
                                      ref
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t) :=
                                    M.call
                                      (α1
                                        (borrow
                                          (assistants_api_communication.models.AppState.Get_pool
                                            app_state))) in
                                  let* α3 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α4 : ref str.t :=
                                    M.call (α3 (borrow thread_id)) in
                                  let* α5 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α6 : ref str.t :=
                                    M.call (α5 (borrow message_id)) in
                                  let* α7 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α8 :
                                      (ref uuid.Uuid.t) ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      alloc.string.ToString.to_string
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α9 : M uuid.Uuid.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.default.Default.default
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α10 : uuid.Uuid.t := M.call α9 in
                                  let* α11 : M.Val uuid.Uuid.t := M.alloc α10 in
                                  let* α12 : alloc.string.String.t :=
                                    M.call (α8 (borrow α11)) in
                                  let* α13 : M.Val alloc.string.String.t :=
                                    M.alloc α12 in
                                  let* α14 : ref str.t :=
                                    M.call (α7 (borrow α13)) in
                                  let* α15 : _ :=
                                    M.call
                                      (assistants_core.messages.delete_message
                                        α2
                                        α4
                                        α6
                                        α14) in
                                  let* α16 : _ := M.call (α0 α15) in
                                  let* α17 : M.Val _ := M.alloc α16 in
                                  let* α18 :
                                      M.Val
                                        (core.result.Result.t
                                          unit
                                          sqlx_core.error.Error.t) :=
                                    match_operator
                                      α17
                                      [
                                        fun γ =>
                                          (let* __awaitee := M.copy γ in
                                          M.loop
                                            (let* _ : M.Val unit :=
                                              let* α0 :
                                                  (core.pin.Pin.t (mut_ref _))
                                                    ->
                                                    (mut_ref
                                                      core.task.wake.Context.t)
                                                    ->
                                                    M
                                                      (core.task.poll.Poll.t
                                                        _) :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.future.future.Future.poll
                                                    (Self := _)
                                                    (Trait := ℐ))) in
                                              let* α1 :
                                                  core.pin.Pin.t (mut_ref _) :=
                                                M.call
                                                  ((core.pin.Pin.t
                                                        (mut_ref
                                                          _))::["new_unchecked"]
                                                    (borrow_mut __awaitee)) in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read _task_context in
                                              let* α3 :
                                                  mut_ref
                                                    core.task.wake.Context.t :=
                                                M.call
                                                  (core.future.get_context
                                                    α2) in
                                              let* α4 :
                                                  core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      unit
                                                      sqlx_core.error.Error.t) :=
                                                M.call (α0 α1 α3) in
                                              let* α5 :
                                                  M.Val
                                                    (core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        unit
                                                        sqlx_core.error.Error.t)) :=
                                                M.alloc α4 in
                                              match_operator
                                                α5
                                                [
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Ready
                                                          _
                                                        =>
                                                      let γ0_0 :=
                                                        core.task.poll.Poll.Get_Ready_0
                                                          γ in
                                                      let* result :=
                                                        M.copy γ0_0 in
                                                      let* α0 : M.Val never.t :=
                                                        M.break in
                                                      let* α1 := M.read α0 in
                                                      let* α2 : unit :=
                                                        never_to_any α1 in
                                                      M.alloc α2
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit);
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Pending
                                                        =>
                                                      M.alloc tt
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit)
                                                ] in
                                            let* _ : M.Val unit :=
                                              let* α0 : M.Val unit :=
                                                M.alloc tt in
                                              let* α1 :
                                                  M.Val
                                                    core.future.ResumeTy.t :=
                                                yield α0 in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read α1 in
                                              assign _task_context α2 in
                                            M.alloc tt)) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                unit
                                                sqlx_core.error.Error.t))
                                      ] in
                                  M.copy α18 in
                                let* α0 :
                                    M.Val
                                      (core.result.Result.t
                                        (axum.json.Json.t unit)
                                        (http.status.StatusCode.t
                                        *
                                        alloc.string.String.t)) :=
                                  match_operator
                                    result
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Ok _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Ok_0 γ in
                                          M.alloc
                                            (core.result.Result.Ok
                                              (axum.json.Json.Build_t tt))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t unit)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)));
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Err _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Err_0 γ in
                                          let* e := M.copy γ0_0 in
                                          let* error_message :
                                              M.Val alloc.string.String.t :=
                                            let* α0 :
                                                (ref sqlx_core.error.Error.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self :=
                                                    sqlx_core.error.Error.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : alloc.string.String.t :=
                                              M.call (α0 (borrow e)) in
                                            M.alloc α1 in
                                          let* _ : M.Val unit :=
                                            let* lvl : M.Val log.Level.t :=
                                              M.alloc log.Level.Error in
                                            let* α0 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : bool.t :=
                                              M.call
                                                (α0
                                                  (borrow lvl)
                                                  (borrow
                                                    log.STATIC_MAX_LEVEL)) in
                                            let* α2 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α3 : log.LevelFilter.t :=
                                              M.call log.max_level in
                                            let* α4 : M.Val log.LevelFilter.t :=
                                              M.alloc α3 in
                                            let* α5 : bool.t :=
                                              M.call
                                                (α2 (borrow lvl) (borrow α4)) in
                                            let* α6 : M.Val bool.t :=
                                              M.alloc (BinOp.Pure.and α1 α5) in
                                            let* α7 : bool.t :=
                                              M.read (use α6) in
                                            if α7 then
                                              let* _ : M.Val unit :=
                                                let* α0 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "Failed to delete message: ") in
                                                let* α1 :
                                                    M.Val (array (ref str.t)) :=
                                                  M.alloc [ α0 ] in
                                                let* α2 :
                                                    core.fmt.rt.Argument.t :=
                                                  M.call
                                                    (core.fmt.rt.Argument.t::["new_display"]
                                                      (borrow error_message)) in
                                                let* α3 :
                                                    M.Val
                                                      (array
                                                        core.fmt.rt.Argument.t) :=
                                                  M.alloc [ α2 ] in
                                                let* α4 :
                                                    core.fmt.Arguments.t :=
                                                  M.call
                                                    (core.fmt.Arguments.t::["new_v1"]
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α1))
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α3))) in
                                                let* α5 : log.Level.t :=
                                                  M.read lvl in
                                                let* α6 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::messages") in
                                                let* α7 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::messages") in
                                                let* α8 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants-api-communication/src/messages.rs") in
                                                let* α9 :
                                                    M.Val
                                                      (((ref str.t)
                                                      *
                                                      (ref str.t))
                                                      *
                                                      (ref str.t)) :=
                                                  M.alloc (α6, α7, α8) in
                                                let* α10 : unit :=
                                                  M.call
                                                    (log.__private_api.log
                                                      α4
                                                      α5
                                                      (borrow α9)
                                                      ((Integer.of_Z 117) :
                                                        u32.t)
                                                      core.option.Option.None) in
                                                M.alloc α10 in
                                              M.alloc tt
                                            else
                                              M.alloc tt in
                                          let* α0 : http.status.StatusCode.t :=
                                            M.read
                                              http.status.INTERNAL_SERVER_ERROR in
                                          let* α1 : alloc.string.String.t :=
                                            M.read error_message in
                                          M.alloc
                                            (core.result.Result.Err (α0, α1))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t unit)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ] in
                                M.pure (use α0)
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t unit)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t unit)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t unit)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t unit)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn list_messages_handler(
    // TODO: impl pagination properly
    Path((thread_id,)): Path<(String,)>,
    Query(pagination_params): Query<ListMessagePaginationParams>,
    State(app_state): State<AppState>,
) -> Result<JsonResponse<ListMessagesResponse>, (StatusCode, String)> {
    // let PaginationParams {
    //     limit,
    //     order,
    //     after,
    //     before,
    // } = pagination_params;
    let messages = list_messages(
        &app_state.pool,
        &thread_id,
        &Uuid::default().to_string(),
        // limit,
        // order,
        // after,
        // before,
    )
    .await;
    match messages {
        Ok(messages) => Ok(JsonResponse(ListMessagesResponse {
            object: "list".to_string(),
            data: messages.clone().into_iter().map(|m| m.into()).collect(),
            first_id: messages.first().map(|m| m.inner.id.to_string()),
            last_id: messages.last().map(|m| m.inner.id.to_string()),
            // has_more: messages.len() == limit as usize,
            has_more: false,
        })),
        Err(e) => {
            let error_message = e.to_string();
            error!("Failed to list messages: {}", error_message);
            Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
        }
    }
}
*)
Definition list_messages_handler
    (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
    (__arg1
      :
      axum.extract.query.Query.t
        assistants_api_communication.models.ListMessagePaginationParams.t)
    (__arg2
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  let* __arg2 := M.alloc __arg2 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t
                      async_openai.types.message.ListMessagesResponse.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_) =>
                        let γ1_0 := γ0_0 in
                        let* thread_id := M.copy γ1_0 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.query.Query.t
                                assistants_api_communication.models.ListMessagePaginationParams.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.query.Query.Build_t _ =>
                                let γ0_0 := axum.extract.query.Query.Get_0 γ in
                                let* pagination_params := M.copy γ0_0 in
                                let* __arg2 :
                                    M.Val
                                      (axum.extract.state.State.t
                                        assistants_api_communication.models.AppState.t) :=
                                  M.copy __arg2 in
                                match_operator
                                  __arg2
                                  [
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | axum.extract.state.State.Build_t _ =>
                                        let γ0_0 :=
                                          axum.extract.state.State.Get_0 γ in
                                        let* app_state := M.copy γ0_0 in
                                        let* messages :
                                            M.Val
                                              (core.result.Result.t
                                                (alloc.vec.Vec.t
                                                  assistants_core.models.Message.t
                                                  alloc.alloc.Global.t)
                                                sqlx_core.error.Error.t) :=
                                          let* α0 : _ -> M _ :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.future.into_future.IntoFuture.into_future
                                                (Self := _)
                                                (Trait := ℐ))) in
                                          let* α1 :
                                              (ref
                                                  (alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t))
                                                ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self :=
                                                  alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α2 :
                                              ref
                                                (sqlx_core.pool.Pool.t
                                                  sqlx_postgres.database.Postgres.t) :=
                                            M.call
                                              (α1
                                                (borrow
                                                  (assistants_api_communication.models.AppState.Get_pool
                                                    app_state))) in
                                          let* α3 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α4 : ref str.t :=
                                            M.call (α3 (borrow thread_id)) in
                                          let* α5 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α6 :
                                              (ref uuid.Uuid.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α7 : M uuid.Uuid.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.default.Default.default
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α8 : uuid.Uuid.t := M.call α7 in
                                          let* α9 : M.Val uuid.Uuid.t :=
                                            M.alloc α8 in
                                          let* α10 : alloc.string.String.t :=
                                            M.call (α6 (borrow α9)) in
                                          let* α11 :
                                              M.Val alloc.string.String.t :=
                                            M.alloc α10 in
                                          let* α12 : ref str.t :=
                                            M.call (α5 (borrow α11)) in
                                          let* α13 : _ :=
                                            M.call
                                              (assistants_core.messages.list_messages
                                                α2
                                                α4
                                                α12) in
                                          let* α14 : _ := M.call (α0 α13) in
                                          let* α15 : M.Val _ := M.alloc α14 in
                                          let* α16 :
                                              M.Val
                                                (core.result.Result.t
                                                  (alloc.vec.Vec.t
                                                    assistants_core.models.Message.t
                                                    alloc.alloc.Global.t)
                                                  sqlx_core.error.Error.t) :=
                                            match_operator
                                              α15
                                              [
                                                fun γ =>
                                                  (let* __awaitee := M.copy γ in
                                                  M.loop
                                                    (let* _ : M.Val unit :=
                                                      let* α0 :
                                                          (core.pin.Pin.t
                                                              (mut_ref _))
                                                            ->
                                                            (mut_ref
                                                              core.task.wake.Context.t)
                                                            ->
                                                            M
                                                              (core.task.poll.Poll.t
                                                                _) :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.future.future.Future.poll
                                                            (Self := _)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          core.pin.Pin.t
                                                            (mut_ref _) :=
                                                        M.call
                                                          ((core.pin.Pin.t
                                                                (mut_ref
                                                                  _))::["new_unchecked"]
                                                            (borrow_mut
                                                              __awaitee)) in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read _task_context in
                                                      let* α3 :
                                                          mut_ref
                                                            core.task.wake.Context.t :=
                                                        M.call
                                                          (core.future.get_context
                                                            α2) in
                                                      let* α4 :
                                                          core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              (alloc.vec.Vec.t
                                                                assistants_core.models.Message.t
                                                                alloc.alloc.Global.t)
                                                              sqlx_core.error.Error.t) :=
                                                        M.call (α0 α1 α3) in
                                                      let* α5 :
                                                          M.Val
                                                            (core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                (alloc.vec.Vec.t
                                                                  assistants_core.models.Message.t
                                                                  alloc.alloc.Global.t)
                                                                sqlx_core.error.Error.t)) :=
                                                        M.alloc α4 in
                                                      match_operator
                                                        α5
                                                        [
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Ready
                                                                  _
                                                                =>
                                                              let γ0_0 :=
                                                                core.task.poll.Poll.Get_Ready_0
                                                                  γ in
                                                              let* result :=
                                                                M.copy γ0_0 in
                                                              let* α0 :
                                                                  M.Val
                                                                    never.t :=
                                                                M.break in
                                                              let* α1 :=
                                                                M.read α0 in
                                                              let* α2 : unit :=
                                                                never_to_any
                                                                  α1 in
                                                              M.alloc α2
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit);
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Pending
                                                                =>
                                                              M.alloc tt
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit)
                                                        ] in
                                                    let* _ : M.Val unit :=
                                                      let* α0 : M.Val unit :=
                                                        M.alloc tt in
                                                      let* α1 :
                                                          M.Val
                                                            core.future.ResumeTy.t :=
                                                        yield α0 in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read α1 in
                                                      assign _task_context α2 in
                                                    M.alloc tt)) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (alloc.vec.Vec.t
                                                          assistants_core.models.Message.t
                                                          alloc.alloc.Global.t)
                                                        sqlx_core.error.Error.t))
                                              ] in
                                          M.copy α16 in
                                        let* α0 :
                                            M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.message.ListMessagesResponse.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)) :=
                                          match_operator
                                            messages
                                            [
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Ok _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Ok_0
                                                      γ in
                                                  let* messages :=
                                                    M.copy γ0_0 in
                                                  let* α0 :
                                                      (ref str.t) ->
                                                        M
                                                          alloc.string.String.t :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      alloc.string.ToString.to_string
                                                        (Self := str.t)
                                                        (Trait := ℐ))) in
                                                  let* α1 : ref str.t :=
                                                    M.read (mk_str "list") in
                                                  let* α2 :
                                                      alloc.string.String.t :=
                                                    M.call (α0 α1) in
                                                  let* α3 :
                                                      (core.iter.adapters.map.Map.t
                                                          (alloc.vec.into_iter.IntoIter.t
                                                            assistants_core.models.Message.t
                                                            alloc.alloc.Global.t)
                                                          (assistants_core.models.Message.t
                                                            ->
                                                            M
                                                              async_openai.types.message.MessageObject.t))
                                                        ->
                                                        M
                                                          (alloc.vec.Vec.t
                                                            async_openai.types.message.MessageObject.t
                                                            alloc.alloc.Global.t) :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.iter.traits.iterator.Iterator.collect
                                                        (Self :=
                                                          core.iter.adapters.map.Map.t
                                                            (alloc.vec.into_iter.IntoIter.t
                                                              assistants_core.models.Message.t
                                                              alloc.alloc.Global.t)
                                                            (assistants_core.models.Message.t
                                                              ->
                                                              M
                                                                async_openai.types.message.MessageObject.t))
                                                        (B :=
                                                          alloc.vec.Vec.t
                                                            async_openai.types.message.MessageObject.t
                                                            alloc.alloc.Global.t)
                                                        (Trait := ℐ))) in
                                                  let* α4 :
                                                      (alloc.vec.into_iter.IntoIter.t
                                                          assistants_core.models.Message.t
                                                          alloc.alloc.Global.t)
                                                        ->
                                                        (assistants_core.models.Message.t
                                                          ->
                                                          M
                                                            async_openai.types.message.MessageObject.t)
                                                        ->
                                                        M
                                                          (core.iter.adapters.map.Map.t
                                                            (alloc.vec.into_iter.IntoIter.t
                                                              assistants_core.models.Message.t
                                                              alloc.alloc.Global.t)
                                                            (assistants_core.models.Message.t
                                                              ->
                                                              M
                                                                async_openai.types.message.MessageObject.t)) :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.iter.traits.iterator.Iterator.map
                                                        (Self :=
                                                          alloc.vec.into_iter.IntoIter.t
                                                            assistants_core.models.Message.t
                                                            alloc.alloc.Global.t)
                                                        (B :=
                                                          async_openai.types.message.MessageObject.t)
                                                        (F :=
                                                          assistants_core.models.Message.t
                                                            ->
                                                            M
                                                              async_openai.types.message.MessageObject.t)
                                                        (Trait := ℐ))) in
                                                  let* α5 :
                                                      (alloc.vec.Vec.t
                                                          assistants_core.models.Message.t
                                                          alloc.alloc.Global.t)
                                                        ->
                                                        M _ :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.iter.traits.collect.IntoIterator.into_iter
                                                        (Self :=
                                                          alloc.vec.Vec.t
                                                            assistants_core.models.Message.t
                                                            alloc.alloc.Global.t)
                                                        (Trait := ℐ))) in
                                                  let* α6 :
                                                      (ref
                                                          (alloc.vec.Vec.t
                                                            assistants_core.models.Message.t
                                                            alloc.alloc.Global.t))
                                                        ->
                                                        M
                                                          (alloc.vec.Vec.t
                                                            assistants_core.models.Message.t
                                                            alloc.alloc.Global.t) :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.clone.Clone.clone
                                                        (Self :=
                                                          alloc.vec.Vec.t
                                                            assistants_core.models.Message.t
                                                            alloc.alloc.Global.t)
                                                        (Trait := ℐ))) in
                                                  let* α7 :
                                                      alloc.vec.Vec.t
                                                        assistants_core.models.Message.t
                                                        alloc.alloc.Global.t :=
                                                    M.call
                                                      (α6 (borrow messages)) in
                                                  let* α8 :
                                                      alloc.vec.into_iter.IntoIter.t
                                                        assistants_core.models.Message.t
                                                        alloc.alloc.Global.t :=
                                                    M.call (α5 α7) in
                                                  let* α9 :
                                                      core.iter.adapters.map.Map.t
                                                        (alloc.vec.into_iter.IntoIter.t
                                                          assistants_core.models.Message.t
                                                          alloc.alloc.Global.t)
                                                        (assistants_core.models.Message.t
                                                          ->
                                                          M
                                                            async_openai.types.message.MessageObject.t) :=
                                                    M.call
                                                      (α4
                                                        α8
                                                        (fun
                                                            (α0 :
                                                              assistants_core.models.Message.t) =>
                                                          (let* α0 :=
                                                            M.alloc α0 in
                                                          match_operator
                                                            α0
                                                            [
                                                              fun γ =>
                                                                (let* m :=
                                                                  M.copy γ in
                                                                let* α0 :
                                                                    assistants_core.models.Message.t
                                                                      ->
                                                                      M
                                                                        async_openai.types.message.MessageObject.t :=
                                                                  ltac:(M.get_method (fun ℐ =>
                                                                    core.convert.Into.into
                                                                      (Self :=
                                                                        assistants_core.models.Message.t)
                                                                      (T :=
                                                                        async_openai.types.message.MessageObject.t)
                                                                      (Trait := ℐ))) in
                                                                let* α1 :
                                                                    assistants_core.models.Message.t :=
                                                                  M.read m in
                                                                M.call
                                                                  (α0 α1)) :
                                                                M
                                                                  async_openai.types.message.MessageObject.t
                                                            ]) :
                                                          M
                                                            async_openai.types.message.MessageObject.t)) in
                                                  let* α10 :
                                                      alloc.vec.Vec.t
                                                        async_openai.types.message.MessageObject.t
                                                        alloc.alloc.Global.t :=
                                                    M.call (α3 α9) in
                                                  let* α11 :
                                                      (ref
                                                          (alloc.vec.Vec.t
                                                            assistants_core.models.Message.t
                                                            alloc.alloc.Global.t))
                                                        ->
                                                        M (ref _) :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.ops.deref.Deref.deref
                                                        (Self :=
                                                          alloc.vec.Vec.t
                                                            assistants_core.models.Message.t
                                                            alloc.alloc.Global.t)
                                                        (Trait := ℐ))) in
                                                  let* α12 :
                                                      ref
                                                        (slice
                                                          assistants_core.models.Message.t) :=
                                                    M.call
                                                      (α11 (borrow messages)) in
                                                  let* α13 :
                                                      core.option.Option.t
                                                        (ref
                                                          assistants_core.models.Message.t) :=
                                                    M.call
                                                      ((slice
                                                            assistants_core.models.Message.t)::["first"]
                                                        α12) in
                                                  let* α14 :
                                                      core.option.Option.t
                                                        alloc.string.String.t :=
                                                    M.call
                                                      ((core.option.Option.t
                                                            (ref
                                                              assistants_core.models.Message.t))::["map"]
                                                        α13
                                                        (fun
                                                            (α0 :
                                                              ref
                                                                assistants_core.models.Message.t) =>
                                                          (let* α0 :=
                                                            M.alloc α0 in
                                                          match_operator
                                                            α0
                                                            [
                                                              fun γ =>
                                                                (let* m :=
                                                                  M.copy γ in
                                                                let* α0 :
                                                                    (ref
                                                                        alloc.string.String.t)
                                                                      ->
                                                                      M
                                                                        alloc.string.String.t :=
                                                                  ltac:(M.get_method (fun ℐ =>
                                                                    alloc.string.ToString.to_string
                                                                      (Self :=
                                                                        alloc.string.String.t)
                                                                      (Trait := ℐ))) in
                                                                let* α1 :
                                                                    ref
                                                                      assistants_core.models.Message.t :=
                                                                  M.read m in
                                                                M.call
                                                                  (α0
                                                                    (borrow
                                                                      (async_openai.types.message.MessageObject.Get_id
                                                                        (assistants_core.models.Message.Get_inner
                                                                          (deref
                                                                            α1)))))) :
                                                                M
                                                                  alloc.string.String.t
                                                            ]) :
                                                          M
                                                            alloc.string.String.t)) in
                                                  let* α15 :
                                                      (ref
                                                          (alloc.vec.Vec.t
                                                            assistants_core.models.Message.t
                                                            alloc.alloc.Global.t))
                                                        ->
                                                        M (ref _) :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.ops.deref.Deref.deref
                                                        (Self :=
                                                          alloc.vec.Vec.t
                                                            assistants_core.models.Message.t
                                                            alloc.alloc.Global.t)
                                                        (Trait := ℐ))) in
                                                  let* α16 :
                                                      ref
                                                        (slice
                                                          assistants_core.models.Message.t) :=
                                                    M.call
                                                      (α15 (borrow messages)) in
                                                  let* α17 :
                                                      core.option.Option.t
                                                        (ref
                                                          assistants_core.models.Message.t) :=
                                                    M.call
                                                      ((slice
                                                            assistants_core.models.Message.t)::["last"]
                                                        α16) in
                                                  let* α18 :
                                                      core.option.Option.t
                                                        alloc.string.String.t :=
                                                    M.call
                                                      ((core.option.Option.t
                                                            (ref
                                                              assistants_core.models.Message.t))::["map"]
                                                        α17
                                                        (fun
                                                            (α0 :
                                                              ref
                                                                assistants_core.models.Message.t) =>
                                                          (let* α0 :=
                                                            M.alloc α0 in
                                                          match_operator
                                                            α0
                                                            [
                                                              fun γ =>
                                                                (let* m :=
                                                                  M.copy γ in
                                                                let* α0 :
                                                                    (ref
                                                                        alloc.string.String.t)
                                                                      ->
                                                                      M
                                                                        alloc.string.String.t :=
                                                                  ltac:(M.get_method (fun ℐ =>
                                                                    alloc.string.ToString.to_string
                                                                      (Self :=
                                                                        alloc.string.String.t)
                                                                      (Trait := ℐ))) in
                                                                let* α1 :
                                                                    ref
                                                                      assistants_core.models.Message.t :=
                                                                  M.read m in
                                                                M.call
                                                                  (α0
                                                                    (borrow
                                                                      (async_openai.types.message.MessageObject.Get_id
                                                                        (assistants_core.models.Message.Get_inner
                                                                          (deref
                                                                            α1)))))) :
                                                                M
                                                                  alloc.string.String.t
                                                            ]) :
                                                          M
                                                            alloc.string.String.t)) in
                                                  M.alloc
                                                    (core.result.Result.Ok
                                                      (axum.json.Json.Build_t
                                                        {|
                                                          async_openai.types.message.ListMessagesResponse.object :=
                                                            α2;
                                                          async_openai.types.message.ListMessagesResponse.data :=
                                                            α10;
                                                          async_openai.types.message.ListMessagesResponse.first_id :=
                                                            α14;
                                                          async_openai.types.message.ListMessagesResponse.last_id :=
                                                            α18;
                                                          async_openai.types.message.ListMessagesResponse.has_more :=
                                                            false;
                                                        |}))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.message.ListMessagesResponse.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)));
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Err _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Err_0
                                                      γ in
                                                  let* e := M.copy γ0_0 in
                                                  let* error_message :
                                                      M.Val
                                                        alloc.string.String.t :=
                                                    let* α0 :
                                                        (ref
                                                            sqlx_core.error.Error.t)
                                                          ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        alloc.string.ToString.to_string
                                                          (Self :=
                                                            sqlx_core.error.Error.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 :
                                                        alloc.string.String.t :=
                                                      M.call (α0 (borrow e)) in
                                                    M.alloc α1 in
                                                  let* _ : M.Val unit :=
                                                    let* lvl :
                                                        M.Val log.Level.t :=
                                                      M.alloc log.Level.Error in
                                                    let* α0 :
                                                        (ref log.Level.t) ->
                                                          (ref
                                                            log.LevelFilter.t)
                                                          ->
                                                          M bool.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.cmp.PartialOrd.le
                                                          (Self := log.Level.t)
                                                          (Rhs :=
                                                            log.LevelFilter.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 : bool.t :=
                                                      M.call
                                                        (α0
                                                          (borrow lvl)
                                                          (borrow
                                                            log.STATIC_MAX_LEVEL)) in
                                                    let* α2 :
                                                        (ref log.Level.t) ->
                                                          (ref
                                                            log.LevelFilter.t)
                                                          ->
                                                          M bool.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.cmp.PartialOrd.le
                                                          (Self := log.Level.t)
                                                          (Rhs :=
                                                            log.LevelFilter.t)
                                                          (Trait := ℐ))) in
                                                    let* α3 :
                                                        log.LevelFilter.t :=
                                                      M.call log.max_level in
                                                    let* α4 :
                                                        M.Val
                                                          log.LevelFilter.t :=
                                                      M.alloc α3 in
                                                    let* α5 : bool.t :=
                                                      M.call
                                                        (α2
                                                          (borrow lvl)
                                                          (borrow α4)) in
                                                    let* α6 : M.Val bool.t :=
                                                      M.alloc
                                                        (BinOp.Pure.and
                                                          α1
                                                          α5) in
                                                    let* α7 : bool.t :=
                                                      M.read (use α6) in
                                                    if α7 then
                                                      let* _ : M.Val unit :=
                                                        let* α0 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "Failed to list messages: ") in
                                                        let* α1 :
                                                            M.Val
                                                              (array
                                                                (ref str.t)) :=
                                                          M.alloc [ α0 ] in
                                                        let* α2 :
                                                            core.fmt.rt.Argument.t :=
                                                          M.call
                                                            (core.fmt.rt.Argument.t::["new_display"]
                                                              (borrow
                                                                error_message)) in
                                                        let* α3 :
                                                            M.Val
                                                              (array
                                                                core.fmt.rt.Argument.t) :=
                                                          M.alloc [ α2 ] in
                                                        let* α4 :
                                                            core.fmt.Arguments.t :=
                                                          M.call
                                                            (core.fmt.Arguments.t::["new_v1"]
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α1))
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α3))) in
                                                        let* α5 : log.Level.t :=
                                                          M.read lvl in
                                                        let* α6 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants_api_communication::messages") in
                                                        let* α7 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants_api_communication::messages") in
                                                        let* α8 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants-api-communication/src/messages.rs") in
                                                        let* α9 :
                                                            M.Val
                                                              (((ref str.t)
                                                              *
                                                              (ref str.t))
                                                              *
                                                              (ref str.t)) :=
                                                          M.alloc
                                                            (α6, α7, α8) in
                                                        let* α10 : unit :=
                                                          M.call
                                                            (log.__private_api.log
                                                              α4
                                                              α5
                                                              (borrow α9)
                                                              ((Integer.of_Z
                                                                  157) :
                                                                u32.t)
                                                              core.option.Option.None) in
                                                        M.alloc α10 in
                                                      M.alloc tt
                                                    else
                                                      M.alloc tt in
                                                  let* α0 :
                                                      http.status.StatusCode.t :=
                                                    M.read
                                                      http.status.INTERNAL_SERVER_ERROR in
                                                  let* α1 :
                                                      alloc.string.String.t :=
                                                    M.read error_message in
                                                  M.alloc
                                                    (core.result.Result.Err
                                                      (α0, α1))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.message.ListMessagesResponse.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)))
                                            ] in
                                        M.pure (use α0)
                                      end) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (axum.json.Json.t
                                              async_openai.types.message.ListMessagesResponse.t)
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t)))
                                  ]
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.message.ListMessagesResponse.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.message.ListMessagesResponse.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t
                  async_openai.types.message.ListMessagesResponse.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.message.ListMessagesResponse.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

Module models.
  Module  AppState.
  Section AppState.
    Record t : Set := {
      pool :
        alloc.sync.Arc.t ltac:(sqlx_postgres.PgPool) alloc.sync.Arc.Default.A;
      file_storage :
        alloc.sync.Arc.t
          assistants_core.file_storage.FileStorage.t
          alloc.sync.Arc.Default.A;
    }.
    
    Definition Get_pool :=
      Ref.map (fun α => Some α.(pool)) (fun β α => Some (α <| pool := β |>)).
    Definition Get_file_storage :=
      Ref.map
        (fun α => Some α.(file_storage))
        (fun β α => Some (α <| file_storage := β |>)).
  End AppState.
  End AppState.
  
  Module  Impl_core_clone_Clone_for_assistants_api_communication_models_AppState_t.
  Section Impl_core_clone_Clone_for_assistants_api_communication_models_AppState_t.
    Definition Self : Set := assistants_api_communication.models.AppState.t.
    
    (*
    Clone
    *)
    Definition clone
        (self : ref Self)
        : M assistants_api_communication.models.AppState.t :=
      let* self := M.alloc self in
      let* α0 :
          (ref
              (alloc.sync.Arc.t
                (sqlx_core.pool.Pool.t sqlx_postgres.database.Postgres.t)
                alloc.alloc.Global.t))
            ->
            M
              (alloc.sync.Arc.t
                (sqlx_core.pool.Pool.t sqlx_postgres.database.Postgres.t)
                alloc.alloc.Global.t) :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self :=
              alloc.sync.Arc.t
                (sqlx_core.pool.Pool.t sqlx_postgres.database.Postgres.t)
                alloc.alloc.Global.t)
            (Trait := ℐ))) in
      let* α1 : ref assistants_api_communication.models.AppState.t :=
        M.read self in
      let* α2 :
          alloc.sync.Arc.t
            (sqlx_core.pool.Pool.t sqlx_postgres.database.Postgres.t)
            alloc.alloc.Global.t :=
        M.call
          (α0
            (borrow
              (assistants_api_communication.models.AppState.Get_pool
                (deref α1)))) in
      let* α3 :
          (ref
              (alloc.sync.Arc.t
                assistants_core.file_storage.FileStorage.t
                alloc.alloc.Global.t))
            ->
            M
              (alloc.sync.Arc.t
                assistants_core.file_storage.FileStorage.t
                alloc.alloc.Global.t) :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self :=
              alloc.sync.Arc.t
                assistants_core.file_storage.FileStorage.t
                alloc.alloc.Global.t)
            (Trait := ℐ))) in
      let* α4 : ref assistants_api_communication.models.AppState.t :=
        M.read self in
      let* α5 :
          alloc.sync.Arc.t
            assistants_core.file_storage.FileStorage.t
            alloc.alloc.Global.t :=
        M.call
          (α3
            (borrow
              (assistants_api_communication.models.AppState.Get_file_storage
                (deref α4)))) in
      M.pure
        {|
          assistants_api_communication.models.AppState.pool := α2;
          assistants_api_communication.models.AppState.file_storage := α5;
        |}.
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_assistants_api_communication_models_AppState_t.
  End Impl_core_clone_Clone_for_assistants_api_communication_models_AppState_t.
  
  Module  Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_sqlx_postgres_PgPool_alloc_sync_Arc_Default_A.
  Section Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_sqlx_postgres_PgPool_alloc_sync_Arc_Default_A.
    Definition Self : Set :=
      alloc.sync.Arc.t ltac:(sqlx_postgres.PgPool) alloc.sync.Arc.Default.A.
    
    (*
        fn from_ref(state: &AppState) -> Self {
            state.pool.clone()
        }
    *)
    Definition from_ref
        (state : ref assistants_api_communication.models.AppState.t)
        : M Self :=
      let* state := M.alloc state in
      let* α0 :
          (ref
              (alloc.sync.Arc.t
                (sqlx_core.pool.Pool.t sqlx_postgres.database.Postgres.t)
                alloc.alloc.Global.t))
            ->
            M
              (alloc.sync.Arc.t
                (sqlx_core.pool.Pool.t sqlx_postgres.database.Postgres.t)
                alloc.alloc.Global.t) :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self :=
              alloc.sync.Arc.t
                (sqlx_core.pool.Pool.t sqlx_postgres.database.Postgres.t)
                alloc.alloc.Global.t)
            (Trait := ℐ))) in
      let* α1 : ref assistants_api_communication.models.AppState.t :=
        M.read state in
      M.call
        (α0
          (borrow
            (assistants_api_communication.models.AppState.Get_pool
              (deref α1)))).
    
    Global Instance AssociatedFunction_from_ref :
      Notations.DoubleColon Self "from_ref" := {
      Notations.double_colon := from_ref;
    }.
    
    Global Instance ℐ :
      axum_core.extract.from_ref.FromRef.Trait Self
        (T := assistants_api_communication.models.AppState.t) := {
      axum_core.extract.from_ref.FromRef.from_ref := from_ref;
    }.
  End Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_sqlx_postgres_PgPool_alloc_sync_Arc_Default_A.
  End Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_sqlx_postgres_PgPool_alloc_sync_Arc_Default_A.
  
  Module  Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_assistants_core_file_storage_FileStorage_t_alloc_sync_Arc_Default_A.
  Section Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_assistants_core_file_storage_FileStorage_t_alloc_sync_Arc_Default_A.
    Definition Self : Set :=
      alloc.sync.Arc.t
        assistants_core.file_storage.FileStorage.t
        alloc.sync.Arc.Default.A.
    
    (*
        fn from_ref(state: &AppState) -> Self {
            state.file_storage.clone()
        }
    *)
    Definition from_ref
        (state : ref assistants_api_communication.models.AppState.t)
        : M Self :=
      let* state := M.alloc state in
      let* α0 :
          (ref
              (alloc.sync.Arc.t
                assistants_core.file_storage.FileStorage.t
                alloc.alloc.Global.t))
            ->
            M
              (alloc.sync.Arc.t
                assistants_core.file_storage.FileStorage.t
                alloc.alloc.Global.t) :=
        ltac:(M.get_method (fun ℐ =>
          core.clone.Clone.clone
            (Self :=
              alloc.sync.Arc.t
                assistants_core.file_storage.FileStorage.t
                alloc.alloc.Global.t)
            (Trait := ℐ))) in
      let* α1 : ref assistants_api_communication.models.AppState.t :=
        M.read state in
      M.call
        (α0
          (borrow
            (assistants_api_communication.models.AppState.Get_file_storage
              (deref α1)))).
    
    Global Instance AssociatedFunction_from_ref :
      Notations.DoubleColon Self "from_ref" := {
      Notations.double_colon := from_ref;
    }.
    
    Global Instance ℐ :
      axum_core.extract.from_ref.FromRef.Trait Self
        (T := assistants_api_communication.models.AppState.t) := {
      axum_core.extract.from_ref.FromRef.from_ref := from_ref;
    }.
  End Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_assistants_core_file_storage_FileStorage_t_alloc_sync_Arc_Default_A.
  End Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_assistants_core_file_storage_FileStorage_t_alloc_sync_Arc_Default_A.
  
  Module  ListMessagePaginationParams.
  Section ListMessagePaginationParams.
    Record t : Set := {
      limit : core.option.Option.t i32.t;
      order : core.option.Option.t alloc.string.String.t;
      after : core.option.Option.t alloc.string.String.t;
      before : core.option.Option.t alloc.string.String.t;
    }.
    
    Definition Get_limit :=
      Ref.map (fun α => Some α.(limit)) (fun β α => Some (α <| limit := β |>)).
    Definition Get_order :=
      Ref.map (fun α => Some α.(order)) (fun β α => Some (α <| order := β |>)).
    Definition Get_after :=
      Ref.map (fun α => Some α.(after)) (fun β α => Some (α <| after := β |>)).
    Definition Get_before :=
      Ref.map
        (fun α => Some α.(before))
        (fun β α => Some (α <| before := β |>)).
  End ListMessagePaginationParams.
  End ListMessagePaginationParams.
  
  Module  Impl_core_fmt_Debug_for_assistants_api_communication_models_ListMessagePaginationParams_t.
  Section Impl_core_fmt_Debug_for_assistants_api_communication_models_ListMessagePaginationParams_t.
    Definition Self : Set :=
      assistants_api_communication.models.ListMessagePaginationParams.t.
    
    (*
    Debug
    *)
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter.t)
        : M ltac:(core.fmt.Result) :=
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
      let* α1 : ref str.t := M.read (mk_str "ListMessagePaginationParams") in
      let* α2 : ref str.t := M.read (mk_str "limit") in
      let* α3 :
          ref
            assistants_api_communication.models.ListMessagePaginationParams.t :=
        M.read self in
      let* α4 : ref str.t := M.read (mk_str "order") in
      let* α5 :
          ref
            assistants_api_communication.models.ListMessagePaginationParams.t :=
        M.read self in
      let* α6 : ref str.t := M.read (mk_str "after") in
      let* α7 :
          ref
            assistants_api_communication.models.ListMessagePaginationParams.t :=
        M.read self in
      let* α8 : ref str.t := M.read (mk_str "before") in
      let* α9 :
          ref
            assistants_api_communication.models.ListMessagePaginationParams.t :=
        M.read self in
      let* α10 : M.Val (ref (core.option.Option.t alloc.string.String.t)) :=
        M.alloc
          (borrow
            (assistants_api_communication.models.ListMessagePaginationParams.Get_before
              (deref α9))) in
      M.call
        (core.fmt.Formatter.t::["debug_struct_field4_finish"]
          α0
          α1
          α2
          (pointer_coercion
            "Unsize"
            (borrow
              (assistants_api_communication.models.ListMessagePaginationParams.Get_limit
                (deref α3))))
          α4
          (pointer_coercion
            "Unsize"
            (borrow
              (assistants_api_communication.models.ListMessagePaginationParams.Get_order
                (deref α5))))
          α6
          (pointer_coercion
            "Unsize"
            (borrow
              (assistants_api_communication.models.ListMessagePaginationParams.Get_after
                (deref α7))))
          α8
          (pointer_coercion "Unsize" (borrow α10))).
    
    Global Instance AssociatedFunction_fmt :
      Notations.DoubleColon Self "fmt" := {
      Notations.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_assistants_api_communication_models_ListMessagePaginationParams_t.
  End Impl_core_fmt_Debug_for_assistants_api_communication_models_ListMessagePaginationParams_t.
End models.

Module  AppState.
Section AppState.
  Record t : Set := {
    pool :
      alloc.sync.Arc.t ltac:(sqlx_postgres.PgPool) alloc.sync.Arc.Default.A;
    file_storage :
      alloc.sync.Arc.t
        assistants_core.file_storage.FileStorage.t
        alloc.sync.Arc.Default.A;
  }.
  
  Definition Get_pool :=
    Ref.map (fun α => Some α.(pool)) (fun β α => Some (α <| pool := β |>)).
  Definition Get_file_storage :=
    Ref.map
      (fun α => Some α.(file_storage))
      (fun β α => Some (α <| file_storage := β |>)).
End AppState.
End AppState.

Module  Impl_core_clone_Clone_for_assistants_api_communication_models_AppState_t.
Section Impl_core_clone_Clone_for_assistants_api_communication_models_AppState_t.
  Definition Self : Set := assistants_api_communication.models.AppState.t.
  
  (*
  Clone
  *)
  Definition clone
      (self : ref Self)
      : M assistants_api_communication.models.AppState.t :=
    let* self := M.alloc self in
    let* α0 :
        (ref
            (alloc.sync.Arc.t
              (sqlx_core.pool.Pool.t sqlx_postgres.database.Postgres.t)
              alloc.alloc.Global.t))
          ->
          M
            (alloc.sync.Arc.t
              (sqlx_core.pool.Pool.t sqlx_postgres.database.Postgres.t)
              alloc.alloc.Global.t) :=
      ltac:(M.get_method (fun ℐ =>
        core.clone.Clone.clone
          (Self :=
            alloc.sync.Arc.t
              (sqlx_core.pool.Pool.t sqlx_postgres.database.Postgres.t)
              alloc.alloc.Global.t)
          (Trait := ℐ))) in
    let* α1 : ref assistants_api_communication.models.AppState.t :=
      M.read self in
    let* α2 :
        alloc.sync.Arc.t
          (sqlx_core.pool.Pool.t sqlx_postgres.database.Postgres.t)
          alloc.alloc.Global.t :=
      M.call
        (α0
          (borrow
            (assistants_api_communication.models.AppState.Get_pool
              (deref α1)))) in
    let* α3 :
        (ref
            (alloc.sync.Arc.t
              assistants_core.file_storage.FileStorage.t
              alloc.alloc.Global.t))
          ->
          M
            (alloc.sync.Arc.t
              assistants_core.file_storage.FileStorage.t
              alloc.alloc.Global.t) :=
      ltac:(M.get_method (fun ℐ =>
        core.clone.Clone.clone
          (Self :=
            alloc.sync.Arc.t
              assistants_core.file_storage.FileStorage.t
              alloc.alloc.Global.t)
          (Trait := ℐ))) in
    let* α4 : ref assistants_api_communication.models.AppState.t :=
      M.read self in
    let* α5 :
        alloc.sync.Arc.t
          assistants_core.file_storage.FileStorage.t
          alloc.alloc.Global.t :=
      M.call
        (α3
          (borrow
            (assistants_api_communication.models.AppState.Get_file_storage
              (deref α4)))) in
    M.pure
      {|
        assistants_api_communication.models.AppState.pool := α2;
        assistants_api_communication.models.AppState.file_storage := α5;
      |}.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_assistants_api_communication_models_AppState_t.
End Impl_core_clone_Clone_for_assistants_api_communication_models_AppState_t.

Module  Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_sqlx_postgres_PgPool_alloc_sync_Arc_Default_A.
Section Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_sqlx_postgres_PgPool_alloc_sync_Arc_Default_A.
  Definition Self : Set :=
    alloc.sync.Arc.t ltac:(sqlx_postgres.PgPool) alloc.sync.Arc.Default.A.
  
  (*
      fn from_ref(state: &AppState) -> Self {
          state.pool.clone()
      }
  *)
  Definition from_ref
      (state : ref assistants_api_communication.models.AppState.t)
      : M Self :=
    let* state := M.alloc state in
    let* α0 :
        (ref
            (alloc.sync.Arc.t
              (sqlx_core.pool.Pool.t sqlx_postgres.database.Postgres.t)
              alloc.alloc.Global.t))
          ->
          M
            (alloc.sync.Arc.t
              (sqlx_core.pool.Pool.t sqlx_postgres.database.Postgres.t)
              alloc.alloc.Global.t) :=
      ltac:(M.get_method (fun ℐ =>
        core.clone.Clone.clone
          (Self :=
            alloc.sync.Arc.t
              (sqlx_core.pool.Pool.t sqlx_postgres.database.Postgres.t)
              alloc.alloc.Global.t)
          (Trait := ℐ))) in
    let* α1 : ref assistants_api_communication.models.AppState.t :=
      M.read state in
    M.call
      (α0
        (borrow
          (assistants_api_communication.models.AppState.Get_pool (deref α1)))).
  
  Global Instance AssociatedFunction_from_ref :
    Notations.DoubleColon Self "from_ref" := {
    Notations.double_colon := from_ref;
  }.
  
  Global Instance ℐ :
    axum_core.extract.from_ref.FromRef.Trait Self
      (T := assistants_api_communication.models.AppState.t) := {
    axum_core.extract.from_ref.FromRef.from_ref := from_ref;
  }.
End Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_sqlx_postgres_PgPool_alloc_sync_Arc_Default_A.
End Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_sqlx_postgres_PgPool_alloc_sync_Arc_Default_A.

Module  Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_assistants_core_file_storage_FileStorage_t_alloc_sync_Arc_Default_A.
Section Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_assistants_core_file_storage_FileStorage_t_alloc_sync_Arc_Default_A.
  Definition Self : Set :=
    alloc.sync.Arc.t
      assistants_core.file_storage.FileStorage.t
      alloc.sync.Arc.Default.A.
  
  (*
      fn from_ref(state: &AppState) -> Self {
          state.file_storage.clone()
      }
  *)
  Definition from_ref
      (state : ref assistants_api_communication.models.AppState.t)
      : M Self :=
    let* state := M.alloc state in
    let* α0 :
        (ref
            (alloc.sync.Arc.t
              assistants_core.file_storage.FileStorage.t
              alloc.alloc.Global.t))
          ->
          M
            (alloc.sync.Arc.t
              assistants_core.file_storage.FileStorage.t
              alloc.alloc.Global.t) :=
      ltac:(M.get_method (fun ℐ =>
        core.clone.Clone.clone
          (Self :=
            alloc.sync.Arc.t
              assistants_core.file_storage.FileStorage.t
              alloc.alloc.Global.t)
          (Trait := ℐ))) in
    let* α1 : ref assistants_api_communication.models.AppState.t :=
      M.read state in
    M.call
      (α0
        (borrow
          (assistants_api_communication.models.AppState.Get_file_storage
            (deref α1)))).
  
  Global Instance AssociatedFunction_from_ref :
    Notations.DoubleColon Self "from_ref" := {
    Notations.double_colon := from_ref;
  }.
  
  Global Instance ℐ :
    axum_core.extract.from_ref.FromRef.Trait Self
      (T := assistants_api_communication.models.AppState.t) := {
    axum_core.extract.from_ref.FromRef.from_ref := from_ref;
  }.
End Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_assistants_core_file_storage_FileStorage_t_alloc_sync_Arc_Default_A.
End Impl_axum_core_extract_from_ref_FromRef_assistants_api_communication_models_AppState_t_for_alloc_sync_Arc_t_assistants_core_file_storage_FileStorage_t_alloc_sync_Arc_Default_A.

Module  ListMessagePaginationParams.
Section ListMessagePaginationParams.
  Record t : Set := {
    limit : core.option.Option.t i32.t;
    order : core.option.Option.t alloc.string.String.t;
    after : core.option.Option.t alloc.string.String.t;
    before : core.option.Option.t alloc.string.String.t;
  }.
  
  Definition Get_limit :=
    Ref.map (fun α => Some α.(limit)) (fun β α => Some (α <| limit := β |>)).
  Definition Get_order :=
    Ref.map (fun α => Some α.(order)) (fun β α => Some (α <| order := β |>)).
  Definition Get_after :=
    Ref.map (fun α => Some α.(after)) (fun β α => Some (α <| after := β |>)).
  Definition Get_before :=
    Ref.map (fun α => Some α.(before)) (fun β α => Some (α <| before := β |>)).
End ListMessagePaginationParams.
End ListMessagePaginationParams.

Module  Impl_core_fmt_Debug_for_assistants_api_communication_models_ListMessagePaginationParams_t.
Section Impl_core_fmt_Debug_for_assistants_api_communication_models_ListMessagePaginationParams_t.
  Definition Self : Set :=
    assistants_api_communication.models.ListMessagePaginationParams.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "ListMessagePaginationParams") in
    let* α2 : ref str.t := M.read (mk_str "limit") in
    let* α3 :
        ref assistants_api_communication.models.ListMessagePaginationParams.t :=
      M.read self in
    let* α4 : ref str.t := M.read (mk_str "order") in
    let* α5 :
        ref assistants_api_communication.models.ListMessagePaginationParams.t :=
      M.read self in
    let* α6 : ref str.t := M.read (mk_str "after") in
    let* α7 :
        ref assistants_api_communication.models.ListMessagePaginationParams.t :=
      M.read self in
    let* α8 : ref str.t := M.read (mk_str "before") in
    let* α9 :
        ref assistants_api_communication.models.ListMessagePaginationParams.t :=
      M.read self in
    let* α10 : M.Val (ref (core.option.Option.t alloc.string.String.t)) :=
      M.alloc
        (borrow
          (assistants_api_communication.models.ListMessagePaginationParams.Get_before
            (deref α9))) in
    M.call
      (core.fmt.Formatter.t::["debug_struct_field4_finish"]
        α0
        α1
        α2
        (pointer_coercion
          "Unsize"
          (borrow
            (assistants_api_communication.models.ListMessagePaginationParams.Get_limit
              (deref α3))))
        α4
        (pointer_coercion
          "Unsize"
          (borrow
            (assistants_api_communication.models.ListMessagePaginationParams.Get_order
              (deref α5))))
        α6
        (pointer_coercion
          "Unsize"
          (borrow
            (assistants_api_communication.models.ListMessagePaginationParams.Get_after
              (deref α7))))
        α8
        (pointer_coercion "Unsize" (borrow α10))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_assistants_api_communication_models_ListMessagePaginationParams_t.
End Impl_core_fmt_Debug_for_assistants_api_communication_models_ListMessagePaginationParams_t.

Module  Impl_serde_de_Deserialize_for_assistants_api_communication_models_ListMessagePaginationParams_t.
Section Impl_serde_de_Deserialize_for_assistants_api_communication_models_ListMessagePaginationParams_t.
  Definition Self : Set :=
    assistants_api_communication.models.ListMessagePaginationParams.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_api_communication.models._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_api_communication.models._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "ListMessagePaginationParams") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_api_communication.models._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_api_communication.models._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_api_communication.models._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_api_communication_models_ListMessagePaginationParams_t.
End Impl_serde_de_Deserialize_for_assistants_api_communication_models_ListMessagePaginationParams_t.

Module  Impl_serde_de_Visitor_for_assistants_api_communication_models___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_api_communication_models___deserialize___FieldVisitor_t.
  Definition Self : Set :=
    assistants_api_communication.models._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set :=
    assistants_api_communication.models._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_api_communication.models._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.models._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.models._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.models._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.models._.deserialize.__Field.__field3)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.models._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_api_communication.models._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.models._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.models._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.models._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.models._.deserialize.__Field.__field3)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.models._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_api_communication.models._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_api_communication.models._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_api_communication.models._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_api_communication.models._.deserialize.__Field.__field2)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_api_communication.models._.deserialize.__Field.__field3)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.models._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.models._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_api_communication_models___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_api_communication_models___deserialize___FieldVisitor_t.

Module  Impl_serde_de_Deserialize_for_assistants_api_communication_models___deserialize___Field_t.
Section Impl_serde_de_Deserialize_for_assistants_api_communication_models___deserialize___Field_t.
  Definition Self : Set :=
    assistants_api_communication.models._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          assistants_api_communication.models._.deserialize.__FieldVisitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_identifier
          (Self := __D)
          (V :=
            assistants_api_communication.models._.deserialize.__FieldVisitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    M.call
      (α0
        α1
        assistants_api_communication.models._.deserialize.__FieldVisitor.Build).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_api_communication_models___deserialize___Field_t.
End Impl_serde_de_Deserialize_for_assistants_api_communication_models___deserialize___Field_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker :
      core.marker.PhantomData.t
        assistants_api_communication.models.ListMessagePaginationParams.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_api_communication_models___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_api_communication_models___deserialize___Visitor_t.
  Definition Self : Set :=
    assistants_api_communication.models._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set :=
    assistants_api_communication.models.ListMessagePaginationParams.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t :=
      M.read (mk_str "struct ListMessagePaginationParams") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val (core.option.Option.t i32.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t (core.option.Option.t i32.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t (core.option.Option.t i32.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t (core.option.Option.t i32.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := core.option.Option.t i32.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t (core.option.Option.t i32.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t (core.option.Option.t i32.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t (core.option.Option.t i32.t))) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t (core.option.Option.t i32.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_api_communication.models.ListMessagePaginationParams.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_api_communication.models.ListMessagePaginationParams.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_api_communication.models.ListMessagePaginationParams.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t (core.option.Option.t i32.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t (core.option.Option.t i32.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t (core.option.Option.t i32.t)))
            ] in
        let* α6 : M.Val (core.option.Option.t i32.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ListMessagePaginationParams with 4 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : core.option.Option.t i32.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t))
            ] in
        M.copy α6 in
      let* __field1 : M.Val (core.option.Option.t alloc.string.String.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t
                  (core.option.Option.t alloc.string.String.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t alloc.string.String.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t alloc.string.String.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := core.option.Option.t alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  (core.option.Option.t alloc.string.String.t))) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_api_communication.models.ListMessagePaginationParams.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_api_communication.models.ListMessagePaginationParams.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_api_communication.models.ListMessagePaginationParams.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        (core.option.Option.t alloc.string.String.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t alloc.string.String.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t alloc.string.String.t)))
            ] in
        let* α6 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ListMessagePaginationParams with 4 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        M.copy α6 in
      let* __field2 : M.Val (core.option.Option.t alloc.string.String.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t
                  (core.option.Option.t alloc.string.String.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t alloc.string.String.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t alloc.string.String.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := core.option.Option.t alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  (core.option.Option.t alloc.string.String.t))) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_api_communication.models.ListMessagePaginationParams.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_api_communication.models.ListMessagePaginationParams.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_api_communication.models.ListMessagePaginationParams.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        (core.option.Option.t alloc.string.String.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t alloc.string.String.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t alloc.string.String.t)))
            ] in
        let* α6 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 2) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ListMessagePaginationParams with 4 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        M.copy α6 in
      let* __field3 : M.Val (core.option.Option.t alloc.string.String.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t
                  (core.option.Option.t alloc.string.String.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t alloc.string.String.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    (core.option.Option.t alloc.string.String.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := core.option.Option.t alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  (core.option.Option.t alloc.string.String.t))) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t
                (core.option.Option.t alloc.string.String.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_api_communication.models.ListMessagePaginationParams.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_api_communication.models.ListMessagePaginationParams.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_api_communication.models.ListMessagePaginationParams.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        (core.option.Option.t alloc.string.String.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t alloc.string.String.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (core.option.Option.t alloc.string.String.t)))
            ] in
        let* α6 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 3) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ListMessagePaginationParams with 4 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        M.copy α6 in
      let* α0 : core.option.Option.t i32.t := M.read __field0 in
      let* α1 : core.option.Option.t alloc.string.String.t := M.read __field1 in
      let* α2 : core.option.Option.t alloc.string.String.t := M.read __field2 in
      let* α3 : core.option.Option.t alloc.string.String.t := M.read __field3 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_api_communication.models.ListMessagePaginationParams.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_api_communication.models.ListMessagePaginationParams.limit :=
                α0;
              assistants_api_communication.models.ListMessagePaginationParams.order :=
                α1;
              assistants_api_communication.models.ListMessagePaginationParams.after :=
                α2;
              assistants_api_communication.models.ListMessagePaginationParams.before :=
                α3;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 :
          M.Val (core.option.Option.t (core.option.Option.t i32.t)) :=
        M.alloc core.option.Option.None in
      let* __field1 :
          M.Val
            (core.option.Option.t
              (core.option.Option.t alloc.string.String.t)) :=
        M.alloc core.option.Option.None in
      let* __field2 :
          M.Val
            (core.option.Option.t
              (core.option.Option.t alloc.string.String.t)) :=
        M.alloc core.option.Option.None in
      let* __field3 :
          M.Val
            (core.option.Option.t
              (core.option.Option.t alloc.string.String.t)) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_api_communication.models._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_api_communication.models._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_api_communication.models._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K :=
                  assistants_api_communication.models._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_api_communication.models._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_api_communication.models._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_api_communication.models._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_api_communication.models._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_api_communication.models.ListMessagePaginationParams.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_api_communication.models.ListMessagePaginationParams.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_api_communication.models.ListMessagePaginationParams.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_api_communication.models._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_api_communication.models._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_api_communication.models._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_api_communication.models._.deserialize.__Field.__field0
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (core.option.Option.t i32.t))::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "limit") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (core.option.Option.t i32.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (core.option.Option.t i32.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (core.option.Option.t i32.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := core.option.Option.t i32.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (core.option.Option.t i32.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (core.option.Option.t i32.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (core.option.Option.t i32.t)) :=
                              M.alloc α3 in
                            let* α5 : M.Val (core.option.Option.t i32.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_api_communication.models.ListMessagePaginationParams.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_api_communication.models.ListMessagePaginationParams.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_api_communication.models.ListMessagePaginationParams.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : core.option.Option.t i32.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val (core.option.Option.t i32.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val (core.option.Option.t i32.t))
                                ] in
                            let* α6 : core.option.Option.t i32.t := M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_api_communication.models._.deserialize.__Field.__field1
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (core.option.Option.t
                                        alloc.string.String.t))::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "order") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (core.option.Option.t alloc.string.String.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (core.option.Option.t
                                        alloc.string.String.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (core.option.Option.t
                                        alloc.string.String.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    core.option.Option.t alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (core.option.Option.t alloc.string.String.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (core.option.Option.t
                                    alloc.string.String.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (core.option.Option.t
                                      alloc.string.String.t)) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  (core.option.Option.t
                                    alloc.string.String.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_api_communication.models.ListMessagePaginationParams.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_api_communication.models.ListMessagePaginationParams.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_api_communication.models.ListMessagePaginationParams.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          core.option.Option.t
                                            alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          alloc.string.String.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          alloc.string.String.t))
                                ] in
                            let* α6 :
                                core.option.Option.t alloc.string.String.t :=
                              M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_api_communication.models._.deserialize.__Field.__field2
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (core.option.Option.t
                                        alloc.string.String.t))::["is_some"]
                                  (borrow __field2)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "after") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (core.option.Option.t alloc.string.String.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (core.option.Option.t
                                        alloc.string.String.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (core.option.Option.t
                                        alloc.string.String.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    core.option.Option.t alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (core.option.Option.t alloc.string.String.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (core.option.Option.t
                                    alloc.string.String.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (core.option.Option.t
                                      alloc.string.String.t)) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  (core.option.Option.t
                                    alloc.string.String.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_api_communication.models.ListMessagePaginationParams.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_api_communication.models.ListMessagePaginationParams.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_api_communication.models.ListMessagePaginationParams.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          core.option.Option.t
                                            alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          alloc.string.String.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          alloc.string.String.t))
                                ] in
                            let* α6 :
                                core.option.Option.t alloc.string.String.t :=
                              M.read α5 in
                            assign __field2 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_api_communication.models._.deserialize.__Field.__field3
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (core.option.Option.t
                                        alloc.string.String.t))::["is_some"]
                                  (borrow __field3)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "before") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (core.option.Option.t alloc.string.String.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (core.option.Option.t
                                        alloc.string.String.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (core.option.Option.t
                                        alloc.string.String.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    core.option.Option.t alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (core.option.Option.t alloc.string.String.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (core.option.Option.t
                                    alloc.string.String.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (core.option.Option.t
                                      alloc.string.String.t)) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  (core.option.Option.t
                                    alloc.string.String.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_api_communication.models.ListMessagePaginationParams.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_api_communication.models.ListMessagePaginationParams.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_api_communication.models.ListMessagePaginationParams.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          core.option.Option.t
                                            alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          alloc.string.String.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (core.option.Option.t
                                          alloc.string.String.t))
                                ] in
                            let* α6 :
                                core.option.Option.t alloc.string.String.t :=
                              M.read α5 in
                            assign __field3 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_api_communication.models.ListMessagePaginationParams.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_api_communication.models.ListMessagePaginationParams.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_api_communication.models.ListMessagePaginationParams.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val (core.option.Option.t i32.t) :=
        let* α0 : M.Val (core.option.Option.t i32.t) :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t (core.option.Option.t i32.t) _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t (core.option.Option.t i32.t) _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "limit") in
                  let* α2 :
                      core.result.Result.t (core.option.Option.t i32.t) _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (core.option.Option.t i32.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (core.option.Option.t i32.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_api_communication.models.ListMessagePaginationParams.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_api_communication.models.ListMessagePaginationParams.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_api_communication.models.ListMessagePaginationParams.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : core.option.Option.t i32.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t i32.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t i32.t))
                    ]
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t i32.t))
            ] in
        M.copy α0 in
      let* __field1 : M.Val (core.option.Option.t alloc.string.String.t) :=
        let* α0 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          (core.option.Option.t alloc.string.String.t)
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (core.option.Option.t alloc.string.String.t)
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "order") in
                  let* α2 :
                      core.result.Result.t
                        (core.option.Option.t alloc.string.String.t)
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (core.option.Option.t alloc.string.String.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (core.option.Option.t alloc.string.String.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_api_communication.models.ListMessagePaginationParams.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_api_communication.models.ListMessagePaginationParams.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_api_communication.models.ListMessagePaginationParams.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              core.option.Option.t alloc.string.String.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t alloc.string.String.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t alloc.string.String.t))
                    ]
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        M.copy α0 in
      let* __field2 : M.Val (core.option.Option.t alloc.string.String.t) :=
        let* α0 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            __field2
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field2 := M.copy γ0_0 in
                  M.pure __field2
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          (core.option.Option.t alloc.string.String.t)
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (core.option.Option.t alloc.string.String.t)
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "after") in
                  let* α2 :
                      core.result.Result.t
                        (core.option.Option.t alloc.string.String.t)
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (core.option.Option.t alloc.string.String.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (core.option.Option.t alloc.string.String.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_api_communication.models.ListMessagePaginationParams.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_api_communication.models.ListMessagePaginationParams.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_api_communication.models.ListMessagePaginationParams.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              core.option.Option.t alloc.string.String.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t alloc.string.String.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t alloc.string.String.t))
                    ]
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        M.copy α0 in
      let* __field3 : M.Val (core.option.Option.t alloc.string.String.t) :=
        let* α0 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            __field3
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field3 := M.copy γ0_0 in
                  M.pure __field3
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          (core.option.Option.t alloc.string.String.t)
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (core.option.Option.t alloc.string.String.t)
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "before") in
                  let* α2 :
                      core.result.Result.t
                        (core.option.Option.t alloc.string.String.t)
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (core.option.Option.t alloc.string.String.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (core.option.Option.t alloc.string.String.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_api_communication.models.ListMessagePaginationParams.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_api_communication.models.ListMessagePaginationParams.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_api_communication.models.ListMessagePaginationParams.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              core.option.Option.t alloc.string.String.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t alloc.string.String.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t alloc.string.String.t))
                    ]
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        M.copy α0 in
      let* α0 : core.option.Option.t i32.t := M.read __field0 in
      let* α1 : core.option.Option.t alloc.string.String.t := M.read __field1 in
      let* α2 : core.option.Option.t alloc.string.String.t := M.read __field2 in
      let* α3 : core.option.Option.t alloc.string.String.t := M.read __field3 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_api_communication.models.ListMessagePaginationParams.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_api_communication.models.ListMessagePaginationParams.limit :=
                α0;
              assistants_api_communication.models.ListMessagePaginationParams.order :=
                α1;
              assistants_api_communication.models.ListMessagePaginationParams.after :=
                α2;
              assistants_api_communication.models.ListMessagePaginationParams.before :=
                α3;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_api_communication_models___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_api_communication_models___deserialize___Visitor_t.

Module run_steps.
  (*
  pub async fn get_step_handler(
      Path((run_id, step_id)): Path<(String, String)>,
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<RunStepObject>, (StatusCode, String)> {
      let user_id = Uuid::default().to_string();
      let step = get_step(&app_state.pool, &step_id, &user_id).await;
      match step {
          Ok(step) => Ok(JsonResponse(step.inner)),
          Err(e) => {
              error!("Error getting step: {}", e);
              Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))
          }
      }
  }
  *)
  Definition get_step_handler
      (__arg0
        :
        axum.extract.path.Path.t
          (alloc.string.String.t * alloc.string.String.t))
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val
                    (axum.extract.path.Path.t
                      (alloc.string.String.t * alloc.string.String.t)) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t async_openai.types.step.RunStepObject.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_, _) =>
                          let γ1_0 := Tuple.Access.left γ0_0 in
                          let γ1_1 := Tuple.Access.right γ0_0 in
                          let* run_id := M.copy γ1_0 in
                          let* step_id := M.copy γ1_1 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* user_id : M.Val alloc.string.String.t :=
                                    let* α0 :
                                        (ref uuid.Uuid.t) ->
                                          M alloc.string.String.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        alloc.string.ToString.to_string
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α1 : M uuid.Uuid.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.default.Default.default
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α2 : uuid.Uuid.t := M.call α1 in
                                    let* α3 : M.Val uuid.Uuid.t := M.alloc α2 in
                                    let* α4 : alloc.string.String.t :=
                                      M.call (α0 (borrow α3)) in
                                    M.alloc α4 in
                                  let* step :
                                      M.Val
                                        (core.result.Result.t
                                          assistants_core.models.RunStep.t
                                          sqlx_core.error.Error.t) :=
                                    let* α0 : _ -> M _ :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.future.into_future.IntoFuture.into_future
                                          (Self := _)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        (ref
                                            (alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t))
                                          ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self :=
                                            alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ))) in
                                    let* α2 :
                                        ref
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t) :=
                                      M.call
                                        (α1
                                          (borrow
                                            (assistants_api_communication.models.AppState.Get_pool
                                              app_state))) in
                                    let* α3 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α4 : ref str.t :=
                                      M.call (α3 (borrow step_id)) in
                                    let* α5 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α6 : ref str.t :=
                                      M.call (α5 (borrow user_id)) in
                                    let* α7 : _ :=
                                      M.call
                                        (assistants_core.run_steps.get_step
                                          α2
                                          α4
                                          α6) in
                                    let* α8 : _ := M.call (α0 α7) in
                                    let* α9 : M.Val _ := M.alloc α8 in
                                    let* α10 :
                                        M.Val
                                          (core.result.Result.t
                                            assistants_core.models.RunStep.t
                                            sqlx_core.error.Error.t) :=
                                      match_operator
                                        α9
                                        [
                                          fun γ =>
                                            (let* __awaitee := M.copy γ in
                                            M.loop
                                              (let* _ : M.Val unit :=
                                                let* α0 :
                                                    (core.pin.Pin.t (mut_ref _))
                                                      ->
                                                      (mut_ref
                                                        core.task.wake.Context.t)
                                                      ->
                                                      M
                                                        (core.task.poll.Poll.t
                                                          _) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.future.future.Future.poll
                                                      (Self := _)
                                                      (Trait := ℐ))) in
                                                let* α1 :
                                                    core.pin.Pin.t
                                                      (mut_ref _) :=
                                                  M.call
                                                    ((core.pin.Pin.t
                                                          (mut_ref
                                                            _))::["new_unchecked"]
                                                      (borrow_mut __awaitee)) in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read _task_context in
                                                let* α3 :
                                                    mut_ref
                                                      core.task.wake.Context.t :=
                                                  M.call
                                                    (core.future.get_context
                                                      α2) in
                                                let* α4 :
                                                    core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        assistants_core.models.RunStep.t
                                                        sqlx_core.error.Error.t) :=
                                                  M.call (α0 α1 α3) in
                                                let* α5 :
                                                    M.Val
                                                      (core.task.poll.Poll.t
                                                        (core.result.Result.t
                                                          assistants_core.models.RunStep.t
                                                          sqlx_core.error.Error.t)) :=
                                                  M.alloc α4 in
                                                match_operator
                                                  α5
                                                  [
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Ready
                                                            _
                                                          =>
                                                        let γ0_0 :=
                                                          core.task.poll.Poll.Get_Ready_0
                                                            γ in
                                                        let* result :=
                                                          M.copy γ0_0 in
                                                        let* α0 :
                                                            M.Val never.t :=
                                                          M.break in
                                                        let* α1 := M.read α0 in
                                                        let* α2 : unit :=
                                                          never_to_any α1 in
                                                        M.alloc α2
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit);
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Pending
                                                          =>
                                                        M.alloc tt
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit)
                                                  ] in
                                              let* _ : M.Val unit :=
                                                let* α0 : M.Val unit :=
                                                  M.alloc tt in
                                                let* α1 :
                                                    M.Val
                                                      core.future.ResumeTy.t :=
                                                  yield α0 in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read α1 in
                                                assign _task_context α2 in
                                              M.alloc tt)) :
                                            M
                                              (M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.RunStep.t
                                                  sqlx_core.error.Error.t))
                                        ] in
                                    M.copy α10 in
                                  let* α0 :
                                      M.Val
                                        (core.result.Result.t
                                          (axum.json.Json.t
                                            async_openai.types.step.RunStepObject.t)
                                          (http.status.StatusCode.t
                                          *
                                          alloc.string.String.t)) :=
                                    match_operator
                                      step
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Ok _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Ok_0 γ in
                                            let* step := M.copy γ0_0 in
                                            let* α0 :
                                                async_openai.types.step.RunStepObject.t :=
                                              M.read
                                                (assistants_core.models.RunStep.Get_inner
                                                  step) in
                                            M.alloc
                                              (core.result.Result.Ok
                                                (axum.json.Json.Build_t α0))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.step.RunStepObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)));
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Err _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Err_0 γ in
                                            let* e := M.copy γ0_0 in
                                            let* _ : M.Val unit :=
                                              let* lvl : M.Val log.Level.t :=
                                                M.alloc log.Level.Error in
                                              let* α0 :
                                                  (ref log.Level.t) ->
                                                    (ref log.LevelFilter.t) ->
                                                    M bool.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.cmp.PartialOrd.le
                                                    (Self := log.Level.t)
                                                    (Rhs := log.LevelFilter.t)
                                                    (Trait := ℐ))) in
                                              let* α1 : bool.t :=
                                                M.call
                                                  (α0
                                                    (borrow lvl)
                                                    (borrow
                                                      log.STATIC_MAX_LEVEL)) in
                                              let* α2 :
                                                  (ref log.Level.t) ->
                                                    (ref log.LevelFilter.t) ->
                                                    M bool.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.cmp.PartialOrd.le
                                                    (Self := log.Level.t)
                                                    (Rhs := log.LevelFilter.t)
                                                    (Trait := ℐ))) in
                                              let* α3 : log.LevelFilter.t :=
                                                M.call log.max_level in
                                              let* α4 :
                                                  M.Val log.LevelFilter.t :=
                                                M.alloc α3 in
                                              let* α5 : bool.t :=
                                                M.call
                                                  (α2
                                                    (borrow lvl)
                                                    (borrow α4)) in
                                              let* α6 : M.Val bool.t :=
                                                M.alloc
                                                  (BinOp.Pure.and α1 α5) in
                                              let* α7 : bool.t :=
                                                M.read (use α6) in
                                              if α7 then
                                                let* _ : M.Val unit :=
                                                  let* α0 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "Error getting step: ") in
                                                  let* α1 :
                                                      M.Val
                                                        (array (ref str.t)) :=
                                                    M.alloc [ α0 ] in
                                                  let* α2 :
                                                      core.fmt.rt.Argument.t :=
                                                    M.call
                                                      (core.fmt.rt.Argument.t::["new_display"]
                                                        (borrow e)) in
                                                  let* α3 :
                                                      M.Val
                                                        (array
                                                          core.fmt.rt.Argument.t) :=
                                                    M.alloc [ α2 ] in
                                                  let* α4 :
                                                      core.fmt.Arguments.t :=
                                                    M.call
                                                      (core.fmt.Arguments.t::["new_v1"]
                                                        (pointer_coercion
                                                          "Unsize"
                                                          (borrow α1))
                                                        (pointer_coercion
                                                          "Unsize"
                                                          (borrow α3))) in
                                                  let* α5 : log.Level.t :=
                                                    M.read lvl in
                                                  let* α6 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants_api_communication::run_steps") in
                                                  let* α7 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants_api_communication::run_steps") in
                                                  let* α8 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants-api-communication/src/run_steps.rs") in
                                                  let* α9 :
                                                      M.Val
                                                        (((ref str.t)
                                                        *
                                                        (ref str.t))
                                                        *
                                                        (ref str.t)) :=
                                                    M.alloc (α6, α7, α8) in
                                                  let* α10 : unit :=
                                                    M.call
                                                      (log.__private_api.log
                                                        α4
                                                        α5
                                                        (borrow α9)
                                                        ((Integer.of_Z 25) :
                                                          u32.t)
                                                        core.option.Option.None) in
                                                  M.alloc α10 in
                                                M.alloc tt
                                              else
                                                M.alloc tt in
                                            let* α0 :
                                                http.status.StatusCode.t :=
                                              M.read
                                                http.status.INTERNAL_SERVER_ERROR in
                                            let* α1 :
                                                (ref sqlx_core.error.Error.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self :=
                                                    sqlx_core.error.Error.t)
                                                  (Trait := ℐ))) in
                                            let* α2 : alloc.string.String.t :=
                                              M.call (α1 (borrow e)) in
                                            M.alloc
                                              (core.result.Result.Err (α0, α2))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.step.RunStepObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)))
                                      ] in
                                  M.pure (use α0)
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.step.RunStepObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.step.RunStepObject.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t async_openai.types.step.RunStepObject.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.step.RunStepObject.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn list_steps_handler(
      Path((run_id,)): Path<(String,)>,
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<Vec<RunStepObject>>, (StatusCode, String)> {
      let user_id = Uuid::default().to_string();
      let steps = list_steps(&app_state.pool, &run_id, &user_id).await;
      match steps {
          Ok(steps) => Ok(JsonResponse(steps.into_iter().map(|s| s.inner).collect())),
          Err(e) => {
              error!("Error listing steps: {}", e);
              Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))
          }
      }
  }
  *)
  Definition list_steps_handler
      (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t
                        (alloc.vec.Vec.t
                          async_openai.types.step.RunStepObject.t
                          alloc.alloc.Global.t))
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_) =>
                          let γ1_0 := γ0_0 in
                          let* run_id := M.copy γ1_0 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* user_id : M.Val alloc.string.String.t :=
                                    let* α0 :
                                        (ref uuid.Uuid.t) ->
                                          M alloc.string.String.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        alloc.string.ToString.to_string
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α1 : M uuid.Uuid.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.default.Default.default
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α2 : uuid.Uuid.t := M.call α1 in
                                    let* α3 : M.Val uuid.Uuid.t := M.alloc α2 in
                                    let* α4 : alloc.string.String.t :=
                                      M.call (α0 (borrow α3)) in
                                    M.alloc α4 in
                                  let* steps :
                                      M.Val
                                        (core.result.Result.t
                                          (alloc.vec.Vec.t
                                            assistants_core.models.RunStep.t
                                            alloc.alloc.Global.t)
                                          sqlx_core.error.Error.t) :=
                                    let* α0 : _ -> M _ :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.future.into_future.IntoFuture.into_future
                                          (Self := _)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        (ref
                                            (alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t))
                                          ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self :=
                                            alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ))) in
                                    let* α2 :
                                        ref
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t) :=
                                      M.call
                                        (α1
                                          (borrow
                                            (assistants_api_communication.models.AppState.Get_pool
                                              app_state))) in
                                    let* α3 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α4 : ref str.t :=
                                      M.call (α3 (borrow run_id)) in
                                    let* α5 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α6 : ref str.t :=
                                      M.call (α5 (borrow user_id)) in
                                    let* α7 : _ :=
                                      M.call
                                        (assistants_core.run_steps.list_steps
                                          α2
                                          α4
                                          α6) in
                                    let* α8 : _ := M.call (α0 α7) in
                                    let* α9 : M.Val _ := M.alloc α8 in
                                    let* α10 :
                                        M.Val
                                          (core.result.Result.t
                                            (alloc.vec.Vec.t
                                              assistants_core.models.RunStep.t
                                              alloc.alloc.Global.t)
                                            sqlx_core.error.Error.t) :=
                                      match_operator
                                        α9
                                        [
                                          fun γ =>
                                            (let* __awaitee := M.copy γ in
                                            M.loop
                                              (let* _ : M.Val unit :=
                                                let* α0 :
                                                    (core.pin.Pin.t (mut_ref _))
                                                      ->
                                                      (mut_ref
                                                        core.task.wake.Context.t)
                                                      ->
                                                      M
                                                        (core.task.poll.Poll.t
                                                          _) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.future.future.Future.poll
                                                      (Self := _)
                                                      (Trait := ℐ))) in
                                                let* α1 :
                                                    core.pin.Pin.t
                                                      (mut_ref _) :=
                                                  M.call
                                                    ((core.pin.Pin.t
                                                          (mut_ref
                                                            _))::["new_unchecked"]
                                                      (borrow_mut __awaitee)) in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read _task_context in
                                                let* α3 :
                                                    mut_ref
                                                      core.task.wake.Context.t :=
                                                  M.call
                                                    (core.future.get_context
                                                      α2) in
                                                let* α4 :
                                                    core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        (alloc.vec.Vec.t
                                                          assistants_core.models.RunStep.t
                                                          alloc.alloc.Global.t)
                                                        sqlx_core.error.Error.t) :=
                                                  M.call (α0 α1 α3) in
                                                let* α5 :
                                                    M.Val
                                                      (core.task.poll.Poll.t
                                                        (core.result.Result.t
                                                          (alloc.vec.Vec.t
                                                            assistants_core.models.RunStep.t
                                                            alloc.alloc.Global.t)
                                                          sqlx_core.error.Error.t)) :=
                                                  M.alloc α4 in
                                                match_operator
                                                  α5
                                                  [
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Ready
                                                            _
                                                          =>
                                                        let γ0_0 :=
                                                          core.task.poll.Poll.Get_Ready_0
                                                            γ in
                                                        let* result :=
                                                          M.copy γ0_0 in
                                                        let* α0 :
                                                            M.Val never.t :=
                                                          M.break in
                                                        let* α1 := M.read α0 in
                                                        let* α2 : unit :=
                                                          never_to_any α1 in
                                                        M.alloc α2
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit);
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Pending
                                                          =>
                                                        M.alloc tt
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit)
                                                  ] in
                                              let* _ : M.Val unit :=
                                                let* α0 : M.Val unit :=
                                                  M.alloc tt in
                                                let* α1 :
                                                    M.Val
                                                      core.future.ResumeTy.t :=
                                                  yield α0 in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read α1 in
                                                assign _task_context α2 in
                                              M.alloc tt)) :
                                            M
                                              (M.Val
                                                (core.result.Result.t
                                                  (alloc.vec.Vec.t
                                                    assistants_core.models.RunStep.t
                                                    alloc.alloc.Global.t)
                                                  sqlx_core.error.Error.t))
                                        ] in
                                    M.copy α10 in
                                  let* α0 :
                                      M.Val
                                        (core.result.Result.t
                                          (axum.json.Json.t
                                            (alloc.vec.Vec.t
                                              async_openai.types.step.RunStepObject.t
                                              alloc.alloc.Global.t))
                                          (http.status.StatusCode.t
                                          *
                                          alloc.string.String.t)) :=
                                    match_operator
                                      steps
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Ok _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Ok_0 γ in
                                            let* steps := M.copy γ0_0 in
                                            let* α0 :
                                                (core.iter.adapters.map.Map.t
                                                    (alloc.vec.into_iter.IntoIter.t
                                                      assistants_core.models.RunStep.t
                                                      alloc.alloc.Global.t)
                                                    (assistants_core.models.RunStep.t
                                                      ->
                                                      M
                                                        async_openai.types.step.RunStepObject.t))
                                                  ->
                                                  M
                                                    (alloc.vec.Vec.t
                                                      async_openai.types.step.RunStepObject.t
                                                      alloc.alloc.Global.t) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.iter.traits.iterator.Iterator.collect
                                                  (Self :=
                                                    core.iter.adapters.map.Map.t
                                                      (alloc.vec.into_iter.IntoIter.t
                                                        assistants_core.models.RunStep.t
                                                        alloc.alloc.Global.t)
                                                      (assistants_core.models.RunStep.t
                                                        ->
                                                        M
                                                          async_openai.types.step.RunStepObject.t))
                                                  (B :=
                                                    alloc.vec.Vec.t
                                                      async_openai.types.step.RunStepObject.t
                                                      alloc.alloc.Global.t)
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                (alloc.vec.into_iter.IntoIter.t
                                                    assistants_core.models.RunStep.t
                                                    alloc.alloc.Global.t)
                                                  ->
                                                  (assistants_core.models.RunStep.t
                                                    ->
                                                    M
                                                      async_openai.types.step.RunStepObject.t)
                                                  ->
                                                  M
                                                    (core.iter.adapters.map.Map.t
                                                      (alloc.vec.into_iter.IntoIter.t
                                                        assistants_core.models.RunStep.t
                                                        alloc.alloc.Global.t)
                                                      (assistants_core.models.RunStep.t
                                                        ->
                                                        M
                                                          async_openai.types.step.RunStepObject.t)) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.iter.traits.iterator.Iterator.map
                                                  (Self :=
                                                    alloc.vec.into_iter.IntoIter.t
                                                      assistants_core.models.RunStep.t
                                                      alloc.alloc.Global.t)
                                                  (B :=
                                                    async_openai.types.step.RunStepObject.t)
                                                  (F :=
                                                    assistants_core.models.RunStep.t
                                                      ->
                                                      M
                                                        async_openai.types.step.RunStepObject.t)
                                                  (Trait := ℐ))) in
                                            let* α2 :
                                                (alloc.vec.Vec.t
                                                    assistants_core.models.RunStep.t
                                                    alloc.alloc.Global.t)
                                                  ->
                                                  M _ :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.iter.traits.collect.IntoIterator.into_iter
                                                  (Self :=
                                                    alloc.vec.Vec.t
                                                      assistants_core.models.RunStep.t
                                                      alloc.alloc.Global.t)
                                                  (Trait := ℐ))) in
                                            let* α3 :
                                                alloc.vec.Vec.t
                                                  assistants_core.models.RunStep.t
                                                  alloc.alloc.Global.t :=
                                              M.read steps in
                                            let* α4 :
                                                alloc.vec.into_iter.IntoIter.t
                                                  assistants_core.models.RunStep.t
                                                  alloc.alloc.Global.t :=
                                              M.call (α2 α3) in
                                            let* α5 :
                                                core.iter.adapters.map.Map.t
                                                  (alloc.vec.into_iter.IntoIter.t
                                                    assistants_core.models.RunStep.t
                                                    alloc.alloc.Global.t)
                                                  (assistants_core.models.RunStep.t
                                                    ->
                                                    M
                                                      async_openai.types.step.RunStepObject.t) :=
                                              M.call
                                                (α1
                                                  α4
                                                  (fun
                                                      (α0 :
                                                        assistants_core.models.RunStep.t) =>
                                                    (let* α0 := M.alloc α0 in
                                                    match_operator
                                                      α0
                                                      [
                                                        fun γ =>
                                                          (let* s := M.copy γ in
                                                          M.read
                                                            (assistants_core.models.RunStep.Get_inner
                                                              s)) :
                                                          M
                                                            async_openai.types.step.RunStepObject.t
                                                      ]) :
                                                    M
                                                      async_openai.types.step.RunStepObject.t)) in
                                            let* α6 :
                                                alloc.vec.Vec.t
                                                  async_openai.types.step.RunStepObject.t
                                                  alloc.alloc.Global.t :=
                                              M.call (α0 α5) in
                                            M.alloc
                                              (core.result.Result.Ok
                                                (axum.json.Json.Build_t α6))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  (alloc.vec.Vec.t
                                                    async_openai.types.step.RunStepObject.t
                                                    alloc.alloc.Global.t))
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)));
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Err _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Err_0 γ in
                                            let* e := M.copy γ0_0 in
                                            let* _ : M.Val unit :=
                                              let* lvl : M.Val log.Level.t :=
                                                M.alloc log.Level.Error in
                                              let* α0 :
                                                  (ref log.Level.t) ->
                                                    (ref log.LevelFilter.t) ->
                                                    M bool.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.cmp.PartialOrd.le
                                                    (Self := log.Level.t)
                                                    (Rhs := log.LevelFilter.t)
                                                    (Trait := ℐ))) in
                                              let* α1 : bool.t :=
                                                M.call
                                                  (α0
                                                    (borrow lvl)
                                                    (borrow
                                                      log.STATIC_MAX_LEVEL)) in
                                              let* α2 :
                                                  (ref log.Level.t) ->
                                                    (ref log.LevelFilter.t) ->
                                                    M bool.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.cmp.PartialOrd.le
                                                    (Self := log.Level.t)
                                                    (Rhs := log.LevelFilter.t)
                                                    (Trait := ℐ))) in
                                              let* α3 : log.LevelFilter.t :=
                                                M.call log.max_level in
                                              let* α4 :
                                                  M.Val log.LevelFilter.t :=
                                                M.alloc α3 in
                                              let* α5 : bool.t :=
                                                M.call
                                                  (α2
                                                    (borrow lvl)
                                                    (borrow α4)) in
                                              let* α6 : M.Val bool.t :=
                                                M.alloc
                                                  (BinOp.Pure.and α1 α5) in
                                              let* α7 : bool.t :=
                                                M.read (use α6) in
                                              if α7 then
                                                let* _ : M.Val unit :=
                                                  let* α0 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "Error listing steps: ") in
                                                  let* α1 :
                                                      M.Val
                                                        (array (ref str.t)) :=
                                                    M.alloc [ α0 ] in
                                                  let* α2 :
                                                      core.fmt.rt.Argument.t :=
                                                    M.call
                                                      (core.fmt.rt.Argument.t::["new_display"]
                                                        (borrow e)) in
                                                  let* α3 :
                                                      M.Val
                                                        (array
                                                          core.fmt.rt.Argument.t) :=
                                                    M.alloc [ α2 ] in
                                                  let* α4 :
                                                      core.fmt.Arguments.t :=
                                                    M.call
                                                      (core.fmt.Arguments.t::["new_v1"]
                                                        (pointer_coercion
                                                          "Unsize"
                                                          (borrow α1))
                                                        (pointer_coercion
                                                          "Unsize"
                                                          (borrow α3))) in
                                                  let* α5 : log.Level.t :=
                                                    M.read lvl in
                                                  let* α6 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants_api_communication::run_steps") in
                                                  let* α7 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants_api_communication::run_steps") in
                                                  let* α8 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants-api-communication/src/run_steps.rs") in
                                                  let* α9 :
                                                      M.Val
                                                        (((ref str.t)
                                                        *
                                                        (ref str.t))
                                                        *
                                                        (ref str.t)) :=
                                                    M.alloc (α6, α7, α8) in
                                                  let* α10 : unit :=
                                                    M.call
                                                      (log.__private_api.log
                                                        α4
                                                        α5
                                                        (borrow α9)
                                                        ((Integer.of_Z 40) :
                                                          u32.t)
                                                        core.option.Option.None) in
                                                  M.alloc α10 in
                                                M.alloc tt
                                              else
                                                M.alloc tt in
                                            let* α0 :
                                                http.status.StatusCode.t :=
                                              M.read
                                                http.status.INTERNAL_SERVER_ERROR in
                                            let* α1 :
                                                (ref sqlx_core.error.Error.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self :=
                                                    sqlx_core.error.Error.t)
                                                  (Trait := ℐ))) in
                                            let* α2 : alloc.string.String.t :=
                                              M.call (α1 (borrow e)) in
                                            M.alloc
                                              (core.result.Result.Err (α0, α2))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  (alloc.vec.Vec.t
                                                    async_openai.types.step.RunStepObject.t
                                                    alloc.alloc.Global.t))
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)))
                                      ] in
                                  M.pure (use α0)
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        (alloc.vec.Vec.t
                                          async_openai.types.step.RunStepObject.t
                                          alloc.alloc.Global.t))
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              (alloc.vec.Vec.t
                                async_openai.types.step.RunStepObject.t
                                alloc.alloc.Global.t))
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t
                    (alloc.vec.Vec.t
                      async_openai.types.step.RunStepObject.t
                      alloc.alloc.Global.t))
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t
              (alloc.vec.Vec.t
                async_openai.types.step.RunStepObject.t
                alloc.alloc.Global.t))
            (http.status.StatusCode.t * alloc.string.String.t))).
End run_steps.

(*
pub async fn get_step_handler(
    Path((run_id, step_id)): Path<(String, String)>,
    State(app_state): State<AppState>,
) -> Result<JsonResponse<RunStepObject>, (StatusCode, String)> {
    let user_id = Uuid::default().to_string();
    let step = get_step(&app_state.pool, &step_id, &user_id).await;
    match step {
        Ok(step) => Ok(JsonResponse(step.inner)),
        Err(e) => {
            error!("Error getting step: {}", e);
            Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))
        }
    }
}
*)
Definition get_step_handler
    (__arg0
      :
      axum.extract.path.Path.t (alloc.string.String.t * alloc.string.String.t))
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val
                  (axum.extract.path.Path.t
                    (alloc.string.String.t * alloc.string.String.t)) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t async_openai.types.step.RunStepObject.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_, _) =>
                        let γ1_0 := Tuple.Access.left γ0_0 in
                        let γ1_1 := Tuple.Access.right γ0_0 in
                        let* run_id := M.copy γ1_0 in
                        let* step_id := M.copy γ1_1 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* user_id : M.Val alloc.string.String.t :=
                                  let* α0 :
                                      (ref uuid.Uuid.t) ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      alloc.string.ToString.to_string
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α1 : M uuid.Uuid.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.default.Default.default
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α2 : uuid.Uuid.t := M.call α1 in
                                  let* α3 : M.Val uuid.Uuid.t := M.alloc α2 in
                                  let* α4 : alloc.string.String.t :=
                                    M.call (α0 (borrow α3)) in
                                  M.alloc α4 in
                                let* step :
                                    M.Val
                                      (core.result.Result.t
                                        assistants_core.models.RunStep.t
                                        sqlx_core.error.Error.t) :=
                                  let* α0 : _ -> M _ :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.future.into_future.IntoFuture.into_future
                                        (Self := _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      (ref
                                          (alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t))
                                        ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self :=
                                          alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α2 :
                                      ref
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t) :=
                                    M.call
                                      (α1
                                        (borrow
                                          (assistants_api_communication.models.AppState.Get_pool
                                            app_state))) in
                                  let* α3 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α4 : ref str.t :=
                                    M.call (α3 (borrow step_id)) in
                                  let* α5 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α6 : ref str.t :=
                                    M.call (α5 (borrow user_id)) in
                                  let* α7 : _ :=
                                    M.call
                                      (assistants_core.run_steps.get_step
                                        α2
                                        α4
                                        α6) in
                                  let* α8 : _ := M.call (α0 α7) in
                                  let* α9 : M.Val _ := M.alloc α8 in
                                  let* α10 :
                                      M.Val
                                        (core.result.Result.t
                                          assistants_core.models.RunStep.t
                                          sqlx_core.error.Error.t) :=
                                    match_operator
                                      α9
                                      [
                                        fun γ =>
                                          (let* __awaitee := M.copy γ in
                                          M.loop
                                            (let* _ : M.Val unit :=
                                              let* α0 :
                                                  (core.pin.Pin.t (mut_ref _))
                                                    ->
                                                    (mut_ref
                                                      core.task.wake.Context.t)
                                                    ->
                                                    M
                                                      (core.task.poll.Poll.t
                                                        _) :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.future.future.Future.poll
                                                    (Self := _)
                                                    (Trait := ℐ))) in
                                              let* α1 :
                                                  core.pin.Pin.t (mut_ref _) :=
                                                M.call
                                                  ((core.pin.Pin.t
                                                        (mut_ref
                                                          _))::["new_unchecked"]
                                                    (borrow_mut __awaitee)) in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read _task_context in
                                              let* α3 :
                                                  mut_ref
                                                    core.task.wake.Context.t :=
                                                M.call
                                                  (core.future.get_context
                                                    α2) in
                                              let* α4 :
                                                  core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      assistants_core.models.RunStep.t
                                                      sqlx_core.error.Error.t) :=
                                                M.call (α0 α1 α3) in
                                              let* α5 :
                                                  M.Val
                                                    (core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        assistants_core.models.RunStep.t
                                                        sqlx_core.error.Error.t)) :=
                                                M.alloc α4 in
                                              match_operator
                                                α5
                                                [
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Ready
                                                          _
                                                        =>
                                                      let γ0_0 :=
                                                        core.task.poll.Poll.Get_Ready_0
                                                          γ in
                                                      let* result :=
                                                        M.copy γ0_0 in
                                                      let* α0 : M.Val never.t :=
                                                        M.break in
                                                      let* α1 := M.read α0 in
                                                      let* α2 : unit :=
                                                        never_to_any α1 in
                                                      M.alloc α2
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit);
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Pending
                                                        =>
                                                      M.alloc tt
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit)
                                                ] in
                                            let* _ : M.Val unit :=
                                              let* α0 : M.Val unit :=
                                                M.alloc tt in
                                              let* α1 :
                                                  M.Val
                                                    core.future.ResumeTy.t :=
                                                yield α0 in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read α1 in
                                              assign _task_context α2 in
                                            M.alloc tt)) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                assistants_core.models.RunStep.t
                                                sqlx_core.error.Error.t))
                                      ] in
                                  M.copy α10 in
                                let* α0 :
                                    M.Val
                                      (core.result.Result.t
                                        (axum.json.Json.t
                                          async_openai.types.step.RunStepObject.t)
                                        (http.status.StatusCode.t
                                        *
                                        alloc.string.String.t)) :=
                                  match_operator
                                    step
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Ok _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Ok_0 γ in
                                          let* step := M.copy γ0_0 in
                                          let* α0 :
                                              async_openai.types.step.RunStepObject.t :=
                                            M.read
                                              (assistants_core.models.RunStep.Get_inner
                                                step) in
                                          M.alloc
                                            (core.result.Result.Ok
                                              (axum.json.Json.Build_t α0))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.step.RunStepObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)));
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Err _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Err_0 γ in
                                          let* e := M.copy γ0_0 in
                                          let* _ : M.Val unit :=
                                            let* lvl : M.Val log.Level.t :=
                                              M.alloc log.Level.Error in
                                            let* α0 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : bool.t :=
                                              M.call
                                                (α0
                                                  (borrow lvl)
                                                  (borrow
                                                    log.STATIC_MAX_LEVEL)) in
                                            let* α2 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α3 : log.LevelFilter.t :=
                                              M.call log.max_level in
                                            let* α4 : M.Val log.LevelFilter.t :=
                                              M.alloc α3 in
                                            let* α5 : bool.t :=
                                              M.call
                                                (α2 (borrow lvl) (borrow α4)) in
                                            let* α6 : M.Val bool.t :=
                                              M.alloc (BinOp.Pure.and α1 α5) in
                                            let* α7 : bool.t :=
                                              M.read (use α6) in
                                            if α7 then
                                              let* _ : M.Val unit :=
                                                let* α0 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "Error getting step: ") in
                                                let* α1 :
                                                    M.Val (array (ref str.t)) :=
                                                  M.alloc [ α0 ] in
                                                let* α2 :
                                                    core.fmt.rt.Argument.t :=
                                                  M.call
                                                    (core.fmt.rt.Argument.t::["new_display"]
                                                      (borrow e)) in
                                                let* α3 :
                                                    M.Val
                                                      (array
                                                        core.fmt.rt.Argument.t) :=
                                                  M.alloc [ α2 ] in
                                                let* α4 :
                                                    core.fmt.Arguments.t :=
                                                  M.call
                                                    (core.fmt.Arguments.t::["new_v1"]
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α1))
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α3))) in
                                                let* α5 : log.Level.t :=
                                                  M.read lvl in
                                                let* α6 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::run_steps") in
                                                let* α7 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::run_steps") in
                                                let* α8 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants-api-communication/src/run_steps.rs") in
                                                let* α9 :
                                                    M.Val
                                                      (((ref str.t)
                                                      *
                                                      (ref str.t))
                                                      *
                                                      (ref str.t)) :=
                                                  M.alloc (α6, α7, α8) in
                                                let* α10 : unit :=
                                                  M.call
                                                    (log.__private_api.log
                                                      α4
                                                      α5
                                                      (borrow α9)
                                                      ((Integer.of_Z 25) :
                                                        u32.t)
                                                      core.option.Option.None) in
                                                M.alloc α10 in
                                              M.alloc tt
                                            else
                                              M.alloc tt in
                                          let* α0 : http.status.StatusCode.t :=
                                            M.read
                                              http.status.INTERNAL_SERVER_ERROR in
                                          let* α1 :
                                              (ref sqlx_core.error.Error.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self :=
                                                  sqlx_core.error.Error.t)
                                                (Trait := ℐ))) in
                                          let* α2 : alloc.string.String.t :=
                                            M.call (α1 (borrow e)) in
                                          M.alloc
                                            (core.result.Result.Err (α0, α2))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.step.RunStepObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ] in
                                M.pure (use α0)
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.step.RunStepObject.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.step.RunStepObject.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t async_openai.types.step.RunStepObject.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.step.RunStepObject.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn list_steps_handler(
    Path((run_id,)): Path<(String,)>,
    State(app_state): State<AppState>,
) -> Result<JsonResponse<Vec<RunStepObject>>, (StatusCode, String)> {
    let user_id = Uuid::default().to_string();
    let steps = list_steps(&app_state.pool, &run_id, &user_id).await;
    match steps {
        Ok(steps) => Ok(JsonResponse(steps.into_iter().map(|s| s.inner).collect())),
        Err(e) => {
            error!("Error listing steps: {}", e);
            Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))
        }
    }
}
*)
Definition list_steps_handler
    (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t
                      (alloc.vec.Vec.t
                        async_openai.types.step.RunStepObject.t
                        alloc.alloc.Global.t))
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_) =>
                        let γ1_0 := γ0_0 in
                        let* run_id := M.copy γ1_0 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* user_id : M.Val alloc.string.String.t :=
                                  let* α0 :
                                      (ref uuid.Uuid.t) ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      alloc.string.ToString.to_string
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α1 : M uuid.Uuid.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.default.Default.default
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α2 : uuid.Uuid.t := M.call α1 in
                                  let* α3 : M.Val uuid.Uuid.t := M.alloc α2 in
                                  let* α4 : alloc.string.String.t :=
                                    M.call (α0 (borrow α3)) in
                                  M.alloc α4 in
                                let* steps :
                                    M.Val
                                      (core.result.Result.t
                                        (alloc.vec.Vec.t
                                          assistants_core.models.RunStep.t
                                          alloc.alloc.Global.t)
                                        sqlx_core.error.Error.t) :=
                                  let* α0 : _ -> M _ :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.future.into_future.IntoFuture.into_future
                                        (Self := _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      (ref
                                          (alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t))
                                        ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self :=
                                          alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α2 :
                                      ref
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t) :=
                                    M.call
                                      (α1
                                        (borrow
                                          (assistants_api_communication.models.AppState.Get_pool
                                            app_state))) in
                                  let* α3 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α4 : ref str.t :=
                                    M.call (α3 (borrow run_id)) in
                                  let* α5 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α6 : ref str.t :=
                                    M.call (α5 (borrow user_id)) in
                                  let* α7 : _ :=
                                    M.call
                                      (assistants_core.run_steps.list_steps
                                        α2
                                        α4
                                        α6) in
                                  let* α8 : _ := M.call (α0 α7) in
                                  let* α9 : M.Val _ := M.alloc α8 in
                                  let* α10 :
                                      M.Val
                                        (core.result.Result.t
                                          (alloc.vec.Vec.t
                                            assistants_core.models.RunStep.t
                                            alloc.alloc.Global.t)
                                          sqlx_core.error.Error.t) :=
                                    match_operator
                                      α9
                                      [
                                        fun γ =>
                                          (let* __awaitee := M.copy γ in
                                          M.loop
                                            (let* _ : M.Val unit :=
                                              let* α0 :
                                                  (core.pin.Pin.t (mut_ref _))
                                                    ->
                                                    (mut_ref
                                                      core.task.wake.Context.t)
                                                    ->
                                                    M
                                                      (core.task.poll.Poll.t
                                                        _) :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.future.future.Future.poll
                                                    (Self := _)
                                                    (Trait := ℐ))) in
                                              let* α1 :
                                                  core.pin.Pin.t (mut_ref _) :=
                                                M.call
                                                  ((core.pin.Pin.t
                                                        (mut_ref
                                                          _))::["new_unchecked"]
                                                    (borrow_mut __awaitee)) in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read _task_context in
                                              let* α3 :
                                                  mut_ref
                                                    core.task.wake.Context.t :=
                                                M.call
                                                  (core.future.get_context
                                                    α2) in
                                              let* α4 :
                                                  core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      (alloc.vec.Vec.t
                                                        assistants_core.models.RunStep.t
                                                        alloc.alloc.Global.t)
                                                      sqlx_core.error.Error.t) :=
                                                M.call (α0 α1 α3) in
                                              let* α5 :
                                                  M.Val
                                                    (core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        (alloc.vec.Vec.t
                                                          assistants_core.models.RunStep.t
                                                          alloc.alloc.Global.t)
                                                        sqlx_core.error.Error.t)) :=
                                                M.alloc α4 in
                                              match_operator
                                                α5
                                                [
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Ready
                                                          _
                                                        =>
                                                      let γ0_0 :=
                                                        core.task.poll.Poll.Get_Ready_0
                                                          γ in
                                                      let* result :=
                                                        M.copy γ0_0 in
                                                      let* α0 : M.Val never.t :=
                                                        M.break in
                                                      let* α1 := M.read α0 in
                                                      let* α2 : unit :=
                                                        never_to_any α1 in
                                                      M.alloc α2
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit);
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Pending
                                                        =>
                                                      M.alloc tt
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit)
                                                ] in
                                            let* _ : M.Val unit :=
                                              let* α0 : M.Val unit :=
                                                M.alloc tt in
                                              let* α1 :
                                                  M.Val
                                                    core.future.ResumeTy.t :=
                                                yield α0 in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read α1 in
                                              assign _task_context α2 in
                                            M.alloc tt)) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (alloc.vec.Vec.t
                                                  assistants_core.models.RunStep.t
                                                  alloc.alloc.Global.t)
                                                sqlx_core.error.Error.t))
                                      ] in
                                  M.copy α10 in
                                let* α0 :
                                    M.Val
                                      (core.result.Result.t
                                        (axum.json.Json.t
                                          (alloc.vec.Vec.t
                                            async_openai.types.step.RunStepObject.t
                                            alloc.alloc.Global.t))
                                        (http.status.StatusCode.t
                                        *
                                        alloc.string.String.t)) :=
                                  match_operator
                                    steps
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Ok _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Ok_0 γ in
                                          let* steps := M.copy γ0_0 in
                                          let* α0 :
                                              (core.iter.adapters.map.Map.t
                                                  (alloc.vec.into_iter.IntoIter.t
                                                    assistants_core.models.RunStep.t
                                                    alloc.alloc.Global.t)
                                                  (assistants_core.models.RunStep.t
                                                    ->
                                                    M
                                                      async_openai.types.step.RunStepObject.t))
                                                ->
                                                M
                                                  (alloc.vec.Vec.t
                                                    async_openai.types.step.RunStepObject.t
                                                    alloc.alloc.Global.t) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.iter.traits.iterator.Iterator.collect
                                                (Self :=
                                                  core.iter.adapters.map.Map.t
                                                    (alloc.vec.into_iter.IntoIter.t
                                                      assistants_core.models.RunStep.t
                                                      alloc.alloc.Global.t)
                                                    (assistants_core.models.RunStep.t
                                                      ->
                                                      M
                                                        async_openai.types.step.RunStepObject.t))
                                                (B :=
                                                  alloc.vec.Vec.t
                                                    async_openai.types.step.RunStepObject.t
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α1 :
                                              (alloc.vec.into_iter.IntoIter.t
                                                  assistants_core.models.RunStep.t
                                                  alloc.alloc.Global.t)
                                                ->
                                                (assistants_core.models.RunStep.t
                                                  ->
                                                  M
                                                    async_openai.types.step.RunStepObject.t)
                                                ->
                                                M
                                                  (core.iter.adapters.map.Map.t
                                                    (alloc.vec.into_iter.IntoIter.t
                                                      assistants_core.models.RunStep.t
                                                      alloc.alloc.Global.t)
                                                    (assistants_core.models.RunStep.t
                                                      ->
                                                      M
                                                        async_openai.types.step.RunStepObject.t)) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.iter.traits.iterator.Iterator.map
                                                (Self :=
                                                  alloc.vec.into_iter.IntoIter.t
                                                    assistants_core.models.RunStep.t
                                                    alloc.alloc.Global.t)
                                                (B :=
                                                  async_openai.types.step.RunStepObject.t)
                                                (F :=
                                                  assistants_core.models.RunStep.t
                                                    ->
                                                    M
                                                      async_openai.types.step.RunStepObject.t)
                                                (Trait := ℐ))) in
                                          let* α2 :
                                              (alloc.vec.Vec.t
                                                  assistants_core.models.RunStep.t
                                                  alloc.alloc.Global.t)
                                                ->
                                                M _ :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.iter.traits.collect.IntoIterator.into_iter
                                                (Self :=
                                                  alloc.vec.Vec.t
                                                    assistants_core.models.RunStep.t
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α3 :
                                              alloc.vec.Vec.t
                                                assistants_core.models.RunStep.t
                                                alloc.alloc.Global.t :=
                                            M.read steps in
                                          let* α4 :
                                              alloc.vec.into_iter.IntoIter.t
                                                assistants_core.models.RunStep.t
                                                alloc.alloc.Global.t :=
                                            M.call (α2 α3) in
                                          let* α5 :
                                              core.iter.adapters.map.Map.t
                                                (alloc.vec.into_iter.IntoIter.t
                                                  assistants_core.models.RunStep.t
                                                  alloc.alloc.Global.t)
                                                (assistants_core.models.RunStep.t
                                                  ->
                                                  M
                                                    async_openai.types.step.RunStepObject.t) :=
                                            M.call
                                              (α1
                                                α4
                                                (fun
                                                    (α0 :
                                                      assistants_core.models.RunStep.t) =>
                                                  (let* α0 := M.alloc α0 in
                                                  match_operator
                                                    α0
                                                    [
                                                      fun γ =>
                                                        (let* s := M.copy γ in
                                                        M.read
                                                          (assistants_core.models.RunStep.Get_inner
                                                            s)) :
                                                        M
                                                          async_openai.types.step.RunStepObject.t
                                                    ]) :
                                                  M
                                                    async_openai.types.step.RunStepObject.t)) in
                                          let* α6 :
                                              alloc.vec.Vec.t
                                                async_openai.types.step.RunStepObject.t
                                                alloc.alloc.Global.t :=
                                            M.call (α0 α5) in
                                          M.alloc
                                            (core.result.Result.Ok
                                              (axum.json.Json.Build_t α6))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                (alloc.vec.Vec.t
                                                  async_openai.types.step.RunStepObject.t
                                                  alloc.alloc.Global.t))
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)));
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Err _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Err_0 γ in
                                          let* e := M.copy γ0_0 in
                                          let* _ : M.Val unit :=
                                            let* lvl : M.Val log.Level.t :=
                                              M.alloc log.Level.Error in
                                            let* α0 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : bool.t :=
                                              M.call
                                                (α0
                                                  (borrow lvl)
                                                  (borrow
                                                    log.STATIC_MAX_LEVEL)) in
                                            let* α2 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α3 : log.LevelFilter.t :=
                                              M.call log.max_level in
                                            let* α4 : M.Val log.LevelFilter.t :=
                                              M.alloc α3 in
                                            let* α5 : bool.t :=
                                              M.call
                                                (α2 (borrow lvl) (borrow α4)) in
                                            let* α6 : M.Val bool.t :=
                                              M.alloc (BinOp.Pure.and α1 α5) in
                                            let* α7 : bool.t :=
                                              M.read (use α6) in
                                            if α7 then
                                              let* _ : M.Val unit :=
                                                let* α0 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "Error listing steps: ") in
                                                let* α1 :
                                                    M.Val (array (ref str.t)) :=
                                                  M.alloc [ α0 ] in
                                                let* α2 :
                                                    core.fmt.rt.Argument.t :=
                                                  M.call
                                                    (core.fmt.rt.Argument.t::["new_display"]
                                                      (borrow e)) in
                                                let* α3 :
                                                    M.Val
                                                      (array
                                                        core.fmt.rt.Argument.t) :=
                                                  M.alloc [ α2 ] in
                                                let* α4 :
                                                    core.fmt.Arguments.t :=
                                                  M.call
                                                    (core.fmt.Arguments.t::["new_v1"]
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α1))
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α3))) in
                                                let* α5 : log.Level.t :=
                                                  M.read lvl in
                                                let* α6 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::run_steps") in
                                                let* α7 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::run_steps") in
                                                let* α8 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants-api-communication/src/run_steps.rs") in
                                                let* α9 :
                                                    M.Val
                                                      (((ref str.t)
                                                      *
                                                      (ref str.t))
                                                      *
                                                      (ref str.t)) :=
                                                  M.alloc (α6, α7, α8) in
                                                let* α10 : unit :=
                                                  M.call
                                                    (log.__private_api.log
                                                      α4
                                                      α5
                                                      (borrow α9)
                                                      ((Integer.of_Z 40) :
                                                        u32.t)
                                                      core.option.Option.None) in
                                                M.alloc α10 in
                                              M.alloc tt
                                            else
                                              M.alloc tt in
                                          let* α0 : http.status.StatusCode.t :=
                                            M.read
                                              http.status.INTERNAL_SERVER_ERROR in
                                          let* α1 :
                                              (ref sqlx_core.error.Error.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self :=
                                                  sqlx_core.error.Error.t)
                                                (Trait := ℐ))) in
                                          let* α2 : alloc.string.String.t :=
                                            M.call (α1 (borrow e)) in
                                          M.alloc
                                            (core.result.Result.Err (α0, α2))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                (alloc.vec.Vec.t
                                                  async_openai.types.step.RunStepObject.t
                                                  alloc.alloc.Global.t))
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ] in
                                M.pure (use α0)
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      (alloc.vec.Vec.t
                                        async_openai.types.step.RunStepObject.t
                                        alloc.alloc.Global.t))
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            (alloc.vec.Vec.t
                              async_openai.types.step.RunStepObject.t
                              alloc.alloc.Global.t))
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t
                  (alloc.vec.Vec.t
                    async_openai.types.step.RunStepObject.t
                    alloc.alloc.Global.t))
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t
            (alloc.vec.Vec.t
              async_openai.types.step.RunStepObject.t
              alloc.alloc.Global.t))
          (http.status.StatusCode.t * alloc.string.String.t))).

Module runs.
  Module  ApiSubmittedToolCall.
  Section ApiSubmittedToolCall.
    Record t : Set := {
      tool_call_id : alloc.string.String.t;
      output : alloc.string.String.t;
    }.
    
    Definition Get_tool_call_id :=
      Ref.map
        (fun α => Some α.(tool_call_id))
        (fun β α => Some (α <| tool_call_id := β |>)).
    Definition Get_output :=
      Ref.map
        (fun α => Some α.(output))
        (fun β α => Some (α <| output := β |>)).
  End ApiSubmittedToolCall.
  End ApiSubmittedToolCall.
  
  Module  SubmitToolOutputsRequest.
  Section SubmitToolOutputsRequest.
    Record t : Set := {
      tool_outputs :
        alloc.vec.Vec.t
          assistants_api_communication.runs.ApiSubmittedToolCall.t
          alloc.vec.Vec.Default.A;
    }.
    
    Definition Get_tool_outputs :=
      Ref.map
        (fun α => Some α.(tool_outputs))
        (fun β α => Some (α <| tool_outputs := β |>)).
  End SubmitToolOutputsRequest.
  End SubmitToolOutputsRequest.
  
  (*
  pub async fn submit_tool_outputs_handler(
      Path((thread_id, run_id)): Path<(String, String)>,
      State(app_state): State<AppState>,
      Json(request): Json<SubmitToolOutputsRequest>,
  ) -> Result<JsonResponse<RunObject>, (StatusCode, String)> {
      let user_id = Uuid::default().to_string();
      let redis_url = std::env::var("REDIS_URL").expect("REDIS_URL must be set");
      let client = redis::Client::open(redis_url).unwrap();
      let con = client.get_async_connection().await.unwrap();
      match submit_tool_outputs(
          &app_state.pool,
          &thread_id,
          &run_id,
          &user_id,
          request
              .tool_outputs
              .iter()
              .map(|t| SubmittedToolCall {
                  id: t.tool_call_id.clone(),
                  output: t.output.clone(),
                  run_id: run_id.to_string(),
                  created_at: Default::default(),
                  user_id: user_id.to_string(),
              })
              .collect::<Vec<SubmittedToolCall>>(),
          con,
      )
      .await
      {
          Ok(run) => Ok(JsonResponse(run.inner)),
          Err(e) => {
              let error_message = e.to_string();
              error!("Failed to submit tool outputs: {}", error_message);
              Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
          }
      }
  }
  *)
  Definition submit_tool_outputs_handler
      (__arg0
        :
        axum.extract.path.Path.t
          (alloc.string.String.t * alloc.string.String.t))
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      (__arg2
        :
        axum.json.Json.t
          assistants_api_communication.runs.SubmitToolOutputsRequest.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    let* __arg2 := M.alloc __arg2 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val
                    (axum.extract.path.Path.t
                      (alloc.string.String.t * alloc.string.String.t)) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t async_openai.types.run.RunObject.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_, _) =>
                          let γ1_0 := Tuple.Access.left γ0_0 in
                          let γ1_1 := Tuple.Access.right γ0_0 in
                          let* thread_id := M.copy γ1_0 in
                          let* run_id := M.copy γ1_1 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* __arg2 :
                                      M.Val
                                        (axum.json.Json.t
                                          assistants_api_communication.runs.SubmitToolOutputsRequest.t) :=
                                    M.copy __arg2 in
                                  match_operator
                                    __arg2
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | axum.json.Json.Build_t _ =>
                                          let γ0_0 := axum.json.Json.Get_0 γ in
                                          let* request := M.copy γ0_0 in
                                          let* user_id :
                                              M.Val alloc.string.String.t :=
                                            let* α0 :
                                                (ref uuid.Uuid.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self := uuid.Uuid.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : M uuid.Uuid.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.default.Default.default
                                                  (Self := uuid.Uuid.t)
                                                  (Trait := ℐ))) in
                                            let* α2 : uuid.Uuid.t :=
                                              M.call α1 in
                                            let* α3 : M.Val uuid.Uuid.t :=
                                              M.alloc α2 in
                                            let* α4 : alloc.string.String.t :=
                                              M.call (α0 (borrow α3)) in
                                            M.alloc α4 in
                                          let* redis_url :
                                              M.Val alloc.string.String.t :=
                                            let* α0 : ref str.t :=
                                              M.read (mk_str "REDIS_URL") in
                                            let* α1 :
                                                core.result.Result.t
                                                  alloc.string.String.t
                                                  std.env.VarError.t :=
                                              M.call (std.env.var α0) in
                                            let* α2 : ref str.t :=
                                              M.read
                                                (mk_str
                                                  "REDIS_URL must be set") in
                                            let* α3 : alloc.string.String.t :=
                                              M.call
                                                ((core.result.Result.t
                                                      alloc.string.String.t
                                                      std.env.VarError.t)::["expect"]
                                                  α1
                                                  α2) in
                                            M.alloc α3 in
                                          let* client :
                                              M.Val redis.client.Client.t :=
                                            let* α0 : alloc.string.String.t :=
                                              M.read redis_url in
                                            let* α1 :
                                                core.result.Result.t
                                                  redis.client.Client.t
                                                  redis.types.RedisError.t :=
                                              M.call
                                                (redis.client.Client.t::["open"]
                                                  α0) in
                                            let* α2 : redis.client.Client.t :=
                                              M.call
                                                ((core.result.Result.t
                                                      redis.client.Client.t
                                                      redis.types.RedisError.t)::["unwrap"]
                                                  α1) in
                                            M.alloc α2 in
                                          let* con :
                                              M.Val
                                                (redis.aio.connection.Connection.t
                                                  (core.pin.Pin.t
                                                    (alloc.boxed.Box.t
                                                      (dyn
                                                        [redis.aio.AsyncStream.Trait])
                                                      alloc.alloc.Global.t))) :=
                                            let* α0 : _ -> M _ :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.future.into_future.IntoFuture.into_future
                                                  (Self := _)
                                                  (Trait := ℐ))) in
                                            let* α1 : _ :=
                                              M.call
                                                (redis.client.Client.t::["get_async_connection"]
                                                  (borrow client)) in
                                            let* α2 : _ := M.call (α0 α1) in
                                            let* α3 : M.Val _ := M.alloc α2 in
                                            let* α4 :
                                                M.Val
                                                  (core.result.Result.t
                                                    (redis.aio.connection.Connection.t
                                                      (core.pin.Pin.t
                                                        (alloc.boxed.Box.t
                                                          (dyn
                                                            [redis.aio.AsyncStream.Trait])
                                                          alloc.alloc.Global.t)))
                                                    redis.types.RedisError.t) :=
                                              match_operator
                                                α3
                                                [
                                                  fun γ =>
                                                    (let* __awaitee :=
                                                      M.copy γ in
                                                    M.loop
                                                      (let* _ : M.Val unit :=
                                                        let* α0 :
                                                            (core.pin.Pin.t
                                                                (mut_ref _))
                                                              ->
                                                              (mut_ref
                                                                core.task.wake.Context.t)
                                                              ->
                                                              M
                                                                (core.task.poll.Poll.t
                                                                  _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.future.future.Future.poll
                                                              (Self := _)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            core.pin.Pin.t
                                                              (mut_ref _) :=
                                                          M.call
                                                            ((core.pin.Pin.t
                                                                  (mut_ref
                                                                    _))::["new_unchecked"]
                                                              (borrow_mut
                                                                __awaitee)) in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read
                                                            _task_context in
                                                        let* α3 :
                                                            mut_ref
                                                              core.task.wake.Context.t :=
                                                          M.call
                                                            (core.future.get_context
                                                              α2) in
                                                        let* α4 :
                                                            core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                (redis.aio.connection.Connection.t
                                                                  (core.pin.Pin.t
                                                                    (alloc.boxed.Box.t
                                                                      (dyn
                                                                        [redis.aio.AsyncStream.Trait])
                                                                      alloc.alloc.Global.t)))
                                                                redis.types.RedisError.t) :=
                                                          M.call (α0 α1 α3) in
                                                        let* α5 :
                                                            M.Val
                                                              (core.task.poll.Poll.t
                                                                (core.result.Result.t
                                                                  (redis.aio.connection.Connection.t
                                                                    (core.pin.Pin.t
                                                                      (alloc.boxed.Box.t
                                                                        (dyn
                                                                          [redis.aio.AsyncStream.Trait])
                                                                        alloc.alloc.Global.t)))
                                                                  redis.types.RedisError.t)) :=
                                                          M.alloc α4 in
                                                        match_operator
                                                          α5
                                                          [
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Ready
                                                                    _
                                                                  =>
                                                                let γ0_0 :=
                                                                  core.task.poll.Poll.Get_Ready_0
                                                                    γ in
                                                                let* result :=
                                                                  M.copy γ0_0 in
                                                                let* α0 :
                                                                    M.Val
                                                                      never.t :=
                                                                  M.break in
                                                                let* α1 :=
                                                                  M.read α0 in
                                                                let* α2 :
                                                                    unit :=
                                                                  never_to_any
                                                                    α1 in
                                                                M.alloc α2
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit);
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Pending
                                                                  =>
                                                                M.alloc tt
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit)
                                                          ] in
                                                      let* _ : M.Val unit :=
                                                        let* α0 : M.Val unit :=
                                                          M.alloc tt in
                                                        let* α1 :
                                                            M.Val
                                                              core.future.ResumeTy.t :=
                                                          yield α0 in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read α1 in
                                                        assign
                                                          _task_context
                                                          α2 in
                                                      M.alloc tt)) :
                                                    M
                                                      (M.Val
                                                        (core.result.Result.t
                                                          (redis.aio.connection.Connection.t
                                                            (core.pin.Pin.t
                                                              (alloc.boxed.Box.t
                                                                (dyn
                                                                  [redis.aio.AsyncStream.Trait])
                                                                alloc.alloc.Global.t)))
                                                          redis.types.RedisError.t))
                                                ] in
                                            let* α5 :
                                                core.result.Result.t
                                                  (redis.aio.connection.Connection.t
                                                    (core.pin.Pin.t
                                                      (alloc.boxed.Box.t
                                                        (dyn
                                                          [redis.aio.AsyncStream.Trait])
                                                        alloc.alloc.Global.t)))
                                                  redis.types.RedisError.t :=
                                              M.read α4 in
                                            let* α6 :
                                                redis.aio.connection.Connection.t
                                                  (core.pin.Pin.t
                                                    (alloc.boxed.Box.t
                                                      (dyn
                                                        [redis.aio.AsyncStream.Trait])
                                                      alloc.alloc.Global.t)) :=
                                              M.call
                                                ((core.result.Result.t
                                                      (redis.aio.connection.Connection.t
                                                        (core.pin.Pin.t
                                                          (alloc.boxed.Box.t
                                                            (dyn
                                                              [redis.aio.AsyncStream.Trait])
                                                            alloc.alloc.Global.t)))
                                                      redis.types.RedisError.t)::["unwrap"]
                                                  α5) in
                                            M.alloc α6 in
                                          let* α0 : _ -> M _ :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.future.into_future.IntoFuture.into_future
                                                (Self := _)
                                                (Trait := ℐ))) in
                                          let* α1 :
                                              (ref
                                                  (alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t))
                                                ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self :=
                                                  alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α2 :
                                              ref
                                                (sqlx_core.pool.Pool.t
                                                  sqlx_postgres.database.Postgres.t) :=
                                            M.call
                                              (α1
                                                (borrow
                                                  (assistants_api_communication.models.AppState.Get_pool
                                                    app_state))) in
                                          let* α3 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α4 : ref str.t :=
                                            M.call (α3 (borrow thread_id)) in
                                          let* α5 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α6 : ref str.t :=
                                            M.call (α5 (borrow run_id)) in
                                          let* α7 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α8 : ref str.t :=
                                            M.call (α7 (borrow user_id)) in
                                          let* α9 :
                                              (core.iter.adapters.map.Map.t
                                                  (core.slice.iter.Iter.t
                                                    assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                  ((ref
                                                      assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                    ->
                                                    M
                                                      assistants_core.models.SubmittedToolCall.t))
                                                ->
                                                M
                                                  (alloc.vec.Vec.t
                                                    assistants_core.models.SubmittedToolCall.t
                                                    alloc.alloc.Global.t) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.iter.traits.iterator.Iterator.collect
                                                (Self :=
                                                  core.iter.adapters.map.Map.t
                                                    (core.slice.iter.Iter.t
                                                      assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                    ((ref
                                                        assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                      ->
                                                      M
                                                        assistants_core.models.SubmittedToolCall.t))
                                                (B :=
                                                  alloc.vec.Vec.t
                                                    assistants_core.models.SubmittedToolCall.t
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α10 :
                                              (core.slice.iter.Iter.t
                                                  assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                ->
                                                ((ref
                                                    assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                  ->
                                                  M
                                                    assistants_core.models.SubmittedToolCall.t)
                                                ->
                                                M
                                                  (core.iter.adapters.map.Map.t
                                                    (core.slice.iter.Iter.t
                                                      assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                    ((ref
                                                        assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                      ->
                                                      M
                                                        assistants_core.models.SubmittedToolCall.t)) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.iter.traits.iterator.Iterator.map
                                                (Self :=
                                                  core.slice.iter.Iter.t
                                                    assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                (B :=
                                                  assistants_core.models.SubmittedToolCall.t)
                                                (F :=
                                                  (ref
                                                      assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                    ->
                                                    M
                                                      assistants_core.models.SubmittedToolCall.t)
                                                (Trait := ℐ))) in
                                          let* α11 :
                                              (ref
                                                  (alloc.vec.Vec.t
                                                    assistants_api_communication.runs.ApiSubmittedToolCall.t
                                                    alloc.alloc.Global.t))
                                                ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self :=
                                                  alloc.vec.Vec.t
                                                    assistants_api_communication.runs.ApiSubmittedToolCall.t
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α12 :
                                              ref
                                                (slice
                                                  assistants_api_communication.runs.ApiSubmittedToolCall.t) :=
                                            M.call
                                              (α11
                                                (borrow
                                                  (assistants_api_communication.runs.SubmitToolOutputsRequest.Get_tool_outputs
                                                    request))) in
                                          let* α13 :
                                              core.slice.iter.Iter.t
                                                assistants_api_communication.runs.ApiSubmittedToolCall.t :=
                                            M.call
                                              ((slice
                                                    assistants_api_communication.runs.ApiSubmittedToolCall.t)::["iter"]
                                                α12) in
                                          let* α14 :
                                              core.iter.adapters.map.Map.t
                                                (core.slice.iter.Iter.t
                                                  assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                ((ref
                                                    assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                  ->
                                                  M
                                                    assistants_core.models.SubmittedToolCall.t) :=
                                            M.call
                                              (α10
                                                α13
                                                (fun
                                                    (α0 :
                                                      ref
                                                        assistants_api_communication.runs.ApiSubmittedToolCall.t) =>
                                                  (let* α0 := M.alloc α0 in
                                                  match_operator
                                                    α0
                                                    [
                                                      fun γ =>
                                                        (let* t := M.copy γ in
                                                        let* α0 :
                                                            (ref
                                                                alloc.string.String.t)
                                                              ->
                                                              M
                                                                alloc.string.String.t :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.clone.Clone.clone
                                                              (Self :=
                                                                alloc.string.String.t)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            ref
                                                              assistants_api_communication.runs.ApiSubmittedToolCall.t :=
                                                          M.read t in
                                                        let* α2 :
                                                            alloc.string.String.t :=
                                                          M.call
                                                            (α0
                                                              (borrow
                                                                (assistants_api_communication.runs.ApiSubmittedToolCall.Get_tool_call_id
                                                                  (deref
                                                                    α1)))) in
                                                        let* α3 :
                                                            (ref
                                                                alloc.string.String.t)
                                                              ->
                                                              M
                                                                alloc.string.String.t :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.clone.Clone.clone
                                                              (Self :=
                                                                alloc.string.String.t)
                                                              (Trait := ℐ))) in
                                                        let* α4 :
                                                            ref
                                                              assistants_api_communication.runs.ApiSubmittedToolCall.t :=
                                                          M.read t in
                                                        let* α5 :
                                                            alloc.string.String.t :=
                                                          M.call
                                                            (α3
                                                              (borrow
                                                                (assistants_api_communication.runs.ApiSubmittedToolCall.Get_output
                                                                  (deref
                                                                    α4)))) in
                                                        let* α6 :
                                                            (ref
                                                                alloc.string.String.t)
                                                              ->
                                                              M
                                                                alloc.string.String.t :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            alloc.string.ToString.to_string
                                                              (Self :=
                                                                alloc.string.String.t)
                                                              (Trait := ℐ))) in
                                                        let* α7 :
                                                            alloc.string.String.t :=
                                                          M.call
                                                            (α6
                                                              (borrow
                                                                run_id)) in
                                                        let* α8 : M i32.t :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.default.Default.default
                                                              (Self := i32.t)
                                                              (Trait := ℐ))) in
                                                        let* α9 : i32.t :=
                                                          M.call α8 in
                                                        let* α10 :
                                                            (ref
                                                                alloc.string.String.t)
                                                              ->
                                                              M
                                                                alloc.string.String.t :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            alloc.string.ToString.to_string
                                                              (Self :=
                                                                alloc.string.String.t)
                                                              (Trait := ℐ))) in
                                                        let* α11 :
                                                            alloc.string.String.t :=
                                                          M.call
                                                            (α10
                                                              (borrow
                                                                user_id)) in
                                                        M.pure
                                                          {|
                                                            assistants_core.models.SubmittedToolCall.id :=
                                                              α2;
                                                            assistants_core.models.SubmittedToolCall.output :=
                                                              α5;
                                                            assistants_core.models.SubmittedToolCall.run_id :=
                                                              α7;
                                                            assistants_core.models.SubmittedToolCall.created_at :=
                                                              α9;
                                                            assistants_core.models.SubmittedToolCall.user_id :=
                                                              α11;
                                                          |}) :
                                                        M
                                                          assistants_core.models.SubmittedToolCall.t
                                                    ]) :
                                                  M
                                                    assistants_core.models.SubmittedToolCall.t)) in
                                          let* α15 :
                                              alloc.vec.Vec.t
                                                assistants_core.models.SubmittedToolCall.t
                                                alloc.alloc.Global.t :=
                                            M.call (α9 α14) in
                                          let* α16 :
                                              redis.aio.connection.Connection.t
                                                (core.pin.Pin.t
                                                  (alloc.boxed.Box.t
                                                    (dyn
                                                      [redis.aio.AsyncStream.Trait])
                                                    alloc.alloc.Global.t)) :=
                                            M.read con in
                                          let* α17 : _ :=
                                            M.call
                                              (assistants_core.runs.submit_tool_outputs
                                                α2
                                                α4
                                                α6
                                                α8
                                                α15
                                                α16) in
                                          let* α18 : _ := M.call (α0 α17) in
                                          let* α19 : M.Val _ := M.alloc α18 in
                                          let* α20 :
                                              M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Run.t
                                                  sqlx_core.error.Error.t) :=
                                            match_operator
                                              α19
                                              [
                                                fun γ =>
                                                  (let* __awaitee := M.copy γ in
                                                  M.loop
                                                    (let* _ : M.Val unit :=
                                                      let* α0 :
                                                          (core.pin.Pin.t
                                                              (mut_ref _))
                                                            ->
                                                            (mut_ref
                                                              core.task.wake.Context.t)
                                                            ->
                                                            M
                                                              (core.task.poll.Poll.t
                                                                _) :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.future.future.Future.poll
                                                            (Self := _)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          core.pin.Pin.t
                                                            (mut_ref _) :=
                                                        M.call
                                                          ((core.pin.Pin.t
                                                                (mut_ref
                                                                  _))::["new_unchecked"]
                                                            (borrow_mut
                                                              __awaitee)) in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read _task_context in
                                                      let* α3 :
                                                          mut_ref
                                                            core.task.wake.Context.t :=
                                                        M.call
                                                          (core.future.get_context
                                                            α2) in
                                                      let* α4 :
                                                          core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              assistants_core.models.Run.t
                                                              sqlx_core.error.Error.t) :=
                                                        M.call (α0 α1 α3) in
                                                      let* α5 :
                                                          M.Val
                                                            (core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                assistants_core.models.Run.t
                                                                sqlx_core.error.Error.t)) :=
                                                        M.alloc α4 in
                                                      match_operator
                                                        α5
                                                        [
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Ready
                                                                  _
                                                                =>
                                                              let γ0_0 :=
                                                                core.task.poll.Poll.Get_Ready_0
                                                                  γ in
                                                              let* result :=
                                                                M.copy γ0_0 in
                                                              let* α0 :
                                                                  M.Val
                                                                    never.t :=
                                                                M.break in
                                                              let* α1 :=
                                                                M.read α0 in
                                                              let* α2 : unit :=
                                                                never_to_any
                                                                  α1 in
                                                              M.alloc α2
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit);
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Pending
                                                                =>
                                                              M.alloc tt
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit)
                                                        ] in
                                                    let* _ : M.Val unit :=
                                                      let* α0 : M.Val unit :=
                                                        M.alloc tt in
                                                      let* α1 :
                                                          M.Val
                                                            core.future.ResumeTy.t :=
                                                        yield α0 in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read α1 in
                                                      assign _task_context α2 in
                                                    M.alloc tt)) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        assistants_core.models.Run.t
                                                        sqlx_core.error.Error.t))
                                              ] in
                                          let* α0 :
                                              M.Val
                                                (core.result.Result.t
                                                  (axum.json.Json.t
                                                    async_openai.types.run.RunObject.t)
                                                  (http.status.StatusCode.t
                                                  *
                                                  alloc.string.String.t)) :=
                                            match_operator
                                              α20
                                              [
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Ok _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Ok_0
                                                        γ in
                                                    let* run := M.copy γ0_0 in
                                                    let* α0 :
                                                        async_openai.types.run.RunObject.t :=
                                                      M.read
                                                        (assistants_core.models.Run.Get_inner
                                                          run) in
                                                    M.alloc
                                                      (core.result.Result.Ok
                                                        (axum.json.Json.Build_t
                                                          α0))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.run.RunObject.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)));
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Err _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Err_0
                                                        γ in
                                                    let* e := M.copy γ0_0 in
                                                    let* error_message :
                                                        M.Val
                                                          alloc.string.String.t :=
                                                      let* α0 :
                                                          (ref
                                                              sqlx_core.error.Error.t)
                                                            ->
                                                            M
                                                              alloc.string.String.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          alloc.string.ToString.to_string
                                                            (Self :=
                                                              sqlx_core.error.Error.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          alloc.string.String.t :=
                                                        M.call
                                                          (α0 (borrow e)) in
                                                      M.alloc α1 in
                                                    let* _ : M.Val unit :=
                                                      let* lvl :
                                                          M.Val log.Level.t :=
                                                        M.alloc
                                                          log.Level.Error in
                                                      let* α0 :
                                                          (ref log.Level.t) ->
                                                            (ref
                                                              log.LevelFilter.t)
                                                            ->
                                                            M bool.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.cmp.PartialOrd.le
                                                            (Self :=
                                                              log.Level.t)
                                                            (Rhs :=
                                                              log.LevelFilter.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 : bool.t :=
                                                        M.call
                                                          (α0
                                                            (borrow lvl)
                                                            (borrow
                                                              log.STATIC_MAX_LEVEL)) in
                                                      let* α2 :
                                                          (ref log.Level.t) ->
                                                            (ref
                                                              log.LevelFilter.t)
                                                            ->
                                                            M bool.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.cmp.PartialOrd.le
                                                            (Self :=
                                                              log.Level.t)
                                                            (Rhs :=
                                                              log.LevelFilter.t)
                                                            (Trait := ℐ))) in
                                                      let* α3 :
                                                          log.LevelFilter.t :=
                                                        M.call log.max_level in
                                                      let* α4 :
                                                          M.Val
                                                            log.LevelFilter.t :=
                                                        M.alloc α3 in
                                                      let* α5 : bool.t :=
                                                        M.call
                                                          (α2
                                                            (borrow lvl)
                                                            (borrow α4)) in
                                                      let* α6 : M.Val bool.t :=
                                                        M.alloc
                                                          (BinOp.Pure.and
                                                            α1
                                                            α5) in
                                                      let* α7 : bool.t :=
                                                        M.read (use α6) in
                                                      if α7 then
                                                        let* _ : M.Val unit :=
                                                          let* α0 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "Failed to submit tool outputs: ") in
                                                          let* α1 :
                                                              M.Val
                                                                (array
                                                                  (ref
                                                                    str.t)) :=
                                                            M.alloc [ α0 ] in
                                                          let* α2 :
                                                              core.fmt.rt.Argument.t :=
                                                            M.call
                                                              (core.fmt.rt.Argument.t::["new_display"]
                                                                (borrow
                                                                  error_message)) in
                                                          let* α3 :
                                                              M.Val
                                                                (array
                                                                  core.fmt.rt.Argument.t) :=
                                                            M.alloc [ α2 ] in
                                                          let* α4 :
                                                              core.fmt.Arguments.t :=
                                                            M.call
                                                              (core.fmt.Arguments.t::["new_v1"]
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow α1))
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow
                                                                    α3))) in
                                                          let* α5 :
                                                              log.Level.t :=
                                                            M.read lvl in
                                                          let* α6 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants_api_communication::runs") in
                                                          let* α7 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants_api_communication::runs") in
                                                          let* α8 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants-api-communication/src/runs.rs") in
                                                          let* α9 :
                                                              M.Val
                                                                (((ref str.t)
                                                                *
                                                                (ref str.t))
                                                                *
                                                                (ref str.t)) :=
                                                            M.alloc
                                                              (α6, α7, α8) in
                                                          let* α10 : unit :=
                                                            M.call
                                                              (log.__private_api.log
                                                                α4
                                                                α5
                                                                (borrow α9)
                                                                ((Integer.of_Z
                                                                    63) :
                                                                  u32.t)
                                                                core.option.Option.None) in
                                                          M.alloc α10 in
                                                        M.alloc tt
                                                      else
                                                        M.alloc tt in
                                                    let* α0 :
                                                        http.status.StatusCode.t :=
                                                      M.read
                                                        http.status.INTERNAL_SERVER_ERROR in
                                                    let* α1 :
                                                        alloc.string.String.t :=
                                                      M.read error_message in
                                                    M.alloc
                                                      (core.result.Result.Err
                                                        (α0, α1))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.run.RunObject.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)))
                                              ] in
                                          M.pure (use α0)
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.run.RunObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ]
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.run.RunObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.run.RunObject.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t async_openai.types.run.RunObject.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.run.RunObject.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn create_run_handler(
      Path((thread_id,)): Path<(String,)>,
      State(app_state): State<AppState>,
      Json(run_input): Json<CreateRunRequest>,
  ) -> Result<JsonResponse<RunObject>, (StatusCode, String)> {
      let redis_url = std::env::var("REDIS_URL").expect("REDIS_URL must be set");
      let client = redis::Client::open(redis_url).unwrap();
      let con = client.get_async_connection().await.unwrap();
      let user_id = Uuid::default().to_string();
      println!("thread_id: {}", thread_id);
      let run = create_run_and_produce_to_executor_queue(
          &app_state.pool,
          &thread_id,
          &run_input.assistant_id,
          &run_input.instructions.unwrap_or_default(),
          &user_id,
          con,
      )
      .await;
      match run {
          Ok(run) => Ok(JsonResponse(run.inner)),
          Err(e) => {
              error!("Error creating run: {}", e);
              if let sqlx::Error::Database(db_err) = &e {
                  if let Some(constraint) = db_err.constraint() {
                      if constraint == "runs_assistant_id_fkey" {
                          return Err((StatusCode::BAD_REQUEST, "Invalid assistant_id did you create this assistant beforehand? Check https://platform.openai.com/docs/api-reference/assistants/createAssistant".to_string()));
                      } else if constraint == "runs_thread_id_fkey" {
                          return Err((StatusCode::BAD_REQUEST, "Invalid thread_id did you create this thread beforehand? Check https://platform.openai.com/docs/api-reference/threads/createThread".to_string()));
                      }
                  }
              }
              Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))
          }
      }
  }
  *)
  Definition create_run_handler
      (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      (__arg2 : axum.json.Json.t async_openai.types.run.CreateRunRequest.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    let* __arg2 := M.alloc __arg2 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t async_openai.types.run.RunObject.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_) =>
                          let γ1_0 := γ0_0 in
                          let* thread_id := M.copy γ1_0 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* __arg2 :
                                      M.Val
                                        (axum.json.Json.t
                                          async_openai.types.run.CreateRunRequest.t) :=
                                    M.copy __arg2 in
                                  match_operator
                                    __arg2
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | axum.json.Json.Build_t _ =>
                                          let γ0_0 := axum.json.Json.Get_0 γ in
                                          let* run_input := M.copy γ0_0 in
                                          let* redis_url :
                                              M.Val alloc.string.String.t :=
                                            let* α0 : ref str.t :=
                                              M.read (mk_str "REDIS_URL") in
                                            let* α1 :
                                                core.result.Result.t
                                                  alloc.string.String.t
                                                  std.env.VarError.t :=
                                              M.call (std.env.var α0) in
                                            let* α2 : ref str.t :=
                                              M.read
                                                (mk_str
                                                  "REDIS_URL must be set") in
                                            let* α3 : alloc.string.String.t :=
                                              M.call
                                                ((core.result.Result.t
                                                      alloc.string.String.t
                                                      std.env.VarError.t)::["expect"]
                                                  α1
                                                  α2) in
                                            M.alloc α3 in
                                          let* client :
                                              M.Val redis.client.Client.t :=
                                            let* α0 : alloc.string.String.t :=
                                              M.read redis_url in
                                            let* α1 :
                                                core.result.Result.t
                                                  redis.client.Client.t
                                                  redis.types.RedisError.t :=
                                              M.call
                                                (redis.client.Client.t::["open"]
                                                  α0) in
                                            let* α2 : redis.client.Client.t :=
                                              M.call
                                                ((core.result.Result.t
                                                      redis.client.Client.t
                                                      redis.types.RedisError.t)::["unwrap"]
                                                  α1) in
                                            M.alloc α2 in
                                          let* con :
                                              M.Val
                                                (redis.aio.connection.Connection.t
                                                  (core.pin.Pin.t
                                                    (alloc.boxed.Box.t
                                                      (dyn
                                                        [redis.aio.AsyncStream.Trait])
                                                      alloc.alloc.Global.t))) :=
                                            let* α0 : _ -> M _ :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.future.into_future.IntoFuture.into_future
                                                  (Self := _)
                                                  (Trait := ℐ))) in
                                            let* α1 : _ :=
                                              M.call
                                                (redis.client.Client.t::["get_async_connection"]
                                                  (borrow client)) in
                                            let* α2 : _ := M.call (α0 α1) in
                                            let* α3 : M.Val _ := M.alloc α2 in
                                            let* α4 :
                                                M.Val
                                                  (core.result.Result.t
                                                    (redis.aio.connection.Connection.t
                                                      (core.pin.Pin.t
                                                        (alloc.boxed.Box.t
                                                          (dyn
                                                            [redis.aio.AsyncStream.Trait])
                                                          alloc.alloc.Global.t)))
                                                    redis.types.RedisError.t) :=
                                              match_operator
                                                α3
                                                [
                                                  fun γ =>
                                                    (let* __awaitee :=
                                                      M.copy γ in
                                                    M.loop
                                                      (let* _ : M.Val unit :=
                                                        let* α0 :
                                                            (core.pin.Pin.t
                                                                (mut_ref _))
                                                              ->
                                                              (mut_ref
                                                                core.task.wake.Context.t)
                                                              ->
                                                              M
                                                                (core.task.poll.Poll.t
                                                                  _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.future.future.Future.poll
                                                              (Self := _)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            core.pin.Pin.t
                                                              (mut_ref _) :=
                                                          M.call
                                                            ((core.pin.Pin.t
                                                                  (mut_ref
                                                                    _))::["new_unchecked"]
                                                              (borrow_mut
                                                                __awaitee)) in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read
                                                            _task_context in
                                                        let* α3 :
                                                            mut_ref
                                                              core.task.wake.Context.t :=
                                                          M.call
                                                            (core.future.get_context
                                                              α2) in
                                                        let* α4 :
                                                            core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                (redis.aio.connection.Connection.t
                                                                  (core.pin.Pin.t
                                                                    (alloc.boxed.Box.t
                                                                      (dyn
                                                                        [redis.aio.AsyncStream.Trait])
                                                                      alloc.alloc.Global.t)))
                                                                redis.types.RedisError.t) :=
                                                          M.call (α0 α1 α3) in
                                                        let* α5 :
                                                            M.Val
                                                              (core.task.poll.Poll.t
                                                                (core.result.Result.t
                                                                  (redis.aio.connection.Connection.t
                                                                    (core.pin.Pin.t
                                                                      (alloc.boxed.Box.t
                                                                        (dyn
                                                                          [redis.aio.AsyncStream.Trait])
                                                                        alloc.alloc.Global.t)))
                                                                  redis.types.RedisError.t)) :=
                                                          M.alloc α4 in
                                                        match_operator
                                                          α5
                                                          [
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Ready
                                                                    _
                                                                  =>
                                                                let γ0_0 :=
                                                                  core.task.poll.Poll.Get_Ready_0
                                                                    γ in
                                                                let* result :=
                                                                  M.copy γ0_0 in
                                                                let* α0 :
                                                                    M.Val
                                                                      never.t :=
                                                                  M.break in
                                                                let* α1 :=
                                                                  M.read α0 in
                                                                let* α2 :
                                                                    unit :=
                                                                  never_to_any
                                                                    α1 in
                                                                M.alloc α2
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit);
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Pending
                                                                  =>
                                                                M.alloc tt
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit)
                                                          ] in
                                                      let* _ : M.Val unit :=
                                                        let* α0 : M.Val unit :=
                                                          M.alloc tt in
                                                        let* α1 :
                                                            M.Val
                                                              core.future.ResumeTy.t :=
                                                          yield α0 in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read α1 in
                                                        assign
                                                          _task_context
                                                          α2 in
                                                      M.alloc tt)) :
                                                    M
                                                      (M.Val
                                                        (core.result.Result.t
                                                          (redis.aio.connection.Connection.t
                                                            (core.pin.Pin.t
                                                              (alloc.boxed.Box.t
                                                                (dyn
                                                                  [redis.aio.AsyncStream.Trait])
                                                                alloc.alloc.Global.t)))
                                                          redis.types.RedisError.t))
                                                ] in
                                            let* α5 :
                                                core.result.Result.t
                                                  (redis.aio.connection.Connection.t
                                                    (core.pin.Pin.t
                                                      (alloc.boxed.Box.t
                                                        (dyn
                                                          [redis.aio.AsyncStream.Trait])
                                                        alloc.alloc.Global.t)))
                                                  redis.types.RedisError.t :=
                                              M.read α4 in
                                            let* α6 :
                                                redis.aio.connection.Connection.t
                                                  (core.pin.Pin.t
                                                    (alloc.boxed.Box.t
                                                      (dyn
                                                        [redis.aio.AsyncStream.Trait])
                                                      alloc.alloc.Global.t)) :=
                                              M.call
                                                ((core.result.Result.t
                                                      (redis.aio.connection.Connection.t
                                                        (core.pin.Pin.t
                                                          (alloc.boxed.Box.t
                                                            (dyn
                                                              [redis.aio.AsyncStream.Trait])
                                                            alloc.alloc.Global.t)))
                                                      redis.types.RedisError.t)::["unwrap"]
                                                  α5) in
                                            M.alloc α6 in
                                          let* user_id :
                                              M.Val alloc.string.String.t :=
                                            let* α0 :
                                                (ref uuid.Uuid.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self := uuid.Uuid.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : M uuid.Uuid.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.default.Default.default
                                                  (Self := uuid.Uuid.t)
                                                  (Trait := ℐ))) in
                                            let* α2 : uuid.Uuid.t :=
                                              M.call α1 in
                                            let* α3 : M.Val uuid.Uuid.t :=
                                              M.alloc α2 in
                                            let* α4 : alloc.string.String.t :=
                                              M.call (α0 (borrow α3)) in
                                            M.alloc α4 in
                                          let* _ : M.Val unit :=
                                            let* _ : M.Val unit :=
                                              let* α0 : ref str.t :=
                                                M.read (mk_str "thread_id: ") in
                                              let* α1 : ref str.t :=
                                                M.read (mk_str "
") in
                                              let* α2 :
                                                  M.Val (array (ref str.t)) :=
                                                M.alloc [ α0; α1 ] in
                                              let* α3 :
                                                  core.fmt.rt.Argument.t :=
                                                M.call
                                                  (core.fmt.rt.Argument.t::["new_display"]
                                                    (borrow thread_id)) in
                                              let* α4 :
                                                  M.Val
                                                    (array
                                                      core.fmt.rt.Argument.t) :=
                                                M.alloc [ α3 ] in
                                              let* α5 : core.fmt.Arguments.t :=
                                                M.call
                                                  (core.fmt.Arguments.t::["new_v1"]
                                                    (pointer_coercion
                                                      "Unsize"
                                                      (borrow α2))
                                                    (pointer_coercion
                                                      "Unsize"
                                                      (borrow α4))) in
                                              let* α6 : unit :=
                                                M.call
                                                  (std.io.stdio._print α5) in
                                              M.alloc α6 in
                                            M.alloc tt in
                                          let* run :
                                              M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Run.t
                                                  sqlx_core.error.Error.t) :=
                                            let* α0 : _ -> M _ :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.future.into_future.IntoFuture.into_future
                                                  (Self := _)
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                (ref
                                                    (alloc.sync.Arc.t
                                                      (sqlx_core.pool.Pool.t
                                                        sqlx_postgres.database.Postgres.t)
                                                      alloc.alloc.Global.t))
                                                  ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.sync.Arc.t
                                                      (sqlx_core.pool.Pool.t
                                                        sqlx_postgres.database.Postgres.t)
                                                      alloc.alloc.Global.t)
                                                  (Trait := ℐ))) in
                                            let* α2 :
                                                ref
                                                  (sqlx_core.pool.Pool.t
                                                    sqlx_postgres.database.Postgres.t) :=
                                              M.call
                                                (α1
                                                  (borrow
                                                    (assistants_api_communication.models.AppState.Get_pool
                                                      app_state))) in
                                            let* α3 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α4 : ref str.t :=
                                              M.call (α3 (borrow thread_id)) in
                                            let* α5 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α6 : ref str.t :=
                                              M.call
                                                (α5
                                                  (borrow
                                                    (async_openai.types.run.CreateRunRequest.Get_assistant_id
                                                      run_input))) in
                                            let* α7 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α8 :
                                                core.option.Option.t
                                                  alloc.string.String.t :=
                                              M.read
                                                (async_openai.types.run.CreateRunRequest.Get_instructions
                                                  run_input) in
                                            let* α9 : alloc.string.String.t :=
                                              M.call
                                                ((core.option.Option.t
                                                      alloc.string.String.t)::["unwrap_or_default"]
                                                  α8) in
                                            let* α10 :
                                                M.Val alloc.string.String.t :=
                                              M.alloc α9 in
                                            let* α11 : ref str.t :=
                                              M.call (α7 (borrow α10)) in
                                            let* α12 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α13 : ref str.t :=
                                              M.call (α12 (borrow user_id)) in
                                            let* α14 :
                                                redis.aio.connection.Connection.t
                                                  (core.pin.Pin.t
                                                    (alloc.boxed.Box.t
                                                      (dyn
                                                        [redis.aio.AsyncStream.Trait])
                                                      alloc.alloc.Global.t)) :=
                                              M.read con in
                                            let* α15 : _ :=
                                              M.call
                                                (assistants_core.runs.create_run_and_produce_to_executor_queue
                                                  α2
                                                  α4
                                                  α6
                                                  α11
                                                  α13
                                                  α14) in
                                            let* α16 : _ := M.call (α0 α15) in
                                            let* α17 : M.Val _ := M.alloc α16 in
                                            let* α18 :
                                                M.Val
                                                  (core.result.Result.t
                                                    assistants_core.models.Run.t
                                                    sqlx_core.error.Error.t) :=
                                              match_operator
                                                α17
                                                [
                                                  fun γ =>
                                                    (let* __awaitee :=
                                                      M.copy γ in
                                                    M.loop
                                                      (let* _ : M.Val unit :=
                                                        let* α0 :
                                                            (core.pin.Pin.t
                                                                (mut_ref _))
                                                              ->
                                                              (mut_ref
                                                                core.task.wake.Context.t)
                                                              ->
                                                              M
                                                                (core.task.poll.Poll.t
                                                                  _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.future.future.Future.poll
                                                              (Self := _)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            core.pin.Pin.t
                                                              (mut_ref _) :=
                                                          M.call
                                                            ((core.pin.Pin.t
                                                                  (mut_ref
                                                                    _))::["new_unchecked"]
                                                              (borrow_mut
                                                                __awaitee)) in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read
                                                            _task_context in
                                                        let* α3 :
                                                            mut_ref
                                                              core.task.wake.Context.t :=
                                                          M.call
                                                            (core.future.get_context
                                                              α2) in
                                                        let* α4 :
                                                            core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                assistants_core.models.Run.t
                                                                sqlx_core.error.Error.t) :=
                                                          M.call (α0 α1 α3) in
                                                        let* α5 :
                                                            M.Val
                                                              (core.task.poll.Poll.t
                                                                (core.result.Result.t
                                                                  assistants_core.models.Run.t
                                                                  sqlx_core.error.Error.t)) :=
                                                          M.alloc α4 in
                                                        match_operator
                                                          α5
                                                          [
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Ready
                                                                    _
                                                                  =>
                                                                let γ0_0 :=
                                                                  core.task.poll.Poll.Get_Ready_0
                                                                    γ in
                                                                let* result :=
                                                                  M.copy γ0_0 in
                                                                let* α0 :
                                                                    M.Val
                                                                      never.t :=
                                                                  M.break in
                                                                let* α1 :=
                                                                  M.read α0 in
                                                                let* α2 :
                                                                    unit :=
                                                                  never_to_any
                                                                    α1 in
                                                                M.alloc α2
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit);
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Pending
                                                                  =>
                                                                M.alloc tt
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit)
                                                          ] in
                                                      let* _ : M.Val unit :=
                                                        let* α0 : M.Val unit :=
                                                          M.alloc tt in
                                                        let* α1 :
                                                            M.Val
                                                              core.future.ResumeTy.t :=
                                                          yield α0 in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read α1 in
                                                        assign
                                                          _task_context
                                                          α2 in
                                                      M.alloc tt)) :
                                                    M
                                                      (M.Val
                                                        (core.result.Result.t
                                                          assistants_core.models.Run.t
                                                          sqlx_core.error.Error.t))
                                                ] in
                                            M.copy α18 in
                                          let* α0 :
                                              M.Val
                                                (core.result.Result.t
                                                  (axum.json.Json.t
                                                    async_openai.types.run.RunObject.t)
                                                  (http.status.StatusCode.t
                                                  *
                                                  alloc.string.String.t)) :=
                                            match_operator
                                              run
                                              [
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Ok _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Ok_0
                                                        γ in
                                                    let* run := M.copy γ0_0 in
                                                    let* α0 :
                                                        async_openai.types.run.RunObject.t :=
                                                      M.read
                                                        (assistants_core.models.Run.Get_inner
                                                          run) in
                                                    M.alloc
                                                      (core.result.Result.Ok
                                                        (axum.json.Json.Build_t
                                                          α0))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.run.RunObject.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)));
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Err _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Err_0
                                                        γ in
                                                    let* e := M.copy γ0_0 in
                                                    let* _ : M.Val unit :=
                                                      let* lvl :
                                                          M.Val log.Level.t :=
                                                        M.alloc
                                                          log.Level.Error in
                                                      let* α0 :
                                                          (ref log.Level.t) ->
                                                            (ref
                                                              log.LevelFilter.t)
                                                            ->
                                                            M bool.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.cmp.PartialOrd.le
                                                            (Self :=
                                                              log.Level.t)
                                                            (Rhs :=
                                                              log.LevelFilter.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 : bool.t :=
                                                        M.call
                                                          (α0
                                                            (borrow lvl)
                                                            (borrow
                                                              log.STATIC_MAX_LEVEL)) in
                                                      let* α2 :
                                                          (ref log.Level.t) ->
                                                            (ref
                                                              log.LevelFilter.t)
                                                            ->
                                                            M bool.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.cmp.PartialOrd.le
                                                            (Self :=
                                                              log.Level.t)
                                                            (Rhs :=
                                                              log.LevelFilter.t)
                                                            (Trait := ℐ))) in
                                                      let* α3 :
                                                          log.LevelFilter.t :=
                                                        M.call log.max_level in
                                                      let* α4 :
                                                          M.Val
                                                            log.LevelFilter.t :=
                                                        M.alloc α3 in
                                                      let* α5 : bool.t :=
                                                        M.call
                                                          (α2
                                                            (borrow lvl)
                                                            (borrow α4)) in
                                                      let* α6 : M.Val bool.t :=
                                                        M.alloc
                                                          (BinOp.Pure.and
                                                            α1
                                                            α5) in
                                                      let* α7 : bool.t :=
                                                        M.read (use α6) in
                                                      if α7 then
                                                        let* _ : M.Val unit :=
                                                          let* α0 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "Error creating run: ") in
                                                          let* α1 :
                                                              M.Val
                                                                (array
                                                                  (ref
                                                                    str.t)) :=
                                                            M.alloc [ α0 ] in
                                                          let* α2 :
                                                              core.fmt.rt.Argument.t :=
                                                            M.call
                                                              (core.fmt.rt.Argument.t::["new_display"]
                                                                (borrow e)) in
                                                          let* α3 :
                                                              M.Val
                                                                (array
                                                                  core.fmt.rt.Argument.t) :=
                                                            M.alloc [ α2 ] in
                                                          let* α4 :
                                                              core.fmt.Arguments.t :=
                                                            M.call
                                                              (core.fmt.Arguments.t::["new_v1"]
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow α1))
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow
                                                                    α3))) in
                                                          let* α5 :
                                                              log.Level.t :=
                                                            M.read lvl in
                                                          let* α6 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants_api_communication::runs") in
                                                          let* α7 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants_api_communication::runs") in
                                                          let* α8 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants-api-communication/src/runs.rs") in
                                                          let* α9 :
                                                              M.Val
                                                                (((ref str.t)
                                                                *
                                                                (ref str.t))
                                                                *
                                                                (ref str.t)) :=
                                                            M.alloc
                                                              (α6, α7, α8) in
                                                          let* α10 : unit :=
                                                            M.call
                                                              (log.__private_api.log
                                                                α4
                                                                α5
                                                                (borrow α9)
                                                                ((Integer.of_Z
                                                                    91) :
                                                                  u32.t)
                                                                core.option.Option.None) in
                                                          M.alloc α10 in
                                                        M.alloc tt
                                                      else
                                                        M.alloc tt in
                                                    let* _ : M.Val unit :=
                                                      let* α0 :
                                                          M.Val
                                                            (ref
                                                              sqlx_core.error.Error.t) :=
                                                        M.alloc (borrow e) in
                                                      match_operator
                                                        α0
                                                        [
                                                          fun γ =>
                                                            (let* γ :=
                                                              let* α0 :=
                                                                M.read γ in
                                                              M.pure
                                                                (deref α0) in
                                                            let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                sqlx_core.error.Error.Database
                                                                  _
                                                                =>
                                                              let γ1_0 :=
                                                                sqlx_core.error.Error.Get_Database_0
                                                                  γ in
                                                              let* db_err :=
                                                                M.alloc
                                                                  (borrow
                                                                    γ1_0) in
                                                              let* α0 :
                                                                  (ref
                                                                      (dyn
                                                                        [sqlx_core.error.DatabaseError.Trait]))
                                                                    ->
                                                                    M
                                                                      (core.option.Option.t
                                                                        (ref
                                                                          str.t)) :=
                                                                ltac:(M.get_method (fun ℐ =>
                                                                  sqlx_core.error.DatabaseError.constraint
                                                                    (Self :=
                                                                      dyn
                                                                        [sqlx_core.error.DatabaseError.Trait])
                                                                    (Trait := ℐ))) in
                                                              let* α1 :
                                                                  ref
                                                                    (alloc.boxed.Box.t
                                                                      (dyn
                                                                        [sqlx_core.error.DatabaseError.Trait])
                                                                      alloc.alloc.Global.t) :=
                                                                M.read db_err in
                                                              let* α2 :
                                                                  alloc.boxed.Box.t
                                                                    (dyn
                                                                      [sqlx_core.error.DatabaseError.Trait])
                                                                    alloc.alloc.Global.t :=
                                                                M.read
                                                                  (deref α1) in
                                                              let* α3 :
                                                                  core.option.Option.t
                                                                    (ref
                                                                      str.t) :=
                                                                M.call
                                                                  (α0
                                                                    (borrow
                                                                      (deref
                                                                        α2))) in
                                                              let* α4 :
                                                                  M.Val
                                                                    (core.option.Option.t
                                                                      (ref
                                                                        str.t)) :=
                                                                M.alloc α3 in
                                                              match_operator
                                                                α4
                                                                [
                                                                  fun γ =>
                                                                    (let* α0 :=
                                                                      M.read
                                                                        γ in
                                                                    match α0
                                                                    with
                                                                    |
                                                                        core.option.Option.Some
                                                                          _
                                                                        =>
                                                                      let
                                                                            γ0_0 :=
                                                                        core.option.Option.Get_Some_0
                                                                          γ in
                                                                      let*
                                                                            constraint :=
                                                                        M.copy
                                                                          γ0_0 in
                                                                      let* α0 :
                                                                          (ref
                                                                              (ref
                                                                                str.t))
                                                                            ->
                                                                            (ref
                                                                              (ref
                                                                                str.t))
                                                                            ->
                                                                            M
                                                                              bool.t :=
                                                                        ltac:(M.get_method (fun ℐ =>
                                                                          core.cmp.PartialEq.eq
                                                                            (Self :=
                                                                              ref
                                                                                str.t)
                                                                            (Rhs :=
                                                                              ref
                                                                                str.t)
                                                                            (Trait := ℐ))) in
                                                                      let* α1 :
                                                                          bool.t :=
                                                                        M.call
                                                                          (α0
                                                                            (borrow
                                                                              constraint)
                                                                            (borrow
                                                                              (mk_str
                                                                                "runs_assistant_id_fkey"))) in
                                                                      let* α2 :
                                                                          M.Val
                                                                            bool.t :=
                                                                        M.alloc
                                                                          α1 in
                                                                      let* α3 :
                                                                          bool.t :=
                                                                        M.read
                                                                          (use
                                                                            α2) in
                                                                      if α3 then
                                                                        let*
                                                                              α0 :
                                                                            http.status.StatusCode.t :=
                                                                          M.read
                                                                            http.status.BAD_REQUEST in
                                                                        let*
                                                                              α1 :
                                                                            (ref
                                                                                str.t)
                                                                              ->
                                                                              M
                                                                                alloc.string.String.t :=
                                                                          ltac:(M.get_method (fun ℐ =>
                                                                            alloc.string.ToString.to_string
                                                                              (Self :=
                                                                                str.t)
                                                                              (Trait := ℐ))) in
                                                                        let*
                                                                              α2 :
                                                                            ref
                                                                              str.t :=
                                                                          M.read
                                                                            (mk_str
                                                                              "Invalid assistant_id did you create this assistant beforehand? Check https://platform.openai.com/docs/api-reference/assistants/createAssistant") in
                                                                        let*
                                                                              α3 :
                                                                            alloc.string.String.t :=
                                                                          M.call
                                                                            (α1
                                                                              α2) in
                                                                        let*
                                                                              α4 :
                                                                            M.Val
                                                                              never.t :=
                                                                          return_
                                                                            (core.result.Result.Err
                                                                              (α0,
                                                                                α3)) in
                                                                        let*
                                                                              α5 :=
                                                                          M.read
                                                                            α4 in
                                                                        let*
                                                                              α6 :
                                                                            unit :=
                                                                          never_to_any
                                                                            α5 in
                                                                        M.alloc
                                                                          α6
                                                                      else
                                                                        let*
                                                                              α0 :
                                                                            (ref
                                                                                (ref
                                                                                  str.t))
                                                                              ->
                                                                              (ref
                                                                                (ref
                                                                                  str.t))
                                                                              ->
                                                                              M
                                                                                bool.t :=
                                                                          ltac:(M.get_method (fun ℐ =>
                                                                            core.cmp.PartialEq.eq
                                                                              (Self :=
                                                                                ref
                                                                                  str.t)
                                                                              (Rhs :=
                                                                                ref
                                                                                  str.t)
                                                                              (Trait := ℐ))) in
                                                                        let*
                                                                              α1 :
                                                                            bool.t :=
                                                                          M.call
                                                                            (α0
                                                                              (borrow
                                                                                constraint)
                                                                              (borrow
                                                                                (mk_str
                                                                                  "runs_thread_id_fkey"))) in
                                                                        let*
                                                                              α2 :
                                                                            M.Val
                                                                              bool.t :=
                                                                          M.alloc
                                                                            α1 in
                                                                        let*
                                                                              α3 :
                                                                            bool.t :=
                                                                          M.read
                                                                            (use
                                                                              α2) in
                                                                        if α3
                                                                        then
                                                                          let*
                                                                                α0 :
                                                                              http.status.StatusCode.t :=
                                                                            M.read
                                                                              http.status.BAD_REQUEST in
                                                                          let*
                                                                                α1 :
                                                                              (ref
                                                                                  str.t)
                                                                                ->
                                                                                M
                                                                                  alloc.string.String.t :=
                                                                            ltac:(M.get_method (fun ℐ =>
                                                                              alloc.string.ToString.to_string
                                                                                (Self :=
                                                                                  str.t)
                                                                                (Trait := ℐ))) in
                                                                          let*
                                                                                α2 :
                                                                              ref
                                                                                str.t :=
                                                                            M.read
                                                                              (mk_str
                                                                                "Invalid thread_id did you create this thread beforehand? Check https://platform.openai.com/docs/api-reference/threads/createThread") in
                                                                          let*
                                                                                α3 :
                                                                              alloc.string.String.t :=
                                                                            M.call
                                                                              (α1
                                                                                α2) in
                                                                          let*
                                                                                α4 :
                                                                              M.Val
                                                                                never.t :=
                                                                            return_
                                                                              (core.result.Result.Err
                                                                                (α0,
                                                                                  α3)) in
                                                                          let*
                                                                                α5 :=
                                                                            M.read
                                                                              α4 in
                                                                          let*
                                                                                α6 :
                                                                              unit :=
                                                                            never_to_any
                                                                              α5 in
                                                                          M.alloc
                                                                            α6
                                                                        else
                                                                          M.alloc
                                                                            tt
                                                                    | _ =>
                                                                      M.break_match
                                                                    end) :
                                                                    M
                                                                      (M.Val
                                                                        unit);
                                                                  fun γ =>
                                                                    (M.alloc
                                                                      tt) :
                                                                    M
                                                                      (M.Val
                                                                        unit)
                                                                ]
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit);
                                                          fun γ =>
                                                            (M.alloc tt) :
                                                            M (M.Val unit)
                                                        ] in
                                                    let* α0 :
                                                        http.status.StatusCode.t :=
                                                      M.read
                                                        http.status.INTERNAL_SERVER_ERROR in
                                                    let* α1 :
                                                        (ref
                                                            sqlx_core.error.Error.t)
                                                          ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        alloc.string.ToString.to_string
                                                          (Self :=
                                                            sqlx_core.error.Error.t)
                                                          (Trait := ℐ))) in
                                                    let* α2 :
                                                        alloc.string.String.t :=
                                                      M.call (α1 (borrow e)) in
                                                    M.alloc
                                                      (core.result.Result.Err
                                                        (α0, α2))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.run.RunObject.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)))
                                              ] in
                                          M.pure (use α0)
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.run.RunObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ]
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.run.RunObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.run.RunObject.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t async_openai.types.run.RunObject.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.run.RunObject.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn get_run_handler(
      Path((thread_id, run_id)): Path<(String, String)>,
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<RunObject>, (StatusCode, String)> {
      let user_id = Uuid::default().to_string();
      let run = get_run(&app_state.pool, &thread_id, &run_id, &user_id).await;
      match run {
          Ok(run) => Ok(JsonResponse(run.inner)),
          Err(e) => {
              let error_message = e.to_string();
              error!("Failed to get run: {}", error_message);
              Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
          }
      }
  }
  *)
  Definition get_run_handler
      (__arg0
        :
        axum.extract.path.Path.t
          (alloc.string.String.t * alloc.string.String.t))
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val
                    (axum.extract.path.Path.t
                      (alloc.string.String.t * alloc.string.String.t)) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t async_openai.types.run.RunObject.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_, _) =>
                          let γ1_0 := Tuple.Access.left γ0_0 in
                          let γ1_1 := Tuple.Access.right γ0_0 in
                          let* thread_id := M.copy γ1_0 in
                          let* run_id := M.copy γ1_1 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* user_id : M.Val alloc.string.String.t :=
                                    let* α0 :
                                        (ref uuid.Uuid.t) ->
                                          M alloc.string.String.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        alloc.string.ToString.to_string
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α1 : M uuid.Uuid.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.default.Default.default
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α2 : uuid.Uuid.t := M.call α1 in
                                    let* α3 : M.Val uuid.Uuid.t := M.alloc α2 in
                                    let* α4 : alloc.string.String.t :=
                                      M.call (α0 (borrow α3)) in
                                    M.alloc α4 in
                                  let* run :
                                      M.Val
                                        (core.result.Result.t
                                          assistants_core.models.Run.t
                                          sqlx_core.error.Error.t) :=
                                    let* α0 : _ -> M _ :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.future.into_future.IntoFuture.into_future
                                          (Self := _)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        (ref
                                            (alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t))
                                          ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self :=
                                            alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ))) in
                                    let* α2 :
                                        ref
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t) :=
                                      M.call
                                        (α1
                                          (borrow
                                            (assistants_api_communication.models.AppState.Get_pool
                                              app_state))) in
                                    let* α3 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α4 : ref str.t :=
                                      M.call (α3 (borrow thread_id)) in
                                    let* α5 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α6 : ref str.t :=
                                      M.call (α5 (borrow run_id)) in
                                    let* α7 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α8 : ref str.t :=
                                      M.call (α7 (borrow user_id)) in
                                    let* α9 : _ :=
                                      M.call
                                        (assistants_core.runs.get_run
                                          α2
                                          α4
                                          α6
                                          α8) in
                                    let* α10 : _ := M.call (α0 α9) in
                                    let* α11 : M.Val _ := M.alloc α10 in
                                    let* α12 :
                                        M.Val
                                          (core.result.Result.t
                                            assistants_core.models.Run.t
                                            sqlx_core.error.Error.t) :=
                                      match_operator
                                        α11
                                        [
                                          fun γ =>
                                            (let* __awaitee := M.copy γ in
                                            M.loop
                                              (let* _ : M.Val unit :=
                                                let* α0 :
                                                    (core.pin.Pin.t (mut_ref _))
                                                      ->
                                                      (mut_ref
                                                        core.task.wake.Context.t)
                                                      ->
                                                      M
                                                        (core.task.poll.Poll.t
                                                          _) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.future.future.Future.poll
                                                      (Self := _)
                                                      (Trait := ℐ))) in
                                                let* α1 :
                                                    core.pin.Pin.t
                                                      (mut_ref _) :=
                                                  M.call
                                                    ((core.pin.Pin.t
                                                          (mut_ref
                                                            _))::["new_unchecked"]
                                                      (borrow_mut __awaitee)) in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read _task_context in
                                                let* α3 :
                                                    mut_ref
                                                      core.task.wake.Context.t :=
                                                  M.call
                                                    (core.future.get_context
                                                      α2) in
                                                let* α4 :
                                                    core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        assistants_core.models.Run.t
                                                        sqlx_core.error.Error.t) :=
                                                  M.call (α0 α1 α3) in
                                                let* α5 :
                                                    M.Val
                                                      (core.task.poll.Poll.t
                                                        (core.result.Result.t
                                                          assistants_core.models.Run.t
                                                          sqlx_core.error.Error.t)) :=
                                                  M.alloc α4 in
                                                match_operator
                                                  α5
                                                  [
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Ready
                                                            _
                                                          =>
                                                        let γ0_0 :=
                                                          core.task.poll.Poll.Get_Ready_0
                                                            γ in
                                                        let* result :=
                                                          M.copy γ0_0 in
                                                        let* α0 :
                                                            M.Val never.t :=
                                                          M.break in
                                                        let* α1 := M.read α0 in
                                                        let* α2 : unit :=
                                                          never_to_any α1 in
                                                        M.alloc α2
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit);
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Pending
                                                          =>
                                                        M.alloc tt
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit)
                                                  ] in
                                              let* _ : M.Val unit :=
                                                let* α0 : M.Val unit :=
                                                  M.alloc tt in
                                                let* α1 :
                                                    M.Val
                                                      core.future.ResumeTy.t :=
                                                  yield α0 in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read α1 in
                                                assign _task_context α2 in
                                              M.alloc tt)) :
                                            M
                                              (M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Run.t
                                                  sqlx_core.error.Error.t))
                                        ] in
                                    M.copy α12 in
                                  let* α0 :
                                      M.Val
                                        (core.result.Result.t
                                          (axum.json.Json.t
                                            async_openai.types.run.RunObject.t)
                                          (http.status.StatusCode.t
                                          *
                                          alloc.string.String.t)) :=
                                    match_operator
                                      run
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Ok _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Ok_0 γ in
                                            let* run := M.copy γ0_0 in
                                            let* α0 :
                                                async_openai.types.run.RunObject.t :=
                                              M.read
                                                (assistants_core.models.Run.Get_inner
                                                  run) in
                                            M.alloc
                                              (core.result.Result.Ok
                                                (axum.json.Json.Build_t α0))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.run.RunObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)));
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Err _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Err_0 γ in
                                            let* e := M.copy γ0_0 in
                                            let* error_message :
                                                M.Val alloc.string.String.t :=
                                              let* α0 :
                                                  (ref sqlx_core.error.Error.t)
                                                    ->
                                                    M alloc.string.String.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  alloc.string.ToString.to_string
                                                    (Self :=
                                                      sqlx_core.error.Error.t)
                                                    (Trait := ℐ))) in
                                              let* α1 : alloc.string.String.t :=
                                                M.call (α0 (borrow e)) in
                                              M.alloc α1 in
                                            let* _ : M.Val unit :=
                                              let* lvl : M.Val log.Level.t :=
                                                M.alloc log.Level.Error in
                                              let* α0 :
                                                  (ref log.Level.t) ->
                                                    (ref log.LevelFilter.t) ->
                                                    M bool.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.cmp.PartialOrd.le
                                                    (Self := log.Level.t)
                                                    (Rhs := log.LevelFilter.t)
                                                    (Trait := ℐ))) in
                                              let* α1 : bool.t :=
                                                M.call
                                                  (α0
                                                    (borrow lvl)
                                                    (borrow
                                                      log.STATIC_MAX_LEVEL)) in
                                              let* α2 :
                                                  (ref log.Level.t) ->
                                                    (ref log.LevelFilter.t) ->
                                                    M bool.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.cmp.PartialOrd.le
                                                    (Self := log.Level.t)
                                                    (Rhs := log.LevelFilter.t)
                                                    (Trait := ℐ))) in
                                              let* α3 : log.LevelFilter.t :=
                                                M.call log.max_level in
                                              let* α4 :
                                                  M.Val log.LevelFilter.t :=
                                                M.alloc α3 in
                                              let* α5 : bool.t :=
                                                M.call
                                                  (α2
                                                    (borrow lvl)
                                                    (borrow α4)) in
                                              let* α6 : M.Val bool.t :=
                                                M.alloc
                                                  (BinOp.Pure.and α1 α5) in
                                              let* α7 : bool.t :=
                                                M.read (use α6) in
                                              if α7 then
                                                let* _ : M.Val unit :=
                                                  let* α0 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "Failed to get run: ") in
                                                  let* α1 :
                                                      M.Val
                                                        (array (ref str.t)) :=
                                                    M.alloc [ α0 ] in
                                                  let* α2 :
                                                      core.fmt.rt.Argument.t :=
                                                    M.call
                                                      (core.fmt.rt.Argument.t::["new_display"]
                                                        (borrow
                                                          error_message)) in
                                                  let* α3 :
                                                      M.Val
                                                        (array
                                                          core.fmt.rt.Argument.t) :=
                                                    M.alloc [ α2 ] in
                                                  let* α4 :
                                                      core.fmt.Arguments.t :=
                                                    M.call
                                                      (core.fmt.Arguments.t::["new_v1"]
                                                        (pointer_coercion
                                                          "Unsize"
                                                          (borrow α1))
                                                        (pointer_coercion
                                                          "Unsize"
                                                          (borrow α3))) in
                                                  let* α5 : log.Level.t :=
                                                    M.read lvl in
                                                  let* α6 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants_api_communication::runs") in
                                                  let* α7 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants_api_communication::runs") in
                                                  let* α8 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants-api-communication/src/runs.rs") in
                                                  let* α9 :
                                                      M.Val
                                                        (((ref str.t)
                                                        *
                                                        (ref str.t))
                                                        *
                                                        (ref str.t)) :=
                                                    M.alloc (α6, α7, α8) in
                                                  let* α10 : unit :=
                                                    M.call
                                                      (log.__private_api.log
                                                        α4
                                                        α5
                                                        (borrow α9)
                                                        ((Integer.of_Z 116) :
                                                          u32.t)
                                                        core.option.Option.None) in
                                                  M.alloc α10 in
                                                M.alloc tt
                                              else
                                                M.alloc tt in
                                            let* α0 :
                                                http.status.StatusCode.t :=
                                              M.read
                                                http.status.INTERNAL_SERVER_ERROR in
                                            let* α1 : alloc.string.String.t :=
                                              M.read error_message in
                                            M.alloc
                                              (core.result.Result.Err (α0, α1))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.run.RunObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)))
                                      ] in
                                  M.pure (use α0)
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.run.RunObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.run.RunObject.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t async_openai.types.run.RunObject.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.run.RunObject.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn update_run_handler(
      Path((thread_id, run_id)): Path<(String, String)>,
      State(app_state): State<AppState>,
      Json(run_input): Json<ModifyRunRequest>,
  ) -> Result<JsonResponse<RunObject>, (StatusCode, String)> {
      let run = update_run(
          &app_state.pool,
          &thread_id,
          &run_id,
          run_input
              .metadata
              .unwrap_or_default()
              .into_iter()
              .map(|(k, v)| (k, v.to_string()))
              .collect(),
          &Uuid::default().to_string(),
      )
      .await;
      match run {
          Ok(run) => Ok(JsonResponse(run.inner)),
          Err(e) => {
              let error_message = e.to_string();
              error!("Failed to update run: {}", error_message);
              Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
          }
      }
  }
  *)
  Definition update_run_handler
      (__arg0
        :
        axum.extract.path.Path.t
          (alloc.string.String.t * alloc.string.String.t))
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      (__arg2 : axum.json.Json.t async_openai.types.run.ModifyRunRequest.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    let* __arg2 := M.alloc __arg2 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val
                    (axum.extract.path.Path.t
                      (alloc.string.String.t * alloc.string.String.t)) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t async_openai.types.run.RunObject.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_, _) =>
                          let γ1_0 := Tuple.Access.left γ0_0 in
                          let γ1_1 := Tuple.Access.right γ0_0 in
                          let* thread_id := M.copy γ1_0 in
                          let* run_id := M.copy γ1_1 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* __arg2 :
                                      M.Val
                                        (axum.json.Json.t
                                          async_openai.types.run.ModifyRunRequest.t) :=
                                    M.copy __arg2 in
                                  match_operator
                                    __arg2
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | axum.json.Json.Build_t _ =>
                                          let γ0_0 := axum.json.Json.Get_0 γ in
                                          let* run_input := M.copy γ0_0 in
                                          let* run :
                                              M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Run.t
                                                  sqlx_core.error.Error.t) :=
                                            let* α0 : _ -> M _ :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.future.into_future.IntoFuture.into_future
                                                  (Self := _)
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                (ref
                                                    (alloc.sync.Arc.t
                                                      (sqlx_core.pool.Pool.t
                                                        sqlx_postgres.database.Postgres.t)
                                                      alloc.alloc.Global.t))
                                                  ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.sync.Arc.t
                                                      (sqlx_core.pool.Pool.t
                                                        sqlx_postgres.database.Postgres.t)
                                                      alloc.alloc.Global.t)
                                                  (Trait := ℐ))) in
                                            let* α2 :
                                                ref
                                                  (sqlx_core.pool.Pool.t
                                                    sqlx_postgres.database.Postgres.t) :=
                                              M.call
                                                (α1
                                                  (borrow
                                                    (assistants_api_communication.models.AppState.Get_pool
                                                      app_state))) in
                                            let* α3 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α4 : ref str.t :=
                                              M.call (α3 (borrow thread_id)) in
                                            let* α5 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α6 : ref str.t :=
                                              M.call (α5 (borrow run_id)) in
                                            let* α7 :
                                                (core.iter.adapters.map.Map.t
                                                    (std.collections.hash.map.IntoIter.t
                                                      alloc.string.String.t
                                                      serde_json.value.Value.t)
                                                    ((alloc.string.String.t
                                                      *
                                                      serde_json.value.Value.t)
                                                      ->
                                                      M
                                                        (alloc.string.String.t
                                                        *
                                                        alloc.string.String.t)))
                                                  ->
                                                  M
                                                    (std.collections.hash.map.HashMap.t
                                                      alloc.string.String.t
                                                      alloc.string.String.t
                                                      std.hash.random.RandomState.t) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.iter.traits.iterator.Iterator.collect
                                                  (Self :=
                                                    core.iter.adapters.map.Map.t
                                                      (std.collections.hash.map.IntoIter.t
                                                        alloc.string.String.t
                                                        serde_json.value.Value.t)
                                                      ((alloc.string.String.t
                                                        *
                                                        serde_json.value.Value.t)
                                                        ->
                                                        M
                                                          (alloc.string.String.t
                                                          *
                                                          alloc.string.String.t)))
                                                  (B :=
                                                    std.collections.hash.map.HashMap.t
                                                      alloc.string.String.t
                                                      alloc.string.String.t
                                                      std.hash.random.RandomState.t)
                                                  (Trait := ℐ))) in
                                            let* α8 :
                                                (std.collections.hash.map.IntoIter.t
                                                    alloc.string.String.t
                                                    serde_json.value.Value.t)
                                                  ->
                                                  ((alloc.string.String.t
                                                    *
                                                    serde_json.value.Value.t)
                                                    ->
                                                    M
                                                      (alloc.string.String.t
                                                      *
                                                      alloc.string.String.t))
                                                  ->
                                                  M
                                                    (core.iter.adapters.map.Map.t
                                                      (std.collections.hash.map.IntoIter.t
                                                        alloc.string.String.t
                                                        serde_json.value.Value.t)
                                                      ((alloc.string.String.t
                                                        *
                                                        serde_json.value.Value.t)
                                                        ->
                                                        M
                                                          (alloc.string.String.t
                                                          *
                                                          alloc.string.String.t))) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.iter.traits.iterator.Iterator.map
                                                  (Self :=
                                                    std.collections.hash.map.IntoIter.t
                                                      alloc.string.String.t
                                                      serde_json.value.Value.t)
                                                  (B :=
                                                    alloc.string.String.t
                                                    *
                                                    alloc.string.String.t)
                                                  (F :=
                                                    (alloc.string.String.t
                                                      *
                                                      serde_json.value.Value.t)
                                                      ->
                                                      M
                                                        (alloc.string.String.t
                                                        *
                                                        alloc.string.String.t))
                                                  (Trait := ℐ))) in
                                            let* α9 :
                                                (std.collections.hash.map.HashMap.t
                                                    alloc.string.String.t
                                                    serde_json.value.Value.t
                                                    std.hash.random.RandomState.t)
                                                  ->
                                                  M _ :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.iter.traits.collect.IntoIterator.into_iter
                                                  (Self :=
                                                    std.collections.hash.map.HashMap.t
                                                      alloc.string.String.t
                                                      serde_json.value.Value.t
                                                      std.hash.random.RandomState.t)
                                                  (Trait := ℐ))) in
                                            let* α10 :
                                                core.option.Option.t
                                                  (std.collections.hash.map.HashMap.t
                                                    alloc.string.String.t
                                                    serde_json.value.Value.t
                                                    std.hash.random.RandomState.t) :=
                                              M.read
                                                (async_openai.types.run.ModifyRunRequest.Get_metadata
                                                  run_input) in
                                            let* α11 :
                                                std.collections.hash.map.HashMap.t
                                                  alloc.string.String.t
                                                  serde_json.value.Value.t
                                                  std.hash.random.RandomState.t :=
                                              M.call
                                                ((core.option.Option.t
                                                      (std.collections.hash.map.HashMap.t
                                                        alloc.string.String.t
                                                        serde_json.value.Value.t
                                                        std.hash.random.RandomState.t))::["unwrap_or_default"]
                                                  α10) in
                                            let* α12 :
                                                std.collections.hash.map.IntoIter.t
                                                  alloc.string.String.t
                                                  serde_json.value.Value.t :=
                                              M.call (α9 α11) in
                                            let* α13 :
                                                core.iter.adapters.map.Map.t
                                                  (std.collections.hash.map.IntoIter.t
                                                    alloc.string.String.t
                                                    serde_json.value.Value.t)
                                                  ((alloc.string.String.t
                                                    *
                                                    serde_json.value.Value.t)
                                                    ->
                                                    M
                                                      (alloc.string.String.t
                                                      *
                                                      alloc.string.String.t)) :=
                                              M.call
                                                (α8
                                                  α12
                                                  (fun
                                                      (α0 :
                                                        alloc.string.String.t
                                                        *
                                                        serde_json.value.Value.t) =>
                                                    (let* α0 := M.alloc α0 in
                                                    match_operator
                                                      α0
                                                      [
                                                        fun γ =>
                                                          (let* α0 :=
                                                            M.read γ in
                                                          match α0 with
                                                          | (_, _) =>
                                                            let γ0_0 :=
                                                              Tuple.Access.left
                                                                γ in
                                                            let γ0_1 :=
                                                              Tuple.Access.right
                                                                γ in
                                                            let* k :=
                                                              M.copy γ0_0 in
                                                            let* v :=
                                                              M.copy γ0_1 in
                                                            let* α0 :
                                                                alloc.string.String.t :=
                                                              M.read k in
                                                            let* α1 :
                                                                (ref
                                                                    serde_json.value.Value.t)
                                                                  ->
                                                                  M
                                                                    alloc.string.String.t :=
                                                              ltac:(M.get_method (fun ℐ =>
                                                                alloc.string.ToString.to_string
                                                                  (Self :=
                                                                    serde_json.value.Value.t)
                                                                  (Trait := ℐ))) in
                                                            let* α2 :
                                                                alloc.string.String.t :=
                                                              M.call
                                                                (α1
                                                                  (borrow v)) in
                                                            M.pure (α0, α2)
                                                          end) :
                                                          M
                                                            (alloc.string.String.t
                                                            *
                                                            alloc.string.String.t)
                                                      ]) :
                                                    M
                                                      (alloc.string.String.t
                                                      *
                                                      alloc.string.String.t))) in
                                            let* α14 :
                                                std.collections.hash.map.HashMap.t
                                                  alloc.string.String.t
                                                  alloc.string.String.t
                                                  std.hash.random.RandomState.t :=
                                              M.call (α7 α13) in
                                            let* α15 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α16 :
                                                (ref uuid.Uuid.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self := uuid.Uuid.t)
                                                  (Trait := ℐ))) in
                                            let* α17 : M uuid.Uuid.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.default.Default.default
                                                  (Self := uuid.Uuid.t)
                                                  (Trait := ℐ))) in
                                            let* α18 : uuid.Uuid.t :=
                                              M.call α17 in
                                            let* α19 : M.Val uuid.Uuid.t :=
                                              M.alloc α18 in
                                            let* α20 : alloc.string.String.t :=
                                              M.call (α16 (borrow α19)) in
                                            let* α21 :
                                                M.Val alloc.string.String.t :=
                                              M.alloc α20 in
                                            let* α22 : ref str.t :=
                                              M.call (α15 (borrow α21)) in
                                            let* α23 : _ :=
                                              M.call
                                                (assistants_core.runs.update_run
                                                  α2
                                                  α4
                                                  α6
                                                  α14
                                                  α22) in
                                            let* α24 : _ := M.call (α0 α23) in
                                            let* α25 : M.Val _ := M.alloc α24 in
                                            let* α26 :
                                                M.Val
                                                  (core.result.Result.t
                                                    assistants_core.models.Run.t
                                                    sqlx_core.error.Error.t) :=
                                              match_operator
                                                α25
                                                [
                                                  fun γ =>
                                                    (let* __awaitee :=
                                                      M.copy γ in
                                                    M.loop
                                                      (let* _ : M.Val unit :=
                                                        let* α0 :
                                                            (core.pin.Pin.t
                                                                (mut_ref _))
                                                              ->
                                                              (mut_ref
                                                                core.task.wake.Context.t)
                                                              ->
                                                              M
                                                                (core.task.poll.Poll.t
                                                                  _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.future.future.Future.poll
                                                              (Self := _)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            core.pin.Pin.t
                                                              (mut_ref _) :=
                                                          M.call
                                                            ((core.pin.Pin.t
                                                                  (mut_ref
                                                                    _))::["new_unchecked"]
                                                              (borrow_mut
                                                                __awaitee)) in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read
                                                            _task_context in
                                                        let* α3 :
                                                            mut_ref
                                                              core.task.wake.Context.t :=
                                                          M.call
                                                            (core.future.get_context
                                                              α2) in
                                                        let* α4 :
                                                            core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                assistants_core.models.Run.t
                                                                sqlx_core.error.Error.t) :=
                                                          M.call (α0 α1 α3) in
                                                        let* α5 :
                                                            M.Val
                                                              (core.task.poll.Poll.t
                                                                (core.result.Result.t
                                                                  assistants_core.models.Run.t
                                                                  sqlx_core.error.Error.t)) :=
                                                          M.alloc α4 in
                                                        match_operator
                                                          α5
                                                          [
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Ready
                                                                    _
                                                                  =>
                                                                let γ0_0 :=
                                                                  core.task.poll.Poll.Get_Ready_0
                                                                    γ in
                                                                let* result :=
                                                                  M.copy γ0_0 in
                                                                let* α0 :
                                                                    M.Val
                                                                      never.t :=
                                                                  M.break in
                                                                let* α1 :=
                                                                  M.read α0 in
                                                                let* α2 :
                                                                    unit :=
                                                                  never_to_any
                                                                    α1 in
                                                                M.alloc α2
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit);
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Pending
                                                                  =>
                                                                M.alloc tt
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit)
                                                          ] in
                                                      let* _ : M.Val unit :=
                                                        let* α0 : M.Val unit :=
                                                          M.alloc tt in
                                                        let* α1 :
                                                            M.Val
                                                              core.future.ResumeTy.t :=
                                                          yield α0 in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read α1 in
                                                        assign
                                                          _task_context
                                                          α2 in
                                                      M.alloc tt)) :
                                                    M
                                                      (M.Val
                                                        (core.result.Result.t
                                                          assistants_core.models.Run.t
                                                          sqlx_core.error.Error.t))
                                                ] in
                                            M.copy α26 in
                                          let* α0 :
                                              M.Val
                                                (core.result.Result.t
                                                  (axum.json.Json.t
                                                    async_openai.types.run.RunObject.t)
                                                  (http.status.StatusCode.t
                                                  *
                                                  alloc.string.String.t)) :=
                                            match_operator
                                              run
                                              [
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Ok _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Ok_0
                                                        γ in
                                                    let* run := M.copy γ0_0 in
                                                    let* α0 :
                                                        async_openai.types.run.RunObject.t :=
                                                      M.read
                                                        (assistants_core.models.Run.Get_inner
                                                          run) in
                                                    M.alloc
                                                      (core.result.Result.Ok
                                                        (axum.json.Json.Build_t
                                                          α0))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.run.RunObject.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)));
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Err _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Err_0
                                                        γ in
                                                    let* e := M.copy γ0_0 in
                                                    let* error_message :
                                                        M.Val
                                                          alloc.string.String.t :=
                                                      let* α0 :
                                                          (ref
                                                              sqlx_core.error.Error.t)
                                                            ->
                                                            M
                                                              alloc.string.String.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          alloc.string.ToString.to_string
                                                            (Self :=
                                                              sqlx_core.error.Error.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          alloc.string.String.t :=
                                                        M.call
                                                          (α0 (borrow e)) in
                                                      M.alloc α1 in
                                                    let* _ : M.Val unit :=
                                                      let* lvl :
                                                          M.Val log.Level.t :=
                                                        M.alloc
                                                          log.Level.Error in
                                                      let* α0 :
                                                          (ref log.Level.t) ->
                                                            (ref
                                                              log.LevelFilter.t)
                                                            ->
                                                            M bool.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.cmp.PartialOrd.le
                                                            (Self :=
                                                              log.Level.t)
                                                            (Rhs :=
                                                              log.LevelFilter.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 : bool.t :=
                                                        M.call
                                                          (α0
                                                            (borrow lvl)
                                                            (borrow
                                                              log.STATIC_MAX_LEVEL)) in
                                                      let* α2 :
                                                          (ref log.Level.t) ->
                                                            (ref
                                                              log.LevelFilter.t)
                                                            ->
                                                            M bool.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.cmp.PartialOrd.le
                                                            (Self :=
                                                              log.Level.t)
                                                            (Rhs :=
                                                              log.LevelFilter.t)
                                                            (Trait := ℐ))) in
                                                      let* α3 :
                                                          log.LevelFilter.t :=
                                                        M.call log.max_level in
                                                      let* α4 :
                                                          M.Val
                                                            log.LevelFilter.t :=
                                                        M.alloc α3 in
                                                      let* α5 : bool.t :=
                                                        M.call
                                                          (α2
                                                            (borrow lvl)
                                                            (borrow α4)) in
                                                      let* α6 : M.Val bool.t :=
                                                        M.alloc
                                                          (BinOp.Pure.and
                                                            α1
                                                            α5) in
                                                      let* α7 : bool.t :=
                                                        M.read (use α6) in
                                                      if α7 then
                                                        let* _ : M.Val unit :=
                                                          let* α0 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "Failed to update run: ") in
                                                          let* α1 :
                                                              M.Val
                                                                (array
                                                                  (ref
                                                                    str.t)) :=
                                                            M.alloc [ α0 ] in
                                                          let* α2 :
                                                              core.fmt.rt.Argument.t :=
                                                            M.call
                                                              (core.fmt.rt.Argument.t::["new_display"]
                                                                (borrow
                                                                  error_message)) in
                                                          let* α3 :
                                                              M.Val
                                                                (array
                                                                  core.fmt.rt.Argument.t) :=
                                                            M.alloc [ α2 ] in
                                                          let* α4 :
                                                              core.fmt.Arguments.t :=
                                                            M.call
                                                              (core.fmt.Arguments.t::["new_v1"]
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow α1))
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow
                                                                    α3))) in
                                                          let* α5 :
                                                              log.Level.t :=
                                                            M.read lvl in
                                                          let* α6 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants_api_communication::runs") in
                                                          let* α7 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants_api_communication::runs") in
                                                          let* α8 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "assistants-api-communication/src/runs.rs") in
                                                          let* α9 :
                                                              M.Val
                                                                (((ref str.t)
                                                                *
                                                                (ref str.t))
                                                                *
                                                                (ref str.t)) :=
                                                            M.alloc
                                                              (α6, α7, α8) in
                                                          let* α10 : unit :=
                                                            M.call
                                                              (log.__private_api.log
                                                                α4
                                                                α5
                                                                (borrow α9)
                                                                ((Integer.of_Z
                                                                    144) :
                                                                  u32.t)
                                                                core.option.Option.None) in
                                                          M.alloc α10 in
                                                        M.alloc tt
                                                      else
                                                        M.alloc tt in
                                                    let* α0 :
                                                        http.status.StatusCode.t :=
                                                      M.read
                                                        http.status.INTERNAL_SERVER_ERROR in
                                                    let* α1 :
                                                        alloc.string.String.t :=
                                                      M.read error_message in
                                                    M.alloc
                                                      (core.result.Result.Err
                                                        (α0, α1))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.run.RunObject.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)))
                                              ] in
                                          M.pure (use α0)
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.run.RunObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ]
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.run.RunObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.run.RunObject.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t async_openai.types.run.RunObject.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.run.RunObject.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn delete_run_handler(
      Path((thread_id, run_id)): Path<(String, String)>,
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<()>, (StatusCode, String)> {
      let result = delete_run(
          &app_state.pool,
          &thread_id,
          &run_id,
          &Uuid::default().to_string(),
      )
      .await;
      match result {
          Ok(_) => Ok(JsonResponse(())),
          Err(e) => {
              let error_message = e.to_string();
              error!("Failed to delete run: {}", error_message);
              Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
          }
      }
  }
  *)
  Definition delete_run_handler
      (__arg0
        :
        axum.extract.path.Path.t
          (alloc.string.String.t * alloc.string.String.t))
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val
                    (axum.extract.path.Path.t
                      (alloc.string.String.t * alloc.string.String.t)) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t unit)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_, _) =>
                          let γ1_0 := Tuple.Access.left γ0_0 in
                          let γ1_1 := Tuple.Access.right γ0_0 in
                          let* thread_id := M.copy γ1_0 in
                          let* run_id := M.copy γ1_1 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* result :
                                      M.Val
                                        (core.result.Result.t
                                          unit
                                          sqlx_core.error.Error.t) :=
                                    let* α0 : _ -> M _ :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.future.into_future.IntoFuture.into_future
                                          (Self := _)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        (ref
                                            (alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t))
                                          ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self :=
                                            alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ))) in
                                    let* α2 :
                                        ref
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t) :=
                                      M.call
                                        (α1
                                          (borrow
                                            (assistants_api_communication.models.AppState.Get_pool
                                              app_state))) in
                                    let* α3 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α4 : ref str.t :=
                                      M.call (α3 (borrow thread_id)) in
                                    let* α5 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α6 : ref str.t :=
                                      M.call (α5 (borrow run_id)) in
                                    let* α7 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α8 :
                                        (ref uuid.Uuid.t) ->
                                          M alloc.string.String.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        alloc.string.ToString.to_string
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α9 : M uuid.Uuid.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.default.Default.default
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α10 : uuid.Uuid.t := M.call α9 in
                                    let* α11 : M.Val uuid.Uuid.t :=
                                      M.alloc α10 in
                                    let* α12 : alloc.string.String.t :=
                                      M.call (α8 (borrow α11)) in
                                    let* α13 : M.Val alloc.string.String.t :=
                                      M.alloc α12 in
                                    let* α14 : ref str.t :=
                                      M.call (α7 (borrow α13)) in
                                    let* α15 : _ :=
                                      M.call
                                        (assistants_core.runs.delete_run
                                          α2
                                          α4
                                          α6
                                          α14) in
                                    let* α16 : _ := M.call (α0 α15) in
                                    let* α17 : M.Val _ := M.alloc α16 in
                                    let* α18 :
                                        M.Val
                                          (core.result.Result.t
                                            unit
                                            sqlx_core.error.Error.t) :=
                                      match_operator
                                        α17
                                        [
                                          fun γ =>
                                            (let* __awaitee := M.copy γ in
                                            M.loop
                                              (let* _ : M.Val unit :=
                                                let* α0 :
                                                    (core.pin.Pin.t (mut_ref _))
                                                      ->
                                                      (mut_ref
                                                        core.task.wake.Context.t)
                                                      ->
                                                      M
                                                        (core.task.poll.Poll.t
                                                          _) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.future.future.Future.poll
                                                      (Self := _)
                                                      (Trait := ℐ))) in
                                                let* α1 :
                                                    core.pin.Pin.t
                                                      (mut_ref _) :=
                                                  M.call
                                                    ((core.pin.Pin.t
                                                          (mut_ref
                                                            _))::["new_unchecked"]
                                                      (borrow_mut __awaitee)) in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read _task_context in
                                                let* α3 :
                                                    mut_ref
                                                      core.task.wake.Context.t :=
                                                  M.call
                                                    (core.future.get_context
                                                      α2) in
                                                let* α4 :
                                                    core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        unit
                                                        sqlx_core.error.Error.t) :=
                                                  M.call (α0 α1 α3) in
                                                let* α5 :
                                                    M.Val
                                                      (core.task.poll.Poll.t
                                                        (core.result.Result.t
                                                          unit
                                                          sqlx_core.error.Error.t)) :=
                                                  M.alloc α4 in
                                                match_operator
                                                  α5
                                                  [
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Ready
                                                            _
                                                          =>
                                                        let γ0_0 :=
                                                          core.task.poll.Poll.Get_Ready_0
                                                            γ in
                                                        let* result :=
                                                          M.copy γ0_0 in
                                                        let* α0 :
                                                            M.Val never.t :=
                                                          M.break in
                                                        let* α1 := M.read α0 in
                                                        let* α2 : unit :=
                                                          never_to_any α1 in
                                                        M.alloc α2
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit);
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Pending
                                                          =>
                                                        M.alloc tt
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit)
                                                  ] in
                                              let* _ : M.Val unit :=
                                                let* α0 : M.Val unit :=
                                                  M.alloc tt in
                                                let* α1 :
                                                    M.Val
                                                      core.future.ResumeTy.t :=
                                                  yield α0 in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read α1 in
                                                assign _task_context α2 in
                                              M.alloc tt)) :
                                            M
                                              (M.Val
                                                (core.result.Result.t
                                                  unit
                                                  sqlx_core.error.Error.t))
                                        ] in
                                    M.copy α18 in
                                  let* α0 :
                                      M.Val
                                        (core.result.Result.t
                                          (axum.json.Json.t unit)
                                          (http.status.StatusCode.t
                                          *
                                          alloc.string.String.t)) :=
                                    match_operator
                                      result
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Ok _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Ok_0 γ in
                                            M.alloc
                                              (core.result.Result.Ok
                                                (axum.json.Json.Build_t tt))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t unit)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)));
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Err _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Err_0 γ in
                                            let* e := M.copy γ0_0 in
                                            let* error_message :
                                                M.Val alloc.string.String.t :=
                                              let* α0 :
                                                  (ref sqlx_core.error.Error.t)
                                                    ->
                                                    M alloc.string.String.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  alloc.string.ToString.to_string
                                                    (Self :=
                                                      sqlx_core.error.Error.t)
                                                    (Trait := ℐ))) in
                                              let* α1 : alloc.string.String.t :=
                                                M.call (α0 (borrow e)) in
                                              M.alloc α1 in
                                            let* _ : M.Val unit :=
                                              let* lvl : M.Val log.Level.t :=
                                                M.alloc log.Level.Error in
                                              let* α0 :
                                                  (ref log.Level.t) ->
                                                    (ref log.LevelFilter.t) ->
                                                    M bool.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.cmp.PartialOrd.le
                                                    (Self := log.Level.t)
                                                    (Rhs := log.LevelFilter.t)
                                                    (Trait := ℐ))) in
                                              let* α1 : bool.t :=
                                                M.call
                                                  (α0
                                                    (borrow lvl)
                                                    (borrow
                                                      log.STATIC_MAX_LEVEL)) in
                                              let* α2 :
                                                  (ref log.Level.t) ->
                                                    (ref log.LevelFilter.t) ->
                                                    M bool.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.cmp.PartialOrd.le
                                                    (Self := log.Level.t)
                                                    (Rhs := log.LevelFilter.t)
                                                    (Trait := ℐ))) in
                                              let* α3 : log.LevelFilter.t :=
                                                M.call log.max_level in
                                              let* α4 :
                                                  M.Val log.LevelFilter.t :=
                                                M.alloc α3 in
                                              let* α5 : bool.t :=
                                                M.call
                                                  (α2
                                                    (borrow lvl)
                                                    (borrow α4)) in
                                              let* α6 : M.Val bool.t :=
                                                M.alloc
                                                  (BinOp.Pure.and α1 α5) in
                                              let* α7 : bool.t :=
                                                M.read (use α6) in
                                              if α7 then
                                                let* _ : M.Val unit :=
                                                  let* α0 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "Failed to delete run: ") in
                                                  let* α1 :
                                                      M.Val
                                                        (array (ref str.t)) :=
                                                    M.alloc [ α0 ] in
                                                  let* α2 :
                                                      core.fmt.rt.Argument.t :=
                                                    M.call
                                                      (core.fmt.rt.Argument.t::["new_display"]
                                                        (borrow
                                                          error_message)) in
                                                  let* α3 :
                                                      M.Val
                                                        (array
                                                          core.fmt.rt.Argument.t) :=
                                                    M.alloc [ α2 ] in
                                                  let* α4 :
                                                      core.fmt.Arguments.t :=
                                                    M.call
                                                      (core.fmt.Arguments.t::["new_v1"]
                                                        (pointer_coercion
                                                          "Unsize"
                                                          (borrow α1))
                                                        (pointer_coercion
                                                          "Unsize"
                                                          (borrow α3))) in
                                                  let* α5 : log.Level.t :=
                                                    M.read lvl in
                                                  let* α6 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants_api_communication::runs") in
                                                  let* α7 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants_api_communication::runs") in
                                                  let* α8 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants-api-communication/src/runs.rs") in
                                                  let* α9 :
                                                      M.Val
                                                        (((ref str.t)
                                                        *
                                                        (ref str.t))
                                                        *
                                                        (ref str.t)) :=
                                                    M.alloc (α6, α7, α8) in
                                                  let* α10 : unit :=
                                                    M.call
                                                      (log.__private_api.log
                                                        α4
                                                        α5
                                                        (borrow α9)
                                                        ((Integer.of_Z 165) :
                                                          u32.t)
                                                        core.option.Option.None) in
                                                  M.alloc α10 in
                                                M.alloc tt
                                              else
                                                M.alloc tt in
                                            let* α0 :
                                                http.status.StatusCode.t :=
                                              M.read
                                                http.status.INTERNAL_SERVER_ERROR in
                                            let* α1 : alloc.string.String.t :=
                                              M.read error_message in
                                            M.alloc
                                              (core.result.Result.Err (α0, α1))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t unit)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)))
                                      ] in
                                  M.pure (use α0)
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t unit)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t unit)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t unit)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t unit)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn list_runs_handler(
      Path((thread_id,)): Path<(String,)>,
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<Vec<RunObject>>, (StatusCode, String)> {
      let runs = list_runs(&app_state.pool, &thread_id, &Uuid::default().to_string()).await;
      match runs {
          Ok(runs) => Ok(JsonResponse(runs.into_iter().map(|r| r.inner).collect())),
          Err(e) => {
              let error_message = e.to_string();
              error!("Failed to list runs: {}", error_message);
              Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
          }
      }
  }
  *)
  Definition list_runs_handler
      (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t
                        (alloc.vec.Vec.t
                          async_openai.types.run.RunObject.t
                          alloc.alloc.Global.t))
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_) =>
                          let γ1_0 := γ0_0 in
                          let* thread_id := M.copy γ1_0 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* runs :
                                      M.Val
                                        (core.result.Result.t
                                          (alloc.vec.Vec.t
                                            assistants_core.models.Run.t
                                            alloc.alloc.Global.t)
                                          sqlx_core.error.Error.t) :=
                                    let* α0 : _ -> M _ :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.future.into_future.IntoFuture.into_future
                                          (Self := _)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        (ref
                                            (alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t))
                                          ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self :=
                                            alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ))) in
                                    let* α2 :
                                        ref
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t) :=
                                      M.call
                                        (α1
                                          (borrow
                                            (assistants_api_communication.models.AppState.Get_pool
                                              app_state))) in
                                    let* α3 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α4 : ref str.t :=
                                      M.call (α3 (borrow thread_id)) in
                                    let* α5 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α6 :
                                        (ref uuid.Uuid.t) ->
                                          M alloc.string.String.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        alloc.string.ToString.to_string
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α7 : M uuid.Uuid.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.default.Default.default
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α8 : uuid.Uuid.t := M.call α7 in
                                    let* α9 : M.Val uuid.Uuid.t := M.alloc α8 in
                                    let* α10 : alloc.string.String.t :=
                                      M.call (α6 (borrow α9)) in
                                    let* α11 : M.Val alloc.string.String.t :=
                                      M.alloc α10 in
                                    let* α12 : ref str.t :=
                                      M.call (α5 (borrow α11)) in
                                    let* α13 : _ :=
                                      M.call
                                        (assistants_core.runs.list_runs
                                          α2
                                          α4
                                          α12) in
                                    let* α14 : _ := M.call (α0 α13) in
                                    let* α15 : M.Val _ := M.alloc α14 in
                                    let* α16 :
                                        M.Val
                                          (core.result.Result.t
                                            (alloc.vec.Vec.t
                                              assistants_core.models.Run.t
                                              alloc.alloc.Global.t)
                                            sqlx_core.error.Error.t) :=
                                      match_operator
                                        α15
                                        [
                                          fun γ =>
                                            (let* __awaitee := M.copy γ in
                                            M.loop
                                              (let* _ : M.Val unit :=
                                                let* α0 :
                                                    (core.pin.Pin.t (mut_ref _))
                                                      ->
                                                      (mut_ref
                                                        core.task.wake.Context.t)
                                                      ->
                                                      M
                                                        (core.task.poll.Poll.t
                                                          _) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.future.future.Future.poll
                                                      (Self := _)
                                                      (Trait := ℐ))) in
                                                let* α1 :
                                                    core.pin.Pin.t
                                                      (mut_ref _) :=
                                                  M.call
                                                    ((core.pin.Pin.t
                                                          (mut_ref
                                                            _))::["new_unchecked"]
                                                      (borrow_mut __awaitee)) in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read _task_context in
                                                let* α3 :
                                                    mut_ref
                                                      core.task.wake.Context.t :=
                                                  M.call
                                                    (core.future.get_context
                                                      α2) in
                                                let* α4 :
                                                    core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        (alloc.vec.Vec.t
                                                          assistants_core.models.Run.t
                                                          alloc.alloc.Global.t)
                                                        sqlx_core.error.Error.t) :=
                                                  M.call (α0 α1 α3) in
                                                let* α5 :
                                                    M.Val
                                                      (core.task.poll.Poll.t
                                                        (core.result.Result.t
                                                          (alloc.vec.Vec.t
                                                            assistants_core.models.Run.t
                                                            alloc.alloc.Global.t)
                                                          sqlx_core.error.Error.t)) :=
                                                  M.alloc α4 in
                                                match_operator
                                                  α5
                                                  [
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Ready
                                                            _
                                                          =>
                                                        let γ0_0 :=
                                                          core.task.poll.Poll.Get_Ready_0
                                                            γ in
                                                        let* result :=
                                                          M.copy γ0_0 in
                                                        let* α0 :
                                                            M.Val never.t :=
                                                          M.break in
                                                        let* α1 := M.read α0 in
                                                        let* α2 : unit :=
                                                          never_to_any α1 in
                                                        M.alloc α2
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit);
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Pending
                                                          =>
                                                        M.alloc tt
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit)
                                                  ] in
                                              let* _ : M.Val unit :=
                                                let* α0 : M.Val unit :=
                                                  M.alloc tt in
                                                let* α1 :
                                                    M.Val
                                                      core.future.ResumeTy.t :=
                                                  yield α0 in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read α1 in
                                                assign _task_context α2 in
                                              M.alloc tt)) :
                                            M
                                              (M.Val
                                                (core.result.Result.t
                                                  (alloc.vec.Vec.t
                                                    assistants_core.models.Run.t
                                                    alloc.alloc.Global.t)
                                                  sqlx_core.error.Error.t))
                                        ] in
                                    M.copy α16 in
                                  let* α0 :
                                      M.Val
                                        (core.result.Result.t
                                          (axum.json.Json.t
                                            (alloc.vec.Vec.t
                                              async_openai.types.run.RunObject.t
                                              alloc.alloc.Global.t))
                                          (http.status.StatusCode.t
                                          *
                                          alloc.string.String.t)) :=
                                    match_operator
                                      runs
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Ok _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Ok_0 γ in
                                            let* runs := M.copy γ0_0 in
                                            let* α0 :
                                                (core.iter.adapters.map.Map.t
                                                    (alloc.vec.into_iter.IntoIter.t
                                                      assistants_core.models.Run.t
                                                      alloc.alloc.Global.t)
                                                    (assistants_core.models.Run.t
                                                      ->
                                                      M
                                                        async_openai.types.run.RunObject.t))
                                                  ->
                                                  M
                                                    (alloc.vec.Vec.t
                                                      async_openai.types.run.RunObject.t
                                                      alloc.alloc.Global.t) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.iter.traits.iterator.Iterator.collect
                                                  (Self :=
                                                    core.iter.adapters.map.Map.t
                                                      (alloc.vec.into_iter.IntoIter.t
                                                        assistants_core.models.Run.t
                                                        alloc.alloc.Global.t)
                                                      (assistants_core.models.Run.t
                                                        ->
                                                        M
                                                          async_openai.types.run.RunObject.t))
                                                  (B :=
                                                    alloc.vec.Vec.t
                                                      async_openai.types.run.RunObject.t
                                                      alloc.alloc.Global.t)
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                (alloc.vec.into_iter.IntoIter.t
                                                    assistants_core.models.Run.t
                                                    alloc.alloc.Global.t)
                                                  ->
                                                  (assistants_core.models.Run.t
                                                    ->
                                                    M
                                                      async_openai.types.run.RunObject.t)
                                                  ->
                                                  M
                                                    (core.iter.adapters.map.Map.t
                                                      (alloc.vec.into_iter.IntoIter.t
                                                        assistants_core.models.Run.t
                                                        alloc.alloc.Global.t)
                                                      (assistants_core.models.Run.t
                                                        ->
                                                        M
                                                          async_openai.types.run.RunObject.t)) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.iter.traits.iterator.Iterator.map
                                                  (Self :=
                                                    alloc.vec.into_iter.IntoIter.t
                                                      assistants_core.models.Run.t
                                                      alloc.alloc.Global.t)
                                                  (B :=
                                                    async_openai.types.run.RunObject.t)
                                                  (F :=
                                                    assistants_core.models.Run.t
                                                      ->
                                                      M
                                                        async_openai.types.run.RunObject.t)
                                                  (Trait := ℐ))) in
                                            let* α2 :
                                                (alloc.vec.Vec.t
                                                    assistants_core.models.Run.t
                                                    alloc.alloc.Global.t)
                                                  ->
                                                  M _ :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.iter.traits.collect.IntoIterator.into_iter
                                                  (Self :=
                                                    alloc.vec.Vec.t
                                                      assistants_core.models.Run.t
                                                      alloc.alloc.Global.t)
                                                  (Trait := ℐ))) in
                                            let* α3 :
                                                alloc.vec.Vec.t
                                                  assistants_core.models.Run.t
                                                  alloc.alloc.Global.t :=
                                              M.read runs in
                                            let* α4 :
                                                alloc.vec.into_iter.IntoIter.t
                                                  assistants_core.models.Run.t
                                                  alloc.alloc.Global.t :=
                                              M.call (α2 α3) in
                                            let* α5 :
                                                core.iter.adapters.map.Map.t
                                                  (alloc.vec.into_iter.IntoIter.t
                                                    assistants_core.models.Run.t
                                                    alloc.alloc.Global.t)
                                                  (assistants_core.models.Run.t
                                                    ->
                                                    M
                                                      async_openai.types.run.RunObject.t) :=
                                              M.call
                                                (α1
                                                  α4
                                                  (fun
                                                      (α0 :
                                                        assistants_core.models.Run.t) =>
                                                    (let* α0 := M.alloc α0 in
                                                    match_operator
                                                      α0
                                                      [
                                                        fun γ =>
                                                          (let* r := M.copy γ in
                                                          M.read
                                                            (assistants_core.models.Run.Get_inner
                                                              r)) :
                                                          M
                                                            async_openai.types.run.RunObject.t
                                                      ]) :
                                                    M
                                                      async_openai.types.run.RunObject.t)) in
                                            let* α6 :
                                                alloc.vec.Vec.t
                                                  async_openai.types.run.RunObject.t
                                                  alloc.alloc.Global.t :=
                                              M.call (α0 α5) in
                                            M.alloc
                                              (core.result.Result.Ok
                                                (axum.json.Json.Build_t α6))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  (alloc.vec.Vec.t
                                                    async_openai.types.run.RunObject.t
                                                    alloc.alloc.Global.t))
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)));
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Err _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Err_0 γ in
                                            let* e := M.copy γ0_0 in
                                            let* error_message :
                                                M.Val alloc.string.String.t :=
                                              let* α0 :
                                                  (ref sqlx_core.error.Error.t)
                                                    ->
                                                    M alloc.string.String.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  alloc.string.ToString.to_string
                                                    (Self :=
                                                      sqlx_core.error.Error.t)
                                                    (Trait := ℐ))) in
                                              let* α1 : alloc.string.String.t :=
                                                M.call (α0 (borrow e)) in
                                              M.alloc α1 in
                                            let* _ : M.Val unit :=
                                              let* lvl : M.Val log.Level.t :=
                                                M.alloc log.Level.Error in
                                              let* α0 :
                                                  (ref log.Level.t) ->
                                                    (ref log.LevelFilter.t) ->
                                                    M bool.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.cmp.PartialOrd.le
                                                    (Self := log.Level.t)
                                                    (Rhs := log.LevelFilter.t)
                                                    (Trait := ℐ))) in
                                              let* α1 : bool.t :=
                                                M.call
                                                  (α0
                                                    (borrow lvl)
                                                    (borrow
                                                      log.STATIC_MAX_LEVEL)) in
                                              let* α2 :
                                                  (ref log.Level.t) ->
                                                    (ref log.LevelFilter.t) ->
                                                    M bool.t :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.cmp.PartialOrd.le
                                                    (Self := log.Level.t)
                                                    (Rhs := log.LevelFilter.t)
                                                    (Trait := ℐ))) in
                                              let* α3 : log.LevelFilter.t :=
                                                M.call log.max_level in
                                              let* α4 :
                                                  M.Val log.LevelFilter.t :=
                                                M.alloc α3 in
                                              let* α5 : bool.t :=
                                                M.call
                                                  (α2
                                                    (borrow lvl)
                                                    (borrow α4)) in
                                              let* α6 : M.Val bool.t :=
                                                M.alloc
                                                  (BinOp.Pure.and α1 α5) in
                                              let* α7 : bool.t :=
                                                M.read (use α6) in
                                              if α7 then
                                                let* _ : M.Val unit :=
                                                  let* α0 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "Failed to list runs: ") in
                                                  let* α1 :
                                                      M.Val
                                                        (array (ref str.t)) :=
                                                    M.alloc [ α0 ] in
                                                  let* α2 :
                                                      core.fmt.rt.Argument.t :=
                                                    M.call
                                                      (core.fmt.rt.Argument.t::["new_display"]
                                                        (borrow
                                                          error_message)) in
                                                  let* α3 :
                                                      M.Val
                                                        (array
                                                          core.fmt.rt.Argument.t) :=
                                                    M.alloc [ α2 ] in
                                                  let* α4 :
                                                      core.fmt.Arguments.t :=
                                                    M.call
                                                      (core.fmt.Arguments.t::["new_v1"]
                                                        (pointer_coercion
                                                          "Unsize"
                                                          (borrow α1))
                                                        (pointer_coercion
                                                          "Unsize"
                                                          (borrow α3))) in
                                                  let* α5 : log.Level.t :=
                                                    M.read lvl in
                                                  let* α6 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants_api_communication::runs") in
                                                  let* α7 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants_api_communication::runs") in
                                                  let* α8 : ref str.t :=
                                                    M.read
                                                      (mk_str
                                                        "assistants-api-communication/src/runs.rs") in
                                                  let* α9 :
                                                      M.Val
                                                        (((ref str.t)
                                                        *
                                                        (ref str.t))
                                                        *
                                                        (ref str.t)) :=
                                                    M.alloc (α6, α7, α8) in
                                                  let* α10 : unit :=
                                                    M.call
                                                      (log.__private_api.log
                                                        α4
                                                        α5
                                                        (borrow α9)
                                                        ((Integer.of_Z 180) :
                                                          u32.t)
                                                        core.option.Option.None) in
                                                  M.alloc α10 in
                                                M.alloc tt
                                              else
                                                M.alloc tt in
                                            let* α0 :
                                                http.status.StatusCode.t :=
                                              M.read
                                                http.status.INTERNAL_SERVER_ERROR in
                                            let* α1 : alloc.string.String.t :=
                                              M.read error_message in
                                            M.alloc
                                              (core.result.Result.Err (α0, α1))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  (alloc.vec.Vec.t
                                                    async_openai.types.run.RunObject.t
                                                    alloc.alloc.Global.t))
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)))
                                      ] in
                                  M.pure (use α0)
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        (alloc.vec.Vec.t
                                          async_openai.types.run.RunObject.t
                                          alloc.alloc.Global.t))
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              (alloc.vec.Vec.t
                                async_openai.types.run.RunObject.t
                                alloc.alloc.Global.t))
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t
                    (alloc.vec.Vec.t
                      async_openai.types.run.RunObject.t
                      alloc.alloc.Global.t))
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t
              (alloc.vec.Vec.t
                async_openai.types.run.RunObject.t
                alloc.alloc.Global.t))
            (http.status.StatusCode.t * alloc.string.String.t))).
End runs.

Module  ApiSubmittedToolCall.
Section ApiSubmittedToolCall.
  Record t : Set := {
    tool_call_id : alloc.string.String.t;
    output : alloc.string.String.t;
  }.
  
  Definition Get_tool_call_id :=
    Ref.map
      (fun α => Some α.(tool_call_id))
      (fun β α => Some (α <| tool_call_id := β |>)).
  Definition Get_output :=
    Ref.map (fun α => Some α.(output)) (fun β α => Some (α <| output := β |>)).
End ApiSubmittedToolCall.
End ApiSubmittedToolCall.

Module  Impl_serde_ser_Serialize_for_assistants_api_communication_runs_ApiSubmittedToolCall_t.
Section Impl_serde_ser_Serialize_for_assistants_api_communication_runs_ApiSubmittedToolCall_t.
  Definition Self : Set :=
    assistants_api_communication.runs.ApiSubmittedToolCall.t.
  
  (*
  Serialize
  *)
  Definition serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S}
      (self : ref Self)
      (__serializer : __S)
      : M (core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) :=
    let* self := M.alloc self in
    let* __serializer := M.alloc __serializer in
    let return_ :=
      M.return_
        (R := core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) in
    M.catch_return
      (let* __serde_state : M.Val _ :=
        let* α0 :
            (core.result.Result.t _ _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t _ _)
              (Trait := ℐ))) in
        let* α1 :
            __S -> (ref str.t) -> usize.t -> M (core.result.Result.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.Serializer.serialize_struct
              (Self := __S)
              (Trait := ℐ))) in
        let* α2 : __S := M.read __serializer in
        let* α3 : ref str.t := M.read (mk_str "ApiSubmittedToolCall") in
        let* α4 : usize.t :=
          BinOp.Panic.add (rust_cast false) ((Integer.of_Z 1) : usize.t) in
        let* α5 : usize.t := BinOp.Panic.add α4 ((Integer.of_Z 1) : usize.t) in
        let* α6 : core.result.Result.t _ _ := M.call (α1 α2 α3 α5) in
        let* α7 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              _ :=
          M.call (α0 α6) in
        let* α8 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                _) :=
          M.alloc α7 in
        let* α9 : M.Val _ :=
          match_operator
            α8
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self := core.result.Result.t _ _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : _ := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val _);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val _)
            ] in
        M.copy α9 in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "tool_call_id") in
        let* α3 :
            ref assistants_api_communication.runs.ApiSubmittedToolCall.t :=
          M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_api_communication.runs.ApiSubmittedToolCall.Get_tool_call_id
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "output") in
        let* α3 :
            ref assistants_api_communication.runs.ApiSubmittedToolCall.t :=
          M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_api_communication.runs.ApiSubmittedToolCall.Get_output
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* α0 : _ -> M (core.result.Result.t _ _) :=
        ltac:(M.get_method (fun ℐ =>
          serde.ser.SerializeStruct.end_ (Self := _) (Trait := ℐ))) in
      let* α1 : _ := M.read __serde_state in
      let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
      let* α0 : M.Val (core.result.Result.t _ _) := M.alloc α2 in
      M.read α0).
  
  Global Instance AssociatedFunction_serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :
    Notations.DoubleColon Self "serialize" := {
    Notations.double_colon := serialize (__S := __S);
  }.
  
  Global Instance ℐ : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :=
      serialize (__S := __S);
  }.
End Impl_serde_ser_Serialize_for_assistants_api_communication_runs_ApiSubmittedToolCall_t.
End Impl_serde_ser_Serialize_for_assistants_api_communication_runs_ApiSubmittedToolCall_t.

Module  Impl_serde_de_Deserialize_for_assistants_api_communication_runs_ApiSubmittedToolCall_t.
Section Impl_serde_de_Deserialize_for_assistants_api_communication_runs_ApiSubmittedToolCall_t.
  Definition Self : Set :=
    assistants_api_communication.runs.ApiSubmittedToolCall.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_api_communication.runs._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_api_communication.runs._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "ApiSubmittedToolCall") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_api_communication.runs._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_api_communication.runs._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_api_communication.runs._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_api_communication_runs_ApiSubmittedToolCall_t.
End Impl_serde_de_Deserialize_for_assistants_api_communication_runs_ApiSubmittedToolCall_t.

Module __Field.
  Inductive t : Set :=
  | __field0
  | __field1
  | __ignore.
End __Field.

Module  Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___FieldVisitor_t.
  Definition Self : Set :=
    assistants_api_communication.runs._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set :=
    assistants_api_communication.runs._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_api_communication.runs._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.runs._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.runs._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.runs._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_api_communication.runs._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.runs._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.runs._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.runs._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_api_communication.runs._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              let γ1_10 := [10] γ in
              let γ1_11 := [11] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_api_communication.runs._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_api_communication.runs._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.runs._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___FieldVisitor_t.

Module  Impl_serde_de_Deserialize_for_assistants_api_communication_runs___deserialize___Field_t.
Section Impl_serde_de_Deserialize_for_assistants_api_communication_runs___deserialize___Field_t.
  Definition Self : Set :=
    assistants_api_communication.runs._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          assistants_api_communication.runs._.deserialize.__FieldVisitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_identifier
          (Self := __D)
          (V :=
            assistants_api_communication.runs._.deserialize.__FieldVisitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    M.call
      (α0
        α1
        assistants_api_communication.runs._.deserialize.__FieldVisitor.Build).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_api_communication_runs___deserialize___Field_t.
End Impl_serde_de_Deserialize_for_assistants_api_communication_runs___deserialize___Field_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker :
      core.marker.PhantomData.t
        assistants_api_communication.runs.ApiSubmittedToolCall.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___Visitor_t.
  Definition Self : Set :=
    assistants_api_communication.runs._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set :=
    assistants_api_communication.runs.ApiSubmittedToolCall.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct ApiSubmittedToolCall") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_api_communication.runs.ApiSubmittedToolCall.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_api_communication.runs.ApiSubmittedToolCall.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_api_communication.runs.ApiSubmittedToolCall.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ApiSubmittedToolCall with 2 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_api_communication.runs.ApiSubmittedToolCall.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_api_communication.runs.ApiSubmittedToolCall.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_api_communication.runs.ApiSubmittedToolCall.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ApiSubmittedToolCall with 2 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_api_communication.runs.ApiSubmittedToolCall.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_api_communication.runs.ApiSubmittedToolCall.tool_call_id :=
                α0;
              assistants_api_communication.runs.ApiSubmittedToolCall.output :=
                α1;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field1 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_api_communication.runs._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_api_communication.runs._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_api_communication.runs._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_api_communication.runs._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_api_communication.runs._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_api_communication.runs._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_api_communication.runs._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_api_communication.runs._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_api_communication.runs.ApiSubmittedToolCall.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_api_communication.runs.ApiSubmittedToolCall.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_api_communication.runs.ApiSubmittedToolCall.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_api_communication.runs._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_api_communication.runs._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_api_communication.runs._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_api_communication.runs._.deserialize.__Field.__field0
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "tool_call_id") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_api_communication.runs.ApiSubmittedToolCall.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_api_communication.runs.ApiSubmittedToolCall.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_api_communication.runs.ApiSubmittedToolCall.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_api_communication.runs._.deserialize.__Field.__field1
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "output") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_api_communication.runs.ApiSubmittedToolCall.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_api_communication.runs.ApiSubmittedToolCall.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_api_communication.runs.ApiSubmittedToolCall.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_api_communication.runs.ApiSubmittedToolCall.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_api_communication.runs.ApiSubmittedToolCall.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_api_communication.runs.ApiSubmittedToolCall.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "tool_call_id") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_api_communication.runs.ApiSubmittedToolCall.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_api_communication.runs.ApiSubmittedToolCall.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_api_communication.runs.ApiSubmittedToolCall.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "output") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_api_communication.runs.ApiSubmittedToolCall.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_api_communication.runs.ApiSubmittedToolCall.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_api_communication.runs.ApiSubmittedToolCall.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_api_communication.runs.ApiSubmittedToolCall.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_api_communication.runs.ApiSubmittedToolCall.tool_call_id :=
                α0;
              assistants_api_communication.runs.ApiSubmittedToolCall.output :=
                α1;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "tool_call_id") in
    let* α1 : ref str.t := M.read (mk_str "output") in
    let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α2))).

Module  SubmitToolOutputsRequest.
Section SubmitToolOutputsRequest.
  Record t : Set := {
    tool_outputs :
      alloc.vec.Vec.t
        assistants_api_communication.runs.ApiSubmittedToolCall.t
        alloc.vec.Vec.Default.A;
  }.
  
  Definition Get_tool_outputs :=
    Ref.map
      (fun α => Some α.(tool_outputs))
      (fun β α => Some (α <| tool_outputs := β |>)).
End SubmitToolOutputsRequest.
End SubmitToolOutputsRequest.

Module  Impl_serde_ser_Serialize_for_assistants_api_communication_runs_SubmitToolOutputsRequest_t.
Section Impl_serde_ser_Serialize_for_assistants_api_communication_runs_SubmitToolOutputsRequest_t.
  Definition Self : Set :=
    assistants_api_communication.runs.SubmitToolOutputsRequest.t.
  
  (*
  Serialize
  *)
  Definition serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S}
      (self : ref Self)
      (__serializer : __S)
      : M (core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) :=
    let* self := M.alloc self in
    let* __serializer := M.alloc __serializer in
    let return_ :=
      M.return_
        (R := core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) in
    M.catch_return
      (let* __serde_state : M.Val _ :=
        let* α0 :
            (core.result.Result.t _ _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t _ _)
              (Trait := ℐ))) in
        let* α1 :
            __S -> (ref str.t) -> usize.t -> M (core.result.Result.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.Serializer.serialize_struct
              (Self := __S)
              (Trait := ℐ))) in
        let* α2 : __S := M.read __serializer in
        let* α3 : ref str.t := M.read (mk_str "SubmitToolOutputsRequest") in
        let* α4 : usize.t :=
          BinOp.Panic.add (rust_cast false) ((Integer.of_Z 1) : usize.t) in
        let* α5 : core.result.Result.t _ _ := M.call (α1 α2 α3 α4) in
        let* α6 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              _ :=
          M.call (α0 α5) in
        let* α7 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                _) :=
          M.alloc α6 in
        let* α8 : M.Val _ :=
          match_operator
            α7
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self := core.result.Result.t _ _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : _ := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val _);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val _)
            ] in
        M.copy α8 in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref
                (alloc.vec.Vec.t
                  assistants_api_communication.runs.ApiSubmittedToolCall.t
                  alloc.alloc.Global.t))
              ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T :=
                alloc.vec.Vec.t
                  assistants_api_communication.runs.ApiSubmittedToolCall.t
                  alloc.alloc.Global.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "tool_outputs") in
        let* α3 :
            ref assistants_api_communication.runs.SubmitToolOutputsRequest.t :=
          M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_api_communication.runs.SubmitToolOutputsRequest.Get_tool_outputs
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* α0 : _ -> M (core.result.Result.t _ _) :=
        ltac:(M.get_method (fun ℐ =>
          serde.ser.SerializeStruct.end_ (Self := _) (Trait := ℐ))) in
      let* α1 : _ := M.read __serde_state in
      let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
      let* α0 : M.Val (core.result.Result.t _ _) := M.alloc α2 in
      M.read α0).
  
  Global Instance AssociatedFunction_serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :
    Notations.DoubleColon Self "serialize" := {
    Notations.double_colon := serialize (__S := __S);
  }.
  
  Global Instance ℐ : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :=
      serialize (__S := __S);
  }.
End Impl_serde_ser_Serialize_for_assistants_api_communication_runs_SubmitToolOutputsRequest_t.
End Impl_serde_ser_Serialize_for_assistants_api_communication_runs_SubmitToolOutputsRequest_t.

Module  Impl_serde_de_Deserialize_for_assistants_api_communication_runs_SubmitToolOutputsRequest_t.
Section Impl_serde_de_Deserialize_for_assistants_api_communication_runs_SubmitToolOutputsRequest_t.
  Definition Self : Set :=
    assistants_api_communication.runs.SubmitToolOutputsRequest.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_api_communication.runs._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_api_communication.runs._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "SubmitToolOutputsRequest") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_api_communication.runs._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_api_communication.runs._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_api_communication.runs._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_api_communication_runs_SubmitToolOutputsRequest_t.
End Impl_serde_de_Deserialize_for_assistants_api_communication_runs_SubmitToolOutputsRequest_t.

Module __Field.
  Inductive t : Set :=
  | __field0
  | __ignore.
End __Field.

Module  Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___FieldVisitor_t.
  Definition Self : Set :=
    assistants_api_communication.runs._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set :=
    assistants_api_communication.runs._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_api_communication.runs._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.runs._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.runs._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_api_communication.runs._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.runs._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.runs._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_api_communication.runs._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              let γ1_10 := [10] γ in
              let γ1_11 := [11] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_api_communication.runs._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_api_communication.runs._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_api_communication.runs._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___FieldVisitor_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker :
      core.marker.PhantomData.t
        assistants_api_communication.runs.SubmitToolOutputsRequest.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___Visitor_t.
  Definition Self : Set :=
    assistants_api_communication.runs._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set :=
    assistants_api_communication.runs.SubmitToolOutputsRequest.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct SubmitToolOutputsRequest") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 :
          M.Val
            (alloc.vec.Vec.t
              assistants_api_communication.runs.ApiSubmittedToolCall.t
              alloc.alloc.Global.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t
                  (alloc.vec.Vec.t
                    assistants_api_communication.runs.ApiSubmittedToolCall.t
                    alloc.alloc.Global.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      assistants_api_communication.runs.ApiSubmittedToolCall.t
                      alloc.alloc.Global.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      assistants_api_communication.runs.ApiSubmittedToolCall.t
                      alloc.alloc.Global.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T :=
                alloc.vec.Vec.t
                  assistants_api_communication.runs.ApiSubmittedToolCall.t
                  alloc.alloc.Global.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t
                (alloc.vec.Vec.t
                  assistants_api_communication.runs.ApiSubmittedToolCall.t
                  alloc.alloc.Global.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t
                (alloc.vec.Vec.t
                  assistants_api_communication.runs.ApiSubmittedToolCall.t
                  alloc.alloc.Global.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  (alloc.vec.Vec.t
                    assistants_api_communication.runs.ApiSubmittedToolCall.t
                    alloc.alloc.Global.t))) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t
                (alloc.vec.Vec.t
                  assistants_api_communication.runs.ApiSubmittedToolCall.t
                  alloc.alloc.Global.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_api_communication.runs.SubmitToolOutputsRequest.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_api_communication.runs.SubmitToolOutputsRequest.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_api_communication.runs.SubmitToolOutputsRequest.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        (alloc.vec.Vec.t
                          assistants_api_communication.runs.ApiSubmittedToolCall.t
                          alloc.alloc.Global.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        assistants_api_communication.runs.ApiSubmittedToolCall.t
                        alloc.alloc.Global.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        assistants_api_communication.runs.ApiSubmittedToolCall.t
                        alloc.alloc.Global.t)))
            ] in
        let* α6 :
            M.Val
              (alloc.vec.Vec.t
                assistants_api_communication.runs.ApiSubmittedToolCall.t
                alloc.alloc.Global.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      assistants_api_communication.runs.ApiSubmittedToolCall.t
                      alloc.alloc.Global.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct SubmitToolOutputsRequest with 1 element")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 :
                      alloc.vec.Vec.t
                        assistants_api_communication.runs.ApiSubmittedToolCall.t
                        alloc.alloc.Global.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      assistants_api_communication.runs.ApiSubmittedToolCall.t
                      alloc.alloc.Global.t))
            ] in
        M.copy α6 in
      let* α0 :
          alloc.vec.Vec.t
            assistants_api_communication.runs.ApiSubmittedToolCall.t
            alloc.alloc.Global.t :=
        M.read __field0 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_api_communication.runs.SubmitToolOutputsRequest.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_api_communication.runs.SubmitToolOutputsRequest.tool_outputs :=
                α0;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 :
          M.Val
            (core.option.Option.t
              (alloc.vec.Vec.t
                assistants_api_communication.runs.ApiSubmittedToolCall.t
                alloc.alloc.Global.t)) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_api_communication.runs._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_api_communication.runs._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_api_communication.runs._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_api_communication.runs._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_api_communication.runs._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_api_communication.runs._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_api_communication.runs._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_api_communication.runs._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_api_communication.runs.SubmitToolOutputsRequest.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_api_communication.runs.SubmitToolOutputsRequest.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_api_communication.runs.SubmitToolOutputsRequest.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_api_communication.runs._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_api_communication.runs._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_api_communication.runs._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        |
                            assistants_api_communication.runs._.deserialize.__Field.__field0
                            =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (alloc.vec.Vec.t
                                        assistants_api_communication.runs.ApiSubmittedToolCall.t
                                        alloc.alloc.Global.t))::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "tool_outputs") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (alloc.vec.Vec.t
                                      assistants_api_communication.runs.ApiSubmittedToolCall.t
                                      alloc.alloc.Global.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (alloc.vec.Vec.t
                                        assistants_api_communication.runs.ApiSubmittedToolCall.t
                                        alloc.alloc.Global.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (alloc.vec.Vec.t
                                        assistants_api_communication.runs.ApiSubmittedToolCall.t
                                        alloc.alloc.Global.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    alloc.vec.Vec.t
                                      assistants_api_communication.runs.ApiSubmittedToolCall.t
                                      alloc.alloc.Global.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (alloc.vec.Vec.t
                                    assistants_api_communication.runs.ApiSubmittedToolCall.t
                                    alloc.alloc.Global.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (alloc.vec.Vec.t
                                    assistants_api_communication.runs.ApiSubmittedToolCall.t
                                    alloc.alloc.Global.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (alloc.vec.Vec.t
                                      assistants_api_communication.runs.ApiSubmittedToolCall.t
                                      alloc.alloc.Global.t)) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  (alloc.vec.Vec.t
                                    assistants_api_communication.runs.ApiSubmittedToolCall.t
                                    alloc.alloc.Global.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_api_communication.runs.SubmitToolOutputsRequest.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_api_communication.runs.SubmitToolOutputsRequest.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_api_communication.runs.SubmitToolOutputsRequest.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          alloc.vec.Vec.t
                                            assistants_api_communication.runs.ApiSubmittedToolCall.t
                                            alloc.alloc.Global.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (alloc.vec.Vec.t
                                          assistants_api_communication.runs.ApiSubmittedToolCall.t
                                          alloc.alloc.Global.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (alloc.vec.Vec.t
                                          assistants_api_communication.runs.ApiSubmittedToolCall.t
                                          alloc.alloc.Global.t))
                                ] in
                            let* α6 :
                                alloc.vec.Vec.t
                                  assistants_api_communication.runs.ApiSubmittedToolCall.t
                                  alloc.alloc.Global.t :=
                              M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_api_communication.runs.SubmitToolOutputsRequest.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_api_communication.runs.SubmitToolOutputsRequest.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_api_communication.runs.SubmitToolOutputsRequest.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 :
          M.Val
            (alloc.vec.Vec.t
              assistants_api_communication.runs.ApiSubmittedToolCall.t
              alloc.alloc.Global.t) :=
        let* α0 :
            M.Val
              (alloc.vec.Vec.t
                assistants_api_communication.runs.ApiSubmittedToolCall.t
                alloc.alloc.Global.t) :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      assistants_api_communication.runs.ApiSubmittedToolCall.t
                      alloc.alloc.Global.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          (alloc.vec.Vec.t
                            assistants_api_communication.runs.ApiSubmittedToolCall.t
                            alloc.alloc.Global.t)
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (alloc.vec.Vec.t
                              assistants_api_communication.runs.ApiSubmittedToolCall.t
                              alloc.alloc.Global.t)
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "tool_outputs") in
                  let* α2 :
                      core.result.Result.t
                        (alloc.vec.Vec.t
                          assistants_api_communication.runs.ApiSubmittedToolCall.t
                          alloc.alloc.Global.t)
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (alloc.vec.Vec.t
                          assistants_api_communication.runs.ApiSubmittedToolCall.t
                          alloc.alloc.Global.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (alloc.vec.Vec.t
                            assistants_api_communication.runs.ApiSubmittedToolCall.t
                            alloc.alloc.Global.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_api_communication.runs.SubmitToolOutputsRequest.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_api_communication.runs.SubmitToolOutputsRequest.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_api_communication.runs.SubmitToolOutputsRequest.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              alloc.vec.Vec.t
                                assistants_api_communication.runs.ApiSubmittedToolCall.t
                                alloc.alloc.Global.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (alloc.vec.Vec.t
                              assistants_api_communication.runs.ApiSubmittedToolCall.t
                              alloc.alloc.Global.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (alloc.vec.Vec.t
                              assistants_api_communication.runs.ApiSubmittedToolCall.t
                              alloc.alloc.Global.t))
                    ]
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      assistants_api_communication.runs.ApiSubmittedToolCall.t
                      alloc.alloc.Global.t))
            ] in
        M.copy α0 in
      let* α0 :
          alloc.vec.Vec.t
            assistants_api_communication.runs.ApiSubmittedToolCall.t
            alloc.alloc.Global.t :=
        M.read __field0 in
      let* α0 :
          M.Val
            (core.result.Result.t
              assistants_api_communication.runs.SubmitToolOutputsRequest.t
              _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_api_communication.runs.SubmitToolOutputsRequest.tool_outputs :=
                α0;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_api_communication_runs___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "tool_outputs") in
    let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α1))).

(*
pub async fn submit_tool_outputs_handler(
    Path((thread_id, run_id)): Path<(String, String)>,
    State(app_state): State<AppState>,
    Json(request): Json<SubmitToolOutputsRequest>,
) -> Result<JsonResponse<RunObject>, (StatusCode, String)> {
    let user_id = Uuid::default().to_string();
    let redis_url = std::env::var("REDIS_URL").expect("REDIS_URL must be set");
    let client = redis::Client::open(redis_url).unwrap();
    let con = client.get_async_connection().await.unwrap();
    match submit_tool_outputs(
        &app_state.pool,
        &thread_id,
        &run_id,
        &user_id,
        request
            .tool_outputs
            .iter()
            .map(|t| SubmittedToolCall {
                id: t.tool_call_id.clone(),
                output: t.output.clone(),
                run_id: run_id.to_string(),
                created_at: Default::default(),
                user_id: user_id.to_string(),
            })
            .collect::<Vec<SubmittedToolCall>>(),
        con,
    )
    .await
    {
        Ok(run) => Ok(JsonResponse(run.inner)),
        Err(e) => {
            let error_message = e.to_string();
            error!("Failed to submit tool outputs: {}", error_message);
            Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
        }
    }
}
*)
Definition submit_tool_outputs_handler
    (__arg0
      :
      axum.extract.path.Path.t (alloc.string.String.t * alloc.string.String.t))
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    (__arg2
      :
      axum.json.Json.t
        assistants_api_communication.runs.SubmitToolOutputsRequest.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  let* __arg2 := M.alloc __arg2 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val
                  (axum.extract.path.Path.t
                    (alloc.string.String.t * alloc.string.String.t)) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t async_openai.types.run.RunObject.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_, _) =>
                        let γ1_0 := Tuple.Access.left γ0_0 in
                        let γ1_1 := Tuple.Access.right γ0_0 in
                        let* thread_id := M.copy γ1_0 in
                        let* run_id := M.copy γ1_1 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* __arg2 :
                                    M.Val
                                      (axum.json.Json.t
                                        assistants_api_communication.runs.SubmitToolOutputsRequest.t) :=
                                  M.copy __arg2 in
                                match_operator
                                  __arg2
                                  [
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | axum.json.Json.Build_t _ =>
                                        let γ0_0 := axum.json.Json.Get_0 γ in
                                        let* request := M.copy γ0_0 in
                                        let* user_id :
                                            M.Val alloc.string.String.t :=
                                          let* α0 :
                                              (ref uuid.Uuid.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α1 : M uuid.Uuid.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.default.Default.default
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α2 : uuid.Uuid.t := M.call α1 in
                                          let* α3 : M.Val uuid.Uuid.t :=
                                            M.alloc α2 in
                                          let* α4 : alloc.string.String.t :=
                                            M.call (α0 (borrow α3)) in
                                          M.alloc α4 in
                                        let* redis_url :
                                            M.Val alloc.string.String.t :=
                                          let* α0 : ref str.t :=
                                            M.read (mk_str "REDIS_URL") in
                                          let* α1 :
                                              core.result.Result.t
                                                alloc.string.String.t
                                                std.env.VarError.t :=
                                            M.call (std.env.var α0) in
                                          let* α2 : ref str.t :=
                                            M.read
                                              (mk_str
                                                "REDIS_URL must be set") in
                                          let* α3 : alloc.string.String.t :=
                                            M.call
                                              ((core.result.Result.t
                                                    alloc.string.String.t
                                                    std.env.VarError.t)::["expect"]
                                                α1
                                                α2) in
                                          M.alloc α3 in
                                        let* client :
                                            M.Val redis.client.Client.t :=
                                          let* α0 : alloc.string.String.t :=
                                            M.read redis_url in
                                          let* α1 :
                                              core.result.Result.t
                                                redis.client.Client.t
                                                redis.types.RedisError.t :=
                                            M.call
                                              (redis.client.Client.t::["open"]
                                                α0) in
                                          let* α2 : redis.client.Client.t :=
                                            M.call
                                              ((core.result.Result.t
                                                    redis.client.Client.t
                                                    redis.types.RedisError.t)::["unwrap"]
                                                α1) in
                                          M.alloc α2 in
                                        let* con :
                                            M.Val
                                              (redis.aio.connection.Connection.t
                                                (core.pin.Pin.t
                                                  (alloc.boxed.Box.t
                                                    (dyn
                                                      [redis.aio.AsyncStream.Trait])
                                                    alloc.alloc.Global.t))) :=
                                          let* α0 : _ -> M _ :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.future.into_future.IntoFuture.into_future
                                                (Self := _)
                                                (Trait := ℐ))) in
                                          let* α1 : _ :=
                                            M.call
                                              (redis.client.Client.t::["get_async_connection"]
                                                (borrow client)) in
                                          let* α2 : _ := M.call (α0 α1) in
                                          let* α3 : M.Val _ := M.alloc α2 in
                                          let* α4 :
                                              M.Val
                                                (core.result.Result.t
                                                  (redis.aio.connection.Connection.t
                                                    (core.pin.Pin.t
                                                      (alloc.boxed.Box.t
                                                        (dyn
                                                          [redis.aio.AsyncStream.Trait])
                                                        alloc.alloc.Global.t)))
                                                  redis.types.RedisError.t) :=
                                            match_operator
                                              α3
                                              [
                                                fun γ =>
                                                  (let* __awaitee := M.copy γ in
                                                  M.loop
                                                    (let* _ : M.Val unit :=
                                                      let* α0 :
                                                          (core.pin.Pin.t
                                                              (mut_ref _))
                                                            ->
                                                            (mut_ref
                                                              core.task.wake.Context.t)
                                                            ->
                                                            M
                                                              (core.task.poll.Poll.t
                                                                _) :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.future.future.Future.poll
                                                            (Self := _)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          core.pin.Pin.t
                                                            (mut_ref _) :=
                                                        M.call
                                                          ((core.pin.Pin.t
                                                                (mut_ref
                                                                  _))::["new_unchecked"]
                                                            (borrow_mut
                                                              __awaitee)) in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read _task_context in
                                                      let* α3 :
                                                          mut_ref
                                                            core.task.wake.Context.t :=
                                                        M.call
                                                          (core.future.get_context
                                                            α2) in
                                                      let* α4 :
                                                          core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              (redis.aio.connection.Connection.t
                                                                (core.pin.Pin.t
                                                                  (alloc.boxed.Box.t
                                                                    (dyn
                                                                      [redis.aio.AsyncStream.Trait])
                                                                    alloc.alloc.Global.t)))
                                                              redis.types.RedisError.t) :=
                                                        M.call (α0 α1 α3) in
                                                      let* α5 :
                                                          M.Val
                                                            (core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                (redis.aio.connection.Connection.t
                                                                  (core.pin.Pin.t
                                                                    (alloc.boxed.Box.t
                                                                      (dyn
                                                                        [redis.aio.AsyncStream.Trait])
                                                                      alloc.alloc.Global.t)))
                                                                redis.types.RedisError.t)) :=
                                                        M.alloc α4 in
                                                      match_operator
                                                        α5
                                                        [
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Ready
                                                                  _
                                                                =>
                                                              let γ0_0 :=
                                                                core.task.poll.Poll.Get_Ready_0
                                                                  γ in
                                                              let* result :=
                                                                M.copy γ0_0 in
                                                              let* α0 :
                                                                  M.Val
                                                                    never.t :=
                                                                M.break in
                                                              let* α1 :=
                                                                M.read α0 in
                                                              let* α2 : unit :=
                                                                never_to_any
                                                                  α1 in
                                                              M.alloc α2
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit);
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Pending
                                                                =>
                                                              M.alloc tt
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit)
                                                        ] in
                                                    let* _ : M.Val unit :=
                                                      let* α0 : M.Val unit :=
                                                        M.alloc tt in
                                                      let* α1 :
                                                          M.Val
                                                            core.future.ResumeTy.t :=
                                                        yield α0 in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read α1 in
                                                      assign _task_context α2 in
                                                    M.alloc tt)) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (redis.aio.connection.Connection.t
                                                          (core.pin.Pin.t
                                                            (alloc.boxed.Box.t
                                                              (dyn
                                                                [redis.aio.AsyncStream.Trait])
                                                              alloc.alloc.Global.t)))
                                                        redis.types.RedisError.t))
                                              ] in
                                          let* α5 :
                                              core.result.Result.t
                                                (redis.aio.connection.Connection.t
                                                  (core.pin.Pin.t
                                                    (alloc.boxed.Box.t
                                                      (dyn
                                                        [redis.aio.AsyncStream.Trait])
                                                      alloc.alloc.Global.t)))
                                                redis.types.RedisError.t :=
                                            M.read α4 in
                                          let* α6 :
                                              redis.aio.connection.Connection.t
                                                (core.pin.Pin.t
                                                  (alloc.boxed.Box.t
                                                    (dyn
                                                      [redis.aio.AsyncStream.Trait])
                                                    alloc.alloc.Global.t)) :=
                                            M.call
                                              ((core.result.Result.t
                                                    (redis.aio.connection.Connection.t
                                                      (core.pin.Pin.t
                                                        (alloc.boxed.Box.t
                                                          (dyn
                                                            [redis.aio.AsyncStream.Trait])
                                                          alloc.alloc.Global.t)))
                                                    redis.types.RedisError.t)::["unwrap"]
                                                α5) in
                                          M.alloc α6 in
                                        let* α0 : _ -> M _ :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.future.into_future.IntoFuture.into_future
                                              (Self := _)
                                              (Trait := ℐ))) in
                                        let* α1 :
                                            (ref
                                                (alloc.sync.Arc.t
                                                  (sqlx_core.pool.Pool.t
                                                    sqlx_postgres.database.Postgres.t)
                                                  alloc.alloc.Global.t))
                                              ->
                                              M (ref _) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.ops.deref.Deref.deref
                                              (Self :=
                                                alloc.sync.Arc.t
                                                  (sqlx_core.pool.Pool.t
                                                    sqlx_postgres.database.Postgres.t)
                                                  alloc.alloc.Global.t)
                                              (Trait := ℐ))) in
                                        let* α2 :
                                            ref
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t) :=
                                          M.call
                                            (α1
                                              (borrow
                                                (assistants_api_communication.models.AppState.Get_pool
                                                  app_state))) in
                                        let* α3 :
                                            (ref alloc.string.String.t) ->
                                              M (ref _) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.ops.deref.Deref.deref
                                              (Self := alloc.string.String.t)
                                              (Trait := ℐ))) in
                                        let* α4 : ref str.t :=
                                          M.call (α3 (borrow thread_id)) in
                                        let* α5 :
                                            (ref alloc.string.String.t) ->
                                              M (ref _) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.ops.deref.Deref.deref
                                              (Self := alloc.string.String.t)
                                              (Trait := ℐ))) in
                                        let* α6 : ref str.t :=
                                          M.call (α5 (borrow run_id)) in
                                        let* α7 :
                                            (ref alloc.string.String.t) ->
                                              M (ref _) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.ops.deref.Deref.deref
                                              (Self := alloc.string.String.t)
                                              (Trait := ℐ))) in
                                        let* α8 : ref str.t :=
                                          M.call (α7 (borrow user_id)) in
                                        let* α9 :
                                            (core.iter.adapters.map.Map.t
                                                (core.slice.iter.Iter.t
                                                  assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                ((ref
                                                    assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                  ->
                                                  M
                                                    assistants_core.models.SubmittedToolCall.t))
                                              ->
                                              M
                                                (alloc.vec.Vec.t
                                                  assistants_core.models.SubmittedToolCall.t
                                                  alloc.alloc.Global.t) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.iter.traits.iterator.Iterator.collect
                                              (Self :=
                                                core.iter.adapters.map.Map.t
                                                  (core.slice.iter.Iter.t
                                                    assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                  ((ref
                                                      assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                    ->
                                                    M
                                                      assistants_core.models.SubmittedToolCall.t))
                                              (B :=
                                                alloc.vec.Vec.t
                                                  assistants_core.models.SubmittedToolCall.t
                                                  alloc.alloc.Global.t)
                                              (Trait := ℐ))) in
                                        let* α10 :
                                            (core.slice.iter.Iter.t
                                                assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                              ->
                                              ((ref
                                                  assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                ->
                                                M
                                                  assistants_core.models.SubmittedToolCall.t)
                                              ->
                                              M
                                                (core.iter.adapters.map.Map.t
                                                  (core.slice.iter.Iter.t
                                                    assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                  ((ref
                                                      assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                    ->
                                                    M
                                                      assistants_core.models.SubmittedToolCall.t)) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.iter.traits.iterator.Iterator.map
                                              (Self :=
                                                core.slice.iter.Iter.t
                                                  assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                              (B :=
                                                assistants_core.models.SubmittedToolCall.t)
                                              (F :=
                                                (ref
                                                    assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                  ->
                                                  M
                                                    assistants_core.models.SubmittedToolCall.t)
                                              (Trait := ℐ))) in
                                        let* α11 :
                                            (ref
                                                (alloc.vec.Vec.t
                                                  assistants_api_communication.runs.ApiSubmittedToolCall.t
                                                  alloc.alloc.Global.t))
                                              ->
                                              M (ref _) :=
                                          ltac:(M.get_method (fun ℐ =>
                                            core.ops.deref.Deref.deref
                                              (Self :=
                                                alloc.vec.Vec.t
                                                  assistants_api_communication.runs.ApiSubmittedToolCall.t
                                                  alloc.alloc.Global.t)
                                              (Trait := ℐ))) in
                                        let* α12 :
                                            ref
                                              (slice
                                                assistants_api_communication.runs.ApiSubmittedToolCall.t) :=
                                          M.call
                                            (α11
                                              (borrow
                                                (assistants_api_communication.runs.SubmitToolOutputsRequest.Get_tool_outputs
                                                  request))) in
                                        let* α13 :
                                            core.slice.iter.Iter.t
                                              assistants_api_communication.runs.ApiSubmittedToolCall.t :=
                                          M.call
                                            ((slice
                                                  assistants_api_communication.runs.ApiSubmittedToolCall.t)::["iter"]
                                              α12) in
                                        let* α14 :
                                            core.iter.adapters.map.Map.t
                                              (core.slice.iter.Iter.t
                                                assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                              ((ref
                                                  assistants_api_communication.runs.ApiSubmittedToolCall.t)
                                                ->
                                                M
                                                  assistants_core.models.SubmittedToolCall.t) :=
                                          M.call
                                            (α10
                                              α13
                                              (fun
                                                  (α0 :
                                                    ref
                                                      assistants_api_communication.runs.ApiSubmittedToolCall.t) =>
                                                (let* α0 := M.alloc α0 in
                                                match_operator
                                                  α0
                                                  [
                                                    fun γ =>
                                                      (let* t := M.copy γ in
                                                      let* α0 :
                                                          (ref
                                                              alloc.string.String.t)
                                                            ->
                                                            M
                                                              alloc.string.String.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.clone.Clone.clone
                                                            (Self :=
                                                              alloc.string.String.t)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          ref
                                                            assistants_api_communication.runs.ApiSubmittedToolCall.t :=
                                                        M.read t in
                                                      let* α2 :
                                                          alloc.string.String.t :=
                                                        M.call
                                                          (α0
                                                            (borrow
                                                              (assistants_api_communication.runs.ApiSubmittedToolCall.Get_tool_call_id
                                                                (deref α1)))) in
                                                      let* α3 :
                                                          (ref
                                                              alloc.string.String.t)
                                                            ->
                                                            M
                                                              alloc.string.String.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.clone.Clone.clone
                                                            (Self :=
                                                              alloc.string.String.t)
                                                            (Trait := ℐ))) in
                                                      let* α4 :
                                                          ref
                                                            assistants_api_communication.runs.ApiSubmittedToolCall.t :=
                                                        M.read t in
                                                      let* α5 :
                                                          alloc.string.String.t :=
                                                        M.call
                                                          (α3
                                                            (borrow
                                                              (assistants_api_communication.runs.ApiSubmittedToolCall.Get_output
                                                                (deref α4)))) in
                                                      let* α6 :
                                                          (ref
                                                              alloc.string.String.t)
                                                            ->
                                                            M
                                                              alloc.string.String.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          alloc.string.ToString.to_string
                                                            (Self :=
                                                              alloc.string.String.t)
                                                            (Trait := ℐ))) in
                                                      let* α7 :
                                                          alloc.string.String.t :=
                                                        M.call
                                                          (α6
                                                            (borrow run_id)) in
                                                      let* α8 : M i32.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.default.Default.default
                                                            (Self := i32.t)
                                                            (Trait := ℐ))) in
                                                      let* α9 : i32.t :=
                                                        M.call α8 in
                                                      let* α10 :
                                                          (ref
                                                              alloc.string.String.t)
                                                            ->
                                                            M
                                                              alloc.string.String.t :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          alloc.string.ToString.to_string
                                                            (Self :=
                                                              alloc.string.String.t)
                                                            (Trait := ℐ))) in
                                                      let* α11 :
                                                          alloc.string.String.t :=
                                                        M.call
                                                          (α10
                                                            (borrow user_id)) in
                                                      M.pure
                                                        {|
                                                          assistants_core.models.SubmittedToolCall.id :=
                                                            α2;
                                                          assistants_core.models.SubmittedToolCall.output :=
                                                            α5;
                                                          assistants_core.models.SubmittedToolCall.run_id :=
                                                            α7;
                                                          assistants_core.models.SubmittedToolCall.created_at :=
                                                            α9;
                                                          assistants_core.models.SubmittedToolCall.user_id :=
                                                            α11;
                                                        |}) :
                                                      M
                                                        assistants_core.models.SubmittedToolCall.t
                                                  ]) :
                                                M
                                                  assistants_core.models.SubmittedToolCall.t)) in
                                        let* α15 :
                                            alloc.vec.Vec.t
                                              assistants_core.models.SubmittedToolCall.t
                                              alloc.alloc.Global.t :=
                                          M.call (α9 α14) in
                                        let* α16 :
                                            redis.aio.connection.Connection.t
                                              (core.pin.Pin.t
                                                (alloc.boxed.Box.t
                                                  (dyn
                                                    [redis.aio.AsyncStream.Trait])
                                                  alloc.alloc.Global.t)) :=
                                          M.read con in
                                        let* α17 : _ :=
                                          M.call
                                            (assistants_core.runs.submit_tool_outputs
                                              α2
                                              α4
                                              α6
                                              α8
                                              α15
                                              α16) in
                                        let* α18 : _ := M.call (α0 α17) in
                                        let* α19 : M.Val _ := M.alloc α18 in
                                        let* α20 :
                                            M.Val
                                              (core.result.Result.t
                                                assistants_core.models.Run.t
                                                sqlx_core.error.Error.t) :=
                                          match_operator
                                            α19
                                            [
                                              fun γ =>
                                                (let* __awaitee := M.copy γ in
                                                M.loop
                                                  (let* _ : M.Val unit :=
                                                    let* α0 :
                                                        (core.pin.Pin.t
                                                            (mut_ref _))
                                                          ->
                                                          (mut_ref
                                                            core.task.wake.Context.t)
                                                          ->
                                                          M
                                                            (core.task.poll.Poll.t
                                                              _) :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.future.future.Future.poll
                                                          (Self := _)
                                                          (Trait := ℐ))) in
                                                    let* α1 :
                                                        core.pin.Pin.t
                                                          (mut_ref _) :=
                                                      M.call
                                                        ((core.pin.Pin.t
                                                              (mut_ref
                                                                _))::["new_unchecked"]
                                                          (borrow_mut
                                                            __awaitee)) in
                                                    let* α2 :
                                                        core.future.ResumeTy.t :=
                                                      M.read _task_context in
                                                    let* α3 :
                                                        mut_ref
                                                          core.task.wake.Context.t :=
                                                      M.call
                                                        (core.future.get_context
                                                          α2) in
                                                    let* α4 :
                                                        core.task.poll.Poll.t
                                                          (core.result.Result.t
                                                            assistants_core.models.Run.t
                                                            sqlx_core.error.Error.t) :=
                                                      M.call (α0 α1 α3) in
                                                    let* α5 :
                                                        M.Val
                                                          (core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              assistants_core.models.Run.t
                                                              sqlx_core.error.Error.t)) :=
                                                      M.alloc α4 in
                                                    match_operator
                                                      α5
                                                      [
                                                        fun γ =>
                                                          (let* α0 :=
                                                            M.read γ in
                                                          match α0 with
                                                          |
                                                              core.task.poll.Poll.Ready
                                                                _
                                                              =>
                                                            let γ0_0 :=
                                                              core.task.poll.Poll.Get_Ready_0
                                                                γ in
                                                            let* result :=
                                                              M.copy γ0_0 in
                                                            let* α0 :
                                                                M.Val never.t :=
                                                              M.break in
                                                            let* α1 :=
                                                              M.read α0 in
                                                            let* α2 : unit :=
                                                              never_to_any α1 in
                                                            M.alloc α2
                                                          | _ => M.break_match
                                                          end) :
                                                          M (M.Val unit);
                                                        fun γ =>
                                                          (let* α0 :=
                                                            M.read γ in
                                                          match α0 with
                                                          |
                                                              core.task.poll.Poll.Pending
                                                              =>
                                                            M.alloc tt
                                                          | _ => M.break_match
                                                          end) :
                                                          M (M.Val unit)
                                                      ] in
                                                  let* _ : M.Val unit :=
                                                    let* α0 : M.Val unit :=
                                                      M.alloc tt in
                                                    let* α1 :
                                                        M.Val
                                                          core.future.ResumeTy.t :=
                                                      yield α0 in
                                                    let* α2 :
                                                        core.future.ResumeTy.t :=
                                                      M.read α1 in
                                                    assign _task_context α2 in
                                                  M.alloc tt)) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      assistants_core.models.Run.t
                                                      sqlx_core.error.Error.t))
                                            ] in
                                        let* α0 :
                                            M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.run.RunObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)) :=
                                          match_operator
                                            α20
                                            [
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Ok _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Ok_0
                                                      γ in
                                                  let* run := M.copy γ0_0 in
                                                  let* α0 :
                                                      async_openai.types.run.RunObject.t :=
                                                    M.read
                                                      (assistants_core.models.Run.Get_inner
                                                        run) in
                                                  M.alloc
                                                    (core.result.Result.Ok
                                                      (axum.json.Json.Build_t
                                                        α0))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.run.RunObject.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)));
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Err _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Err_0
                                                      γ in
                                                  let* e := M.copy γ0_0 in
                                                  let* error_message :
                                                      M.Val
                                                        alloc.string.String.t :=
                                                    let* α0 :
                                                        (ref
                                                            sqlx_core.error.Error.t)
                                                          ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        alloc.string.ToString.to_string
                                                          (Self :=
                                                            sqlx_core.error.Error.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 :
                                                        alloc.string.String.t :=
                                                      M.call (α0 (borrow e)) in
                                                    M.alloc α1 in
                                                  let* _ : M.Val unit :=
                                                    let* lvl :
                                                        M.Val log.Level.t :=
                                                      M.alloc log.Level.Error in
                                                    let* α0 :
                                                        (ref log.Level.t) ->
                                                          (ref
                                                            log.LevelFilter.t)
                                                          ->
                                                          M bool.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.cmp.PartialOrd.le
                                                          (Self := log.Level.t)
                                                          (Rhs :=
                                                            log.LevelFilter.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 : bool.t :=
                                                      M.call
                                                        (α0
                                                          (borrow lvl)
                                                          (borrow
                                                            log.STATIC_MAX_LEVEL)) in
                                                    let* α2 :
                                                        (ref log.Level.t) ->
                                                          (ref
                                                            log.LevelFilter.t)
                                                          ->
                                                          M bool.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.cmp.PartialOrd.le
                                                          (Self := log.Level.t)
                                                          (Rhs :=
                                                            log.LevelFilter.t)
                                                          (Trait := ℐ))) in
                                                    let* α3 :
                                                        log.LevelFilter.t :=
                                                      M.call log.max_level in
                                                    let* α4 :
                                                        M.Val
                                                          log.LevelFilter.t :=
                                                      M.alloc α3 in
                                                    let* α5 : bool.t :=
                                                      M.call
                                                        (α2
                                                          (borrow lvl)
                                                          (borrow α4)) in
                                                    let* α6 : M.Val bool.t :=
                                                      M.alloc
                                                        (BinOp.Pure.and
                                                          α1
                                                          α5) in
                                                    let* α7 : bool.t :=
                                                      M.read (use α6) in
                                                    if α7 then
                                                      let* _ : M.Val unit :=
                                                        let* α0 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "Failed to submit tool outputs: ") in
                                                        let* α1 :
                                                            M.Val
                                                              (array
                                                                (ref str.t)) :=
                                                          M.alloc [ α0 ] in
                                                        let* α2 :
                                                            core.fmt.rt.Argument.t :=
                                                          M.call
                                                            (core.fmt.rt.Argument.t::["new_display"]
                                                              (borrow
                                                                error_message)) in
                                                        let* α3 :
                                                            M.Val
                                                              (array
                                                                core.fmt.rt.Argument.t) :=
                                                          M.alloc [ α2 ] in
                                                        let* α4 :
                                                            core.fmt.Arguments.t :=
                                                          M.call
                                                            (core.fmt.Arguments.t::["new_v1"]
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α1))
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α3))) in
                                                        let* α5 : log.Level.t :=
                                                          M.read lvl in
                                                        let* α6 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants_api_communication::runs") in
                                                        let* α7 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants_api_communication::runs") in
                                                        let* α8 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants-api-communication/src/runs.rs") in
                                                        let* α9 :
                                                            M.Val
                                                              (((ref str.t)
                                                              *
                                                              (ref str.t))
                                                              *
                                                              (ref str.t)) :=
                                                          M.alloc
                                                            (α6, α7, α8) in
                                                        let* α10 : unit :=
                                                          M.call
                                                            (log.__private_api.log
                                                              α4
                                                              α5
                                                              (borrow α9)
                                                              ((Integer.of_Z
                                                                  63) :
                                                                u32.t)
                                                              core.option.Option.None) in
                                                        M.alloc α10 in
                                                      M.alloc tt
                                                    else
                                                      M.alloc tt in
                                                  let* α0 :
                                                      http.status.StatusCode.t :=
                                                    M.read
                                                      http.status.INTERNAL_SERVER_ERROR in
                                                  let* α1 :
                                                      alloc.string.String.t :=
                                                    M.read error_message in
                                                  M.alloc
                                                    (core.result.Result.Err
                                                      (α0, α1))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.run.RunObject.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)))
                                            ] in
                                        M.pure (use α0)
                                      end) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (axum.json.Json.t
                                              async_openai.types.run.RunObject.t)
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t)))
                                  ]
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.run.RunObject.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t async_openai.types.run.RunObject.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t async_openai.types.run.RunObject.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.run.RunObject.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn create_run_handler(
    Path((thread_id,)): Path<(String,)>,
    State(app_state): State<AppState>,
    Json(run_input): Json<CreateRunRequest>,
) -> Result<JsonResponse<RunObject>, (StatusCode, String)> {
    let redis_url = std::env::var("REDIS_URL").expect("REDIS_URL must be set");
    let client = redis::Client::open(redis_url).unwrap();
    let con = client.get_async_connection().await.unwrap();
    let user_id = Uuid::default().to_string();
    println!("thread_id: {}", thread_id);
    let run = create_run_and_produce_to_executor_queue(
        &app_state.pool,
        &thread_id,
        &run_input.assistant_id,
        &run_input.instructions.unwrap_or_default(),
        &user_id,
        con,
    )
    .await;
    match run {
        Ok(run) => Ok(JsonResponse(run.inner)),
        Err(e) => {
            error!("Error creating run: {}", e);
            if let sqlx::Error::Database(db_err) = &e {
                if let Some(constraint) = db_err.constraint() {
                    if constraint == "runs_assistant_id_fkey" {
                        return Err((StatusCode::BAD_REQUEST, "Invalid assistant_id did you create this assistant beforehand? Check https://platform.openai.com/docs/api-reference/assistants/createAssistant".to_string()));
                    } else if constraint == "runs_thread_id_fkey" {
                        return Err((StatusCode::BAD_REQUEST, "Invalid thread_id did you create this thread beforehand? Check https://platform.openai.com/docs/api-reference/threads/createThread".to_string()));
                    }
                }
            }
            Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))
        }
    }
}
*)
Definition create_run_handler
    (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    (__arg2 : axum.json.Json.t async_openai.types.run.CreateRunRequest.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  let* __arg2 := M.alloc __arg2 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t async_openai.types.run.RunObject.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_) =>
                        let γ1_0 := γ0_0 in
                        let* thread_id := M.copy γ1_0 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* __arg2 :
                                    M.Val
                                      (axum.json.Json.t
                                        async_openai.types.run.CreateRunRequest.t) :=
                                  M.copy __arg2 in
                                match_operator
                                  __arg2
                                  [
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | axum.json.Json.Build_t _ =>
                                        let γ0_0 := axum.json.Json.Get_0 γ in
                                        let* run_input := M.copy γ0_0 in
                                        let* redis_url :
                                            M.Val alloc.string.String.t :=
                                          let* α0 : ref str.t :=
                                            M.read (mk_str "REDIS_URL") in
                                          let* α1 :
                                              core.result.Result.t
                                                alloc.string.String.t
                                                std.env.VarError.t :=
                                            M.call (std.env.var α0) in
                                          let* α2 : ref str.t :=
                                            M.read
                                              (mk_str
                                                "REDIS_URL must be set") in
                                          let* α3 : alloc.string.String.t :=
                                            M.call
                                              ((core.result.Result.t
                                                    alloc.string.String.t
                                                    std.env.VarError.t)::["expect"]
                                                α1
                                                α2) in
                                          M.alloc α3 in
                                        let* client :
                                            M.Val redis.client.Client.t :=
                                          let* α0 : alloc.string.String.t :=
                                            M.read redis_url in
                                          let* α1 :
                                              core.result.Result.t
                                                redis.client.Client.t
                                                redis.types.RedisError.t :=
                                            M.call
                                              (redis.client.Client.t::["open"]
                                                α0) in
                                          let* α2 : redis.client.Client.t :=
                                            M.call
                                              ((core.result.Result.t
                                                    redis.client.Client.t
                                                    redis.types.RedisError.t)::["unwrap"]
                                                α1) in
                                          M.alloc α2 in
                                        let* con :
                                            M.Val
                                              (redis.aio.connection.Connection.t
                                                (core.pin.Pin.t
                                                  (alloc.boxed.Box.t
                                                    (dyn
                                                      [redis.aio.AsyncStream.Trait])
                                                    alloc.alloc.Global.t))) :=
                                          let* α0 : _ -> M _ :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.future.into_future.IntoFuture.into_future
                                                (Self := _)
                                                (Trait := ℐ))) in
                                          let* α1 : _ :=
                                            M.call
                                              (redis.client.Client.t::["get_async_connection"]
                                                (borrow client)) in
                                          let* α2 : _ := M.call (α0 α1) in
                                          let* α3 : M.Val _ := M.alloc α2 in
                                          let* α4 :
                                              M.Val
                                                (core.result.Result.t
                                                  (redis.aio.connection.Connection.t
                                                    (core.pin.Pin.t
                                                      (alloc.boxed.Box.t
                                                        (dyn
                                                          [redis.aio.AsyncStream.Trait])
                                                        alloc.alloc.Global.t)))
                                                  redis.types.RedisError.t) :=
                                            match_operator
                                              α3
                                              [
                                                fun γ =>
                                                  (let* __awaitee := M.copy γ in
                                                  M.loop
                                                    (let* _ : M.Val unit :=
                                                      let* α0 :
                                                          (core.pin.Pin.t
                                                              (mut_ref _))
                                                            ->
                                                            (mut_ref
                                                              core.task.wake.Context.t)
                                                            ->
                                                            M
                                                              (core.task.poll.Poll.t
                                                                _) :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.future.future.Future.poll
                                                            (Self := _)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          core.pin.Pin.t
                                                            (mut_ref _) :=
                                                        M.call
                                                          ((core.pin.Pin.t
                                                                (mut_ref
                                                                  _))::["new_unchecked"]
                                                            (borrow_mut
                                                              __awaitee)) in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read _task_context in
                                                      let* α3 :
                                                          mut_ref
                                                            core.task.wake.Context.t :=
                                                        M.call
                                                          (core.future.get_context
                                                            α2) in
                                                      let* α4 :
                                                          core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              (redis.aio.connection.Connection.t
                                                                (core.pin.Pin.t
                                                                  (alloc.boxed.Box.t
                                                                    (dyn
                                                                      [redis.aio.AsyncStream.Trait])
                                                                    alloc.alloc.Global.t)))
                                                              redis.types.RedisError.t) :=
                                                        M.call (α0 α1 α3) in
                                                      let* α5 :
                                                          M.Val
                                                            (core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                (redis.aio.connection.Connection.t
                                                                  (core.pin.Pin.t
                                                                    (alloc.boxed.Box.t
                                                                      (dyn
                                                                        [redis.aio.AsyncStream.Trait])
                                                                      alloc.alloc.Global.t)))
                                                                redis.types.RedisError.t)) :=
                                                        M.alloc α4 in
                                                      match_operator
                                                        α5
                                                        [
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Ready
                                                                  _
                                                                =>
                                                              let γ0_0 :=
                                                                core.task.poll.Poll.Get_Ready_0
                                                                  γ in
                                                              let* result :=
                                                                M.copy γ0_0 in
                                                              let* α0 :
                                                                  M.Val
                                                                    never.t :=
                                                                M.break in
                                                              let* α1 :=
                                                                M.read α0 in
                                                              let* α2 : unit :=
                                                                never_to_any
                                                                  α1 in
                                                              M.alloc α2
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit);
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Pending
                                                                =>
                                                              M.alloc tt
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit)
                                                        ] in
                                                    let* _ : M.Val unit :=
                                                      let* α0 : M.Val unit :=
                                                        M.alloc tt in
                                                      let* α1 :
                                                          M.Val
                                                            core.future.ResumeTy.t :=
                                                        yield α0 in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read α1 in
                                                      assign _task_context α2 in
                                                    M.alloc tt)) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (redis.aio.connection.Connection.t
                                                          (core.pin.Pin.t
                                                            (alloc.boxed.Box.t
                                                              (dyn
                                                                [redis.aio.AsyncStream.Trait])
                                                              alloc.alloc.Global.t)))
                                                        redis.types.RedisError.t))
                                              ] in
                                          let* α5 :
                                              core.result.Result.t
                                                (redis.aio.connection.Connection.t
                                                  (core.pin.Pin.t
                                                    (alloc.boxed.Box.t
                                                      (dyn
                                                        [redis.aio.AsyncStream.Trait])
                                                      alloc.alloc.Global.t)))
                                                redis.types.RedisError.t :=
                                            M.read α4 in
                                          let* α6 :
                                              redis.aio.connection.Connection.t
                                                (core.pin.Pin.t
                                                  (alloc.boxed.Box.t
                                                    (dyn
                                                      [redis.aio.AsyncStream.Trait])
                                                    alloc.alloc.Global.t)) :=
                                            M.call
                                              ((core.result.Result.t
                                                    (redis.aio.connection.Connection.t
                                                      (core.pin.Pin.t
                                                        (alloc.boxed.Box.t
                                                          (dyn
                                                            [redis.aio.AsyncStream.Trait])
                                                          alloc.alloc.Global.t)))
                                                    redis.types.RedisError.t)::["unwrap"]
                                                α5) in
                                          M.alloc α6 in
                                        let* user_id :
                                            M.Val alloc.string.String.t :=
                                          let* α0 :
                                              (ref uuid.Uuid.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α1 : M uuid.Uuid.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.default.Default.default
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α2 : uuid.Uuid.t := M.call α1 in
                                          let* α3 : M.Val uuid.Uuid.t :=
                                            M.alloc α2 in
                                          let* α4 : alloc.string.String.t :=
                                            M.call (α0 (borrow α3)) in
                                          M.alloc α4 in
                                        let* _ : M.Val unit :=
                                          let* _ : M.Val unit :=
                                            let* α0 : ref str.t :=
                                              M.read (mk_str "thread_id: ") in
                                            let* α1 : ref str.t :=
                                              M.read (mk_str "
") in
                                            let* α2 :
                                                M.Val (array (ref str.t)) :=
                                              M.alloc [ α0; α1 ] in
                                            let* α3 : core.fmt.rt.Argument.t :=
                                              M.call
                                                (core.fmt.rt.Argument.t::["new_display"]
                                                  (borrow thread_id)) in
                                            let* α4 :
                                                M.Val
                                                  (array
                                                    core.fmt.rt.Argument.t) :=
                                              M.alloc [ α3 ] in
                                            let* α5 : core.fmt.Arguments.t :=
                                              M.call
                                                (core.fmt.Arguments.t::["new_v1"]
                                                  (pointer_coercion
                                                    "Unsize"
                                                    (borrow α2))
                                                  (pointer_coercion
                                                    "Unsize"
                                                    (borrow α4))) in
                                            let* α6 : unit :=
                                              M.call (std.io.stdio._print α5) in
                                            M.alloc α6 in
                                          M.alloc tt in
                                        let* run :
                                            M.Val
                                              (core.result.Result.t
                                                assistants_core.models.Run.t
                                                sqlx_core.error.Error.t) :=
                                          let* α0 : _ -> M _ :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.future.into_future.IntoFuture.into_future
                                                (Self := _)
                                                (Trait := ℐ))) in
                                          let* α1 :
                                              (ref
                                                  (alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t))
                                                ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self :=
                                                  alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α2 :
                                              ref
                                                (sqlx_core.pool.Pool.t
                                                  sqlx_postgres.database.Postgres.t) :=
                                            M.call
                                              (α1
                                                (borrow
                                                  (assistants_api_communication.models.AppState.Get_pool
                                                    app_state))) in
                                          let* α3 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α4 : ref str.t :=
                                            M.call (α3 (borrow thread_id)) in
                                          let* α5 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α6 : ref str.t :=
                                            M.call
                                              (α5
                                                (borrow
                                                  (async_openai.types.run.CreateRunRequest.Get_assistant_id
                                                    run_input))) in
                                          let* α7 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α8 :
                                              core.option.Option.t
                                                alloc.string.String.t :=
                                            M.read
                                              (async_openai.types.run.CreateRunRequest.Get_instructions
                                                run_input) in
                                          let* α9 : alloc.string.String.t :=
                                            M.call
                                              ((core.option.Option.t
                                                    alloc.string.String.t)::["unwrap_or_default"]
                                                α8) in
                                          let* α10 :
                                              M.Val alloc.string.String.t :=
                                            M.alloc α9 in
                                          let* α11 : ref str.t :=
                                            M.call (α7 (borrow α10)) in
                                          let* α12 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α13 : ref str.t :=
                                            M.call (α12 (borrow user_id)) in
                                          let* α14 :
                                              redis.aio.connection.Connection.t
                                                (core.pin.Pin.t
                                                  (alloc.boxed.Box.t
                                                    (dyn
                                                      [redis.aio.AsyncStream.Trait])
                                                    alloc.alloc.Global.t)) :=
                                            M.read con in
                                          let* α15 : _ :=
                                            M.call
                                              (assistants_core.runs.create_run_and_produce_to_executor_queue
                                                α2
                                                α4
                                                α6
                                                α11
                                                α13
                                                α14) in
                                          let* α16 : _ := M.call (α0 α15) in
                                          let* α17 : M.Val _ := M.alloc α16 in
                                          let* α18 :
                                              M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Run.t
                                                  sqlx_core.error.Error.t) :=
                                            match_operator
                                              α17
                                              [
                                                fun γ =>
                                                  (let* __awaitee := M.copy γ in
                                                  M.loop
                                                    (let* _ : M.Val unit :=
                                                      let* α0 :
                                                          (core.pin.Pin.t
                                                              (mut_ref _))
                                                            ->
                                                            (mut_ref
                                                              core.task.wake.Context.t)
                                                            ->
                                                            M
                                                              (core.task.poll.Poll.t
                                                                _) :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.future.future.Future.poll
                                                            (Self := _)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          core.pin.Pin.t
                                                            (mut_ref _) :=
                                                        M.call
                                                          ((core.pin.Pin.t
                                                                (mut_ref
                                                                  _))::["new_unchecked"]
                                                            (borrow_mut
                                                              __awaitee)) in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read _task_context in
                                                      let* α3 :
                                                          mut_ref
                                                            core.task.wake.Context.t :=
                                                        M.call
                                                          (core.future.get_context
                                                            α2) in
                                                      let* α4 :
                                                          core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              assistants_core.models.Run.t
                                                              sqlx_core.error.Error.t) :=
                                                        M.call (α0 α1 α3) in
                                                      let* α5 :
                                                          M.Val
                                                            (core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                assistants_core.models.Run.t
                                                                sqlx_core.error.Error.t)) :=
                                                        M.alloc α4 in
                                                      match_operator
                                                        α5
                                                        [
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Ready
                                                                  _
                                                                =>
                                                              let γ0_0 :=
                                                                core.task.poll.Poll.Get_Ready_0
                                                                  γ in
                                                              let* result :=
                                                                M.copy γ0_0 in
                                                              let* α0 :
                                                                  M.Val
                                                                    never.t :=
                                                                M.break in
                                                              let* α1 :=
                                                                M.read α0 in
                                                              let* α2 : unit :=
                                                                never_to_any
                                                                  α1 in
                                                              M.alloc α2
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit);
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Pending
                                                                =>
                                                              M.alloc tt
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit)
                                                        ] in
                                                    let* _ : M.Val unit :=
                                                      let* α0 : M.Val unit :=
                                                        M.alloc tt in
                                                      let* α1 :
                                                          M.Val
                                                            core.future.ResumeTy.t :=
                                                        yield α0 in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read α1 in
                                                      assign _task_context α2 in
                                                    M.alloc tt)) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        assistants_core.models.Run.t
                                                        sqlx_core.error.Error.t))
                                              ] in
                                          M.copy α18 in
                                        let* α0 :
                                            M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.run.RunObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)) :=
                                          match_operator
                                            run
                                            [
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Ok _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Ok_0
                                                      γ in
                                                  let* run := M.copy γ0_0 in
                                                  let* α0 :
                                                      async_openai.types.run.RunObject.t :=
                                                    M.read
                                                      (assistants_core.models.Run.Get_inner
                                                        run) in
                                                  M.alloc
                                                    (core.result.Result.Ok
                                                      (axum.json.Json.Build_t
                                                        α0))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.run.RunObject.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)));
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Err _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Err_0
                                                      γ in
                                                  let* e := M.copy γ0_0 in
                                                  let* _ : M.Val unit :=
                                                    let* lvl :
                                                        M.Val log.Level.t :=
                                                      M.alloc log.Level.Error in
                                                    let* α0 :
                                                        (ref log.Level.t) ->
                                                          (ref
                                                            log.LevelFilter.t)
                                                          ->
                                                          M bool.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.cmp.PartialOrd.le
                                                          (Self := log.Level.t)
                                                          (Rhs :=
                                                            log.LevelFilter.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 : bool.t :=
                                                      M.call
                                                        (α0
                                                          (borrow lvl)
                                                          (borrow
                                                            log.STATIC_MAX_LEVEL)) in
                                                    let* α2 :
                                                        (ref log.Level.t) ->
                                                          (ref
                                                            log.LevelFilter.t)
                                                          ->
                                                          M bool.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.cmp.PartialOrd.le
                                                          (Self := log.Level.t)
                                                          (Rhs :=
                                                            log.LevelFilter.t)
                                                          (Trait := ℐ))) in
                                                    let* α3 :
                                                        log.LevelFilter.t :=
                                                      M.call log.max_level in
                                                    let* α4 :
                                                        M.Val
                                                          log.LevelFilter.t :=
                                                      M.alloc α3 in
                                                    let* α5 : bool.t :=
                                                      M.call
                                                        (α2
                                                          (borrow lvl)
                                                          (borrow α4)) in
                                                    let* α6 : M.Val bool.t :=
                                                      M.alloc
                                                        (BinOp.Pure.and
                                                          α1
                                                          α5) in
                                                    let* α7 : bool.t :=
                                                      M.read (use α6) in
                                                    if α7 then
                                                      let* _ : M.Val unit :=
                                                        let* α0 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "Error creating run: ") in
                                                        let* α1 :
                                                            M.Val
                                                              (array
                                                                (ref str.t)) :=
                                                          M.alloc [ α0 ] in
                                                        let* α2 :
                                                            core.fmt.rt.Argument.t :=
                                                          M.call
                                                            (core.fmt.rt.Argument.t::["new_display"]
                                                              (borrow e)) in
                                                        let* α3 :
                                                            M.Val
                                                              (array
                                                                core.fmt.rt.Argument.t) :=
                                                          M.alloc [ α2 ] in
                                                        let* α4 :
                                                            core.fmt.Arguments.t :=
                                                          M.call
                                                            (core.fmt.Arguments.t::["new_v1"]
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α1))
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α3))) in
                                                        let* α5 : log.Level.t :=
                                                          M.read lvl in
                                                        let* α6 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants_api_communication::runs") in
                                                        let* α7 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants_api_communication::runs") in
                                                        let* α8 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants-api-communication/src/runs.rs") in
                                                        let* α9 :
                                                            M.Val
                                                              (((ref str.t)
                                                              *
                                                              (ref str.t))
                                                              *
                                                              (ref str.t)) :=
                                                          M.alloc
                                                            (α6, α7, α8) in
                                                        let* α10 : unit :=
                                                          M.call
                                                            (log.__private_api.log
                                                              α4
                                                              α5
                                                              (borrow α9)
                                                              ((Integer.of_Z
                                                                  91) :
                                                                u32.t)
                                                              core.option.Option.None) in
                                                        M.alloc α10 in
                                                      M.alloc tt
                                                    else
                                                      M.alloc tt in
                                                  let* _ : M.Val unit :=
                                                    let* α0 :
                                                        M.Val
                                                          (ref
                                                            sqlx_core.error.Error.t) :=
                                                      M.alloc (borrow e) in
                                                    match_operator
                                                      α0
                                                      [
                                                        fun γ =>
                                                          (let* γ :=
                                                            let* α0 :=
                                                              M.read γ in
                                                            M.pure (deref α0) in
                                                          let* α0 := M.read γ in
                                                          match α0 with
                                                          |
                                                              sqlx_core.error.Error.Database
                                                                _
                                                              =>
                                                            let γ1_0 :=
                                                              sqlx_core.error.Error.Get_Database_0
                                                                γ in
                                                            let* db_err :=
                                                              M.alloc
                                                                (borrow γ1_0) in
                                                            let* α0 :
                                                                (ref
                                                                    (dyn
                                                                      [sqlx_core.error.DatabaseError.Trait]))
                                                                  ->
                                                                  M
                                                                    (core.option.Option.t
                                                                      (ref
                                                                        str.t)) :=
                                                              ltac:(M.get_method (fun ℐ =>
                                                                sqlx_core.error.DatabaseError.constraint
                                                                  (Self :=
                                                                    dyn
                                                                      [sqlx_core.error.DatabaseError.Trait])
                                                                  (Trait := ℐ))) in
                                                            let* α1 :
                                                                ref
                                                                  (alloc.boxed.Box.t
                                                                    (dyn
                                                                      [sqlx_core.error.DatabaseError.Trait])
                                                                    alloc.alloc.Global.t) :=
                                                              M.read db_err in
                                                            let* α2 :
                                                                alloc.boxed.Box.t
                                                                  (dyn
                                                                    [sqlx_core.error.DatabaseError.Trait])
                                                                  alloc.alloc.Global.t :=
                                                              M.read
                                                                (deref α1) in
                                                            let* α3 :
                                                                core.option.Option.t
                                                                  (ref str.t) :=
                                                              M.call
                                                                (α0
                                                                  (borrow
                                                                    (deref
                                                                      α2))) in
                                                            let* α4 :
                                                                M.Val
                                                                  (core.option.Option.t
                                                                    (ref
                                                                      str.t)) :=
                                                              M.alloc α3 in
                                                            match_operator
                                                              α4
                                                              [
                                                                fun γ =>
                                                                  (let* α0 :=
                                                                    M.read γ in
                                                                  match α0 with
                                                                  |
                                                                      core.option.Option.Some
                                                                        _
                                                                      =>
                                                                    let γ0_0 :=
                                                                      core.option.Option.Get_Some_0
                                                                        γ in
                                                                    let*
                                                                          constraint :=
                                                                      M.copy
                                                                        γ0_0 in
                                                                    let* α0 :
                                                                        (ref
                                                                            (ref
                                                                              str.t))
                                                                          ->
                                                                          (ref
                                                                            (ref
                                                                              str.t))
                                                                          ->
                                                                          M
                                                                            bool.t :=
                                                                      ltac:(M.get_method (fun ℐ =>
                                                                        core.cmp.PartialEq.eq
                                                                          (Self :=
                                                                            ref
                                                                              str.t)
                                                                          (Rhs :=
                                                                            ref
                                                                              str.t)
                                                                          (Trait := ℐ))) in
                                                                    let* α1 :
                                                                        bool.t :=
                                                                      M.call
                                                                        (α0
                                                                          (borrow
                                                                            constraint)
                                                                          (borrow
                                                                            (mk_str
                                                                              "runs_assistant_id_fkey"))) in
                                                                    let* α2 :
                                                                        M.Val
                                                                          bool.t :=
                                                                      M.alloc
                                                                        α1 in
                                                                    let* α3 :
                                                                        bool.t :=
                                                                      M.read
                                                                        (use
                                                                          α2) in
                                                                    if α3 then
                                                                      let* α0 :
                                                                          http.status.StatusCode.t :=
                                                                        M.read
                                                                          http.status.BAD_REQUEST in
                                                                      let* α1 :
                                                                          (ref
                                                                              str.t)
                                                                            ->
                                                                            M
                                                                              alloc.string.String.t :=
                                                                        ltac:(M.get_method (fun ℐ =>
                                                                          alloc.string.ToString.to_string
                                                                            (Self :=
                                                                              str.t)
                                                                            (Trait := ℐ))) in
                                                                      let* α2 :
                                                                          ref
                                                                            str.t :=
                                                                        M.read
                                                                          (mk_str
                                                                            "Invalid assistant_id did you create this assistant beforehand? Check https://platform.openai.com/docs/api-reference/assistants/createAssistant") in
                                                                      let* α3 :
                                                                          alloc.string.String.t :=
                                                                        M.call
                                                                          (α1
                                                                            α2) in
                                                                      let* α4 :
                                                                          M.Val
                                                                            never.t :=
                                                                        return_
                                                                          (core.result.Result.Err
                                                                            (α0,
                                                                              α3)) in
                                                                      let* α5 :=
                                                                        M.read
                                                                          α4 in
                                                                      let* α6 :
                                                                          unit :=
                                                                        never_to_any
                                                                          α5 in
                                                                      M.alloc α6
                                                                    else
                                                                      let* α0 :
                                                                          (ref
                                                                              (ref
                                                                                str.t))
                                                                            ->
                                                                            (ref
                                                                              (ref
                                                                                str.t))
                                                                            ->
                                                                            M
                                                                              bool.t :=
                                                                        ltac:(M.get_method (fun ℐ =>
                                                                          core.cmp.PartialEq.eq
                                                                            (Self :=
                                                                              ref
                                                                                str.t)
                                                                            (Rhs :=
                                                                              ref
                                                                                str.t)
                                                                            (Trait := ℐ))) in
                                                                      let* α1 :
                                                                          bool.t :=
                                                                        M.call
                                                                          (α0
                                                                            (borrow
                                                                              constraint)
                                                                            (borrow
                                                                              (mk_str
                                                                                "runs_thread_id_fkey"))) in
                                                                      let* α2 :
                                                                          M.Val
                                                                            bool.t :=
                                                                        M.alloc
                                                                          α1 in
                                                                      let* α3 :
                                                                          bool.t :=
                                                                        M.read
                                                                          (use
                                                                            α2) in
                                                                      if α3 then
                                                                        let*
                                                                              α0 :
                                                                            http.status.StatusCode.t :=
                                                                          M.read
                                                                            http.status.BAD_REQUEST in
                                                                        let*
                                                                              α1 :
                                                                            (ref
                                                                                str.t)
                                                                              ->
                                                                              M
                                                                                alloc.string.String.t :=
                                                                          ltac:(M.get_method (fun ℐ =>
                                                                            alloc.string.ToString.to_string
                                                                              (Self :=
                                                                                str.t)
                                                                              (Trait := ℐ))) in
                                                                        let*
                                                                              α2 :
                                                                            ref
                                                                              str.t :=
                                                                          M.read
                                                                            (mk_str
                                                                              "Invalid thread_id did you create this thread beforehand? Check https://platform.openai.com/docs/api-reference/threads/createThread") in
                                                                        let*
                                                                              α3 :
                                                                            alloc.string.String.t :=
                                                                          M.call
                                                                            (α1
                                                                              α2) in
                                                                        let*
                                                                              α4 :
                                                                            M.Val
                                                                              never.t :=
                                                                          return_
                                                                            (core.result.Result.Err
                                                                              (α0,
                                                                                α3)) in
                                                                        let*
                                                                              α5 :=
                                                                          M.read
                                                                            α4 in
                                                                        let*
                                                                              α6 :
                                                                            unit :=
                                                                          never_to_any
                                                                            α5 in
                                                                        M.alloc
                                                                          α6
                                                                      else
                                                                        M.alloc
                                                                          tt
                                                                  | _ =>
                                                                    M.break_match
                                                                  end) :
                                                                  M
                                                                    (M.Val
                                                                      unit);
                                                                fun γ =>
                                                                  (M.alloc tt) :
                                                                  M (M.Val unit)
                                                              ]
                                                          | _ => M.break_match
                                                          end) :
                                                          M (M.Val unit);
                                                        fun γ =>
                                                          (M.alloc tt) :
                                                          M (M.Val unit)
                                                      ] in
                                                  let* α0 :
                                                      http.status.StatusCode.t :=
                                                    M.read
                                                      http.status.INTERNAL_SERVER_ERROR in
                                                  let* α1 :
                                                      (ref
                                                          sqlx_core.error.Error.t)
                                                        ->
                                                        M
                                                          alloc.string.String.t :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      alloc.string.ToString.to_string
                                                        (Self :=
                                                          sqlx_core.error.Error.t)
                                                        (Trait := ℐ))) in
                                                  let* α2 :
                                                      alloc.string.String.t :=
                                                    M.call (α1 (borrow e)) in
                                                  M.alloc
                                                    (core.result.Result.Err
                                                      (α0, α2))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.run.RunObject.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)))
                                            ] in
                                        M.pure (use α0)
                                      end) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (axum.json.Json.t
                                              async_openai.types.run.RunObject.t)
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t)))
                                  ]
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.run.RunObject.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t async_openai.types.run.RunObject.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t async_openai.types.run.RunObject.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.run.RunObject.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn get_run_handler(
    Path((thread_id, run_id)): Path<(String, String)>,
    State(app_state): State<AppState>,
) -> Result<JsonResponse<RunObject>, (StatusCode, String)> {
    let user_id = Uuid::default().to_string();
    let run = get_run(&app_state.pool, &thread_id, &run_id, &user_id).await;
    match run {
        Ok(run) => Ok(JsonResponse(run.inner)),
        Err(e) => {
            let error_message = e.to_string();
            error!("Failed to get run: {}", error_message);
            Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
        }
    }
}
*)
Definition get_run_handler
    (__arg0
      :
      axum.extract.path.Path.t (alloc.string.String.t * alloc.string.String.t))
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val
                  (axum.extract.path.Path.t
                    (alloc.string.String.t * alloc.string.String.t)) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t async_openai.types.run.RunObject.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_, _) =>
                        let γ1_0 := Tuple.Access.left γ0_0 in
                        let γ1_1 := Tuple.Access.right γ0_0 in
                        let* thread_id := M.copy γ1_0 in
                        let* run_id := M.copy γ1_1 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* user_id : M.Val alloc.string.String.t :=
                                  let* α0 :
                                      (ref uuid.Uuid.t) ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      alloc.string.ToString.to_string
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α1 : M uuid.Uuid.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.default.Default.default
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α2 : uuid.Uuid.t := M.call α1 in
                                  let* α3 : M.Val uuid.Uuid.t := M.alloc α2 in
                                  let* α4 : alloc.string.String.t :=
                                    M.call (α0 (borrow α3)) in
                                  M.alloc α4 in
                                let* run :
                                    M.Val
                                      (core.result.Result.t
                                        assistants_core.models.Run.t
                                        sqlx_core.error.Error.t) :=
                                  let* α0 : _ -> M _ :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.future.into_future.IntoFuture.into_future
                                        (Self := _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      (ref
                                          (alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t))
                                        ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self :=
                                          alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α2 :
                                      ref
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t) :=
                                    M.call
                                      (α1
                                        (borrow
                                          (assistants_api_communication.models.AppState.Get_pool
                                            app_state))) in
                                  let* α3 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α4 : ref str.t :=
                                    M.call (α3 (borrow thread_id)) in
                                  let* α5 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α6 : ref str.t :=
                                    M.call (α5 (borrow run_id)) in
                                  let* α7 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α8 : ref str.t :=
                                    M.call (α7 (borrow user_id)) in
                                  let* α9 : _ :=
                                    M.call
                                      (assistants_core.runs.get_run
                                        α2
                                        α4
                                        α6
                                        α8) in
                                  let* α10 : _ := M.call (α0 α9) in
                                  let* α11 : M.Val _ := M.alloc α10 in
                                  let* α12 :
                                      M.Val
                                        (core.result.Result.t
                                          assistants_core.models.Run.t
                                          sqlx_core.error.Error.t) :=
                                    match_operator
                                      α11
                                      [
                                        fun γ =>
                                          (let* __awaitee := M.copy γ in
                                          M.loop
                                            (let* _ : M.Val unit :=
                                              let* α0 :
                                                  (core.pin.Pin.t (mut_ref _))
                                                    ->
                                                    (mut_ref
                                                      core.task.wake.Context.t)
                                                    ->
                                                    M
                                                      (core.task.poll.Poll.t
                                                        _) :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.future.future.Future.poll
                                                    (Self := _)
                                                    (Trait := ℐ))) in
                                              let* α1 :
                                                  core.pin.Pin.t (mut_ref _) :=
                                                M.call
                                                  ((core.pin.Pin.t
                                                        (mut_ref
                                                          _))::["new_unchecked"]
                                                    (borrow_mut __awaitee)) in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read _task_context in
                                              let* α3 :
                                                  mut_ref
                                                    core.task.wake.Context.t :=
                                                M.call
                                                  (core.future.get_context
                                                    α2) in
                                              let* α4 :
                                                  core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      assistants_core.models.Run.t
                                                      sqlx_core.error.Error.t) :=
                                                M.call (α0 α1 α3) in
                                              let* α5 :
                                                  M.Val
                                                    (core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        assistants_core.models.Run.t
                                                        sqlx_core.error.Error.t)) :=
                                                M.alloc α4 in
                                              match_operator
                                                α5
                                                [
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Ready
                                                          _
                                                        =>
                                                      let γ0_0 :=
                                                        core.task.poll.Poll.Get_Ready_0
                                                          γ in
                                                      let* result :=
                                                        M.copy γ0_0 in
                                                      let* α0 : M.Val never.t :=
                                                        M.break in
                                                      let* α1 := M.read α0 in
                                                      let* α2 : unit :=
                                                        never_to_any α1 in
                                                      M.alloc α2
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit);
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Pending
                                                        =>
                                                      M.alloc tt
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit)
                                                ] in
                                            let* _ : M.Val unit :=
                                              let* α0 : M.Val unit :=
                                                M.alloc tt in
                                              let* α1 :
                                                  M.Val
                                                    core.future.ResumeTy.t :=
                                                yield α0 in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read α1 in
                                              assign _task_context α2 in
                                            M.alloc tt)) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                assistants_core.models.Run.t
                                                sqlx_core.error.Error.t))
                                      ] in
                                  M.copy α12 in
                                let* α0 :
                                    M.Val
                                      (core.result.Result.t
                                        (axum.json.Json.t
                                          async_openai.types.run.RunObject.t)
                                        (http.status.StatusCode.t
                                        *
                                        alloc.string.String.t)) :=
                                  match_operator
                                    run
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Ok _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Ok_0 γ in
                                          let* run := M.copy γ0_0 in
                                          let* α0 :
                                              async_openai.types.run.RunObject.t :=
                                            M.read
                                              (assistants_core.models.Run.Get_inner
                                                run) in
                                          M.alloc
                                            (core.result.Result.Ok
                                              (axum.json.Json.Build_t α0))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.run.RunObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)));
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Err _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Err_0 γ in
                                          let* e := M.copy γ0_0 in
                                          let* error_message :
                                              M.Val alloc.string.String.t :=
                                            let* α0 :
                                                (ref sqlx_core.error.Error.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self :=
                                                    sqlx_core.error.Error.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : alloc.string.String.t :=
                                              M.call (α0 (borrow e)) in
                                            M.alloc α1 in
                                          let* _ : M.Val unit :=
                                            let* lvl : M.Val log.Level.t :=
                                              M.alloc log.Level.Error in
                                            let* α0 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : bool.t :=
                                              M.call
                                                (α0
                                                  (borrow lvl)
                                                  (borrow
                                                    log.STATIC_MAX_LEVEL)) in
                                            let* α2 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α3 : log.LevelFilter.t :=
                                              M.call log.max_level in
                                            let* α4 : M.Val log.LevelFilter.t :=
                                              M.alloc α3 in
                                            let* α5 : bool.t :=
                                              M.call
                                                (α2 (borrow lvl) (borrow α4)) in
                                            let* α6 : M.Val bool.t :=
                                              M.alloc (BinOp.Pure.and α1 α5) in
                                            let* α7 : bool.t :=
                                              M.read (use α6) in
                                            if α7 then
                                              let* _ : M.Val unit :=
                                                let* α0 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "Failed to get run: ") in
                                                let* α1 :
                                                    M.Val (array (ref str.t)) :=
                                                  M.alloc [ α0 ] in
                                                let* α2 :
                                                    core.fmt.rt.Argument.t :=
                                                  M.call
                                                    (core.fmt.rt.Argument.t::["new_display"]
                                                      (borrow error_message)) in
                                                let* α3 :
                                                    M.Val
                                                      (array
                                                        core.fmt.rt.Argument.t) :=
                                                  M.alloc [ α2 ] in
                                                let* α4 :
                                                    core.fmt.Arguments.t :=
                                                  M.call
                                                    (core.fmt.Arguments.t::["new_v1"]
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α1))
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α3))) in
                                                let* α5 : log.Level.t :=
                                                  M.read lvl in
                                                let* α6 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::runs") in
                                                let* α7 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::runs") in
                                                let* α8 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants-api-communication/src/runs.rs") in
                                                let* α9 :
                                                    M.Val
                                                      (((ref str.t)
                                                      *
                                                      (ref str.t))
                                                      *
                                                      (ref str.t)) :=
                                                  M.alloc (α6, α7, α8) in
                                                let* α10 : unit :=
                                                  M.call
                                                    (log.__private_api.log
                                                      α4
                                                      α5
                                                      (borrow α9)
                                                      ((Integer.of_Z 116) :
                                                        u32.t)
                                                      core.option.Option.None) in
                                                M.alloc α10 in
                                              M.alloc tt
                                            else
                                              M.alloc tt in
                                          let* α0 : http.status.StatusCode.t :=
                                            M.read
                                              http.status.INTERNAL_SERVER_ERROR in
                                          let* α1 : alloc.string.String.t :=
                                            M.read error_message in
                                          M.alloc
                                            (core.result.Result.Err (α0, α1))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.run.RunObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ] in
                                M.pure (use α0)
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.run.RunObject.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t async_openai.types.run.RunObject.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t async_openai.types.run.RunObject.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.run.RunObject.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn update_run_handler(
    Path((thread_id, run_id)): Path<(String, String)>,
    State(app_state): State<AppState>,
    Json(run_input): Json<ModifyRunRequest>,
) -> Result<JsonResponse<RunObject>, (StatusCode, String)> {
    let run = update_run(
        &app_state.pool,
        &thread_id,
        &run_id,
        run_input
            .metadata
            .unwrap_or_default()
            .into_iter()
            .map(|(k, v)| (k, v.to_string()))
            .collect(),
        &Uuid::default().to_string(),
    )
    .await;
    match run {
        Ok(run) => Ok(JsonResponse(run.inner)),
        Err(e) => {
            let error_message = e.to_string();
            error!("Failed to update run: {}", error_message);
            Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
        }
    }
}
*)
Definition update_run_handler
    (__arg0
      :
      axum.extract.path.Path.t (alloc.string.String.t * alloc.string.String.t))
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    (__arg2 : axum.json.Json.t async_openai.types.run.ModifyRunRequest.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  let* __arg2 := M.alloc __arg2 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val
                  (axum.extract.path.Path.t
                    (alloc.string.String.t * alloc.string.String.t)) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t async_openai.types.run.RunObject.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_, _) =>
                        let γ1_0 := Tuple.Access.left γ0_0 in
                        let γ1_1 := Tuple.Access.right γ0_0 in
                        let* thread_id := M.copy γ1_0 in
                        let* run_id := M.copy γ1_1 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* __arg2 :
                                    M.Val
                                      (axum.json.Json.t
                                        async_openai.types.run.ModifyRunRequest.t) :=
                                  M.copy __arg2 in
                                match_operator
                                  __arg2
                                  [
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | axum.json.Json.Build_t _ =>
                                        let γ0_0 := axum.json.Json.Get_0 γ in
                                        let* run_input := M.copy γ0_0 in
                                        let* run :
                                            M.Val
                                              (core.result.Result.t
                                                assistants_core.models.Run.t
                                                sqlx_core.error.Error.t) :=
                                          let* α0 : _ -> M _ :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.future.into_future.IntoFuture.into_future
                                                (Self := _)
                                                (Trait := ℐ))) in
                                          let* α1 :
                                              (ref
                                                  (alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t))
                                                ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self :=
                                                  alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α2 :
                                              ref
                                                (sqlx_core.pool.Pool.t
                                                  sqlx_postgres.database.Postgres.t) :=
                                            M.call
                                              (α1
                                                (borrow
                                                  (assistants_api_communication.models.AppState.Get_pool
                                                    app_state))) in
                                          let* α3 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α4 : ref str.t :=
                                            M.call (α3 (borrow thread_id)) in
                                          let* α5 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α6 : ref str.t :=
                                            M.call (α5 (borrow run_id)) in
                                          let* α7 :
                                              (core.iter.adapters.map.Map.t
                                                  (std.collections.hash.map.IntoIter.t
                                                    alloc.string.String.t
                                                    serde_json.value.Value.t)
                                                  ((alloc.string.String.t
                                                    *
                                                    serde_json.value.Value.t)
                                                    ->
                                                    M
                                                      (alloc.string.String.t
                                                      *
                                                      alloc.string.String.t)))
                                                ->
                                                M
                                                  (std.collections.hash.map.HashMap.t
                                                    alloc.string.String.t
                                                    alloc.string.String.t
                                                    std.hash.random.RandomState.t) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.iter.traits.iterator.Iterator.collect
                                                (Self :=
                                                  core.iter.adapters.map.Map.t
                                                    (std.collections.hash.map.IntoIter.t
                                                      alloc.string.String.t
                                                      serde_json.value.Value.t)
                                                    ((alloc.string.String.t
                                                      *
                                                      serde_json.value.Value.t)
                                                      ->
                                                      M
                                                        (alloc.string.String.t
                                                        *
                                                        alloc.string.String.t)))
                                                (B :=
                                                  std.collections.hash.map.HashMap.t
                                                    alloc.string.String.t
                                                    alloc.string.String.t
                                                    std.hash.random.RandomState.t)
                                                (Trait := ℐ))) in
                                          let* α8 :
                                              (std.collections.hash.map.IntoIter.t
                                                  alloc.string.String.t
                                                  serde_json.value.Value.t)
                                                ->
                                                ((alloc.string.String.t
                                                  *
                                                  serde_json.value.Value.t)
                                                  ->
                                                  M
                                                    (alloc.string.String.t
                                                    *
                                                    alloc.string.String.t))
                                                ->
                                                M
                                                  (core.iter.adapters.map.Map.t
                                                    (std.collections.hash.map.IntoIter.t
                                                      alloc.string.String.t
                                                      serde_json.value.Value.t)
                                                    ((alloc.string.String.t
                                                      *
                                                      serde_json.value.Value.t)
                                                      ->
                                                      M
                                                        (alloc.string.String.t
                                                        *
                                                        alloc.string.String.t))) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.iter.traits.iterator.Iterator.map
                                                (Self :=
                                                  std.collections.hash.map.IntoIter.t
                                                    alloc.string.String.t
                                                    serde_json.value.Value.t)
                                                (B :=
                                                  alloc.string.String.t
                                                  *
                                                  alloc.string.String.t)
                                                (F :=
                                                  (alloc.string.String.t
                                                    *
                                                    serde_json.value.Value.t)
                                                    ->
                                                    M
                                                      (alloc.string.String.t
                                                      *
                                                      alloc.string.String.t))
                                                (Trait := ℐ))) in
                                          let* α9 :
                                              (std.collections.hash.map.HashMap.t
                                                  alloc.string.String.t
                                                  serde_json.value.Value.t
                                                  std.hash.random.RandomState.t)
                                                ->
                                                M _ :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.iter.traits.collect.IntoIterator.into_iter
                                                (Self :=
                                                  std.collections.hash.map.HashMap.t
                                                    alloc.string.String.t
                                                    serde_json.value.Value.t
                                                    std.hash.random.RandomState.t)
                                                (Trait := ℐ))) in
                                          let* α10 :
                                              core.option.Option.t
                                                (std.collections.hash.map.HashMap.t
                                                  alloc.string.String.t
                                                  serde_json.value.Value.t
                                                  std.hash.random.RandomState.t) :=
                                            M.read
                                              (async_openai.types.run.ModifyRunRequest.Get_metadata
                                                run_input) in
                                          let* α11 :
                                              std.collections.hash.map.HashMap.t
                                                alloc.string.String.t
                                                serde_json.value.Value.t
                                                std.hash.random.RandomState.t :=
                                            M.call
                                              ((core.option.Option.t
                                                    (std.collections.hash.map.HashMap.t
                                                      alloc.string.String.t
                                                      serde_json.value.Value.t
                                                      std.hash.random.RandomState.t))::["unwrap_or_default"]
                                                α10) in
                                          let* α12 :
                                              std.collections.hash.map.IntoIter.t
                                                alloc.string.String.t
                                                serde_json.value.Value.t :=
                                            M.call (α9 α11) in
                                          let* α13 :
                                              core.iter.adapters.map.Map.t
                                                (std.collections.hash.map.IntoIter.t
                                                  alloc.string.String.t
                                                  serde_json.value.Value.t)
                                                ((alloc.string.String.t
                                                  *
                                                  serde_json.value.Value.t)
                                                  ->
                                                  M
                                                    (alloc.string.String.t
                                                    *
                                                    alloc.string.String.t)) :=
                                            M.call
                                              (α8
                                                α12
                                                (fun
                                                    (α0 :
                                                      alloc.string.String.t
                                                      *
                                                      serde_json.value.Value.t) =>
                                                  (let* α0 := M.alloc α0 in
                                                  match_operator
                                                    α0
                                                    [
                                                      fun γ =>
                                                        (let* α0 := M.read γ in
                                                        match α0 with
                                                        | (_, _) =>
                                                          let γ0_0 :=
                                                            Tuple.Access.left
                                                              γ in
                                                          let γ0_1 :=
                                                            Tuple.Access.right
                                                              γ in
                                                          let* k :=
                                                            M.copy γ0_0 in
                                                          let* v :=
                                                            M.copy γ0_1 in
                                                          let* α0 :
                                                              alloc.string.String.t :=
                                                            M.read k in
                                                          let* α1 :
                                                              (ref
                                                                  serde_json.value.Value.t)
                                                                ->
                                                                M
                                                                  alloc.string.String.t :=
                                                            ltac:(M.get_method (fun ℐ =>
                                                              alloc.string.ToString.to_string
                                                                (Self :=
                                                                  serde_json.value.Value.t)
                                                                (Trait := ℐ))) in
                                                          let* α2 :
                                                              alloc.string.String.t :=
                                                            M.call
                                                              (α1 (borrow v)) in
                                                          M.pure (α0, α2)
                                                        end) :
                                                        M
                                                          (alloc.string.String.t
                                                          *
                                                          alloc.string.String.t)
                                                    ]) :
                                                  M
                                                    (alloc.string.String.t
                                                    *
                                                    alloc.string.String.t))) in
                                          let* α14 :
                                              std.collections.hash.map.HashMap.t
                                                alloc.string.String.t
                                                alloc.string.String.t
                                                std.hash.random.RandomState.t :=
                                            M.call (α7 α13) in
                                          let* α15 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α16 :
                                              (ref uuid.Uuid.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α17 : M uuid.Uuid.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.default.Default.default
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α18 : uuid.Uuid.t :=
                                            M.call α17 in
                                          let* α19 : M.Val uuid.Uuid.t :=
                                            M.alloc α18 in
                                          let* α20 : alloc.string.String.t :=
                                            M.call (α16 (borrow α19)) in
                                          let* α21 :
                                              M.Val alloc.string.String.t :=
                                            M.alloc α20 in
                                          let* α22 : ref str.t :=
                                            M.call (α15 (borrow α21)) in
                                          let* α23 : _ :=
                                            M.call
                                              (assistants_core.runs.update_run
                                                α2
                                                α4
                                                α6
                                                α14
                                                α22) in
                                          let* α24 : _ := M.call (α0 α23) in
                                          let* α25 : M.Val _ := M.alloc α24 in
                                          let* α26 :
                                              M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Run.t
                                                  sqlx_core.error.Error.t) :=
                                            match_operator
                                              α25
                                              [
                                                fun γ =>
                                                  (let* __awaitee := M.copy γ in
                                                  M.loop
                                                    (let* _ : M.Val unit :=
                                                      let* α0 :
                                                          (core.pin.Pin.t
                                                              (mut_ref _))
                                                            ->
                                                            (mut_ref
                                                              core.task.wake.Context.t)
                                                            ->
                                                            M
                                                              (core.task.poll.Poll.t
                                                                _) :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.future.future.Future.poll
                                                            (Self := _)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          core.pin.Pin.t
                                                            (mut_ref _) :=
                                                        M.call
                                                          ((core.pin.Pin.t
                                                                (mut_ref
                                                                  _))::["new_unchecked"]
                                                            (borrow_mut
                                                              __awaitee)) in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read _task_context in
                                                      let* α3 :
                                                          mut_ref
                                                            core.task.wake.Context.t :=
                                                        M.call
                                                          (core.future.get_context
                                                            α2) in
                                                      let* α4 :
                                                          core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              assistants_core.models.Run.t
                                                              sqlx_core.error.Error.t) :=
                                                        M.call (α0 α1 α3) in
                                                      let* α5 :
                                                          M.Val
                                                            (core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                assistants_core.models.Run.t
                                                                sqlx_core.error.Error.t)) :=
                                                        M.alloc α4 in
                                                      match_operator
                                                        α5
                                                        [
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Ready
                                                                  _
                                                                =>
                                                              let γ0_0 :=
                                                                core.task.poll.Poll.Get_Ready_0
                                                                  γ in
                                                              let* result :=
                                                                M.copy γ0_0 in
                                                              let* α0 :
                                                                  M.Val
                                                                    never.t :=
                                                                M.break in
                                                              let* α1 :=
                                                                M.read α0 in
                                                              let* α2 : unit :=
                                                                never_to_any
                                                                  α1 in
                                                              M.alloc α2
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit);
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Pending
                                                                =>
                                                              M.alloc tt
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit)
                                                        ] in
                                                    let* _ : M.Val unit :=
                                                      let* α0 : M.Val unit :=
                                                        M.alloc tt in
                                                      let* α1 :
                                                          M.Val
                                                            core.future.ResumeTy.t :=
                                                        yield α0 in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read α1 in
                                                      assign _task_context α2 in
                                                    M.alloc tt)) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        assistants_core.models.Run.t
                                                        sqlx_core.error.Error.t))
                                              ] in
                                          M.copy α26 in
                                        let* α0 :
                                            M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.run.RunObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)) :=
                                          match_operator
                                            run
                                            [
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Ok _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Ok_0
                                                      γ in
                                                  let* run := M.copy γ0_0 in
                                                  let* α0 :
                                                      async_openai.types.run.RunObject.t :=
                                                    M.read
                                                      (assistants_core.models.Run.Get_inner
                                                        run) in
                                                  M.alloc
                                                    (core.result.Result.Ok
                                                      (axum.json.Json.Build_t
                                                        α0))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.run.RunObject.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)));
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Err _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Err_0
                                                      γ in
                                                  let* e := M.copy γ0_0 in
                                                  let* error_message :
                                                      M.Val
                                                        alloc.string.String.t :=
                                                    let* α0 :
                                                        (ref
                                                            sqlx_core.error.Error.t)
                                                          ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        alloc.string.ToString.to_string
                                                          (Self :=
                                                            sqlx_core.error.Error.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 :
                                                        alloc.string.String.t :=
                                                      M.call (α0 (borrow e)) in
                                                    M.alloc α1 in
                                                  let* _ : M.Val unit :=
                                                    let* lvl :
                                                        M.Val log.Level.t :=
                                                      M.alloc log.Level.Error in
                                                    let* α0 :
                                                        (ref log.Level.t) ->
                                                          (ref
                                                            log.LevelFilter.t)
                                                          ->
                                                          M bool.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.cmp.PartialOrd.le
                                                          (Self := log.Level.t)
                                                          (Rhs :=
                                                            log.LevelFilter.t)
                                                          (Trait := ℐ))) in
                                                    let* α1 : bool.t :=
                                                      M.call
                                                        (α0
                                                          (borrow lvl)
                                                          (borrow
                                                            log.STATIC_MAX_LEVEL)) in
                                                    let* α2 :
                                                        (ref log.Level.t) ->
                                                          (ref
                                                            log.LevelFilter.t)
                                                          ->
                                                          M bool.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        core.cmp.PartialOrd.le
                                                          (Self := log.Level.t)
                                                          (Rhs :=
                                                            log.LevelFilter.t)
                                                          (Trait := ℐ))) in
                                                    let* α3 :
                                                        log.LevelFilter.t :=
                                                      M.call log.max_level in
                                                    let* α4 :
                                                        M.Val
                                                          log.LevelFilter.t :=
                                                      M.alloc α3 in
                                                    let* α5 : bool.t :=
                                                      M.call
                                                        (α2
                                                          (borrow lvl)
                                                          (borrow α4)) in
                                                    let* α6 : M.Val bool.t :=
                                                      M.alloc
                                                        (BinOp.Pure.and
                                                          α1
                                                          α5) in
                                                    let* α7 : bool.t :=
                                                      M.read (use α6) in
                                                    if α7 then
                                                      let* _ : M.Val unit :=
                                                        let* α0 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "Failed to update run: ") in
                                                        let* α1 :
                                                            M.Val
                                                              (array
                                                                (ref str.t)) :=
                                                          M.alloc [ α0 ] in
                                                        let* α2 :
                                                            core.fmt.rt.Argument.t :=
                                                          M.call
                                                            (core.fmt.rt.Argument.t::["new_display"]
                                                              (borrow
                                                                error_message)) in
                                                        let* α3 :
                                                            M.Val
                                                              (array
                                                                core.fmt.rt.Argument.t) :=
                                                          M.alloc [ α2 ] in
                                                        let* α4 :
                                                            core.fmt.Arguments.t :=
                                                          M.call
                                                            (core.fmt.Arguments.t::["new_v1"]
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α1))
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α3))) in
                                                        let* α5 : log.Level.t :=
                                                          M.read lvl in
                                                        let* α6 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants_api_communication::runs") in
                                                        let* α7 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants_api_communication::runs") in
                                                        let* α8 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants-api-communication/src/runs.rs") in
                                                        let* α9 :
                                                            M.Val
                                                              (((ref str.t)
                                                              *
                                                              (ref str.t))
                                                              *
                                                              (ref str.t)) :=
                                                          M.alloc
                                                            (α6, α7, α8) in
                                                        let* α10 : unit :=
                                                          M.call
                                                            (log.__private_api.log
                                                              α4
                                                              α5
                                                              (borrow α9)
                                                              ((Integer.of_Z
                                                                  144) :
                                                                u32.t)
                                                              core.option.Option.None) in
                                                        M.alloc α10 in
                                                      M.alloc tt
                                                    else
                                                      M.alloc tt in
                                                  let* α0 :
                                                      http.status.StatusCode.t :=
                                                    M.read
                                                      http.status.INTERNAL_SERVER_ERROR in
                                                  let* α1 :
                                                      alloc.string.String.t :=
                                                    M.read error_message in
                                                  M.alloc
                                                    (core.result.Result.Err
                                                      (α0, α1))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.run.RunObject.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)))
                                            ] in
                                        M.pure (use α0)
                                      end) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (axum.json.Json.t
                                              async_openai.types.run.RunObject.t)
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t)))
                                  ]
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.run.RunObject.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t async_openai.types.run.RunObject.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t async_openai.types.run.RunObject.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.run.RunObject.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn delete_run_handler(
    Path((thread_id, run_id)): Path<(String, String)>,
    State(app_state): State<AppState>,
) -> Result<JsonResponse<()>, (StatusCode, String)> {
    let result = delete_run(
        &app_state.pool,
        &thread_id,
        &run_id,
        &Uuid::default().to_string(),
    )
    .await;
    match result {
        Ok(_) => Ok(JsonResponse(())),
        Err(e) => {
            let error_message = e.to_string();
            error!("Failed to delete run: {}", error_message);
            Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
        }
    }
}
*)
Definition delete_run_handler
    (__arg0
      :
      axum.extract.path.Path.t (alloc.string.String.t * alloc.string.String.t))
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val
                  (axum.extract.path.Path.t
                    (alloc.string.String.t * alloc.string.String.t)) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t unit)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_, _) =>
                        let γ1_0 := Tuple.Access.left γ0_0 in
                        let γ1_1 := Tuple.Access.right γ0_0 in
                        let* thread_id := M.copy γ1_0 in
                        let* run_id := M.copy γ1_1 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* result :
                                    M.Val
                                      (core.result.Result.t
                                        unit
                                        sqlx_core.error.Error.t) :=
                                  let* α0 : _ -> M _ :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.future.into_future.IntoFuture.into_future
                                        (Self := _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      (ref
                                          (alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t))
                                        ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self :=
                                          alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α2 :
                                      ref
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t) :=
                                    M.call
                                      (α1
                                        (borrow
                                          (assistants_api_communication.models.AppState.Get_pool
                                            app_state))) in
                                  let* α3 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α4 : ref str.t :=
                                    M.call (α3 (borrow thread_id)) in
                                  let* α5 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α6 : ref str.t :=
                                    M.call (α5 (borrow run_id)) in
                                  let* α7 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α8 :
                                      (ref uuid.Uuid.t) ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      alloc.string.ToString.to_string
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α9 : M uuid.Uuid.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.default.Default.default
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α10 : uuid.Uuid.t := M.call α9 in
                                  let* α11 : M.Val uuid.Uuid.t := M.alloc α10 in
                                  let* α12 : alloc.string.String.t :=
                                    M.call (α8 (borrow α11)) in
                                  let* α13 : M.Val alloc.string.String.t :=
                                    M.alloc α12 in
                                  let* α14 : ref str.t :=
                                    M.call (α7 (borrow α13)) in
                                  let* α15 : _ :=
                                    M.call
                                      (assistants_core.runs.delete_run
                                        α2
                                        α4
                                        α6
                                        α14) in
                                  let* α16 : _ := M.call (α0 α15) in
                                  let* α17 : M.Val _ := M.alloc α16 in
                                  let* α18 :
                                      M.Val
                                        (core.result.Result.t
                                          unit
                                          sqlx_core.error.Error.t) :=
                                    match_operator
                                      α17
                                      [
                                        fun γ =>
                                          (let* __awaitee := M.copy γ in
                                          M.loop
                                            (let* _ : M.Val unit :=
                                              let* α0 :
                                                  (core.pin.Pin.t (mut_ref _))
                                                    ->
                                                    (mut_ref
                                                      core.task.wake.Context.t)
                                                    ->
                                                    M
                                                      (core.task.poll.Poll.t
                                                        _) :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.future.future.Future.poll
                                                    (Self := _)
                                                    (Trait := ℐ))) in
                                              let* α1 :
                                                  core.pin.Pin.t (mut_ref _) :=
                                                M.call
                                                  ((core.pin.Pin.t
                                                        (mut_ref
                                                          _))::["new_unchecked"]
                                                    (borrow_mut __awaitee)) in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read _task_context in
                                              let* α3 :
                                                  mut_ref
                                                    core.task.wake.Context.t :=
                                                M.call
                                                  (core.future.get_context
                                                    α2) in
                                              let* α4 :
                                                  core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      unit
                                                      sqlx_core.error.Error.t) :=
                                                M.call (α0 α1 α3) in
                                              let* α5 :
                                                  M.Val
                                                    (core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        unit
                                                        sqlx_core.error.Error.t)) :=
                                                M.alloc α4 in
                                              match_operator
                                                α5
                                                [
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Ready
                                                          _
                                                        =>
                                                      let γ0_0 :=
                                                        core.task.poll.Poll.Get_Ready_0
                                                          γ in
                                                      let* result :=
                                                        M.copy γ0_0 in
                                                      let* α0 : M.Val never.t :=
                                                        M.break in
                                                      let* α1 := M.read α0 in
                                                      let* α2 : unit :=
                                                        never_to_any α1 in
                                                      M.alloc α2
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit);
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Pending
                                                        =>
                                                      M.alloc tt
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit)
                                                ] in
                                            let* _ : M.Val unit :=
                                              let* α0 : M.Val unit :=
                                                M.alloc tt in
                                              let* α1 :
                                                  M.Val
                                                    core.future.ResumeTy.t :=
                                                yield α0 in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read α1 in
                                              assign _task_context α2 in
                                            M.alloc tt)) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                unit
                                                sqlx_core.error.Error.t))
                                      ] in
                                  M.copy α18 in
                                let* α0 :
                                    M.Val
                                      (core.result.Result.t
                                        (axum.json.Json.t unit)
                                        (http.status.StatusCode.t
                                        *
                                        alloc.string.String.t)) :=
                                  match_operator
                                    result
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Ok _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Ok_0 γ in
                                          M.alloc
                                            (core.result.Result.Ok
                                              (axum.json.Json.Build_t tt))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t unit)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)));
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Err _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Err_0 γ in
                                          let* e := M.copy γ0_0 in
                                          let* error_message :
                                              M.Val alloc.string.String.t :=
                                            let* α0 :
                                                (ref sqlx_core.error.Error.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self :=
                                                    sqlx_core.error.Error.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : alloc.string.String.t :=
                                              M.call (α0 (borrow e)) in
                                            M.alloc α1 in
                                          let* _ : M.Val unit :=
                                            let* lvl : M.Val log.Level.t :=
                                              M.alloc log.Level.Error in
                                            let* α0 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : bool.t :=
                                              M.call
                                                (α0
                                                  (borrow lvl)
                                                  (borrow
                                                    log.STATIC_MAX_LEVEL)) in
                                            let* α2 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α3 : log.LevelFilter.t :=
                                              M.call log.max_level in
                                            let* α4 : M.Val log.LevelFilter.t :=
                                              M.alloc α3 in
                                            let* α5 : bool.t :=
                                              M.call
                                                (α2 (borrow lvl) (borrow α4)) in
                                            let* α6 : M.Val bool.t :=
                                              M.alloc (BinOp.Pure.and α1 α5) in
                                            let* α7 : bool.t :=
                                              M.read (use α6) in
                                            if α7 then
                                              let* _ : M.Val unit :=
                                                let* α0 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "Failed to delete run: ") in
                                                let* α1 :
                                                    M.Val (array (ref str.t)) :=
                                                  M.alloc [ α0 ] in
                                                let* α2 :
                                                    core.fmt.rt.Argument.t :=
                                                  M.call
                                                    (core.fmt.rt.Argument.t::["new_display"]
                                                      (borrow error_message)) in
                                                let* α3 :
                                                    M.Val
                                                      (array
                                                        core.fmt.rt.Argument.t) :=
                                                  M.alloc [ α2 ] in
                                                let* α4 :
                                                    core.fmt.Arguments.t :=
                                                  M.call
                                                    (core.fmt.Arguments.t::["new_v1"]
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α1))
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α3))) in
                                                let* α5 : log.Level.t :=
                                                  M.read lvl in
                                                let* α6 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::runs") in
                                                let* α7 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::runs") in
                                                let* α8 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants-api-communication/src/runs.rs") in
                                                let* α9 :
                                                    M.Val
                                                      (((ref str.t)
                                                      *
                                                      (ref str.t))
                                                      *
                                                      (ref str.t)) :=
                                                  M.alloc (α6, α7, α8) in
                                                let* α10 : unit :=
                                                  M.call
                                                    (log.__private_api.log
                                                      α4
                                                      α5
                                                      (borrow α9)
                                                      ((Integer.of_Z 165) :
                                                        u32.t)
                                                      core.option.Option.None) in
                                                M.alloc α10 in
                                              M.alloc tt
                                            else
                                              M.alloc tt in
                                          let* α0 : http.status.StatusCode.t :=
                                            M.read
                                              http.status.INTERNAL_SERVER_ERROR in
                                          let* α1 : alloc.string.String.t :=
                                            M.read error_message in
                                          M.alloc
                                            (core.result.Result.Err (α0, α1))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t unit)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ] in
                                M.pure (use α0)
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t unit)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t unit)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t unit)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t unit)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn list_runs_handler(
    Path((thread_id,)): Path<(String,)>,
    State(app_state): State<AppState>,
) -> Result<JsonResponse<Vec<RunObject>>, (StatusCode, String)> {
    let runs = list_runs(&app_state.pool, &thread_id, &Uuid::default().to_string()).await;
    match runs {
        Ok(runs) => Ok(JsonResponse(runs.into_iter().map(|r| r.inner).collect())),
        Err(e) => {
            let error_message = e.to_string();
            error!("Failed to list runs: {}", error_message);
            Err((StatusCode::INTERNAL_SERVER_ERROR, error_message))
        }
    }
}
*)
Definition list_runs_handler
    (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t
                      (alloc.vec.Vec.t
                        async_openai.types.run.RunObject.t
                        alloc.alloc.Global.t))
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_) =>
                        let γ1_0 := γ0_0 in
                        let* thread_id := M.copy γ1_0 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* runs :
                                    M.Val
                                      (core.result.Result.t
                                        (alloc.vec.Vec.t
                                          assistants_core.models.Run.t
                                          alloc.alloc.Global.t)
                                        sqlx_core.error.Error.t) :=
                                  let* α0 : _ -> M _ :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.future.into_future.IntoFuture.into_future
                                        (Self := _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      (ref
                                          (alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t))
                                        ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self :=
                                          alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α2 :
                                      ref
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t) :=
                                    M.call
                                      (α1
                                        (borrow
                                          (assistants_api_communication.models.AppState.Get_pool
                                            app_state))) in
                                  let* α3 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α4 : ref str.t :=
                                    M.call (α3 (borrow thread_id)) in
                                  let* α5 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α6 :
                                      (ref uuid.Uuid.t) ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      alloc.string.ToString.to_string
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α7 : M uuid.Uuid.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.default.Default.default
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α8 : uuid.Uuid.t := M.call α7 in
                                  let* α9 : M.Val uuid.Uuid.t := M.alloc α8 in
                                  let* α10 : alloc.string.String.t :=
                                    M.call (α6 (borrow α9)) in
                                  let* α11 : M.Val alloc.string.String.t :=
                                    M.alloc α10 in
                                  let* α12 : ref str.t :=
                                    M.call (α5 (borrow α11)) in
                                  let* α13 : _ :=
                                    M.call
                                      (assistants_core.runs.list_runs
                                        α2
                                        α4
                                        α12) in
                                  let* α14 : _ := M.call (α0 α13) in
                                  let* α15 : M.Val _ := M.alloc α14 in
                                  let* α16 :
                                      M.Val
                                        (core.result.Result.t
                                          (alloc.vec.Vec.t
                                            assistants_core.models.Run.t
                                            alloc.alloc.Global.t)
                                          sqlx_core.error.Error.t) :=
                                    match_operator
                                      α15
                                      [
                                        fun γ =>
                                          (let* __awaitee := M.copy γ in
                                          M.loop
                                            (let* _ : M.Val unit :=
                                              let* α0 :
                                                  (core.pin.Pin.t (mut_ref _))
                                                    ->
                                                    (mut_ref
                                                      core.task.wake.Context.t)
                                                    ->
                                                    M
                                                      (core.task.poll.Poll.t
                                                        _) :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.future.future.Future.poll
                                                    (Self := _)
                                                    (Trait := ℐ))) in
                                              let* α1 :
                                                  core.pin.Pin.t (mut_ref _) :=
                                                M.call
                                                  ((core.pin.Pin.t
                                                        (mut_ref
                                                          _))::["new_unchecked"]
                                                    (borrow_mut __awaitee)) in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read _task_context in
                                              let* α3 :
                                                  mut_ref
                                                    core.task.wake.Context.t :=
                                                M.call
                                                  (core.future.get_context
                                                    α2) in
                                              let* α4 :
                                                  core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      (alloc.vec.Vec.t
                                                        assistants_core.models.Run.t
                                                        alloc.alloc.Global.t)
                                                      sqlx_core.error.Error.t) :=
                                                M.call (α0 α1 α3) in
                                              let* α5 :
                                                  M.Val
                                                    (core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        (alloc.vec.Vec.t
                                                          assistants_core.models.Run.t
                                                          alloc.alloc.Global.t)
                                                        sqlx_core.error.Error.t)) :=
                                                M.alloc α4 in
                                              match_operator
                                                α5
                                                [
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Ready
                                                          _
                                                        =>
                                                      let γ0_0 :=
                                                        core.task.poll.Poll.Get_Ready_0
                                                          γ in
                                                      let* result :=
                                                        M.copy γ0_0 in
                                                      let* α0 : M.Val never.t :=
                                                        M.break in
                                                      let* α1 := M.read α0 in
                                                      let* α2 : unit :=
                                                        never_to_any α1 in
                                                      M.alloc α2
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit);
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Pending
                                                        =>
                                                      M.alloc tt
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit)
                                                ] in
                                            let* _ : M.Val unit :=
                                              let* α0 : M.Val unit :=
                                                M.alloc tt in
                                              let* α1 :
                                                  M.Val
                                                    core.future.ResumeTy.t :=
                                                yield α0 in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read α1 in
                                              assign _task_context α2 in
                                            M.alloc tt)) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (alloc.vec.Vec.t
                                                  assistants_core.models.Run.t
                                                  alloc.alloc.Global.t)
                                                sqlx_core.error.Error.t))
                                      ] in
                                  M.copy α16 in
                                let* α0 :
                                    M.Val
                                      (core.result.Result.t
                                        (axum.json.Json.t
                                          (alloc.vec.Vec.t
                                            async_openai.types.run.RunObject.t
                                            alloc.alloc.Global.t))
                                        (http.status.StatusCode.t
                                        *
                                        alloc.string.String.t)) :=
                                  match_operator
                                    runs
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Ok _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Ok_0 γ in
                                          let* runs := M.copy γ0_0 in
                                          let* α0 :
                                              (core.iter.adapters.map.Map.t
                                                  (alloc.vec.into_iter.IntoIter.t
                                                    assistants_core.models.Run.t
                                                    alloc.alloc.Global.t)
                                                  (assistants_core.models.Run.t
                                                    ->
                                                    M
                                                      async_openai.types.run.RunObject.t))
                                                ->
                                                M
                                                  (alloc.vec.Vec.t
                                                    async_openai.types.run.RunObject.t
                                                    alloc.alloc.Global.t) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.iter.traits.iterator.Iterator.collect
                                                (Self :=
                                                  core.iter.adapters.map.Map.t
                                                    (alloc.vec.into_iter.IntoIter.t
                                                      assistants_core.models.Run.t
                                                      alloc.alloc.Global.t)
                                                    (assistants_core.models.Run.t
                                                      ->
                                                      M
                                                        async_openai.types.run.RunObject.t))
                                                (B :=
                                                  alloc.vec.Vec.t
                                                    async_openai.types.run.RunObject.t
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α1 :
                                              (alloc.vec.into_iter.IntoIter.t
                                                  assistants_core.models.Run.t
                                                  alloc.alloc.Global.t)
                                                ->
                                                (assistants_core.models.Run.t ->
                                                  M
                                                    async_openai.types.run.RunObject.t)
                                                ->
                                                M
                                                  (core.iter.adapters.map.Map.t
                                                    (alloc.vec.into_iter.IntoIter.t
                                                      assistants_core.models.Run.t
                                                      alloc.alloc.Global.t)
                                                    (assistants_core.models.Run.t
                                                      ->
                                                      M
                                                        async_openai.types.run.RunObject.t)) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.iter.traits.iterator.Iterator.map
                                                (Self :=
                                                  alloc.vec.into_iter.IntoIter.t
                                                    assistants_core.models.Run.t
                                                    alloc.alloc.Global.t)
                                                (B :=
                                                  async_openai.types.run.RunObject.t)
                                                (F :=
                                                  assistants_core.models.Run.t
                                                    ->
                                                    M
                                                      async_openai.types.run.RunObject.t)
                                                (Trait := ℐ))) in
                                          let* α2 :
                                              (alloc.vec.Vec.t
                                                  assistants_core.models.Run.t
                                                  alloc.alloc.Global.t)
                                                ->
                                                M _ :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.iter.traits.collect.IntoIterator.into_iter
                                                (Self :=
                                                  alloc.vec.Vec.t
                                                    assistants_core.models.Run.t
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α3 :
                                              alloc.vec.Vec.t
                                                assistants_core.models.Run.t
                                                alloc.alloc.Global.t :=
                                            M.read runs in
                                          let* α4 :
                                              alloc.vec.into_iter.IntoIter.t
                                                assistants_core.models.Run.t
                                                alloc.alloc.Global.t :=
                                            M.call (α2 α3) in
                                          let* α5 :
                                              core.iter.adapters.map.Map.t
                                                (alloc.vec.into_iter.IntoIter.t
                                                  assistants_core.models.Run.t
                                                  alloc.alloc.Global.t)
                                                (assistants_core.models.Run.t ->
                                                  M
                                                    async_openai.types.run.RunObject.t) :=
                                            M.call
                                              (α1
                                                α4
                                                (fun
                                                    (α0 :
                                                      assistants_core.models.Run.t) =>
                                                  (let* α0 := M.alloc α0 in
                                                  match_operator
                                                    α0
                                                    [
                                                      fun γ =>
                                                        (let* r := M.copy γ in
                                                        M.read
                                                          (assistants_core.models.Run.Get_inner
                                                            r)) :
                                                        M
                                                          async_openai.types.run.RunObject.t
                                                    ]) :
                                                  M
                                                    async_openai.types.run.RunObject.t)) in
                                          let* α6 :
                                              alloc.vec.Vec.t
                                                async_openai.types.run.RunObject.t
                                                alloc.alloc.Global.t :=
                                            M.call (α0 α5) in
                                          M.alloc
                                            (core.result.Result.Ok
                                              (axum.json.Json.Build_t α6))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                (alloc.vec.Vec.t
                                                  async_openai.types.run.RunObject.t
                                                  alloc.alloc.Global.t))
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)));
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Err _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Err_0 γ in
                                          let* e := M.copy γ0_0 in
                                          let* error_message :
                                              M.Val alloc.string.String.t :=
                                            let* α0 :
                                                (ref sqlx_core.error.Error.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self :=
                                                    sqlx_core.error.Error.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : alloc.string.String.t :=
                                              M.call (α0 (borrow e)) in
                                            M.alloc α1 in
                                          let* _ : M.Val unit :=
                                            let* lvl : M.Val log.Level.t :=
                                              M.alloc log.Level.Error in
                                            let* α0 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α1 : bool.t :=
                                              M.call
                                                (α0
                                                  (borrow lvl)
                                                  (borrow
                                                    log.STATIC_MAX_LEVEL)) in
                                            let* α2 :
                                                (ref log.Level.t) ->
                                                  (ref log.LevelFilter.t) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialOrd.le
                                                  (Self := log.Level.t)
                                                  (Rhs := log.LevelFilter.t)
                                                  (Trait := ℐ))) in
                                            let* α3 : log.LevelFilter.t :=
                                              M.call log.max_level in
                                            let* α4 : M.Val log.LevelFilter.t :=
                                              M.alloc α3 in
                                            let* α5 : bool.t :=
                                              M.call
                                                (α2 (borrow lvl) (borrow α4)) in
                                            let* α6 : M.Val bool.t :=
                                              M.alloc (BinOp.Pure.and α1 α5) in
                                            let* α7 : bool.t :=
                                              M.read (use α6) in
                                            if α7 then
                                              let* _ : M.Val unit :=
                                                let* α0 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "Failed to list runs: ") in
                                                let* α1 :
                                                    M.Val (array (ref str.t)) :=
                                                  M.alloc [ α0 ] in
                                                let* α2 :
                                                    core.fmt.rt.Argument.t :=
                                                  M.call
                                                    (core.fmt.rt.Argument.t::["new_display"]
                                                      (borrow error_message)) in
                                                let* α3 :
                                                    M.Val
                                                      (array
                                                        core.fmt.rt.Argument.t) :=
                                                  M.alloc [ α2 ] in
                                                let* α4 :
                                                    core.fmt.Arguments.t :=
                                                  M.call
                                                    (core.fmt.Arguments.t::["new_v1"]
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α1))
                                                      (pointer_coercion
                                                        "Unsize"
                                                        (borrow α3))) in
                                                let* α5 : log.Level.t :=
                                                  M.read lvl in
                                                let* α6 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::runs") in
                                                let* α7 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants_api_communication::runs") in
                                                let* α8 : ref str.t :=
                                                  M.read
                                                    (mk_str
                                                      "assistants-api-communication/src/runs.rs") in
                                                let* α9 :
                                                    M.Val
                                                      (((ref str.t)
                                                      *
                                                      (ref str.t))
                                                      *
                                                      (ref str.t)) :=
                                                  M.alloc (α6, α7, α8) in
                                                let* α10 : unit :=
                                                  M.call
                                                    (log.__private_api.log
                                                      α4
                                                      α5
                                                      (borrow α9)
                                                      ((Integer.of_Z 180) :
                                                        u32.t)
                                                      core.option.Option.None) in
                                                M.alloc α10 in
                                              M.alloc tt
                                            else
                                              M.alloc tt in
                                          let* α0 : http.status.StatusCode.t :=
                                            M.read
                                              http.status.INTERNAL_SERVER_ERROR in
                                          let* α1 : alloc.string.String.t :=
                                            M.read error_message in
                                          M.alloc
                                            (core.result.Result.Err (α0, α1))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                (alloc.vec.Vec.t
                                                  async_openai.types.run.RunObject.t
                                                  alloc.alloc.Global.t))
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ] in
                                M.pure (use α0)
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      (alloc.vec.Vec.t
                                        async_openai.types.run.RunObject.t
                                        alloc.alloc.Global.t))
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            (alloc.vec.Vec.t
                              async_openai.types.run.RunObject.t
                              alloc.alloc.Global.t))
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t
                  (alloc.vec.Vec.t
                    async_openai.types.run.RunObject.t
                    alloc.alloc.Global.t))
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t
            (alloc.vec.Vec.t
              async_openai.types.run.RunObject.t
              alloc.alloc.Global.t))
          (http.status.StatusCode.t * alloc.string.String.t))).

Module threads.
  (*
  pub async fn create_thread_handler(
      State(app_state): State<AppState>,
      thread: Option<Json<Value>>,
  ) -> Result<JsonResponse<ThreadObject>, (StatusCode, String)> {
      let thread = thread.unwrap_or_default();
      let thread_object = &Thread {
          inner: ThreadObject {
              id: Default::default(),
              created_at: 0,
              object: Default::default(),
              metadata: if let Some(object) = thread["metadata"].as_object() {
                  // This serves to communicate the inconsistency with the OpenAI API's metadata value length limit
                  let mut temp_map = HashMap::new();
                  for (k, v) in object {
                      match v.as_str() {
                          Some(str_value) => {
                              temp_map.insert(k.clone(), Value::String(str_value.to_string()));
                          }
                          None => {
                              return Err((
                                  StatusCode::BAD_REQUEST,
                                  format!("Metadata value for key '{}' is not a string. All metadata values must be strings.", k)
                              ));
                          }
                      }
                  }
                  Some(temp_map)
              } else {
                  None
              },
          },
          user_id: Uuid::default().to_string(),
      };
      // TODO: should infer user id from Authorization header
      let thread = create_thread(&app_state.pool, &thread_object).await;
      match thread {
          Ok(thread) => Ok(JsonResponse(thread.inner)),
          Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
      }
  }
  *)
  Definition create_thread_handler
      (__arg0
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      (thread
        :
        core.option.Option.t (axum.json.Json.t serde_json.value.Value.t))
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* thread := M.alloc thread in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val
                    (axum.extract.state.State.t
                      assistants_api_communication.models.AppState.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t
                        async_openai.types.thread.ThreadObject.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.state.State.Build_t _ =>
                        let γ0_0 := axum.extract.state.State.Get_0 γ in
                        let* app_state := M.copy γ0_0 in
                        let* thread :
                            M.Val
                              (core.option.Option.t
                                (axum.json.Json.t serde_json.value.Value.t)) :=
                          M.copy thread in
                        let* thread :
                            M.Val (axum.json.Json.t serde_json.value.Value.t) :=
                          let* α0 :
                              core.option.Option.t
                                (axum.json.Json.t serde_json.value.Value.t) :=
                            M.read thread in
                          let* α1 : axum.json.Json.t serde_json.value.Value.t :=
                            M.call
                              ((core.option.Option.t
                                    (axum.json.Json.t
                                      serde_json.value.Value.t))::["unwrap_or_default"]
                                α0) in
                          M.alloc α1 in
                        let* thread_object :
                            M.Val (ref assistants_core.models.Thread.t) :=
                          let* α0 : M alloc.string.String.t :=
                            ltac:(M.get_method (fun ℐ =>
                              core.default.Default.default
                                (Self := alloc.string.String.t)
                                (Trait := ℐ))) in
                          let* α1 : alloc.string.String.t := M.call α0 in
                          let* α2 : M alloc.string.String.t :=
                            ltac:(M.get_method (fun ℐ =>
                              core.default.Default.default
                                (Self := alloc.string.String.t)
                                (Trait := ℐ))) in
                          let* α3 : alloc.string.String.t := M.call α2 in
                          let* α4 :
                              (ref serde_json.value.Value.t) ->
                                (ref str.t) ->
                                M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.index.Index.index
                                (Self := serde_json.value.Value.t)
                                (Idx := ref str.t)
                                (Trait := ℐ))) in
                          let* α5 :
                              (ref (axum.json.Json.t serde_json.value.Value.t))
                                ->
                                M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.deref.Deref.deref
                                (Self :=
                                  axum.json.Json.t serde_json.value.Value.t)
                                (Trait := ℐ))) in
                          let* α6 : ref serde_json.value.Value.t :=
                            M.call (α5 (borrow thread)) in
                          let* α7 : ref str.t := M.read (mk_str "metadata") in
                          let* α8 : ref serde_json.value.Value.t :=
                            M.call (α4 α6 α7) in
                          let* α9 :
                              core.option.Option.t
                                (ref
                                  (serde_json.map.Map.t
                                    alloc.string.String.t
                                    serde_json.value.Value.t)) :=
                            M.call
                              (serde_json.value.Value.t::["as_object"] α8) in
                          let* α10 :
                              M.Val
                                (core.option.Option.t
                                  (ref
                                    (serde_json.map.Map.t
                                      alloc.string.String.t
                                      serde_json.value.Value.t))) :=
                            M.alloc α9 in
                          let* α11 :
                              M.Val
                                (core.option.Option.t
                                  (std.collections.hash.map.HashMap.t
                                    alloc.string.String.t
                                    serde_json.value.Value.t
                                    std.hash.random.RandomState.t)) :=
                            match_operator
                              α10
                              [
                                fun γ =>
                                  (let* α0 := M.read γ in
                                  match α0 with
                                  | core.option.Option.Some _ =>
                                    let γ0_0 :=
                                      core.option.Option.Get_Some_0 γ in
                                    let* object := M.copy γ0_0 in
                                    let* temp_map :
                                        M.Val
                                          (std.collections.hash.map.HashMap.t
                                            alloc.string.String.t
                                            serde_json.value.Value.t
                                            std.hash.random.RandomState.t) :=
                                      let* α0 :
                                          std.collections.hash.map.HashMap.t
                                            alloc.string.String.t
                                            serde_json.value.Value.t
                                            std.hash.random.RandomState.t :=
                                        M.call
                                          (std.collections.hash.map.HashMap.t
                                              alloc.string.String.t
                                              serde_json.value.Value.t
                                              std.hash.random.RandomState.t)::["new"] in
                                      M.alloc α0 in
                                    let* _ : M.Val unit :=
                                      let* α0 :
                                          (ref
                                              (serde_json.map.Map.t
                                                alloc.string.String.t
                                                serde_json.value.Value.t))
                                            ->
                                            M _ :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.iter.traits.collect.IntoIterator.into_iter
                                            (Self :=
                                              ref
                                                (serde_json.map.Map.t
                                                  alloc.string.String.t
                                                  serde_json.value.Value.t))
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          ref
                                            (serde_json.map.Map.t
                                              alloc.string.String.t
                                              serde_json.value.Value.t) :=
                                        M.read object in
                                      let* α2 : serde_json.map.Iter.t :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val serde_json.map.Iter.t :=
                                        M.alloc α2 in
                                      let* α4 : M.Val unit :=
                                        match_operator
                                          α3
                                          [
                                            fun γ =>
                                              (let* iter := M.copy γ in
                                              M.loop
                                                (let* _ : M.Val unit :=
                                                  let* α0 :
                                                      (mut_ref
                                                          serde_json.map.Iter.t)
                                                        ->
                                                        M
                                                          (core.option.Option.t
                                                            _) :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      core.iter.traits.iterator.Iterator.next
                                                        (Self :=
                                                          serde_json.map.Iter.t)
                                                        (Trait := ℐ))) in
                                                  let* α1 :
                                                      core.option.Option.t
                                                        ((ref
                                                          alloc.string.String.t)
                                                        *
                                                        (ref
                                                          serde_json.value.Value.t)) :=
                                                    M.call
                                                      (α0 (borrow_mut iter)) in
                                                  let* α2 :
                                                      M.Val
                                                        (core.option.Option.t
                                                          ((ref
                                                            alloc.string.String.t)
                                                          *
                                                          (ref
                                                            serde_json.value.Value.t))) :=
                                                    M.alloc α1 in
                                                  match_operator
                                                    α2
                                                    [
                                                      fun γ =>
                                                        (let* α0 := M.read γ in
                                                        match α0 with
                                                        |
                                                            core.option.Option.None
                                                            =>
                                                          let* α0 :
                                                              M.Val never.t :=
                                                            M.break in
                                                          let* α1 :=
                                                            M.read α0 in
                                                          let* α2 : unit :=
                                                            never_to_any α1 in
                                                          M.alloc α2
                                                        | _ => M.break_match
                                                        end) :
                                                        M (M.Val unit);
                                                      fun γ =>
                                                        (let* α0 := M.read γ in
                                                        match α0 with
                                                        |
                                                            core.option.Option.Some
                                                              _
                                                            =>
                                                          let γ0_0 :=
                                                            core.option.Option.Get_Some_0
                                                              γ in
                                                          let* α0 :=
                                                            M.read γ0_0 in
                                                          match α0 with
                                                          | (_, _) =>
                                                            let γ1_0 :=
                                                              Tuple.Access.left
                                                                γ0_0 in
                                                            let γ1_1 :=
                                                              Tuple.Access.right
                                                                γ0_0 in
                                                            let* k :=
                                                              M.copy γ1_0 in
                                                            let* v :=
                                                              M.copy γ1_1 in
                                                            let* α0 :
                                                                ref
                                                                  serde_json.value.Value.t :=
                                                              M.read v in
                                                            let* α1 :
                                                                core.option.Option.t
                                                                  (ref str.t) :=
                                                              M.call
                                                                (serde_json.value.Value.t::["as_str"]
                                                                  α0) in
                                                            let* α2 :
                                                                M.Val
                                                                  (core.option.Option.t
                                                                    (ref
                                                                      str.t)) :=
                                                              M.alloc α1 in
                                                            match_operator
                                                              α2
                                                              [
                                                                fun γ =>
                                                                  (let* α0 :=
                                                                    M.read γ in
                                                                  match α0 with
                                                                  |
                                                                      core.option.Option.Some
                                                                        _
                                                                      =>
                                                                    let γ0_0 :=
                                                                      core.option.Option.Get_Some_0
                                                                        γ in
                                                                    let*
                                                                          str_value :=
                                                                      M.copy
                                                                        γ0_0 in
                                                                    let* _ :
                                                                        M.Val
                                                                          (core.option.Option.t
                                                                            serde_json.value.Value.t) :=
                                                                      let* α0 :
                                                                          (ref
                                                                              alloc.string.String.t)
                                                                            ->
                                                                            M
                                                                              alloc.string.String.t :=
                                                                        ltac:(M.get_method (fun ℐ =>
                                                                          core.clone.Clone.clone
                                                                            (Self :=
                                                                              alloc.string.String.t)
                                                                            (Trait := ℐ))) in
                                                                      let* α1 :
                                                                          ref
                                                                            alloc.string.String.t :=
                                                                        M.read
                                                                          k in
                                                                      let* α2 :
                                                                          alloc.string.String.t :=
                                                                        M.call
                                                                          (α0
                                                                            α1) in
                                                                      let* α3 :
                                                                          (ref
                                                                              str.t)
                                                                            ->
                                                                            M
                                                                              alloc.string.String.t :=
                                                                        ltac:(M.get_method (fun ℐ =>
                                                                          alloc.string.ToString.to_string
                                                                            (Self :=
                                                                              str.t)
                                                                            (Trait := ℐ))) in
                                                                      let* α4 :
                                                                          ref
                                                                            str.t :=
                                                                        M.read
                                                                          str_value in
                                                                      let* α5 :
                                                                          alloc.string.String.t :=
                                                                        M.call
                                                                          (α3
                                                                            α4) in
                                                                      let* α6 :
                                                                          core.option.Option.t
                                                                            serde_json.value.Value.t :=
                                                                        M.call
                                                                          ((std.collections.hash.map.HashMap.t
                                                                                alloc.string.String.t
                                                                                serde_json.value.Value.t
                                                                                std.hash.random.RandomState.t)::["insert"]
                                                                            (borrow_mut
                                                                              temp_map)
                                                                            α2
                                                                            (serde_json.value.Value.String
                                                                              α5)) in
                                                                      M.alloc
                                                                        α6 in
                                                                    M.alloc tt
                                                                  | _ =>
                                                                    M.break_match
                                                                  end) :
                                                                  M
                                                                    (M.Val
                                                                      unit);
                                                                fun γ =>
                                                                  (let* α0 :=
                                                                    M.read γ in
                                                                  match α0 with
                                                                  |
                                                                      core.option.Option.None
                                                                      =>
                                                                    let* α0 :
                                                                        http.status.StatusCode.t :=
                                                                      M.read
                                                                        http.status.BAD_REQUEST in
                                                                    let* res :
                                                                        M.Val
                                                                          alloc.string.String.t :=
                                                                      let* α0 :
                                                                          ref
                                                                            str.t :=
                                                                        M.read
                                                                          (mk_str
                                                                            "Metadata value for key '") in
                                                                      let* α1 :
                                                                          ref
                                                                            str.t :=
                                                                        M.read
                                                                          (mk_str
                                                                            "' is not a string. All metadata values must be strings.") in
                                                                      let* α2 :
                                                                          M.Val
                                                                            (array
                                                                              (ref
                                                                                str.t)) :=
                                                                        M.alloc
                                                                          [
                                                                            α0;
                                                                            α1
                                                                          ] in
                                                                      let* α3 :
                                                                          core.fmt.rt.Argument.t :=
                                                                        M.call
                                                                          (core.fmt.rt.Argument.t::["new_display"]
                                                                            (borrow
                                                                              k)) in
                                                                      let* α4 :
                                                                          M.Val
                                                                            (array
                                                                              core.fmt.rt.Argument.t) :=
                                                                        M.alloc
                                                                          [ α3
                                                                          ] in
                                                                      let* α5 :
                                                                          core.fmt.Arguments.t :=
                                                                        M.call
                                                                          (core.fmt.Arguments.t::["new_v1"]
                                                                            (pointer_coercion
                                                                              "Unsize"
                                                                              (borrow
                                                                                α2))
                                                                            (pointer_coercion
                                                                              "Unsize"
                                                                              (borrow
                                                                                α4))) in
                                                                      let* α6 :
                                                                          alloc.string.String.t :=
                                                                        M.call
                                                                          (alloc.fmt.format
                                                                            α5) in
                                                                      M.alloc
                                                                        α6 in
                                                                    let* α1 :
                                                                        alloc.string.String.t :=
                                                                      M.read
                                                                        res in
                                                                    let* α2 :
                                                                        M.Val
                                                                          never.t :=
                                                                      return_
                                                                        (core.result.Result.Err
                                                                          (α0,
                                                                            α1)) in
                                                                    let* α3 :=
                                                                      M.read
                                                                        α2 in
                                                                    let* α4 :
                                                                        unit :=
                                                                      never_to_any
                                                                        α3 in
                                                                    M.alloc α4
                                                                  | _ =>
                                                                    M.break_match
                                                                  end) :
                                                                  M (M.Val unit)
                                                              ]
                                                          end
                                                        | _ => M.break_match
                                                        end) :
                                                        M (M.Val unit)
                                                    ] in
                                                M.alloc tt)) :
                                              M (M.Val unit)
                                          ] in
                                      M.pure (use α4) in
                                    let* α0 :
                                        std.collections.hash.map.HashMap.t
                                          alloc.string.String.t
                                          serde_json.value.Value.t
                                          std.hash.random.RandomState.t :=
                                      M.read temp_map in
                                    M.alloc (core.option.Option.Some α0)
                                  | _ => M.break_match
                                  end) :
                                  M
                                    (M.Val
                                      (core.option.Option.t
                                        (std.collections.hash.map.HashMap.t
                                          alloc.string.String.t
                                          serde_json.value.Value.t
                                          std.hash.random.RandomState.t)));
                                fun γ =>
                                  (M.alloc core.option.Option.None) :
                                  M
                                    (M.Val
                                      (core.option.Option.t
                                        (std.collections.hash.map.HashMap.t
                                          alloc.string.String.t
                                          serde_json.value.Value.t
                                          std.hash.random.RandomState.t)))
                              ] in
                          let* α12 :
                              core.option.Option.t
                                (std.collections.hash.map.HashMap.t
                                  alloc.string.String.t
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t) :=
                            M.read α11 in
                          let* α13 :
                              (ref uuid.Uuid.t) -> M alloc.string.String.t :=
                            ltac:(M.get_method (fun ℐ =>
                              alloc.string.ToString.to_string
                                (Self := uuid.Uuid.t)
                                (Trait := ℐ))) in
                          let* α14 : M uuid.Uuid.t :=
                            ltac:(M.get_method (fun ℐ =>
                              core.default.Default.default
                                (Self := uuid.Uuid.t)
                                (Trait := ℐ))) in
                          let* α15 : uuid.Uuid.t := M.call α14 in
                          let* α16 : M.Val uuid.Uuid.t := M.alloc α15 in
                          let* α17 : alloc.string.String.t :=
                            M.call (α13 (borrow α16)) in
                          let* α18 : M.Val assistants_core.models.Thread.t :=
                            M.alloc
                              {|
                                assistants_core.models.Thread.inner :=
                                  {|
                                    async_openai.types.thread.ThreadObject.id :=
                                      α1;
                                    async_openai.types.thread.ThreadObject.created_at :=
                                      (Integer.of_Z 0) : i32.t;
                                    async_openai.types.thread.ThreadObject.object :=
                                      α3;
                                    async_openai.types.thread.ThreadObject.metadata :=
                                      α12;
                                  |};
                                assistants_core.models.Thread.user_id := α17;
                              |} in
                          M.alloc (borrow α18) in
                        let* thread :
                            M.Val
                              (core.result.Result.t
                                assistants_core.models.Thread.t
                                (alloc.boxed.Box.t
                                  (dyn [core.error.Error.Trait])
                                  alloc.alloc.Global.t)) :=
                          let* α0 : _ -> M _ :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.into_future.IntoFuture.into_future
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 :
                              (ref
                                  (alloc.sync.Arc.t
                                    (sqlx_core.pool.Pool.t
                                      sqlx_postgres.database.Postgres.t)
                                    alloc.alloc.Global.t))
                                ->
                                M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.deref.Deref.deref
                                (Self :=
                                  alloc.sync.Arc.t
                                    (sqlx_core.pool.Pool.t
                                      sqlx_postgres.database.Postgres.t)
                                    alloc.alloc.Global.t)
                                (Trait := ℐ))) in
                          let* α2 :
                              ref
                                (sqlx_core.pool.Pool.t
                                  sqlx_postgres.database.Postgres.t) :=
                            M.call
                              (α1
                                (borrow
                                  (assistants_api_communication.models.AppState.Get_pool
                                    app_state))) in
                          let* α3 : ref assistants_core.models.Thread.t :=
                            M.read thread_object in
                          let* α4 : _ :=
                            M.call
                              (assistants_core.threads.create_thread α2 α3) in
                          let* α5 : _ := M.call (α0 α4) in
                          let* α6 : M.Val _ := M.alloc α5 in
                          let* α7 :
                              M.Val
                                (core.result.Result.t
                                  assistants_core.models.Thread.t
                                  (alloc.boxed.Box.t
                                    (dyn [core.error.Error.Trait])
                                    alloc.alloc.Global.t)) :=
                            match_operator
                              α6
                              [
                                fun γ =>
                                  (let* __awaitee := M.copy γ in
                                  M.loop
                                    (let* _ : M.Val unit :=
                                      let* α0 :
                                          (core.pin.Pin.t (mut_ref _)) ->
                                            (mut_ref core.task.wake.Context.t)
                                            ->
                                            M (core.task.poll.Poll.t _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.future.future.Future.poll
                                            (Self := _)
                                            (Trait := ℐ))) in
                                      let* α1 : core.pin.Pin.t (mut_ref _) :=
                                        M.call
                                          ((core.pin.Pin.t
                                                (mut_ref _))::["new_unchecked"]
                                            (borrow_mut __awaitee)) in
                                      let* α2 : core.future.ResumeTy.t :=
                                        M.read _task_context in
                                      let* α3 :
                                          mut_ref core.task.wake.Context.t :=
                                        M.call (core.future.get_context α2) in
                                      let* α4 :
                                          core.task.poll.Poll.t
                                            (core.result.Result.t
                                              assistants_core.models.Thread.t
                                              (alloc.boxed.Box.t
                                                (dyn [core.error.Error.Trait])
                                                alloc.alloc.Global.t)) :=
                                        M.call (α0 α1 α3) in
                                      let* α5 :
                                          M.Val
                                            (core.task.poll.Poll.t
                                              (core.result.Result.t
                                                assistants_core.models.Thread.t
                                                (alloc.boxed.Box.t
                                                  (dyn [core.error.Error.Trait])
                                                  alloc.alloc.Global.t))) :=
                                        M.alloc α4 in
                                      match_operator
                                        α5
                                        [
                                          fun γ =>
                                            (let* α0 := M.read γ in
                                            match α0 with
                                            | core.task.poll.Poll.Ready _ =>
                                              let γ0_0 :=
                                                core.task.poll.Poll.Get_Ready_0
                                                  γ in
                                              let* result := M.copy γ0_0 in
                                              let* α0 : M.Val never.t :=
                                                M.break in
                                              let* α1 := M.read α0 in
                                              let* α2 : unit :=
                                                never_to_any α1 in
                                              M.alloc α2
                                            | _ => M.break_match
                                            end) :
                                            M (M.Val unit);
                                          fun γ =>
                                            (let* α0 := M.read γ in
                                            match α0 with
                                            | core.task.poll.Poll.Pending =>
                                              M.alloc tt
                                            | _ => M.break_match
                                            end) :
                                            M (M.Val unit)
                                        ] in
                                    let* _ : M.Val unit :=
                                      let* α0 : M.Val unit := M.alloc tt in
                                      let* α1 : M.Val core.future.ResumeTy.t :=
                                        yield α0 in
                                      let* α2 : core.future.ResumeTy.t :=
                                        M.read α1 in
                                      assign _task_context α2 in
                                    M.alloc tt)) :
                                  M
                                    (M.Val
                                      (core.result.Result.t
                                        assistants_core.models.Thread.t
                                        (alloc.boxed.Box.t
                                          (dyn [core.error.Error.Trait])
                                          alloc.alloc.Global.t)))
                              ] in
                          M.copy α7 in
                        let* α0 :
                            M.Val
                              (core.result.Result.t
                                (axum.json.Json.t
                                  async_openai.types.thread.ThreadObject.t)
                                (http.status.StatusCode.t
                                *
                                alloc.string.String.t)) :=
                          match_operator
                            thread
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.result.Result.Ok _ =>
                                  let γ0_0 := core.result.Result.Get_Ok_0 γ in
                                  let* thread := M.copy γ0_0 in
                                  let* α0 :
                                      async_openai.types.thread.ThreadObject.t :=
                                    M.read
                                      (assistants_core.models.Thread.Get_inner
                                        thread) in
                                  M.alloc
                                    (core.result.Result.Ok
                                      (axum.json.Json.Build_t α0))
                                | _ => M.break_match
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.thread.ThreadObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)));
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.result.Result.Err _ =>
                                  let γ0_0 := core.result.Result.Get_Err_0 γ in
                                  let* e := M.copy γ0_0 in
                                  let* α0 : http.status.StatusCode.t :=
                                    M.read http.status.INTERNAL_SERVER_ERROR in
                                  let* α1 :
                                      (ref
                                          (alloc.boxed.Box.t
                                            (dyn [core.error.Error.Trait])
                                            alloc.alloc.Global.t))
                                        ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      alloc.string.ToString.to_string
                                        (Self :=
                                          alloc.boxed.Box.t
                                            (dyn [core.error.Error.Trait])
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α2 : alloc.string.String.t :=
                                    M.call (α1 (borrow e)) in
                                  M.alloc (core.result.Result.Err (α0, α2))
                                | _ => M.break_match
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.thread.ThreadObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ] in
                        M.pure (use α0)
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.thread.ThreadObject.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn get_thread_handler(
      Path((thread_id,)): Path<(String,)>,
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<ThreadObject>, (StatusCode, String)> {
      let thread = get_thread(&app_state.pool, &thread_id, &Uuid::default().to_string()).await;
      match thread {
          Ok(thread) => Ok(JsonResponse(thread.inner)),
          Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
      }
  }
  *)
  Definition get_thread_handler
      (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t
                        async_openai.types.thread.ThreadObject.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_) =>
                          let γ1_0 := γ0_0 in
                          let* thread_id := M.copy γ1_0 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* thread :
                                      M.Val
                                        (core.result.Result.t
                                          assistants_core.models.Thread.t
                                          sqlx_core.error.Error.t) :=
                                    let* α0 : _ -> M _ :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.future.into_future.IntoFuture.into_future
                                          (Self := _)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        (ref
                                            (alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t))
                                          ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self :=
                                            alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ))) in
                                    let* α2 :
                                        ref
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t) :=
                                      M.call
                                        (α1
                                          (borrow
                                            (assistants_api_communication.models.AppState.Get_pool
                                              app_state))) in
                                    let* α3 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α4 : ref str.t :=
                                      M.call (α3 (borrow thread_id)) in
                                    let* α5 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α6 :
                                        (ref uuid.Uuid.t) ->
                                          M alloc.string.String.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        alloc.string.ToString.to_string
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α7 : M uuid.Uuid.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.default.Default.default
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α8 : uuid.Uuid.t := M.call α7 in
                                    let* α9 : M.Val uuid.Uuid.t := M.alloc α8 in
                                    let* α10 : alloc.string.String.t :=
                                      M.call (α6 (borrow α9)) in
                                    let* α11 : M.Val alloc.string.String.t :=
                                      M.alloc α10 in
                                    let* α12 : ref str.t :=
                                      M.call (α5 (borrow α11)) in
                                    let* α13 : _ :=
                                      M.call
                                        (assistants_core.threads.get_thread
                                          α2
                                          α4
                                          α12) in
                                    let* α14 : _ := M.call (α0 α13) in
                                    let* α15 : M.Val _ := M.alloc α14 in
                                    let* α16 :
                                        M.Val
                                          (core.result.Result.t
                                            assistants_core.models.Thread.t
                                            sqlx_core.error.Error.t) :=
                                      match_operator
                                        α15
                                        [
                                          fun γ =>
                                            (let* __awaitee := M.copy γ in
                                            M.loop
                                              (let* _ : M.Val unit :=
                                                let* α0 :
                                                    (core.pin.Pin.t (mut_ref _))
                                                      ->
                                                      (mut_ref
                                                        core.task.wake.Context.t)
                                                      ->
                                                      M
                                                        (core.task.poll.Poll.t
                                                          _) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.future.future.Future.poll
                                                      (Self := _)
                                                      (Trait := ℐ))) in
                                                let* α1 :
                                                    core.pin.Pin.t
                                                      (mut_ref _) :=
                                                  M.call
                                                    ((core.pin.Pin.t
                                                          (mut_ref
                                                            _))::["new_unchecked"]
                                                      (borrow_mut __awaitee)) in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read _task_context in
                                                let* α3 :
                                                    mut_ref
                                                      core.task.wake.Context.t :=
                                                  M.call
                                                    (core.future.get_context
                                                      α2) in
                                                let* α4 :
                                                    core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        assistants_core.models.Thread.t
                                                        sqlx_core.error.Error.t) :=
                                                  M.call (α0 α1 α3) in
                                                let* α5 :
                                                    M.Val
                                                      (core.task.poll.Poll.t
                                                        (core.result.Result.t
                                                          assistants_core.models.Thread.t
                                                          sqlx_core.error.Error.t)) :=
                                                  M.alloc α4 in
                                                match_operator
                                                  α5
                                                  [
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Ready
                                                            _
                                                          =>
                                                        let γ0_0 :=
                                                          core.task.poll.Poll.Get_Ready_0
                                                            γ in
                                                        let* result :=
                                                          M.copy γ0_0 in
                                                        let* α0 :
                                                            M.Val never.t :=
                                                          M.break in
                                                        let* α1 := M.read α0 in
                                                        let* α2 : unit :=
                                                          never_to_any α1 in
                                                        M.alloc α2
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit);
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Pending
                                                          =>
                                                        M.alloc tt
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit)
                                                  ] in
                                              let* _ : M.Val unit :=
                                                let* α0 : M.Val unit :=
                                                  M.alloc tt in
                                                let* α1 :
                                                    M.Val
                                                      core.future.ResumeTy.t :=
                                                  yield α0 in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read α1 in
                                                assign _task_context α2 in
                                              M.alloc tt)) :
                                            M
                                              (M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Thread.t
                                                  sqlx_core.error.Error.t))
                                        ] in
                                    M.copy α16 in
                                  let* α0 :
                                      M.Val
                                        (core.result.Result.t
                                          (axum.json.Json.t
                                            async_openai.types.thread.ThreadObject.t)
                                          (http.status.StatusCode.t
                                          *
                                          alloc.string.String.t)) :=
                                    match_operator
                                      thread
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Ok _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Ok_0 γ in
                                            let* thread := M.copy γ0_0 in
                                            let* α0 :
                                                async_openai.types.thread.ThreadObject.t :=
                                              M.read
                                                (assistants_core.models.Thread.Get_inner
                                                  thread) in
                                            M.alloc
                                              (core.result.Result.Ok
                                                (axum.json.Json.Build_t α0))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.thread.ThreadObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)));
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Err _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Err_0 γ in
                                            let* e := M.copy γ0_0 in
                                            let* α0 :
                                                http.status.StatusCode.t :=
                                              M.read
                                                http.status.INTERNAL_SERVER_ERROR in
                                            let* α1 :
                                                (ref sqlx_core.error.Error.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self :=
                                                    sqlx_core.error.Error.t)
                                                  (Trait := ℐ))) in
                                            let* α2 : alloc.string.String.t :=
                                              M.call (α1 (borrow e)) in
                                            M.alloc
                                              (core.result.Result.Err (α0, α2))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.thread.ThreadObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)))
                                      ] in
                                  M.pure (use α0)
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.thread.ThreadObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.thread.ThreadObject.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn list_threads_handler(
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<Vec<ThreadObject>>, (StatusCode, String)> {
      let threads = list_threads(&app_state.pool, &Uuid::default().to_string()).await;
      match threads {
          Ok(threads) => Ok(JsonResponse(threads.into_iter().map(|t| t.inner).collect())),
          Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
      }
  }
  *)
  Definition list_threads_handler
      (__arg0
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val
                    (axum.extract.state.State.t
                      assistants_api_communication.models.AppState.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t
                        (alloc.vec.Vec.t
                          async_openai.types.thread.ThreadObject.t
                          alloc.alloc.Global.t))
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.state.State.Build_t _ =>
                        let γ0_0 := axum.extract.state.State.Get_0 γ in
                        let* app_state := M.copy γ0_0 in
                        let* threads :
                            M.Val
                              (core.result.Result.t
                                (alloc.vec.Vec.t
                                  assistants_core.models.Thread.t
                                  alloc.alloc.Global.t)
                                (alloc.boxed.Box.t
                                  (dyn [core.error.Error.Trait])
                                  alloc.alloc.Global.t)) :=
                          let* α0 : _ -> M _ :=
                            ltac:(M.get_method (fun ℐ =>
                              core.future.into_future.IntoFuture.into_future
                                (Self := _)
                                (Trait := ℐ))) in
                          let* α1 :
                              (ref
                                  (alloc.sync.Arc.t
                                    (sqlx_core.pool.Pool.t
                                      sqlx_postgres.database.Postgres.t)
                                    alloc.alloc.Global.t))
                                ->
                                M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.deref.Deref.deref
                                (Self :=
                                  alloc.sync.Arc.t
                                    (sqlx_core.pool.Pool.t
                                      sqlx_postgres.database.Postgres.t)
                                    alloc.alloc.Global.t)
                                (Trait := ℐ))) in
                          let* α2 :
                              ref
                                (sqlx_core.pool.Pool.t
                                  sqlx_postgres.database.Postgres.t) :=
                            M.call
                              (α1
                                (borrow
                                  (assistants_api_communication.models.AppState.Get_pool
                                    app_state))) in
                          let* α3 : (ref alloc.string.String.t) -> M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.deref.Deref.deref
                                (Self := alloc.string.String.t)
                                (Trait := ℐ))) in
                          let* α4 :
                              (ref uuid.Uuid.t) -> M alloc.string.String.t :=
                            ltac:(M.get_method (fun ℐ =>
                              alloc.string.ToString.to_string
                                (Self := uuid.Uuid.t)
                                (Trait := ℐ))) in
                          let* α5 : M uuid.Uuid.t :=
                            ltac:(M.get_method (fun ℐ =>
                              core.default.Default.default
                                (Self := uuid.Uuid.t)
                                (Trait := ℐ))) in
                          let* α6 : uuid.Uuid.t := M.call α5 in
                          let* α7 : M.Val uuid.Uuid.t := M.alloc α6 in
                          let* α8 : alloc.string.String.t :=
                            M.call (α4 (borrow α7)) in
                          let* α9 : M.Val alloc.string.String.t := M.alloc α8 in
                          let* α10 : ref str.t := M.call (α3 (borrow α9)) in
                          let* α11 : _ :=
                            M.call
                              (assistants_core.threads.list_threads α2 α10) in
                          let* α12 : _ := M.call (α0 α11) in
                          let* α13 : M.Val _ := M.alloc α12 in
                          let* α14 :
                              M.Val
                                (core.result.Result.t
                                  (alloc.vec.Vec.t
                                    assistants_core.models.Thread.t
                                    alloc.alloc.Global.t)
                                  (alloc.boxed.Box.t
                                    (dyn [core.error.Error.Trait])
                                    alloc.alloc.Global.t)) :=
                            match_operator
                              α13
                              [
                                fun γ =>
                                  (let* __awaitee := M.copy γ in
                                  M.loop
                                    (let* _ : M.Val unit :=
                                      let* α0 :
                                          (core.pin.Pin.t (mut_ref _)) ->
                                            (mut_ref core.task.wake.Context.t)
                                            ->
                                            M (core.task.poll.Poll.t _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.future.future.Future.poll
                                            (Self := _)
                                            (Trait := ℐ))) in
                                      let* α1 : core.pin.Pin.t (mut_ref _) :=
                                        M.call
                                          ((core.pin.Pin.t
                                                (mut_ref _))::["new_unchecked"]
                                            (borrow_mut __awaitee)) in
                                      let* α2 : core.future.ResumeTy.t :=
                                        M.read _task_context in
                                      let* α3 :
                                          mut_ref core.task.wake.Context.t :=
                                        M.call (core.future.get_context α2) in
                                      let* α4 :
                                          core.task.poll.Poll.t
                                            (core.result.Result.t
                                              (alloc.vec.Vec.t
                                                assistants_core.models.Thread.t
                                                alloc.alloc.Global.t)
                                              (alloc.boxed.Box.t
                                                (dyn [core.error.Error.Trait])
                                                alloc.alloc.Global.t)) :=
                                        M.call (α0 α1 α3) in
                                      let* α5 :
                                          M.Val
                                            (core.task.poll.Poll.t
                                              (core.result.Result.t
                                                (alloc.vec.Vec.t
                                                  assistants_core.models.Thread.t
                                                  alloc.alloc.Global.t)
                                                (alloc.boxed.Box.t
                                                  (dyn [core.error.Error.Trait])
                                                  alloc.alloc.Global.t))) :=
                                        M.alloc α4 in
                                      match_operator
                                        α5
                                        [
                                          fun γ =>
                                            (let* α0 := M.read γ in
                                            match α0 with
                                            | core.task.poll.Poll.Ready _ =>
                                              let γ0_0 :=
                                                core.task.poll.Poll.Get_Ready_0
                                                  γ in
                                              let* result := M.copy γ0_0 in
                                              let* α0 : M.Val never.t :=
                                                M.break in
                                              let* α1 := M.read α0 in
                                              let* α2 : unit :=
                                                never_to_any α1 in
                                              M.alloc α2
                                            | _ => M.break_match
                                            end) :
                                            M (M.Val unit);
                                          fun γ =>
                                            (let* α0 := M.read γ in
                                            match α0 with
                                            | core.task.poll.Poll.Pending =>
                                              M.alloc tt
                                            | _ => M.break_match
                                            end) :
                                            M (M.Val unit)
                                        ] in
                                    let* _ : M.Val unit :=
                                      let* α0 : M.Val unit := M.alloc tt in
                                      let* α1 : M.Val core.future.ResumeTy.t :=
                                        yield α0 in
                                      let* α2 : core.future.ResumeTy.t :=
                                        M.read α1 in
                                      assign _task_context α2 in
                                    M.alloc tt)) :
                                  M
                                    (M.Val
                                      (core.result.Result.t
                                        (alloc.vec.Vec.t
                                          assistants_core.models.Thread.t
                                          alloc.alloc.Global.t)
                                        (alloc.boxed.Box.t
                                          (dyn [core.error.Error.Trait])
                                          alloc.alloc.Global.t)))
                              ] in
                          M.copy α14 in
                        let* α0 :
                            M.Val
                              (core.result.Result.t
                                (axum.json.Json.t
                                  (alloc.vec.Vec.t
                                    async_openai.types.thread.ThreadObject.t
                                    alloc.alloc.Global.t))
                                (http.status.StatusCode.t
                                *
                                alloc.string.String.t)) :=
                          match_operator
                            threads
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.result.Result.Ok _ =>
                                  let γ0_0 := core.result.Result.Get_Ok_0 γ in
                                  let* threads := M.copy γ0_0 in
                                  let* α0 :
                                      (core.iter.adapters.map.Map.t
                                          (alloc.vec.into_iter.IntoIter.t
                                            assistants_core.models.Thread.t
                                            alloc.alloc.Global.t)
                                          (assistants_core.models.Thread.t ->
                                            M
                                              async_openai.types.thread.ThreadObject.t))
                                        ->
                                        M
                                          (alloc.vec.Vec.t
                                            async_openai.types.thread.ThreadObject.t
                                            alloc.alloc.Global.t) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.iter.traits.iterator.Iterator.collect
                                        (Self :=
                                          core.iter.adapters.map.Map.t
                                            (alloc.vec.into_iter.IntoIter.t
                                              assistants_core.models.Thread.t
                                              alloc.alloc.Global.t)
                                            (assistants_core.models.Thread.t ->
                                              M
                                                async_openai.types.thread.ThreadObject.t))
                                        (B :=
                                          alloc.vec.Vec.t
                                            async_openai.types.thread.ThreadObject.t
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      (alloc.vec.into_iter.IntoIter.t
                                          assistants_core.models.Thread.t
                                          alloc.alloc.Global.t)
                                        ->
                                        (assistants_core.models.Thread.t ->
                                          M
                                            async_openai.types.thread.ThreadObject.t)
                                        ->
                                        M
                                          (core.iter.adapters.map.Map.t
                                            (alloc.vec.into_iter.IntoIter.t
                                              assistants_core.models.Thread.t
                                              alloc.alloc.Global.t)
                                            (assistants_core.models.Thread.t ->
                                              M
                                                async_openai.types.thread.ThreadObject.t)) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.iter.traits.iterator.Iterator.map
                                        (Self :=
                                          alloc.vec.into_iter.IntoIter.t
                                            assistants_core.models.Thread.t
                                            alloc.alloc.Global.t)
                                        (B :=
                                          async_openai.types.thread.ThreadObject.t)
                                        (F :=
                                          assistants_core.models.Thread.t ->
                                            M
                                              async_openai.types.thread.ThreadObject.t)
                                        (Trait := ℐ))) in
                                  let* α2 :
                                      (alloc.vec.Vec.t
                                          assistants_core.models.Thread.t
                                          alloc.alloc.Global.t)
                                        ->
                                        M _ :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.iter.traits.collect.IntoIterator.into_iter
                                        (Self :=
                                          alloc.vec.Vec.t
                                            assistants_core.models.Thread.t
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α3 :
                                      alloc.vec.Vec.t
                                        assistants_core.models.Thread.t
                                        alloc.alloc.Global.t :=
                                    M.read threads in
                                  let* α4 :
                                      alloc.vec.into_iter.IntoIter.t
                                        assistants_core.models.Thread.t
                                        alloc.alloc.Global.t :=
                                    M.call (α2 α3) in
                                  let* α5 :
                                      core.iter.adapters.map.Map.t
                                        (alloc.vec.into_iter.IntoIter.t
                                          assistants_core.models.Thread.t
                                          alloc.alloc.Global.t)
                                        (assistants_core.models.Thread.t ->
                                          M
                                            async_openai.types.thread.ThreadObject.t) :=
                                    M.call
                                      (α1
                                        α4
                                        (fun
                                            (α0 :
                                              assistants_core.models.Thread.t) =>
                                          (let* α0 := M.alloc α0 in
                                          match_operator
                                            α0
                                            [
                                              fun γ =>
                                                (let* t := M.copy γ in
                                                M.read
                                                  (assistants_core.models.Thread.Get_inner
                                                    t)) :
                                                M
                                                  async_openai.types.thread.ThreadObject.t
                                            ]) :
                                          M
                                            async_openai.types.thread.ThreadObject.t)) in
                                  let* α6 :
                                      alloc.vec.Vec.t
                                        async_openai.types.thread.ThreadObject.t
                                        alloc.alloc.Global.t :=
                                    M.call (α0 α5) in
                                  M.alloc
                                    (core.result.Result.Ok
                                      (axum.json.Json.Build_t α6))
                                | _ => M.break_match
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        (alloc.vec.Vec.t
                                          async_openai.types.thread.ThreadObject.t
                                          alloc.alloc.Global.t))
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)));
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.result.Result.Err _ =>
                                  let γ0_0 := core.result.Result.Get_Err_0 γ in
                                  let* e := M.copy γ0_0 in
                                  let* α0 : http.status.StatusCode.t :=
                                    M.read http.status.INTERNAL_SERVER_ERROR in
                                  let* α1 :
                                      (ref
                                          (alloc.boxed.Box.t
                                            (dyn [core.error.Error.Trait])
                                            alloc.alloc.Global.t))
                                        ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      alloc.string.ToString.to_string
                                        (Self :=
                                          alloc.boxed.Box.t
                                            (dyn [core.error.Error.Trait])
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α2 : alloc.string.String.t :=
                                    M.call (α1 (borrow e)) in
                                  M.alloc (core.result.Result.Err (α0, α2))
                                | _ => M.break_match
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        (alloc.vec.Vec.t
                                          async_openai.types.thread.ThreadObject.t
                                          alloc.alloc.Global.t))
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ] in
                        M.pure (use α0)
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              (alloc.vec.Vec.t
                                async_openai.types.thread.ThreadObject.t
                                alloc.alloc.Global.t))
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t
                    (alloc.vec.Vec.t
                      async_openai.types.thread.ThreadObject.t
                      alloc.alloc.Global.t))
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t
              (alloc.vec.Vec.t
                async_openai.types.thread.ThreadObject.t
                alloc.alloc.Global.t))
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn update_thread_handler(
      Path((thread_id,)): Path<(String,)>,
      State(app_state): State<AppState>,
      Json(thread_input): Json<ModifyThreadRequest>,
  ) -> Result<JsonResponse<ThreadObject>, (StatusCode, String)> {
      let thread = update_thread(
          &app_state.pool,
          &thread_id,
          &Uuid::default().to_string(),
          thread_input
              .metadata
              .map(|m| m.into_iter().map(|(k, v)| (k, v.to_string())).collect()),
      )
      .await;
      match thread {
          Ok(thread) => Ok(JsonResponse(thread.inner)),
          Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
      }
  }
  *)
  Definition update_thread_handler
      (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      (__arg2
        :
        axum.json.Json.t async_openai.types.thread.ModifyThreadRequest.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    let* __arg2 := M.alloc __arg2 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t
                        async_openai.types.thread.ThreadObject.t)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_) =>
                          let γ1_0 := γ0_0 in
                          let* thread_id := M.copy γ1_0 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* __arg2 :
                                      M.Val
                                        (axum.json.Json.t
                                          async_openai.types.thread.ModifyThreadRequest.t) :=
                                    M.copy __arg2 in
                                  match_operator
                                    __arg2
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | axum.json.Json.Build_t _ =>
                                          let γ0_0 := axum.json.Json.Get_0 γ in
                                          let* thread_input := M.copy γ0_0 in
                                          let* thread :
                                              M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Thread.t
                                                  (alloc.boxed.Box.t
                                                    (dyn
                                                      [core.error.Error.Trait])
                                                    alloc.alloc.Global.t)) :=
                                            let* α0 : _ -> M _ :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.future.into_future.IntoFuture.into_future
                                                  (Self := _)
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                (ref
                                                    (alloc.sync.Arc.t
                                                      (sqlx_core.pool.Pool.t
                                                        sqlx_postgres.database.Postgres.t)
                                                      alloc.alloc.Global.t))
                                                  ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.sync.Arc.t
                                                      (sqlx_core.pool.Pool.t
                                                        sqlx_postgres.database.Postgres.t)
                                                      alloc.alloc.Global.t)
                                                  (Trait := ℐ))) in
                                            let* α2 :
                                                ref
                                                  (sqlx_core.pool.Pool.t
                                                    sqlx_postgres.database.Postgres.t) :=
                                              M.call
                                                (α1
                                                  (borrow
                                                    (assistants_api_communication.models.AppState.Get_pool
                                                      app_state))) in
                                            let* α3 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α4 : ref str.t :=
                                              M.call (α3 (borrow thread_id)) in
                                            let* α5 :
                                                (ref alloc.string.String.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self :=
                                                    alloc.string.String.t)
                                                  (Trait := ℐ))) in
                                            let* α6 :
                                                (ref uuid.Uuid.t) ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self := uuid.Uuid.t)
                                                  (Trait := ℐ))) in
                                            let* α7 : M uuid.Uuid.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.default.Default.default
                                                  (Self := uuid.Uuid.t)
                                                  (Trait := ℐ))) in
                                            let* α8 : uuid.Uuid.t :=
                                              M.call α7 in
                                            let* α9 : M.Val uuid.Uuid.t :=
                                              M.alloc α8 in
                                            let* α10 : alloc.string.String.t :=
                                              M.call (α6 (borrow α9)) in
                                            let* α11 :
                                                M.Val alloc.string.String.t :=
                                              M.alloc α10 in
                                            let* α12 : ref str.t :=
                                              M.call (α5 (borrow α11)) in
                                            let* α13 :
                                                core.option.Option.t
                                                  (std.collections.hash.map.HashMap.t
                                                    alloc.string.String.t
                                                    serde_json.value.Value.t
                                                    std.hash.random.RandomState.t) :=
                                              M.read
                                                (async_openai.types.thread.ModifyThreadRequest.Get_metadata
                                                  thread_input) in
                                            let* α14 :
                                                core.option.Option.t
                                                  (std.collections.hash.map.HashMap.t
                                                    alloc.string.String.t
                                                    alloc.string.String.t
                                                    std.hash.random.RandomState.t) :=
                                              M.call
                                                ((core.option.Option.t
                                                      (std.collections.hash.map.HashMap.t
                                                        alloc.string.String.t
                                                        serde_json.value.Value.t
                                                        std.hash.random.RandomState.t))::["map"]
                                                  α13
                                                  (fun
                                                      (α0 :
                                                        std.collections.hash.map.HashMap.t
                                                          alloc.string.String.t
                                                          serde_json.value.Value.t
                                                          std.hash.random.RandomState.t) =>
                                                    (let* α0 := M.alloc α0 in
                                                    match_operator
                                                      α0
                                                      [
                                                        fun γ =>
                                                          (let* m := M.copy γ in
                                                          let* α0 :
                                                              (core.iter.adapters.map.Map.t
                                                                  (std.collections.hash.map.IntoIter.t
                                                                    alloc.string.String.t
                                                                    serde_json.value.Value.t)
                                                                  ((alloc.string.String.t
                                                                    *
                                                                    serde_json.value.Value.t)
                                                                    ->
                                                                    M
                                                                      (alloc.string.String.t
                                                                      *
                                                                      alloc.string.String.t)))
                                                                ->
                                                                M
                                                                  (std.collections.hash.map.HashMap.t
                                                                    alloc.string.String.t
                                                                    alloc.string.String.t
                                                                    std.hash.random.RandomState.t) :=
                                                            ltac:(M.get_method (fun ℐ =>
                                                              core.iter.traits.iterator.Iterator.collect
                                                                (Self :=
                                                                  core.iter.adapters.map.Map.t
                                                                    (std.collections.hash.map.IntoIter.t
                                                                      alloc.string.String.t
                                                                      serde_json.value.Value.t)
                                                                    ((alloc.string.String.t
                                                                      *
                                                                      serde_json.value.Value.t)
                                                                      ->
                                                                      M
                                                                        (alloc.string.String.t
                                                                        *
                                                                        alloc.string.String.t)))
                                                                (B :=
                                                                  std.collections.hash.map.HashMap.t
                                                                    alloc.string.String.t
                                                                    alloc.string.String.t
                                                                    std.hash.random.RandomState.t)
                                                                (Trait := ℐ))) in
                                                          let* α1 :
                                                              (std.collections.hash.map.IntoIter.t
                                                                  alloc.string.String.t
                                                                  serde_json.value.Value.t)
                                                                ->
                                                                ((alloc.string.String.t
                                                                  *
                                                                  serde_json.value.Value.t)
                                                                  ->
                                                                  M
                                                                    (alloc.string.String.t
                                                                    *
                                                                    alloc.string.String.t))
                                                                ->
                                                                M
                                                                  (core.iter.adapters.map.Map.t
                                                                    (std.collections.hash.map.IntoIter.t
                                                                      alloc.string.String.t
                                                                      serde_json.value.Value.t)
                                                                    ((alloc.string.String.t
                                                                      *
                                                                      serde_json.value.Value.t)
                                                                      ->
                                                                      M
                                                                        (alloc.string.String.t
                                                                        *
                                                                        alloc.string.String.t))) :=
                                                            ltac:(M.get_method (fun ℐ =>
                                                              core.iter.traits.iterator.Iterator.map
                                                                (Self :=
                                                                  std.collections.hash.map.IntoIter.t
                                                                    alloc.string.String.t
                                                                    serde_json.value.Value.t)
                                                                (B :=
                                                                  alloc.string.String.t
                                                                  *
                                                                  alloc.string.String.t)
                                                                (F :=
                                                                  (alloc.string.String.t
                                                                    *
                                                                    serde_json.value.Value.t)
                                                                    ->
                                                                    M
                                                                      (alloc.string.String.t
                                                                      *
                                                                      alloc.string.String.t))
                                                                (Trait := ℐ))) in
                                                          let* α2 :
                                                              (std.collections.hash.map.HashMap.t
                                                                  alloc.string.String.t
                                                                  serde_json.value.Value.t
                                                                  std.hash.random.RandomState.t)
                                                                ->
                                                                M _ :=
                                                            ltac:(M.get_method (fun ℐ =>
                                                              core.iter.traits.collect.IntoIterator.into_iter
                                                                (Self :=
                                                                  std.collections.hash.map.HashMap.t
                                                                    alloc.string.String.t
                                                                    serde_json.value.Value.t
                                                                    std.hash.random.RandomState.t)
                                                                (Trait := ℐ))) in
                                                          let* α3 :
                                                              std.collections.hash.map.HashMap.t
                                                                alloc.string.String.t
                                                                serde_json.value.Value.t
                                                                std.hash.random.RandomState.t :=
                                                            M.read m in
                                                          let* α4 :
                                                              std.collections.hash.map.IntoIter.t
                                                                alloc.string.String.t
                                                                serde_json.value.Value.t :=
                                                            M.call (α2 α3) in
                                                          let* α5 :
                                                              core.iter.adapters.map.Map.t
                                                                (std.collections.hash.map.IntoIter.t
                                                                  alloc.string.String.t
                                                                  serde_json.value.Value.t)
                                                                ((alloc.string.String.t
                                                                  *
                                                                  serde_json.value.Value.t)
                                                                  ->
                                                                  M
                                                                    (alloc.string.String.t
                                                                    *
                                                                    alloc.string.String.t)) :=
                                                            M.call
                                                              (α1
                                                                α4
                                                                (fun
                                                                    (α0 :
                                                                      alloc.string.String.t
                                                                      *
                                                                      serde_json.value.Value.t) =>
                                                                  (let* α0 :=
                                                                    M.alloc
                                                                      α0 in
                                                                  match_operator
                                                                    α0
                                                                    [
                                                                      fun γ =>
                                                                        (let*
                                                                              α0 :=
                                                                          M.read
                                                                            γ in
                                                                        match α0
                                                                        with
                                                                        |
                                                                            (_,
                                                                              _)
                                                                            =>
                                                                          let
                                                                                γ0_0 :=
                                                                            Tuple.Access.left
                                                                              γ in
                                                                          let
                                                                                γ0_1 :=
                                                                            Tuple.Access.right
                                                                              γ in
                                                                          let*
                                                                                k :=
                                                                            M.copy
                                                                              γ0_0 in
                                                                          let*
                                                                                v :=
                                                                            M.copy
                                                                              γ0_1 in
                                                                          let*
                                                                                α0 :
                                                                              alloc.string.String.t :=
                                                                            M.read
                                                                              k in
                                                                          let*
                                                                                α1 :
                                                                              (ref
                                                                                  serde_json.value.Value.t)
                                                                                ->
                                                                                M
                                                                                  alloc.string.String.t :=
                                                                            ltac:(M.get_method (fun ℐ =>
                                                                              alloc.string.ToString.to_string
                                                                                (Self :=
                                                                                  serde_json.value.Value.t)
                                                                                (Trait := ℐ))) in
                                                                          let*
                                                                                α2 :
                                                                              alloc.string.String.t :=
                                                                            M.call
                                                                              (α1
                                                                                (borrow
                                                                                  v)) in
                                                                          M.pure
                                                                            (α0,
                                                                              α2)
                                                                        end) :
                                                                        M
                                                                          (alloc.string.String.t
                                                                          *
                                                                          alloc.string.String.t)
                                                                    ]) :
                                                                  M
                                                                    (alloc.string.String.t
                                                                    *
                                                                    alloc.string.String.t))) in
                                                          M.call (α0 α5)) :
                                                          M
                                                            (std.collections.hash.map.HashMap.t
                                                              alloc.string.String.t
                                                              alloc.string.String.t
                                                              std.hash.random.RandomState.t)
                                                      ]) :
                                                    M
                                                      (std.collections.hash.map.HashMap.t
                                                        alloc.string.String.t
                                                        alloc.string.String.t
                                                        std.hash.random.RandomState.t))) in
                                            let* α15 : _ :=
                                              M.call
                                                (assistants_core.threads.update_thread
                                                  α2
                                                  α4
                                                  α12
                                                  α14) in
                                            let* α16 : _ := M.call (α0 α15) in
                                            let* α17 : M.Val _ := M.alloc α16 in
                                            let* α18 :
                                                M.Val
                                                  (core.result.Result.t
                                                    assistants_core.models.Thread.t
                                                    (alloc.boxed.Box.t
                                                      (dyn
                                                        [core.error.Error.Trait])
                                                      alloc.alloc.Global.t)) :=
                                              match_operator
                                                α17
                                                [
                                                  fun γ =>
                                                    (let* __awaitee :=
                                                      M.copy γ in
                                                    M.loop
                                                      (let* _ : M.Val unit :=
                                                        let* α0 :
                                                            (core.pin.Pin.t
                                                                (mut_ref _))
                                                              ->
                                                              (mut_ref
                                                                core.task.wake.Context.t)
                                                              ->
                                                              M
                                                                (core.task.poll.Poll.t
                                                                  _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.future.future.Future.poll
                                                              (Self := _)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            core.pin.Pin.t
                                                              (mut_ref _) :=
                                                          M.call
                                                            ((core.pin.Pin.t
                                                                  (mut_ref
                                                                    _))::["new_unchecked"]
                                                              (borrow_mut
                                                                __awaitee)) in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read
                                                            _task_context in
                                                        let* α3 :
                                                            mut_ref
                                                              core.task.wake.Context.t :=
                                                          M.call
                                                            (core.future.get_context
                                                              α2) in
                                                        let* α4 :
                                                            core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                assistants_core.models.Thread.t
                                                                (alloc.boxed.Box.t
                                                                  (dyn
                                                                    [core.error.Error.Trait])
                                                                  alloc.alloc.Global.t)) :=
                                                          M.call (α0 α1 α3) in
                                                        let* α5 :
                                                            M.Val
                                                              (core.task.poll.Poll.t
                                                                (core.result.Result.t
                                                                  assistants_core.models.Thread.t
                                                                  (alloc.boxed.Box.t
                                                                    (dyn
                                                                      [core.error.Error.Trait])
                                                                    alloc.alloc.Global.t))) :=
                                                          M.alloc α4 in
                                                        match_operator
                                                          α5
                                                          [
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Ready
                                                                    _
                                                                  =>
                                                                let γ0_0 :=
                                                                  core.task.poll.Poll.Get_Ready_0
                                                                    γ in
                                                                let* result :=
                                                                  M.copy γ0_0 in
                                                                let* α0 :
                                                                    M.Val
                                                                      never.t :=
                                                                  M.break in
                                                                let* α1 :=
                                                                  M.read α0 in
                                                                let* α2 :
                                                                    unit :=
                                                                  never_to_any
                                                                    α1 in
                                                                M.alloc α2
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit);
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.task.poll.Poll.Pending
                                                                  =>
                                                                M.alloc tt
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit)
                                                          ] in
                                                      let* _ : M.Val unit :=
                                                        let* α0 : M.Val unit :=
                                                          M.alloc tt in
                                                        let* α1 :
                                                            M.Val
                                                              core.future.ResumeTy.t :=
                                                          yield α0 in
                                                        let* α2 :
                                                            core.future.ResumeTy.t :=
                                                          M.read α1 in
                                                        assign
                                                          _task_context
                                                          α2 in
                                                      M.alloc tt)) :
                                                    M
                                                      (M.Val
                                                        (core.result.Result.t
                                                          assistants_core.models.Thread.t
                                                          (alloc.boxed.Box.t
                                                            (dyn
                                                              [core.error.Error.Trait])
                                                            alloc.alloc.Global.t)))
                                                ] in
                                            M.copy α18 in
                                          let* α0 :
                                              M.Val
                                                (core.result.Result.t
                                                  (axum.json.Json.t
                                                    async_openai.types.thread.ThreadObject.t)
                                                  (http.status.StatusCode.t
                                                  *
                                                  alloc.string.String.t)) :=
                                            match_operator
                                              thread
                                              [
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Ok _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Ok_0
                                                        γ in
                                                    let* thread :=
                                                      M.copy γ0_0 in
                                                    let* α0 :
                                                        async_openai.types.thread.ThreadObject.t :=
                                                      M.read
                                                        (assistants_core.models.Thread.Get_inner
                                                          thread) in
                                                    M.alloc
                                                      (core.result.Result.Ok
                                                        (axum.json.Json.Build_t
                                                          α0))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.thread.ThreadObject.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)));
                                                fun γ =>
                                                  (let* α0 := M.read γ in
                                                  match α0 with
                                                  | core.result.Result.Err _ =>
                                                    let γ0_0 :=
                                                      core.result.Result.Get_Err_0
                                                        γ in
                                                    let* e := M.copy γ0_0 in
                                                    let* α0 :
                                                        http.status.StatusCode.t :=
                                                      M.read
                                                        http.status.INTERNAL_SERVER_ERROR in
                                                    let* α1 :
                                                        (ref
                                                            (alloc.boxed.Box.t
                                                              (dyn
                                                                [core.error.Error.Trait])
                                                              alloc.alloc.Global.t))
                                                          ->
                                                          M
                                                            alloc.string.String.t :=
                                                      ltac:(M.get_method (fun ℐ =>
                                                        alloc.string.ToString.to_string
                                                          (Self :=
                                                            alloc.boxed.Box.t
                                                              (dyn
                                                                [core.error.Error.Trait])
                                                              alloc.alloc.Global.t)
                                                          (Trait := ℐ))) in
                                                    let* α2 :
                                                        alloc.string.String.t :=
                                                      M.call (α1 (borrow e)) in
                                                    M.alloc
                                                      (core.result.Result.Err
                                                        (α0, α2))
                                                  | _ => M.break_match
                                                  end) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        (axum.json.Json.t
                                                          async_openai.types.thread.ThreadObject.t)
                                                        (http.status.StatusCode.t
                                                        *
                                                        alloc.string.String.t)))
                                              ] in
                                          M.pure (use α0)
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.thread.ThreadObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ]
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t
                                        async_openai.types.thread.ThreadObject.t)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t
                              async_openai.types.thread.ThreadObject.t)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
            (http.status.StatusCode.t * alloc.string.String.t))).
  
  (*
  pub async fn delete_thread_handler(
      Path((thread_id,)): Path<(String,)>,
      State(app_state): State<AppState>,
  ) -> Result<JsonResponse<()>, (StatusCode, String)> {
      let result = delete_thread(&app_state.pool, &thread_id, &Uuid::default().to_string()).await;
      match result {
          Ok(_) => Ok(JsonResponse(())),
          Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
      }
  }
  *)
  Definition delete_thread_handler
      (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
      (__arg1
        :
        axum.extract.state.State.t
          assistants_api_communication.models.AppState.t)
      : M OpaqueDef :=
    let* __arg0 := M.alloc __arg0 in
    let* __arg1 := M.alloc __arg1 in
    M.pure
      (fun (α0 : core.future.ResumeTy.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* _task_context := M.copy γ in
              let* __arg0 :
                  M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
                M.copy __arg0 in
              let* α0 :
                  M.Val
                    (core.result.Result.t
                      (axum.json.Json.t unit)
                      (http.status.StatusCode.t * alloc.string.String.t)) :=
                match_operator
                  __arg0
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | axum.extract.path.Path.Build_t _ =>
                        let γ0_0 := axum.extract.path.Path.Get_0 γ in
                        let* α0 := M.read γ0_0 in
                        match α0 with
                        | (_) =>
                          let γ1_0 := γ0_0 in
                          let* thread_id := M.copy γ1_0 in
                          let* __arg1 :
                              M.Val
                                (axum.extract.state.State.t
                                  assistants_api_communication.models.AppState.t) :=
                            M.copy __arg1 in
                          match_operator
                            __arg1
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | axum.extract.state.State.Build_t _ =>
                                  let γ0_0 :=
                                    axum.extract.state.State.Get_0 γ in
                                  let* app_state := M.copy γ0_0 in
                                  let* result :
                                      M.Val
                                        (core.result.Result.t
                                          unit
                                          (alloc.boxed.Box.t
                                            (dyn [core.error.Error.Trait])
                                            alloc.alloc.Global.t)) :=
                                    let* α0 : _ -> M _ :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.future.into_future.IntoFuture.into_future
                                          (Self := _)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        (ref
                                            (alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t))
                                          ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self :=
                                            alloc.sync.Arc.t
                                              (sqlx_core.pool.Pool.t
                                                sqlx_postgres.database.Postgres.t)
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ))) in
                                    let* α2 :
                                        ref
                                          (sqlx_core.pool.Pool.t
                                            sqlx_postgres.database.Postgres.t) :=
                                      M.call
                                        (α1
                                          (borrow
                                            (assistants_api_communication.models.AppState.Get_pool
                                              app_state))) in
                                    let* α3 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α4 : ref str.t :=
                                      M.call (α3 (borrow thread_id)) in
                                    let* α5 :
                                        (ref alloc.string.String.t) ->
                                          M (ref _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.ops.deref.Deref.deref
                                          (Self := alloc.string.String.t)
                                          (Trait := ℐ))) in
                                    let* α6 :
                                        (ref uuid.Uuid.t) ->
                                          M alloc.string.String.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        alloc.string.ToString.to_string
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α7 : M uuid.Uuid.t :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.default.Default.default
                                          (Self := uuid.Uuid.t)
                                          (Trait := ℐ))) in
                                    let* α8 : uuid.Uuid.t := M.call α7 in
                                    let* α9 : M.Val uuid.Uuid.t := M.alloc α8 in
                                    let* α10 : alloc.string.String.t :=
                                      M.call (α6 (borrow α9)) in
                                    let* α11 : M.Val alloc.string.String.t :=
                                      M.alloc α10 in
                                    let* α12 : ref str.t :=
                                      M.call (α5 (borrow α11)) in
                                    let* α13 : _ :=
                                      M.call
                                        (assistants_core.threads.delete_thread
                                          α2
                                          α4
                                          α12) in
                                    let* α14 : _ := M.call (α0 α13) in
                                    let* α15 : M.Val _ := M.alloc α14 in
                                    let* α16 :
                                        M.Val
                                          (core.result.Result.t
                                            unit
                                            (alloc.boxed.Box.t
                                              (dyn [core.error.Error.Trait])
                                              alloc.alloc.Global.t)) :=
                                      match_operator
                                        α15
                                        [
                                          fun γ =>
                                            (let* __awaitee := M.copy γ in
                                            M.loop
                                              (let* _ : M.Val unit :=
                                                let* α0 :
                                                    (core.pin.Pin.t (mut_ref _))
                                                      ->
                                                      (mut_ref
                                                        core.task.wake.Context.t)
                                                      ->
                                                      M
                                                        (core.task.poll.Poll.t
                                                          _) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.future.future.Future.poll
                                                      (Self := _)
                                                      (Trait := ℐ))) in
                                                let* α1 :
                                                    core.pin.Pin.t
                                                      (mut_ref _) :=
                                                  M.call
                                                    ((core.pin.Pin.t
                                                          (mut_ref
                                                            _))::["new_unchecked"]
                                                      (borrow_mut __awaitee)) in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read _task_context in
                                                let* α3 :
                                                    mut_ref
                                                      core.task.wake.Context.t :=
                                                  M.call
                                                    (core.future.get_context
                                                      α2) in
                                                let* α4 :
                                                    core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        unit
                                                        (alloc.boxed.Box.t
                                                          (dyn
                                                            [core.error.Error.Trait])
                                                          alloc.alloc.Global.t)) :=
                                                  M.call (α0 α1 α3) in
                                                let* α5 :
                                                    M.Val
                                                      (core.task.poll.Poll.t
                                                        (core.result.Result.t
                                                          unit
                                                          (alloc.boxed.Box.t
                                                            (dyn
                                                              [core.error.Error.Trait])
                                                            alloc.alloc.Global.t))) :=
                                                  M.alloc α4 in
                                                match_operator
                                                  α5
                                                  [
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Ready
                                                            _
                                                          =>
                                                        let γ0_0 :=
                                                          core.task.poll.Poll.Get_Ready_0
                                                            γ in
                                                        let* result :=
                                                          M.copy γ0_0 in
                                                        let* α0 :
                                                            M.Val never.t :=
                                                          M.break in
                                                        let* α1 := M.read α0 in
                                                        let* α2 : unit :=
                                                          never_to_any α1 in
                                                        M.alloc α2
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit);
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.task.poll.Poll.Pending
                                                          =>
                                                        M.alloc tt
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit)
                                                  ] in
                                              let* _ : M.Val unit :=
                                                let* α0 : M.Val unit :=
                                                  M.alloc tt in
                                                let* α1 :
                                                    M.Val
                                                      core.future.ResumeTy.t :=
                                                  yield α0 in
                                                let* α2 :
                                                    core.future.ResumeTy.t :=
                                                  M.read α1 in
                                                assign _task_context α2 in
                                              M.alloc tt)) :
                                            M
                                              (M.Val
                                                (core.result.Result.t
                                                  unit
                                                  (alloc.boxed.Box.t
                                                    (dyn
                                                      [core.error.Error.Trait])
                                                    alloc.alloc.Global.t)))
                                        ] in
                                    M.copy α16 in
                                  let* α0 :
                                      M.Val
                                        (core.result.Result.t
                                          (axum.json.Json.t unit)
                                          (http.status.StatusCode.t
                                          *
                                          alloc.string.String.t)) :=
                                    match_operator
                                      result
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Ok _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Ok_0 γ in
                                            M.alloc
                                              (core.result.Result.Ok
                                                (axum.json.Json.Build_t tt))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t unit)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)));
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.result.Result.Err _ =>
                                            let γ0_0 :=
                                              core.result.Result.Get_Err_0 γ in
                                            let* e := M.copy γ0_0 in
                                            let* α0 :
                                                http.status.StatusCode.t :=
                                              M.read
                                                http.status.INTERNAL_SERVER_ERROR in
                                            let* α1 :
                                                (ref
                                                    (alloc.boxed.Box.t
                                                      (dyn
                                                        [core.error.Error.Trait])
                                                      alloc.alloc.Global.t))
                                                  ->
                                                  M alloc.string.String.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                alloc.string.ToString.to_string
                                                  (Self :=
                                                    alloc.boxed.Box.t
                                                      (dyn
                                                        [core.error.Error.Trait])
                                                      alloc.alloc.Global.t)
                                                  (Trait := ℐ))) in
                                            let* α2 : alloc.string.String.t :=
                                              M.call (α1 (borrow e)) in
                                            M.alloc
                                              (core.result.Result.Err (α0, α2))
                                          | _ => M.break_match
                                          end) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t unit)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)))
                                      ] in
                                  M.pure (use α0)
                                end) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (axum.json.Json.t unit)
                                      (http.status.StatusCode.t
                                      *
                                      alloc.string.String.t)))
                            ]
                        end
                      end) :
                      M
                        (M.Val
                          (core.result.Result.t
                            (axum.json.Json.t unit)
                            (http.status.StatusCode.t * alloc.string.String.t)))
                  ] in
              M.read α0) :
              M
                (core.result.Result.t
                  (axum.json.Json.t unit)
                  (http.status.StatusCode.t * alloc.string.String.t))
          ]) :
        M
          (core.result.Result.t
            (axum.json.Json.t unit)
            (http.status.StatusCode.t * alloc.string.String.t))).
End threads.

(*
pub async fn create_thread_handler(
    State(app_state): State<AppState>,
    thread: Option<Json<Value>>,
) -> Result<JsonResponse<ThreadObject>, (StatusCode, String)> {
    let thread = thread.unwrap_or_default();
    let thread_object = &Thread {
        inner: ThreadObject {
            id: Default::default(),
            created_at: 0,
            object: Default::default(),
            metadata: if let Some(object) = thread["metadata"].as_object() {
                // This serves to communicate the inconsistency with the OpenAI API's metadata value length limit
                let mut temp_map = HashMap::new();
                for (k, v) in object {
                    match v.as_str() {
                        Some(str_value) => {
                            temp_map.insert(k.clone(), Value::String(str_value.to_string()));
                        }
                        None => {
                            return Err((
                                StatusCode::BAD_REQUEST,
                                format!("Metadata value for key '{}' is not a string. All metadata values must be strings.", k)
                            ));
                        }
                    }
                }
                Some(temp_map)
            } else {
                None
            },
        },
        user_id: Uuid::default().to_string(),
    };
    // TODO: should infer user id from Authorization header
    let thread = create_thread(&app_state.pool, &thread_object).await;
    match thread {
        Ok(thread) => Ok(JsonResponse(thread.inner)),
        Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
    }
}
*)
Definition create_thread_handler
    (__arg0
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    (thread : core.option.Option.t (axum.json.Json.t serde_json.value.Value.t))
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* thread := M.alloc thread in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val
                  (axum.extract.state.State.t
                    assistants_api_communication.models.AppState.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.state.State.Build_t _ =>
                      let γ0_0 := axum.extract.state.State.Get_0 γ in
                      let* app_state := M.copy γ0_0 in
                      let* thread :
                          M.Val
                            (core.option.Option.t
                              (axum.json.Json.t serde_json.value.Value.t)) :=
                        M.copy thread in
                      let* thread :
                          M.Val (axum.json.Json.t serde_json.value.Value.t) :=
                        let* α0 :
                            core.option.Option.t
                              (axum.json.Json.t serde_json.value.Value.t) :=
                          M.read thread in
                        let* α1 : axum.json.Json.t serde_json.value.Value.t :=
                          M.call
                            ((core.option.Option.t
                                  (axum.json.Json.t
                                    serde_json.value.Value.t))::["unwrap_or_default"]
                              α0) in
                        M.alloc α1 in
                      let* thread_object :
                          M.Val (ref assistants_core.models.Thread.t) :=
                        let* α0 : M alloc.string.String.t :=
                          ltac:(M.get_method (fun ℐ =>
                            core.default.Default.default
                              (Self := alloc.string.String.t)
                              (Trait := ℐ))) in
                        let* α1 : alloc.string.String.t := M.call α0 in
                        let* α2 : M alloc.string.String.t :=
                          ltac:(M.get_method (fun ℐ =>
                            core.default.Default.default
                              (Self := alloc.string.String.t)
                              (Trait := ℐ))) in
                        let* α3 : alloc.string.String.t := M.call α2 in
                        let* α4 :
                            (ref serde_json.value.Value.t) ->
                              (ref str.t) ->
                              M (ref _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.index.Index.index
                              (Self := serde_json.value.Value.t)
                              (Idx := ref str.t)
                              (Trait := ℐ))) in
                        let* α5 :
                            (ref (axum.json.Json.t serde_json.value.Value.t)) ->
                              M (ref _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.deref.Deref.deref
                              (Self :=
                                axum.json.Json.t serde_json.value.Value.t)
                              (Trait := ℐ))) in
                        let* α6 : ref serde_json.value.Value.t :=
                          M.call (α5 (borrow thread)) in
                        let* α7 : ref str.t := M.read (mk_str "metadata") in
                        let* α8 : ref serde_json.value.Value.t :=
                          M.call (α4 α6 α7) in
                        let* α9 :
                            core.option.Option.t
                              (ref
                                (serde_json.map.Map.t
                                  alloc.string.String.t
                                  serde_json.value.Value.t)) :=
                          M.call (serde_json.value.Value.t::["as_object"] α8) in
                        let* α10 :
                            M.Val
                              (core.option.Option.t
                                (ref
                                  (serde_json.map.Map.t
                                    alloc.string.String.t
                                    serde_json.value.Value.t))) :=
                          M.alloc α9 in
                        let* α11 :
                            M.Val
                              (core.option.Option.t
                                (std.collections.hash.map.HashMap.t
                                  alloc.string.String.t
                                  serde_json.value.Value.t
                                  std.hash.random.RandomState.t)) :=
                          match_operator
                            α10
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.option.Option.Some _ =>
                                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                                  let* object := M.copy γ0_0 in
                                  let* temp_map :
                                      M.Val
                                        (std.collections.hash.map.HashMap.t
                                          alloc.string.String.t
                                          serde_json.value.Value.t
                                          std.hash.random.RandomState.t) :=
                                    let* α0 :
                                        std.collections.hash.map.HashMap.t
                                          alloc.string.String.t
                                          serde_json.value.Value.t
                                          std.hash.random.RandomState.t :=
                                      M.call
                                        (std.collections.hash.map.HashMap.t
                                            alloc.string.String.t
                                            serde_json.value.Value.t
                                            std.hash.random.RandomState.t)::["new"] in
                                    M.alloc α0 in
                                  let* _ : M.Val unit :=
                                    let* α0 :
                                        (ref
                                            (serde_json.map.Map.t
                                              alloc.string.String.t
                                              serde_json.value.Value.t))
                                          ->
                                          M _ :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.iter.traits.collect.IntoIterator.into_iter
                                          (Self :=
                                            ref
                                              (serde_json.map.Map.t
                                                alloc.string.String.t
                                                serde_json.value.Value.t))
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        ref
                                          (serde_json.map.Map.t
                                            alloc.string.String.t
                                            serde_json.value.Value.t) :=
                                      M.read object in
                                    let* α2 : serde_json.map.Iter.t :=
                                      M.call (α0 α1) in
                                    let* α3 : M.Val serde_json.map.Iter.t :=
                                      M.alloc α2 in
                                    let* α4 : M.Val unit :=
                                      match_operator
                                        α3
                                        [
                                          fun γ =>
                                            (let* iter := M.copy γ in
                                            M.loop
                                              (let* _ : M.Val unit :=
                                                let* α0 :
                                                    (mut_ref
                                                        serde_json.map.Iter.t)
                                                      ->
                                                      M
                                                        (core.option.Option.t
                                                          _) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.iter.traits.iterator.Iterator.next
                                                      (Self :=
                                                        serde_json.map.Iter.t)
                                                      (Trait := ℐ))) in
                                                let* α1 :
                                                    core.option.Option.t
                                                      ((ref
                                                        alloc.string.String.t)
                                                      *
                                                      (ref
                                                        serde_json.value.Value.t)) :=
                                                  M.call
                                                    (α0 (borrow_mut iter)) in
                                                let* α2 :
                                                    M.Val
                                                      (core.option.Option.t
                                                        ((ref
                                                          alloc.string.String.t)
                                                        *
                                                        (ref
                                                          serde_json.value.Value.t))) :=
                                                  M.alloc α1 in
                                                match_operator
                                                  α2
                                                  [
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.option.Option.None
                                                          =>
                                                        let* α0 :
                                                            M.Val never.t :=
                                                          M.break in
                                                        let* α1 := M.read α0 in
                                                        let* α2 : unit :=
                                                          never_to_any α1 in
                                                        M.alloc α2
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit);
                                                    fun γ =>
                                                      (let* α0 := M.read γ in
                                                      match α0 with
                                                      |
                                                          core.option.Option.Some
                                                            _
                                                          =>
                                                        let γ0_0 :=
                                                          core.option.Option.Get_Some_0
                                                            γ in
                                                        let* α0 :=
                                                          M.read γ0_0 in
                                                        match α0 with
                                                        | (_, _) =>
                                                          let γ1_0 :=
                                                            Tuple.Access.left
                                                              γ0_0 in
                                                          let γ1_1 :=
                                                            Tuple.Access.right
                                                              γ0_0 in
                                                          let* k :=
                                                            M.copy γ1_0 in
                                                          let* v :=
                                                            M.copy γ1_1 in
                                                          let* α0 :
                                                              ref
                                                                serde_json.value.Value.t :=
                                                            M.read v in
                                                          let* α1 :
                                                              core.option.Option.t
                                                                (ref str.t) :=
                                                            M.call
                                                              (serde_json.value.Value.t::["as_str"]
                                                                α0) in
                                                          let* α2 :
                                                              M.Val
                                                                (core.option.Option.t
                                                                  (ref
                                                                    str.t)) :=
                                                            M.alloc α1 in
                                                          match_operator
                                                            α2
                                                            [
                                                              fun γ =>
                                                                (let* α0 :=
                                                                  M.read γ in
                                                                match α0 with
                                                                |
                                                                    core.option.Option.Some
                                                                      _
                                                                    =>
                                                                  let γ0_0 :=
                                                                    core.option.Option.Get_Some_0
                                                                      γ in
                                                                  let*
                                                                        str_value :=
                                                                    M.copy
                                                                      γ0_0 in
                                                                  let* _ :
                                                                      M.Val
                                                                        (core.option.Option.t
                                                                          serde_json.value.Value.t) :=
                                                                    let* α0 :
                                                                        (ref
                                                                            alloc.string.String.t)
                                                                          ->
                                                                          M
                                                                            alloc.string.String.t :=
                                                                      ltac:(M.get_method (fun ℐ =>
                                                                        core.clone.Clone.clone
                                                                          (Self :=
                                                                            alloc.string.String.t)
                                                                          (Trait := ℐ))) in
                                                                    let* α1 :
                                                                        ref
                                                                          alloc.string.String.t :=
                                                                      M.read
                                                                        k in
                                                                    let* α2 :
                                                                        alloc.string.String.t :=
                                                                      M.call
                                                                        (α0
                                                                          α1) in
                                                                    let* α3 :
                                                                        (ref
                                                                            str.t)
                                                                          ->
                                                                          M
                                                                            alloc.string.String.t :=
                                                                      ltac:(M.get_method (fun ℐ =>
                                                                        alloc.string.ToString.to_string
                                                                          (Self :=
                                                                            str.t)
                                                                          (Trait := ℐ))) in
                                                                    let* α4 :
                                                                        ref
                                                                          str.t :=
                                                                      M.read
                                                                        str_value in
                                                                    let* α5 :
                                                                        alloc.string.String.t :=
                                                                      M.call
                                                                        (α3
                                                                          α4) in
                                                                    let* α6 :
                                                                        core.option.Option.t
                                                                          serde_json.value.Value.t :=
                                                                      M.call
                                                                        ((std.collections.hash.map.HashMap.t
                                                                              alloc.string.String.t
                                                                              serde_json.value.Value.t
                                                                              std.hash.random.RandomState.t)::["insert"]
                                                                          (borrow_mut
                                                                            temp_map)
                                                                          α2
                                                                          (serde_json.value.Value.String
                                                                            α5)) in
                                                                    M.alloc
                                                                      α6 in
                                                                  M.alloc tt
                                                                | _ =>
                                                                  M.break_match
                                                                end) :
                                                                M (M.Val unit);
                                                              fun γ =>
                                                                (let* α0 :=
                                                                  M.read γ in
                                                                match α0 with
                                                                |
                                                                    core.option.Option.None
                                                                    =>
                                                                  let* α0 :
                                                                      http.status.StatusCode.t :=
                                                                    M.read
                                                                      http.status.BAD_REQUEST in
                                                                  let* res :
                                                                      M.Val
                                                                        alloc.string.String.t :=
                                                                    let* α0 :
                                                                        ref
                                                                          str.t :=
                                                                      M.read
                                                                        (mk_str
                                                                          "Metadata value for key '") in
                                                                    let* α1 :
                                                                        ref
                                                                          str.t :=
                                                                      M.read
                                                                        (mk_str
                                                                          "' is not a string. All metadata values must be strings.") in
                                                                    let* α2 :
                                                                        M.Val
                                                                          (array
                                                                            (ref
                                                                              str.t)) :=
                                                                      M.alloc
                                                                        [ α0; α1
                                                                        ] in
                                                                    let* α3 :
                                                                        core.fmt.rt.Argument.t :=
                                                                      M.call
                                                                        (core.fmt.rt.Argument.t::["new_display"]
                                                                          (borrow
                                                                            k)) in
                                                                    let* α4 :
                                                                        M.Val
                                                                          (array
                                                                            core.fmt.rt.Argument.t) :=
                                                                      M.alloc
                                                                        [ α3
                                                                        ] in
                                                                    let* α5 :
                                                                        core.fmt.Arguments.t :=
                                                                      M.call
                                                                        (core.fmt.Arguments.t::["new_v1"]
                                                                          (pointer_coercion
                                                                            "Unsize"
                                                                            (borrow
                                                                              α2))
                                                                          (pointer_coercion
                                                                            "Unsize"
                                                                            (borrow
                                                                              α4))) in
                                                                    let* α6 :
                                                                        alloc.string.String.t :=
                                                                      M.call
                                                                        (alloc.fmt.format
                                                                          α5) in
                                                                    M.alloc
                                                                      α6 in
                                                                  let* α1 :
                                                                      alloc.string.String.t :=
                                                                    M.read
                                                                      res in
                                                                  let* α2 :
                                                                      M.Val
                                                                        never.t :=
                                                                    return_
                                                                      (core.result.Result.Err
                                                                        (α0,
                                                                          α1)) in
                                                                  let* α3 :=
                                                                    M.read α2 in
                                                                  let* α4 :
                                                                      unit :=
                                                                    never_to_any
                                                                      α3 in
                                                                  M.alloc α4
                                                                | _ =>
                                                                  M.break_match
                                                                end) :
                                                                M (M.Val unit)
                                                            ]
                                                        end
                                                      | _ => M.break_match
                                                      end) :
                                                      M (M.Val unit)
                                                  ] in
                                              M.alloc tt)) :
                                            M (M.Val unit)
                                        ] in
                                    M.pure (use α4) in
                                  let* α0 :
                                      std.collections.hash.map.HashMap.t
                                        alloc.string.String.t
                                        serde_json.value.Value.t
                                        std.hash.random.RandomState.t :=
                                    M.read temp_map in
                                  M.alloc (core.option.Option.Some α0)
                                | _ => M.break_match
                                end) :
                                M
                                  (M.Val
                                    (core.option.Option.t
                                      (std.collections.hash.map.HashMap.t
                                        alloc.string.String.t
                                        serde_json.value.Value.t
                                        std.hash.random.RandomState.t)));
                              fun γ =>
                                (M.alloc core.option.Option.None) :
                                M
                                  (M.Val
                                    (core.option.Option.t
                                      (std.collections.hash.map.HashMap.t
                                        alloc.string.String.t
                                        serde_json.value.Value.t
                                        std.hash.random.RandomState.t)))
                            ] in
                        let* α12 :
                            core.option.Option.t
                              (std.collections.hash.map.HashMap.t
                                alloc.string.String.t
                                serde_json.value.Value.t
                                std.hash.random.RandomState.t) :=
                          M.read α11 in
                        let* α13 :
                            (ref uuid.Uuid.t) -> M alloc.string.String.t :=
                          ltac:(M.get_method (fun ℐ =>
                            alloc.string.ToString.to_string
                              (Self := uuid.Uuid.t)
                              (Trait := ℐ))) in
                        let* α14 : M uuid.Uuid.t :=
                          ltac:(M.get_method (fun ℐ =>
                            core.default.Default.default
                              (Self := uuid.Uuid.t)
                              (Trait := ℐ))) in
                        let* α15 : uuid.Uuid.t := M.call α14 in
                        let* α16 : M.Val uuid.Uuid.t := M.alloc α15 in
                        let* α17 : alloc.string.String.t :=
                          M.call (α13 (borrow α16)) in
                        let* α18 : M.Val assistants_core.models.Thread.t :=
                          M.alloc
                            {|
                              assistants_core.models.Thread.inner :=
                                {|
                                  async_openai.types.thread.ThreadObject.id :=
                                    α1;
                                  async_openai.types.thread.ThreadObject.created_at :=
                                    (Integer.of_Z 0) : i32.t;
                                  async_openai.types.thread.ThreadObject.object :=
                                    α3;
                                  async_openai.types.thread.ThreadObject.metadata :=
                                    α12;
                                |};
                              assistants_core.models.Thread.user_id := α17;
                            |} in
                        M.alloc (borrow α18) in
                      let* thread :
                          M.Val
                            (core.result.Result.t
                              assistants_core.models.Thread.t
                              (alloc.boxed.Box.t
                                (dyn [core.error.Error.Trait])
                                alloc.alloc.Global.t)) :=
                        let* α0 : _ -> M _ :=
                          ltac:(M.get_method (fun ℐ =>
                            core.future.into_future.IntoFuture.into_future
                              (Self := _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (ref
                                (alloc.sync.Arc.t
                                  (sqlx_core.pool.Pool.t
                                    sqlx_postgres.database.Postgres.t)
                                  alloc.alloc.Global.t))
                              ->
                              M (ref _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.deref.Deref.deref
                              (Self :=
                                alloc.sync.Arc.t
                                  (sqlx_core.pool.Pool.t
                                    sqlx_postgres.database.Postgres.t)
                                  alloc.alloc.Global.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            ref
                              (sqlx_core.pool.Pool.t
                                sqlx_postgres.database.Postgres.t) :=
                          M.call
                            (α1
                              (borrow
                                (assistants_api_communication.models.AppState.Get_pool
                                  app_state))) in
                        let* α3 : ref assistants_core.models.Thread.t :=
                          M.read thread_object in
                        let* α4 : _ :=
                          M.call
                            (assistants_core.threads.create_thread α2 α3) in
                        let* α5 : _ := M.call (α0 α4) in
                        let* α6 : M.Val _ := M.alloc α5 in
                        let* α7 :
                            M.Val
                              (core.result.Result.t
                                assistants_core.models.Thread.t
                                (alloc.boxed.Box.t
                                  (dyn [core.error.Error.Trait])
                                  alloc.alloc.Global.t)) :=
                          match_operator
                            α6
                            [
                              fun γ =>
                                (let* __awaitee := M.copy γ in
                                M.loop
                                  (let* _ : M.Val unit :=
                                    let* α0 :
                                        (core.pin.Pin.t (mut_ref _)) ->
                                          (mut_ref core.task.wake.Context.t) ->
                                          M (core.task.poll.Poll.t _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.future.future.Future.poll
                                          (Self := _)
                                          (Trait := ℐ))) in
                                    let* α1 : core.pin.Pin.t (mut_ref _) :=
                                      M.call
                                        ((core.pin.Pin.t
                                              (mut_ref _))::["new_unchecked"]
                                          (borrow_mut __awaitee)) in
                                    let* α2 : core.future.ResumeTy.t :=
                                      M.read _task_context in
                                    let* α3 :
                                        mut_ref core.task.wake.Context.t :=
                                      M.call (core.future.get_context α2) in
                                    let* α4 :
                                        core.task.poll.Poll.t
                                          (core.result.Result.t
                                            assistants_core.models.Thread.t
                                            (alloc.boxed.Box.t
                                              (dyn [core.error.Error.Trait])
                                              alloc.alloc.Global.t)) :=
                                      M.call (α0 α1 α3) in
                                    let* α5 :
                                        M.Val
                                          (core.task.poll.Poll.t
                                            (core.result.Result.t
                                              assistants_core.models.Thread.t
                                              (alloc.boxed.Box.t
                                                (dyn [core.error.Error.Trait])
                                                alloc.alloc.Global.t))) :=
                                      M.alloc α4 in
                                    match_operator
                                      α5
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.task.poll.Poll.Ready _ =>
                                            let γ0_0 :=
                                              core.task.poll.Poll.Get_Ready_0
                                                γ in
                                            let* result := M.copy γ0_0 in
                                            let* α0 : M.Val never.t :=
                                              M.break in
                                            let* α1 := M.read α0 in
                                            let* α2 : unit := never_to_any α1 in
                                            M.alloc α2
                                          | _ => M.break_match
                                          end) :
                                          M (M.Val unit);
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.task.poll.Poll.Pending =>
                                            M.alloc tt
                                          | _ => M.break_match
                                          end) :
                                          M (M.Val unit)
                                      ] in
                                  let* _ : M.Val unit :=
                                    let* α0 : M.Val unit := M.alloc tt in
                                    let* α1 : M.Val core.future.ResumeTy.t :=
                                      yield α0 in
                                    let* α2 : core.future.ResumeTy.t :=
                                      M.read α1 in
                                    assign _task_context α2 in
                                  M.alloc tt)) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      assistants_core.models.Thread.t
                                      (alloc.boxed.Box.t
                                        (dyn [core.error.Error.Trait])
                                        alloc.alloc.Global.t)))
                            ] in
                        M.copy α7 in
                      let* α0 :
                          M.Val
                            (core.result.Result.t
                              (axum.json.Json.t
                                async_openai.types.thread.ThreadObject.t)
                              (http.status.StatusCode.t
                              *
                              alloc.string.String.t)) :=
                        match_operator
                          thread
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | core.result.Result.Ok _ =>
                                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                                let* thread := M.copy γ0_0 in
                                let* α0 :
                                    async_openai.types.thread.ThreadObject.t :=
                                  M.read
                                    (assistants_core.models.Thread.Get_inner
                                      thread) in
                                M.alloc
                                  (core.result.Result.Ok
                                    (axum.json.Json.Build_t α0))
                              | _ => M.break_match
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.thread.ThreadObject.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)));
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | core.result.Result.Err _ =>
                                let γ0_0 := core.result.Result.Get_Err_0 γ in
                                let* e := M.copy γ0_0 in
                                let* α0 : http.status.StatusCode.t :=
                                  M.read http.status.INTERNAL_SERVER_ERROR in
                                let* α1 :
                                    (ref
                                        (alloc.boxed.Box.t
                                          (dyn [core.error.Error.Trait])
                                          alloc.alloc.Global.t))
                                      ->
                                      M alloc.string.String.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    alloc.string.ToString.to_string
                                      (Self :=
                                        alloc.boxed.Box.t
                                          (dyn [core.error.Error.Trait])
                                          alloc.alloc.Global.t)
                                      (Trait := ℐ))) in
                                let* α2 : alloc.string.String.t :=
                                  M.call (α1 (borrow e)) in
                                M.alloc (core.result.Result.Err (α0, α2))
                              | _ => M.break_match
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.thread.ThreadObject.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ] in
                      M.pure (use α0)
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.thread.ThreadObject.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn get_thread_handler(
    Path((thread_id,)): Path<(String,)>,
    State(app_state): State<AppState>,
) -> Result<JsonResponse<ThreadObject>, (StatusCode, String)> {
    let thread = get_thread(&app_state.pool, &thread_id, &Uuid::default().to_string()).await;
    match thread {
        Ok(thread) => Ok(JsonResponse(thread.inner)),
        Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
    }
}
*)
Definition get_thread_handler
    (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_) =>
                        let γ1_0 := γ0_0 in
                        let* thread_id := M.copy γ1_0 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* thread :
                                    M.Val
                                      (core.result.Result.t
                                        assistants_core.models.Thread.t
                                        sqlx_core.error.Error.t) :=
                                  let* α0 : _ -> M _ :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.future.into_future.IntoFuture.into_future
                                        (Self := _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      (ref
                                          (alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t))
                                        ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self :=
                                          alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α2 :
                                      ref
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t) :=
                                    M.call
                                      (α1
                                        (borrow
                                          (assistants_api_communication.models.AppState.Get_pool
                                            app_state))) in
                                  let* α3 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α4 : ref str.t :=
                                    M.call (α3 (borrow thread_id)) in
                                  let* α5 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α6 :
                                      (ref uuid.Uuid.t) ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      alloc.string.ToString.to_string
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α7 : M uuid.Uuid.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.default.Default.default
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α8 : uuid.Uuid.t := M.call α7 in
                                  let* α9 : M.Val uuid.Uuid.t := M.alloc α8 in
                                  let* α10 : alloc.string.String.t :=
                                    M.call (α6 (borrow α9)) in
                                  let* α11 : M.Val alloc.string.String.t :=
                                    M.alloc α10 in
                                  let* α12 : ref str.t :=
                                    M.call (α5 (borrow α11)) in
                                  let* α13 : _ :=
                                    M.call
                                      (assistants_core.threads.get_thread
                                        α2
                                        α4
                                        α12) in
                                  let* α14 : _ := M.call (α0 α13) in
                                  let* α15 : M.Val _ := M.alloc α14 in
                                  let* α16 :
                                      M.Val
                                        (core.result.Result.t
                                          assistants_core.models.Thread.t
                                          sqlx_core.error.Error.t) :=
                                    match_operator
                                      α15
                                      [
                                        fun γ =>
                                          (let* __awaitee := M.copy γ in
                                          M.loop
                                            (let* _ : M.Val unit :=
                                              let* α0 :
                                                  (core.pin.Pin.t (mut_ref _))
                                                    ->
                                                    (mut_ref
                                                      core.task.wake.Context.t)
                                                    ->
                                                    M
                                                      (core.task.poll.Poll.t
                                                        _) :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.future.future.Future.poll
                                                    (Self := _)
                                                    (Trait := ℐ))) in
                                              let* α1 :
                                                  core.pin.Pin.t (mut_ref _) :=
                                                M.call
                                                  ((core.pin.Pin.t
                                                        (mut_ref
                                                          _))::["new_unchecked"]
                                                    (borrow_mut __awaitee)) in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read _task_context in
                                              let* α3 :
                                                  mut_ref
                                                    core.task.wake.Context.t :=
                                                M.call
                                                  (core.future.get_context
                                                    α2) in
                                              let* α4 :
                                                  core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      assistants_core.models.Thread.t
                                                      sqlx_core.error.Error.t) :=
                                                M.call (α0 α1 α3) in
                                              let* α5 :
                                                  M.Val
                                                    (core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        assistants_core.models.Thread.t
                                                        sqlx_core.error.Error.t)) :=
                                                M.alloc α4 in
                                              match_operator
                                                α5
                                                [
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Ready
                                                          _
                                                        =>
                                                      let γ0_0 :=
                                                        core.task.poll.Poll.Get_Ready_0
                                                          γ in
                                                      let* result :=
                                                        M.copy γ0_0 in
                                                      let* α0 : M.Val never.t :=
                                                        M.break in
                                                      let* α1 := M.read α0 in
                                                      let* α2 : unit :=
                                                        never_to_any α1 in
                                                      M.alloc α2
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit);
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Pending
                                                        =>
                                                      M.alloc tt
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit)
                                                ] in
                                            let* _ : M.Val unit :=
                                              let* α0 : M.Val unit :=
                                                M.alloc tt in
                                              let* α1 :
                                                  M.Val
                                                    core.future.ResumeTy.t :=
                                                yield α0 in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read α1 in
                                              assign _task_context α2 in
                                            M.alloc tt)) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                assistants_core.models.Thread.t
                                                sqlx_core.error.Error.t))
                                      ] in
                                  M.copy α16 in
                                let* α0 :
                                    M.Val
                                      (core.result.Result.t
                                        (axum.json.Json.t
                                          async_openai.types.thread.ThreadObject.t)
                                        (http.status.StatusCode.t
                                        *
                                        alloc.string.String.t)) :=
                                  match_operator
                                    thread
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Ok _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Ok_0 γ in
                                          let* thread := M.copy γ0_0 in
                                          let* α0 :
                                              async_openai.types.thread.ThreadObject.t :=
                                            M.read
                                              (assistants_core.models.Thread.Get_inner
                                                thread) in
                                          M.alloc
                                            (core.result.Result.Ok
                                              (axum.json.Json.Build_t α0))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.thread.ThreadObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)));
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Err _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Err_0 γ in
                                          let* e := M.copy γ0_0 in
                                          let* α0 : http.status.StatusCode.t :=
                                            M.read
                                              http.status.INTERNAL_SERVER_ERROR in
                                          let* α1 :
                                              (ref sqlx_core.error.Error.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self :=
                                                  sqlx_core.error.Error.t)
                                                (Trait := ℐ))) in
                                          let* α2 : alloc.string.String.t :=
                                            M.call (α1 (borrow e)) in
                                          M.alloc
                                            (core.result.Result.Err (α0, α2))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t
                                                async_openai.types.thread.ThreadObject.t)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ] in
                                M.pure (use α0)
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.thread.ThreadObject.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.thread.ThreadObject.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn list_threads_handler(
    State(app_state): State<AppState>,
) -> Result<JsonResponse<Vec<ThreadObject>>, (StatusCode, String)> {
    let threads = list_threads(&app_state.pool, &Uuid::default().to_string()).await;
    match threads {
        Ok(threads) => Ok(JsonResponse(threads.into_iter().map(|t| t.inner).collect())),
        Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
    }
}
*)
Definition list_threads_handler
    (__arg0
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val
                  (axum.extract.state.State.t
                    assistants_api_communication.models.AppState.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t
                      (alloc.vec.Vec.t
                        async_openai.types.thread.ThreadObject.t
                        alloc.alloc.Global.t))
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.state.State.Build_t _ =>
                      let γ0_0 := axum.extract.state.State.Get_0 γ in
                      let* app_state := M.copy γ0_0 in
                      let* threads :
                          M.Val
                            (core.result.Result.t
                              (alloc.vec.Vec.t
                                assistants_core.models.Thread.t
                                alloc.alloc.Global.t)
                              (alloc.boxed.Box.t
                                (dyn [core.error.Error.Trait])
                                alloc.alloc.Global.t)) :=
                        let* α0 : _ -> M _ :=
                          ltac:(M.get_method (fun ℐ =>
                            core.future.into_future.IntoFuture.into_future
                              (Self := _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (ref
                                (alloc.sync.Arc.t
                                  (sqlx_core.pool.Pool.t
                                    sqlx_postgres.database.Postgres.t)
                                  alloc.alloc.Global.t))
                              ->
                              M (ref _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.deref.Deref.deref
                              (Self :=
                                alloc.sync.Arc.t
                                  (sqlx_core.pool.Pool.t
                                    sqlx_postgres.database.Postgres.t)
                                  alloc.alloc.Global.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            ref
                              (sqlx_core.pool.Pool.t
                                sqlx_postgres.database.Postgres.t) :=
                          M.call
                            (α1
                              (borrow
                                (assistants_api_communication.models.AppState.Get_pool
                                  app_state))) in
                        let* α3 : (ref alloc.string.String.t) -> M (ref _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.deref.Deref.deref
                              (Self := alloc.string.String.t)
                              (Trait := ℐ))) in
                        let* α4 :
                            (ref uuid.Uuid.t) -> M alloc.string.String.t :=
                          ltac:(M.get_method (fun ℐ =>
                            alloc.string.ToString.to_string
                              (Self := uuid.Uuid.t)
                              (Trait := ℐ))) in
                        let* α5 : M uuid.Uuid.t :=
                          ltac:(M.get_method (fun ℐ =>
                            core.default.Default.default
                              (Self := uuid.Uuid.t)
                              (Trait := ℐ))) in
                        let* α6 : uuid.Uuid.t := M.call α5 in
                        let* α7 : M.Val uuid.Uuid.t := M.alloc α6 in
                        let* α8 : alloc.string.String.t :=
                          M.call (α4 (borrow α7)) in
                        let* α9 : M.Val alloc.string.String.t := M.alloc α8 in
                        let* α10 : ref str.t := M.call (α3 (borrow α9)) in
                        let* α11 : _ :=
                          M.call
                            (assistants_core.threads.list_threads α2 α10) in
                        let* α12 : _ := M.call (α0 α11) in
                        let* α13 : M.Val _ := M.alloc α12 in
                        let* α14 :
                            M.Val
                              (core.result.Result.t
                                (alloc.vec.Vec.t
                                  assistants_core.models.Thread.t
                                  alloc.alloc.Global.t)
                                (alloc.boxed.Box.t
                                  (dyn [core.error.Error.Trait])
                                  alloc.alloc.Global.t)) :=
                          match_operator
                            α13
                            [
                              fun γ =>
                                (let* __awaitee := M.copy γ in
                                M.loop
                                  (let* _ : M.Val unit :=
                                    let* α0 :
                                        (core.pin.Pin.t (mut_ref _)) ->
                                          (mut_ref core.task.wake.Context.t) ->
                                          M (core.task.poll.Poll.t _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.future.future.Future.poll
                                          (Self := _)
                                          (Trait := ℐ))) in
                                    let* α1 : core.pin.Pin.t (mut_ref _) :=
                                      M.call
                                        ((core.pin.Pin.t
                                              (mut_ref _))::["new_unchecked"]
                                          (borrow_mut __awaitee)) in
                                    let* α2 : core.future.ResumeTy.t :=
                                      M.read _task_context in
                                    let* α3 :
                                        mut_ref core.task.wake.Context.t :=
                                      M.call (core.future.get_context α2) in
                                    let* α4 :
                                        core.task.poll.Poll.t
                                          (core.result.Result.t
                                            (alloc.vec.Vec.t
                                              assistants_core.models.Thread.t
                                              alloc.alloc.Global.t)
                                            (alloc.boxed.Box.t
                                              (dyn [core.error.Error.Trait])
                                              alloc.alloc.Global.t)) :=
                                      M.call (α0 α1 α3) in
                                    let* α5 :
                                        M.Val
                                          (core.task.poll.Poll.t
                                            (core.result.Result.t
                                              (alloc.vec.Vec.t
                                                assistants_core.models.Thread.t
                                                alloc.alloc.Global.t)
                                              (alloc.boxed.Box.t
                                                (dyn [core.error.Error.Trait])
                                                alloc.alloc.Global.t))) :=
                                      M.alloc α4 in
                                    match_operator
                                      α5
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.task.poll.Poll.Ready _ =>
                                            let γ0_0 :=
                                              core.task.poll.Poll.Get_Ready_0
                                                γ in
                                            let* result := M.copy γ0_0 in
                                            let* α0 : M.Val never.t :=
                                              M.break in
                                            let* α1 := M.read α0 in
                                            let* α2 : unit := never_to_any α1 in
                                            M.alloc α2
                                          | _ => M.break_match
                                          end) :
                                          M (M.Val unit);
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.task.poll.Poll.Pending =>
                                            M.alloc tt
                                          | _ => M.break_match
                                          end) :
                                          M (M.Val unit)
                                      ] in
                                  let* _ : M.Val unit :=
                                    let* α0 : M.Val unit := M.alloc tt in
                                    let* α1 : M.Val core.future.ResumeTy.t :=
                                      yield α0 in
                                    let* α2 : core.future.ResumeTy.t :=
                                      M.read α1 in
                                    assign _task_context α2 in
                                  M.alloc tt)) :
                                M
                                  (M.Val
                                    (core.result.Result.t
                                      (alloc.vec.Vec.t
                                        assistants_core.models.Thread.t
                                        alloc.alloc.Global.t)
                                      (alloc.boxed.Box.t
                                        (dyn [core.error.Error.Trait])
                                        alloc.alloc.Global.t)))
                            ] in
                        M.copy α14 in
                      let* α0 :
                          M.Val
                            (core.result.Result.t
                              (axum.json.Json.t
                                (alloc.vec.Vec.t
                                  async_openai.types.thread.ThreadObject.t
                                  alloc.alloc.Global.t))
                              (http.status.StatusCode.t
                              *
                              alloc.string.String.t)) :=
                        match_operator
                          threads
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | core.result.Result.Ok _ =>
                                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                                let* threads := M.copy γ0_0 in
                                let* α0 :
                                    (core.iter.adapters.map.Map.t
                                        (alloc.vec.into_iter.IntoIter.t
                                          assistants_core.models.Thread.t
                                          alloc.alloc.Global.t)
                                        (assistants_core.models.Thread.t ->
                                          M
                                            async_openai.types.thread.ThreadObject.t))
                                      ->
                                      M
                                        (alloc.vec.Vec.t
                                          async_openai.types.thread.ThreadObject.t
                                          alloc.alloc.Global.t) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.iter.traits.iterator.Iterator.collect
                                      (Self :=
                                        core.iter.adapters.map.Map.t
                                          (alloc.vec.into_iter.IntoIter.t
                                            assistants_core.models.Thread.t
                                            alloc.alloc.Global.t)
                                          (assistants_core.models.Thread.t ->
                                            M
                                              async_openai.types.thread.ThreadObject.t))
                                      (B :=
                                        alloc.vec.Vec.t
                                          async_openai.types.thread.ThreadObject.t
                                          alloc.alloc.Global.t)
                                      (Trait := ℐ))) in
                                let* α1 :
                                    (alloc.vec.into_iter.IntoIter.t
                                        assistants_core.models.Thread.t
                                        alloc.alloc.Global.t)
                                      ->
                                      (assistants_core.models.Thread.t ->
                                        M
                                          async_openai.types.thread.ThreadObject.t)
                                      ->
                                      M
                                        (core.iter.adapters.map.Map.t
                                          (alloc.vec.into_iter.IntoIter.t
                                            assistants_core.models.Thread.t
                                            alloc.alloc.Global.t)
                                          (assistants_core.models.Thread.t ->
                                            M
                                              async_openai.types.thread.ThreadObject.t)) :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.iter.traits.iterator.Iterator.map
                                      (Self :=
                                        alloc.vec.into_iter.IntoIter.t
                                          assistants_core.models.Thread.t
                                          alloc.alloc.Global.t)
                                      (B :=
                                        async_openai.types.thread.ThreadObject.t)
                                      (F :=
                                        assistants_core.models.Thread.t ->
                                          M
                                            async_openai.types.thread.ThreadObject.t)
                                      (Trait := ℐ))) in
                                let* α2 :
                                    (alloc.vec.Vec.t
                                        assistants_core.models.Thread.t
                                        alloc.alloc.Global.t)
                                      ->
                                      M _ :=
                                  ltac:(M.get_method (fun ℐ =>
                                    core.iter.traits.collect.IntoIterator.into_iter
                                      (Self :=
                                        alloc.vec.Vec.t
                                          assistants_core.models.Thread.t
                                          alloc.alloc.Global.t)
                                      (Trait := ℐ))) in
                                let* α3 :
                                    alloc.vec.Vec.t
                                      assistants_core.models.Thread.t
                                      alloc.alloc.Global.t :=
                                  M.read threads in
                                let* α4 :
                                    alloc.vec.into_iter.IntoIter.t
                                      assistants_core.models.Thread.t
                                      alloc.alloc.Global.t :=
                                  M.call (α2 α3) in
                                let* α5 :
                                    core.iter.adapters.map.Map.t
                                      (alloc.vec.into_iter.IntoIter.t
                                        assistants_core.models.Thread.t
                                        alloc.alloc.Global.t)
                                      (assistants_core.models.Thread.t ->
                                        M
                                          async_openai.types.thread.ThreadObject.t) :=
                                  M.call
                                    (α1
                                      α4
                                      (fun
                                          (α0 :
                                            assistants_core.models.Thread.t) =>
                                        (let* α0 := M.alloc α0 in
                                        match_operator
                                          α0
                                          [
                                            fun γ =>
                                              (let* t := M.copy γ in
                                              M.read
                                                (assistants_core.models.Thread.Get_inner
                                                  t)) :
                                              M
                                                async_openai.types.thread.ThreadObject.t
                                          ]) :
                                        M
                                          async_openai.types.thread.ThreadObject.t)) in
                                let* α6 :
                                    alloc.vec.Vec.t
                                      async_openai.types.thread.ThreadObject.t
                                      alloc.alloc.Global.t :=
                                  M.call (α0 α5) in
                                M.alloc
                                  (core.result.Result.Ok
                                    (axum.json.Json.Build_t α6))
                              | _ => M.break_match
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      (alloc.vec.Vec.t
                                        async_openai.types.thread.ThreadObject.t
                                        alloc.alloc.Global.t))
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)));
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | core.result.Result.Err _ =>
                                let γ0_0 := core.result.Result.Get_Err_0 γ in
                                let* e := M.copy γ0_0 in
                                let* α0 : http.status.StatusCode.t :=
                                  M.read http.status.INTERNAL_SERVER_ERROR in
                                let* α1 :
                                    (ref
                                        (alloc.boxed.Box.t
                                          (dyn [core.error.Error.Trait])
                                          alloc.alloc.Global.t))
                                      ->
                                      M alloc.string.String.t :=
                                  ltac:(M.get_method (fun ℐ =>
                                    alloc.string.ToString.to_string
                                      (Self :=
                                        alloc.boxed.Box.t
                                          (dyn [core.error.Error.Trait])
                                          alloc.alloc.Global.t)
                                      (Trait := ℐ))) in
                                let* α2 : alloc.string.String.t :=
                                  M.call (α1 (borrow e)) in
                                M.alloc (core.result.Result.Err (α0, α2))
                              | _ => M.break_match
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      (alloc.vec.Vec.t
                                        async_openai.types.thread.ThreadObject.t
                                        alloc.alloc.Global.t))
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ] in
                      M.pure (use α0)
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            (alloc.vec.Vec.t
                              async_openai.types.thread.ThreadObject.t
                              alloc.alloc.Global.t))
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t
                  (alloc.vec.Vec.t
                    async_openai.types.thread.ThreadObject.t
                    alloc.alloc.Global.t))
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t
            (alloc.vec.Vec.t
              async_openai.types.thread.ThreadObject.t
              alloc.alloc.Global.t))
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn update_thread_handler(
    Path((thread_id,)): Path<(String,)>,
    State(app_state): State<AppState>,
    Json(thread_input): Json<ModifyThreadRequest>,
) -> Result<JsonResponse<ThreadObject>, (StatusCode, String)> {
    let thread = update_thread(
        &app_state.pool,
        &thread_id,
        &Uuid::default().to_string(),
        thread_input
            .metadata
            .map(|m| m.into_iter().map(|(k, v)| (k, v.to_string())).collect()),
    )
    .await;
    match thread {
        Ok(thread) => Ok(JsonResponse(thread.inner)),
        Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
    }
}
*)
Definition update_thread_handler
    (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    (__arg2 : axum.json.Json.t async_openai.types.thread.ModifyThreadRequest.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  let* __arg2 := M.alloc __arg2 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_) =>
                        let γ1_0 := γ0_0 in
                        let* thread_id := M.copy γ1_0 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* __arg2 :
                                    M.Val
                                      (axum.json.Json.t
                                        async_openai.types.thread.ModifyThreadRequest.t) :=
                                  M.copy __arg2 in
                                match_operator
                                  __arg2
                                  [
                                    fun γ =>
                                      (let* α0 := M.read γ in
                                      match α0 with
                                      | axum.json.Json.Build_t _ =>
                                        let γ0_0 := axum.json.Json.Get_0 γ in
                                        let* thread_input := M.copy γ0_0 in
                                        let* thread :
                                            M.Val
                                              (core.result.Result.t
                                                assistants_core.models.Thread.t
                                                (alloc.boxed.Box.t
                                                  (dyn [core.error.Error.Trait])
                                                  alloc.alloc.Global.t)) :=
                                          let* α0 : _ -> M _ :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.future.into_future.IntoFuture.into_future
                                                (Self := _)
                                                (Trait := ℐ))) in
                                          let* α1 :
                                              (ref
                                                  (alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t))
                                                ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self :=
                                                  alloc.sync.Arc.t
                                                    (sqlx_core.pool.Pool.t
                                                      sqlx_postgres.database.Postgres.t)
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α2 :
                                              ref
                                                (sqlx_core.pool.Pool.t
                                                  sqlx_postgres.database.Postgres.t) :=
                                            M.call
                                              (α1
                                                (borrow
                                                  (assistants_api_communication.models.AppState.Get_pool
                                                    app_state))) in
                                          let* α3 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α4 : ref str.t :=
                                            M.call (α3 (borrow thread_id)) in
                                          let* α5 :
                                              (ref alloc.string.String.t) ->
                                                M (ref _) :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.ops.deref.Deref.deref
                                                (Self := alloc.string.String.t)
                                                (Trait := ℐ))) in
                                          let* α6 :
                                              (ref uuid.Uuid.t) ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α7 : M uuid.Uuid.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              core.default.Default.default
                                                (Self := uuid.Uuid.t)
                                                (Trait := ℐ))) in
                                          let* α8 : uuid.Uuid.t := M.call α7 in
                                          let* α9 : M.Val uuid.Uuid.t :=
                                            M.alloc α8 in
                                          let* α10 : alloc.string.String.t :=
                                            M.call (α6 (borrow α9)) in
                                          let* α11 :
                                              M.Val alloc.string.String.t :=
                                            M.alloc α10 in
                                          let* α12 : ref str.t :=
                                            M.call (α5 (borrow α11)) in
                                          let* α13 :
                                              core.option.Option.t
                                                (std.collections.hash.map.HashMap.t
                                                  alloc.string.String.t
                                                  serde_json.value.Value.t
                                                  std.hash.random.RandomState.t) :=
                                            M.read
                                              (async_openai.types.thread.ModifyThreadRequest.Get_metadata
                                                thread_input) in
                                          let* α14 :
                                              core.option.Option.t
                                                (std.collections.hash.map.HashMap.t
                                                  alloc.string.String.t
                                                  alloc.string.String.t
                                                  std.hash.random.RandomState.t) :=
                                            M.call
                                              ((core.option.Option.t
                                                    (std.collections.hash.map.HashMap.t
                                                      alloc.string.String.t
                                                      serde_json.value.Value.t
                                                      std.hash.random.RandomState.t))::["map"]
                                                α13
                                                (fun
                                                    (α0 :
                                                      std.collections.hash.map.HashMap.t
                                                        alloc.string.String.t
                                                        serde_json.value.Value.t
                                                        std.hash.random.RandomState.t) =>
                                                  (let* α0 := M.alloc α0 in
                                                  match_operator
                                                    α0
                                                    [
                                                      fun γ =>
                                                        (let* m := M.copy γ in
                                                        let* α0 :
                                                            (core.iter.adapters.map.Map.t
                                                                (std.collections.hash.map.IntoIter.t
                                                                  alloc.string.String.t
                                                                  serde_json.value.Value.t)
                                                                ((alloc.string.String.t
                                                                  *
                                                                  serde_json.value.Value.t)
                                                                  ->
                                                                  M
                                                                    (alloc.string.String.t
                                                                    *
                                                                    alloc.string.String.t)))
                                                              ->
                                                              M
                                                                (std.collections.hash.map.HashMap.t
                                                                  alloc.string.String.t
                                                                  alloc.string.String.t
                                                                  std.hash.random.RandomState.t) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.iter.traits.iterator.Iterator.collect
                                                              (Self :=
                                                                core.iter.adapters.map.Map.t
                                                                  (std.collections.hash.map.IntoIter.t
                                                                    alloc.string.String.t
                                                                    serde_json.value.Value.t)
                                                                  ((alloc.string.String.t
                                                                    *
                                                                    serde_json.value.Value.t)
                                                                    ->
                                                                    M
                                                                      (alloc.string.String.t
                                                                      *
                                                                      alloc.string.String.t)))
                                                              (B :=
                                                                std.collections.hash.map.HashMap.t
                                                                  alloc.string.String.t
                                                                  alloc.string.String.t
                                                                  std.hash.random.RandomState.t)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            (std.collections.hash.map.IntoIter.t
                                                                alloc.string.String.t
                                                                serde_json.value.Value.t)
                                                              ->
                                                              ((alloc.string.String.t
                                                                *
                                                                serde_json.value.Value.t)
                                                                ->
                                                                M
                                                                  (alloc.string.String.t
                                                                  *
                                                                  alloc.string.String.t))
                                                              ->
                                                              M
                                                                (core.iter.adapters.map.Map.t
                                                                  (std.collections.hash.map.IntoIter.t
                                                                    alloc.string.String.t
                                                                    serde_json.value.Value.t)
                                                                  ((alloc.string.String.t
                                                                    *
                                                                    serde_json.value.Value.t)
                                                                    ->
                                                                    M
                                                                      (alloc.string.String.t
                                                                      *
                                                                      alloc.string.String.t))) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.iter.traits.iterator.Iterator.map
                                                              (Self :=
                                                                std.collections.hash.map.IntoIter.t
                                                                  alloc.string.String.t
                                                                  serde_json.value.Value.t)
                                                              (B :=
                                                                alloc.string.String.t
                                                                *
                                                                alloc.string.String.t)
                                                              (F :=
                                                                (alloc.string.String.t
                                                                  *
                                                                  serde_json.value.Value.t)
                                                                  ->
                                                                  M
                                                                    (alloc.string.String.t
                                                                    *
                                                                    alloc.string.String.t))
                                                              (Trait := ℐ))) in
                                                        let* α2 :
                                                            (std.collections.hash.map.HashMap.t
                                                                alloc.string.String.t
                                                                serde_json.value.Value.t
                                                                std.hash.random.RandomState.t)
                                                              ->
                                                              M _ :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.iter.traits.collect.IntoIterator.into_iter
                                                              (Self :=
                                                                std.collections.hash.map.HashMap.t
                                                                  alloc.string.String.t
                                                                  serde_json.value.Value.t
                                                                  std.hash.random.RandomState.t)
                                                              (Trait := ℐ))) in
                                                        let* α3 :
                                                            std.collections.hash.map.HashMap.t
                                                              alloc.string.String.t
                                                              serde_json.value.Value.t
                                                              std.hash.random.RandomState.t :=
                                                          M.read m in
                                                        let* α4 :
                                                            std.collections.hash.map.IntoIter.t
                                                              alloc.string.String.t
                                                              serde_json.value.Value.t :=
                                                          M.call (α2 α3) in
                                                        let* α5 :
                                                            core.iter.adapters.map.Map.t
                                                              (std.collections.hash.map.IntoIter.t
                                                                alloc.string.String.t
                                                                serde_json.value.Value.t)
                                                              ((alloc.string.String.t
                                                                *
                                                                serde_json.value.Value.t)
                                                                ->
                                                                M
                                                                  (alloc.string.String.t
                                                                  *
                                                                  alloc.string.String.t)) :=
                                                          M.call
                                                            (α1
                                                              α4
                                                              (fun
                                                                  (α0 :
                                                                    alloc.string.String.t
                                                                    *
                                                                    serde_json.value.Value.t) =>
                                                                (let* α0 :=
                                                                  M.alloc α0 in
                                                                match_operator
                                                                  α0
                                                                  [
                                                                    fun γ =>
                                                                      (let*
                                                                            α0 :=
                                                                        M.read
                                                                          γ in
                                                                      match α0
                                                                      with
                                                                      |
                                                                          (_, _)
                                                                          =>
                                                                        let
                                                                              γ0_0 :=
                                                                          Tuple.Access.left
                                                                            γ in
                                                                        let
                                                                              γ0_1 :=
                                                                          Tuple.Access.right
                                                                            γ in
                                                                        let*
                                                                              k :=
                                                                          M.copy
                                                                            γ0_0 in
                                                                        let*
                                                                              v :=
                                                                          M.copy
                                                                            γ0_1 in
                                                                        let*
                                                                              α0 :
                                                                            alloc.string.String.t :=
                                                                          M.read
                                                                            k in
                                                                        let*
                                                                              α1 :
                                                                            (ref
                                                                                serde_json.value.Value.t)
                                                                              ->
                                                                              M
                                                                                alloc.string.String.t :=
                                                                          ltac:(M.get_method (fun ℐ =>
                                                                            alloc.string.ToString.to_string
                                                                              (Self :=
                                                                                serde_json.value.Value.t)
                                                                              (Trait := ℐ))) in
                                                                        let*
                                                                              α2 :
                                                                            alloc.string.String.t :=
                                                                          M.call
                                                                            (α1
                                                                              (borrow
                                                                                v)) in
                                                                        M.pure
                                                                          (α0,
                                                                            α2)
                                                                      end) :
                                                                      M
                                                                        (alloc.string.String.t
                                                                        *
                                                                        alloc.string.String.t)
                                                                  ]) :
                                                                M
                                                                  (alloc.string.String.t
                                                                  *
                                                                  alloc.string.String.t))) in
                                                        M.call (α0 α5)) :
                                                        M
                                                          (std.collections.hash.map.HashMap.t
                                                            alloc.string.String.t
                                                            alloc.string.String.t
                                                            std.hash.random.RandomState.t)
                                                    ]) :
                                                  M
                                                    (std.collections.hash.map.HashMap.t
                                                      alloc.string.String.t
                                                      alloc.string.String.t
                                                      std.hash.random.RandomState.t))) in
                                          let* α15 : _ :=
                                            M.call
                                              (assistants_core.threads.update_thread
                                                α2
                                                α4
                                                α12
                                                α14) in
                                          let* α16 : _ := M.call (α0 α15) in
                                          let* α17 : M.Val _ := M.alloc α16 in
                                          let* α18 :
                                              M.Val
                                                (core.result.Result.t
                                                  assistants_core.models.Thread.t
                                                  (alloc.boxed.Box.t
                                                    (dyn
                                                      [core.error.Error.Trait])
                                                    alloc.alloc.Global.t)) :=
                                            match_operator
                                              α17
                                              [
                                                fun γ =>
                                                  (let* __awaitee := M.copy γ in
                                                  M.loop
                                                    (let* _ : M.Val unit :=
                                                      let* α0 :
                                                          (core.pin.Pin.t
                                                              (mut_ref _))
                                                            ->
                                                            (mut_ref
                                                              core.task.wake.Context.t)
                                                            ->
                                                            M
                                                              (core.task.poll.Poll.t
                                                                _) :=
                                                        ltac:(M.get_method (fun ℐ =>
                                                          core.future.future.Future.poll
                                                            (Self := _)
                                                            (Trait := ℐ))) in
                                                      let* α1 :
                                                          core.pin.Pin.t
                                                            (mut_ref _) :=
                                                        M.call
                                                          ((core.pin.Pin.t
                                                                (mut_ref
                                                                  _))::["new_unchecked"]
                                                            (borrow_mut
                                                              __awaitee)) in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read _task_context in
                                                      let* α3 :
                                                          mut_ref
                                                            core.task.wake.Context.t :=
                                                        M.call
                                                          (core.future.get_context
                                                            α2) in
                                                      let* α4 :
                                                          core.task.poll.Poll.t
                                                            (core.result.Result.t
                                                              assistants_core.models.Thread.t
                                                              (alloc.boxed.Box.t
                                                                (dyn
                                                                  [core.error.Error.Trait])
                                                                alloc.alloc.Global.t)) :=
                                                        M.call (α0 α1 α3) in
                                                      let* α5 :
                                                          M.Val
                                                            (core.task.poll.Poll.t
                                                              (core.result.Result.t
                                                                assistants_core.models.Thread.t
                                                                (alloc.boxed.Box.t
                                                                  (dyn
                                                                    [core.error.Error.Trait])
                                                                  alloc.alloc.Global.t))) :=
                                                        M.alloc α4 in
                                                      match_operator
                                                        α5
                                                        [
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Ready
                                                                  _
                                                                =>
                                                              let γ0_0 :=
                                                                core.task.poll.Poll.Get_Ready_0
                                                                  γ in
                                                              let* result :=
                                                                M.copy γ0_0 in
                                                              let* α0 :
                                                                  M.Val
                                                                    never.t :=
                                                                M.break in
                                                              let* α1 :=
                                                                M.read α0 in
                                                              let* α2 : unit :=
                                                                never_to_any
                                                                  α1 in
                                                              M.alloc α2
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit);
                                                          fun γ =>
                                                            (let* α0 :=
                                                              M.read γ in
                                                            match α0 with
                                                            |
                                                                core.task.poll.Poll.Pending
                                                                =>
                                                              M.alloc tt
                                                            | _ => M.break_match
                                                            end) :
                                                            M (M.Val unit)
                                                        ] in
                                                    let* _ : M.Val unit :=
                                                      let* α0 : M.Val unit :=
                                                        M.alloc tt in
                                                      let* α1 :
                                                          M.Val
                                                            core.future.ResumeTy.t :=
                                                        yield α0 in
                                                      let* α2 :
                                                          core.future.ResumeTy.t :=
                                                        M.read α1 in
                                                      assign _task_context α2 in
                                                    M.alloc tt)) :
                                                  M
                                                    (M.Val
                                                      (core.result.Result.t
                                                        assistants_core.models.Thread.t
                                                        (alloc.boxed.Box.t
                                                          (dyn
                                                            [core.error.Error.Trait])
                                                          alloc.alloc.Global.t)))
                                              ] in
                                          M.copy α18 in
                                        let* α0 :
                                            M.Val
                                              (core.result.Result.t
                                                (axum.json.Json.t
                                                  async_openai.types.thread.ThreadObject.t)
                                                (http.status.StatusCode.t
                                                *
                                                alloc.string.String.t)) :=
                                          match_operator
                                            thread
                                            [
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Ok _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Ok_0
                                                      γ in
                                                  let* thread := M.copy γ0_0 in
                                                  let* α0 :
                                                      async_openai.types.thread.ThreadObject.t :=
                                                    M.read
                                                      (assistants_core.models.Thread.Get_inner
                                                        thread) in
                                                  M.alloc
                                                    (core.result.Result.Ok
                                                      (axum.json.Json.Build_t
                                                        α0))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.thread.ThreadObject.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)));
                                              fun γ =>
                                                (let* α0 := M.read γ in
                                                match α0 with
                                                | core.result.Result.Err _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Err_0
                                                      γ in
                                                  let* e := M.copy γ0_0 in
                                                  let* α0 :
                                                      http.status.StatusCode.t :=
                                                    M.read
                                                      http.status.INTERNAL_SERVER_ERROR in
                                                  let* α1 :
                                                      (ref
                                                          (alloc.boxed.Box.t
                                                            (dyn
                                                              [core.error.Error.Trait])
                                                            alloc.alloc.Global.t))
                                                        ->
                                                        M
                                                          alloc.string.String.t :=
                                                    ltac:(M.get_method (fun ℐ =>
                                                      alloc.string.ToString.to_string
                                                        (Self :=
                                                          alloc.boxed.Box.t
                                                            (dyn
                                                              [core.error.Error.Trait])
                                                            alloc.alloc.Global.t)
                                                        (Trait := ℐ))) in
                                                  let* α2 :
                                                      alloc.string.String.t :=
                                                    M.call (α1 (borrow e)) in
                                                  M.alloc
                                                    (core.result.Result.Err
                                                      (α0, α2))
                                                | _ => M.break_match
                                                end) :
                                                M
                                                  (M.Val
                                                    (core.result.Result.t
                                                      (axum.json.Json.t
                                                        async_openai.types.thread.ThreadObject.t)
                                                      (http.status.StatusCode.t
                                                      *
                                                      alloc.string.String.t)))
                                            ] in
                                        M.pure (use α0)
                                      end) :
                                      M
                                        (M.Val
                                          (core.result.Result.t
                                            (axum.json.Json.t
                                              async_openai.types.thread.ThreadObject.t)
                                            (http.status.StatusCode.t
                                            *
                                            alloc.string.String.t)))
                                  ]
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t
                                      async_openai.types.thread.ThreadObject.t)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t
                            async_openai.types.thread.ThreadObject.t)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t async_openai.types.thread.ThreadObject.t)
          (http.status.StatusCode.t * alloc.string.String.t))).

(*
pub async fn delete_thread_handler(
    Path((thread_id,)): Path<(String,)>,
    State(app_state): State<AppState>,
) -> Result<JsonResponse<()>, (StatusCode, String)> {
    let result = delete_thread(&app_state.pool, &thread_id, &Uuid::default().to_string()).await;
    match result {
        Ok(_) => Ok(JsonResponse(())),
        Err(e) => Err((StatusCode::INTERNAL_SERVER_ERROR, e.to_string())),
    }
}
*)
Definition delete_thread_handler
    (__arg0 : axum.extract.path.Path.t alloc.string.String.t)
    (__arg1
      :
      axum.extract.state.State.t assistants_api_communication.models.AppState.t)
    : M OpaqueDef :=
  let* __arg0 := M.alloc __arg0 in
  let* __arg1 := M.alloc __arg1 in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* __arg0 :
                M.Val (axum.extract.path.Path.t alloc.string.String.t) :=
              M.copy __arg0 in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    (axum.json.Json.t unit)
                    (http.status.StatusCode.t * alloc.string.String.t)) :=
              match_operator
                __arg0
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    | axum.extract.path.Path.Build_t _ =>
                      let γ0_0 := axum.extract.path.Path.Get_0 γ in
                      let* α0 := M.read γ0_0 in
                      match α0 with
                      | (_) =>
                        let γ1_0 := γ0_0 in
                        let* thread_id := M.copy γ1_0 in
                        let* __arg1 :
                            M.Val
                              (axum.extract.state.State.t
                                assistants_api_communication.models.AppState.t) :=
                          M.copy __arg1 in
                        match_operator
                          __arg1
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | axum.extract.state.State.Build_t _ =>
                                let γ0_0 := axum.extract.state.State.Get_0 γ in
                                let* app_state := M.copy γ0_0 in
                                let* result :
                                    M.Val
                                      (core.result.Result.t
                                        unit
                                        (alloc.boxed.Box.t
                                          (dyn [core.error.Error.Trait])
                                          alloc.alloc.Global.t)) :=
                                  let* α0 : _ -> M _ :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.future.into_future.IntoFuture.into_future
                                        (Self := _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      (ref
                                          (alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t))
                                        ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self :=
                                          alloc.sync.Arc.t
                                            (sqlx_core.pool.Pool.t
                                              sqlx_postgres.database.Postgres.t)
                                            alloc.alloc.Global.t)
                                        (Trait := ℐ))) in
                                  let* α2 :
                                      ref
                                        (sqlx_core.pool.Pool.t
                                          sqlx_postgres.database.Postgres.t) :=
                                    M.call
                                      (α1
                                        (borrow
                                          (assistants_api_communication.models.AppState.Get_pool
                                            app_state))) in
                                  let* α3 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α4 : ref str.t :=
                                    M.call (α3 (borrow thread_id)) in
                                  let* α5 :
                                      (ref alloc.string.String.t) ->
                                        M (ref _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.deref.Deref.deref
                                        (Self := alloc.string.String.t)
                                        (Trait := ℐ))) in
                                  let* α6 :
                                      (ref uuid.Uuid.t) ->
                                        M alloc.string.String.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      alloc.string.ToString.to_string
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α7 : M uuid.Uuid.t :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.default.Default.default
                                        (Self := uuid.Uuid.t)
                                        (Trait := ℐ))) in
                                  let* α8 : uuid.Uuid.t := M.call α7 in
                                  let* α9 : M.Val uuid.Uuid.t := M.alloc α8 in
                                  let* α10 : alloc.string.String.t :=
                                    M.call (α6 (borrow α9)) in
                                  let* α11 : M.Val alloc.string.String.t :=
                                    M.alloc α10 in
                                  let* α12 : ref str.t :=
                                    M.call (α5 (borrow α11)) in
                                  let* α13 : _ :=
                                    M.call
                                      (assistants_core.threads.delete_thread
                                        α2
                                        α4
                                        α12) in
                                  let* α14 : _ := M.call (α0 α13) in
                                  let* α15 : M.Val _ := M.alloc α14 in
                                  let* α16 :
                                      M.Val
                                        (core.result.Result.t
                                          unit
                                          (alloc.boxed.Box.t
                                            (dyn [core.error.Error.Trait])
                                            alloc.alloc.Global.t)) :=
                                    match_operator
                                      α15
                                      [
                                        fun γ =>
                                          (let* __awaitee := M.copy γ in
                                          M.loop
                                            (let* _ : M.Val unit :=
                                              let* α0 :
                                                  (core.pin.Pin.t (mut_ref _))
                                                    ->
                                                    (mut_ref
                                                      core.task.wake.Context.t)
                                                    ->
                                                    M
                                                      (core.task.poll.Poll.t
                                                        _) :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.future.future.Future.poll
                                                    (Self := _)
                                                    (Trait := ℐ))) in
                                              let* α1 :
                                                  core.pin.Pin.t (mut_ref _) :=
                                                M.call
                                                  ((core.pin.Pin.t
                                                        (mut_ref
                                                          _))::["new_unchecked"]
                                                    (borrow_mut __awaitee)) in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read _task_context in
                                              let* α3 :
                                                  mut_ref
                                                    core.task.wake.Context.t :=
                                                M.call
                                                  (core.future.get_context
                                                    α2) in
                                              let* α4 :
                                                  core.task.poll.Poll.t
                                                    (core.result.Result.t
                                                      unit
                                                      (alloc.boxed.Box.t
                                                        (dyn
                                                          [core.error.Error.Trait])
                                                        alloc.alloc.Global.t)) :=
                                                M.call (α0 α1 α3) in
                                              let* α5 :
                                                  M.Val
                                                    (core.task.poll.Poll.t
                                                      (core.result.Result.t
                                                        unit
                                                        (alloc.boxed.Box.t
                                                          (dyn
                                                            [core.error.Error.Trait])
                                                          alloc.alloc.Global.t))) :=
                                                M.alloc α4 in
                                              match_operator
                                                α5
                                                [
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Ready
                                                          _
                                                        =>
                                                      let γ0_0 :=
                                                        core.task.poll.Poll.Get_Ready_0
                                                          γ in
                                                      let* result :=
                                                        M.copy γ0_0 in
                                                      let* α0 : M.Val never.t :=
                                                        M.break in
                                                      let* α1 := M.read α0 in
                                                      let* α2 : unit :=
                                                        never_to_any α1 in
                                                      M.alloc α2
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit);
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.task.poll.Poll.Pending
                                                        =>
                                                      M.alloc tt
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit)
                                                ] in
                                            let* _ : M.Val unit :=
                                              let* α0 : M.Val unit :=
                                                M.alloc tt in
                                              let* α1 :
                                                  M.Val
                                                    core.future.ResumeTy.t :=
                                                yield α0 in
                                              let* α2 :
                                                  core.future.ResumeTy.t :=
                                                M.read α1 in
                                              assign _task_context α2 in
                                            M.alloc tt)) :
                                          M
                                            (M.Val
                                              (core.result.Result.t
                                                unit
                                                (alloc.boxed.Box.t
                                                  (dyn [core.error.Error.Trait])
                                                  alloc.alloc.Global.t)))
                                      ] in
                                  M.copy α16 in
                                let* α0 :
                                    M.Val
                                      (core.result.Result.t
                                        (axum.json.Json.t unit)
                                        (http.status.StatusCode.t
                                        *
                                        alloc.string.String.t)) :=
                                  match_operator
                                    result
                                    [
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Ok _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Ok_0 γ in
                                          M.alloc
                                            (core.result.Result.Ok
                                              (axum.json.Json.Build_t tt))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t unit)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)));
                                      fun γ =>
                                        (let* α0 := M.read γ in
                                        match α0 with
                                        | core.result.Result.Err _ =>
                                          let γ0_0 :=
                                            core.result.Result.Get_Err_0 γ in
                                          let* e := M.copy γ0_0 in
                                          let* α0 : http.status.StatusCode.t :=
                                            M.read
                                              http.status.INTERNAL_SERVER_ERROR in
                                          let* α1 :
                                              (ref
                                                  (alloc.boxed.Box.t
                                                    (dyn
                                                      [core.error.Error.Trait])
                                                    alloc.alloc.Global.t))
                                                ->
                                                M alloc.string.String.t :=
                                            ltac:(M.get_method (fun ℐ =>
                                              alloc.string.ToString.to_string
                                                (Self :=
                                                  alloc.boxed.Box.t
                                                    (dyn
                                                      [core.error.Error.Trait])
                                                    alloc.alloc.Global.t)
                                                (Trait := ℐ))) in
                                          let* α2 : alloc.string.String.t :=
                                            M.call (α1 (borrow e)) in
                                          M.alloc
                                            (core.result.Result.Err (α0, α2))
                                        | _ => M.break_match
                                        end) :
                                        M
                                          (M.Val
                                            (core.result.Result.t
                                              (axum.json.Json.t unit)
                                              (http.status.StatusCode.t
                                              *
                                              alloc.string.String.t)))
                                    ] in
                                M.pure (use α0)
                              end) :
                              M
                                (M.Val
                                  (core.result.Result.t
                                    (axum.json.Json.t unit)
                                    (http.status.StatusCode.t
                                    *
                                    alloc.string.String.t)))
                          ]
                      end
                    end) :
                    M
                      (M.Val
                        (core.result.Result.t
                          (axum.json.Json.t unit)
                          (http.status.StatusCode.t * alloc.string.String.t)))
                ] in
            M.read α0) :
            M
              (core.result.Result.t
                (axum.json.Json.t unit)
                (http.status.StatusCode.t * alloc.string.String.t))
        ]) :
      M
        (core.result.Result.t
          (axum.json.Json.t unit)
          (http.status.StatusCode.t * alloc.string.String.t))).
