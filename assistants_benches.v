(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  TestCase.
Section TestCase.
  Record t : Set := {
    test_case : alloc.string.String.t;
    steps : alloc.vec.Vec.t assistants_benches.Step.t alloc.vec.Vec.Default.A;
    models : alloc.vec.Vec.t alloc.string.String.t alloc.vec.Vec.Default.A;
  }.
  
  Definition Get_test_case :=
    Ref.map
      (fun α => Some α.(test_case))
      (fun β α => Some (α <| test_case := β |>)).
  Definition Get_steps :=
    Ref.map (fun α => Some α.(steps)) (fun β α => Some (α <| steps := β |>)).
  Definition Get_models :=
    Ref.map (fun α => Some α.(models)) (fun β α => Some (α <| models := β |>)).
End TestCase.
End TestCase.

Module  Impl_serde_de_Deserialize_for_assistants_benches_TestCase_t.
Section Impl_serde_de_Deserialize_for_assistants_benches_TestCase_t.
  Definition Self : Set := assistants_benches.TestCase.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_benches._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_benches._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "TestCase") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_benches._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_benches._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_benches._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_benches_TestCase_t.
End Impl_serde_de_Deserialize_for_assistants_benches_TestCase_t.

Module __Field.
  Inductive t : Set :=
  | __field0
  | __field1
  | __field2
  | __ignore.
End __Field.

Module  __FieldVisitor.
Section __FieldVisitor.
  Inductive t : Set := Build.
End __FieldVisitor.
End __FieldVisitor.

Module  Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.
  Definition Self : Set := assistants_benches._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_benches._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_benches._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_benches._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_benches._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field2)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.

Module  Impl_serde_de_Deserialize_for_assistants_benches___deserialize___Field_t.
Section Impl_serde_de_Deserialize_for_assistants_benches___deserialize___Field_t.
  Definition Self : Set := assistants_benches._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          assistants_benches._.deserialize.__FieldVisitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_identifier
          (Self := __D)
          (V := assistants_benches._.deserialize.__FieldVisitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    M.call (α0 α1 assistants_benches._.deserialize.__FieldVisitor.Build).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_benches___deserialize___Field_t.
End Impl_serde_de_Deserialize_for_assistants_benches___deserialize___Field_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker : core.marker.PhantomData.t assistants_benches.TestCase.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.
  Definition Self : Set := assistants_benches._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_benches.TestCase.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct TestCase") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_benches.TestCase.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t assistants_benches.TestCase.t _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_benches.TestCase.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct TestCase with 3 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field1 :
          M.Val
            (alloc.vec.Vec.t assistants_benches.Step.t alloc.alloc.Global.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t
                  (alloc.vec.Vec.t
                    assistants_benches.Step.t
                    alloc.alloc.Global.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      assistants_benches.Step.t
                      alloc.alloc.Global.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      assistants_benches.Step.t
                      alloc.alloc.Global.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T :=
                alloc.vec.Vec.t assistants_benches.Step.t alloc.alloc.Global.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t
                (alloc.vec.Vec.t
                  assistants_benches.Step.t
                  alloc.alloc.Global.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t
                (alloc.vec.Vec.t
                  assistants_benches.Step.t
                  alloc.alloc.Global.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  (alloc.vec.Vec.t
                    assistants_benches.Step.t
                    alloc.alloc.Global.t))) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t
                (alloc.vec.Vec.t
                  assistants_benches.Step.t
                  alloc.alloc.Global.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_benches.TestCase.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t assistants_benches.TestCase.t _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_benches.TestCase.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        (alloc.vec.Vec.t
                          assistants_benches.Step.t
                          alloc.alloc.Global.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        assistants_benches.Step.t
                        alloc.alloc.Global.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        assistants_benches.Step.t
                        alloc.alloc.Global.t)))
            ] in
        let* α6 :
            M.Val
              (alloc.vec.Vec.t
                assistants_benches.Step.t
                alloc.alloc.Global.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      assistants_benches.Step.t
                      alloc.alloc.Global.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct TestCase with 3 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 :
                      alloc.vec.Vec.t
                        assistants_benches.Step.t
                        alloc.alloc.Global.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      assistants_benches.Step.t
                      alloc.alloc.Global.t))
            ] in
        M.copy α6 in
      let* __field2 :
          M.Val (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t
                  (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      alloc.string.String.t
                      alloc.alloc.Global.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      alloc.string.String.t
                      alloc.alloc.Global.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t
                (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t
                (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  (alloc.vec.Vec.t
                    alloc.string.String.t
                    alloc.alloc.Global.t))) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t
                (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_benches.TestCase.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t assistants_benches.TestCase.t _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_benches.TestCase.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        (alloc.vec.Vec.t
                          alloc.string.String.t
                          alloc.alloc.Global.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        alloc.string.String.t
                        alloc.alloc.Global.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        alloc.string.String.t
                        alloc.alloc.Global.t)))
            ] in
        let* α6 :
            M.Val
              (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      alloc.string.String.t
                      alloc.alloc.Global.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 2) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct TestCase with 3 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 :
                      alloc.vec.Vec.t
                        alloc.string.String.t
                        alloc.alloc.Global.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      alloc.string.String.t
                      alloc.alloc.Global.t))
            ] in
        M.copy α6 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 :
          alloc.vec.Vec.t assistants_benches.Step.t alloc.alloc.Global.t :=
        M.read __field1 in
      let* α2 : alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t :=
        M.read __field2 in
      let* α0 : M.Val (core.result.Result.t assistants_benches.TestCase.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_benches.TestCase.test_case := α0;
              assistants_benches.TestCase.steps := α1;
              assistants_benches.TestCase.models := α2;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field1 :
          M.Val
            (core.option.Option.t
              (alloc.vec.Vec.t
                assistants_benches.Step.t
                alloc.alloc.Global.t)) :=
        M.alloc core.option.Option.None in
      let* __field2 :
          M.Val
            (core.option.Option.t
              (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_benches._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_benches._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_benches._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_benches._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_benches._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_benches._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_benches._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_benches._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_benches.TestCase.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_benches.TestCase.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t assistants_benches.TestCase.t _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_benches._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_benches._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_benches._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field0 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "test_case") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.TestCase.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.TestCase.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.TestCase.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field1 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (alloc.vec.Vec.t
                                        assistants_benches.Step.t
                                        alloc.alloc.Global.t))::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "steps") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (alloc.vec.Vec.t
                                      assistants_benches.Step.t
                                      alloc.alloc.Global.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (alloc.vec.Vec.t
                                        assistants_benches.Step.t
                                        alloc.alloc.Global.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (alloc.vec.Vec.t
                                        assistants_benches.Step.t
                                        alloc.alloc.Global.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    alloc.vec.Vec.t
                                      assistants_benches.Step.t
                                      alloc.alloc.Global.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (alloc.vec.Vec.t
                                    assistants_benches.Step.t
                                    alloc.alloc.Global.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (alloc.vec.Vec.t
                                    assistants_benches.Step.t
                                    alloc.alloc.Global.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (alloc.vec.Vec.t
                                      assistants_benches.Step.t
                                      alloc.alloc.Global.t)) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  (alloc.vec.Vec.t
                                    assistants_benches.Step.t
                                    alloc.alloc.Global.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.TestCase.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.TestCase.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.TestCase.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          alloc.vec.Vec.t
                                            assistants_benches.Step.t
                                            alloc.alloc.Global.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (alloc.vec.Vec.t
                                          assistants_benches.Step.t
                                          alloc.alloc.Global.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (alloc.vec.Vec.t
                                          assistants_benches.Step.t
                                          alloc.alloc.Global.t))
                                ] in
                            let* α6 :
                                alloc.vec.Vec.t
                                  assistants_benches.Step.t
                                  alloc.alloc.Global.t :=
                              M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field2 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (alloc.vec.Vec.t
                                        alloc.string.String.t
                                        alloc.alloc.Global.t))::["is_some"]
                                  (borrow __field2)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "models") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (alloc.vec.Vec.t
                                      alloc.string.String.t
                                      alloc.alloc.Global.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (alloc.vec.Vec.t
                                        alloc.string.String.t
                                        alloc.alloc.Global.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (alloc.vec.Vec.t
                                        alloc.string.String.t
                                        alloc.alloc.Global.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    alloc.vec.Vec.t
                                      alloc.string.String.t
                                      alloc.alloc.Global.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (alloc.vec.Vec.t
                                    alloc.string.String.t
                                    alloc.alloc.Global.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (alloc.vec.Vec.t
                                    alloc.string.String.t
                                    alloc.alloc.Global.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (alloc.vec.Vec.t
                                      alloc.string.String.t
                                      alloc.alloc.Global.t)) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  (alloc.vec.Vec.t
                                    alloc.string.String.t
                                    alloc.alloc.Global.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.TestCase.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.TestCase.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.TestCase.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          alloc.vec.Vec.t
                                            alloc.string.String.t
                                            alloc.alloc.Global.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (alloc.vec.Vec.t
                                          alloc.string.String.t
                                          alloc.alloc.Global.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (alloc.vec.Vec.t
                                          alloc.string.String.t
                                          alloc.alloc.Global.t))
                                ] in
                            let* α6 :
                                alloc.vec.Vec.t
                                  alloc.string.String.t
                                  alloc.alloc.Global.t :=
                              M.read α5 in
                            assign __field2 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_benches.TestCase.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_benches.TestCase.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_benches.TestCase.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "test_case") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.TestCase.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.TestCase.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.TestCase.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field1 :
          M.Val
            (alloc.vec.Vec.t assistants_benches.Step.t alloc.alloc.Global.t) :=
        let* α0 :
            M.Val
              (alloc.vec.Vec.t
                assistants_benches.Step.t
                alloc.alloc.Global.t) :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      assistants_benches.Step.t
                      alloc.alloc.Global.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          (alloc.vec.Vec.t
                            assistants_benches.Step.t
                            alloc.alloc.Global.t)
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (alloc.vec.Vec.t
                              assistants_benches.Step.t
                              alloc.alloc.Global.t)
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "steps") in
                  let* α2 :
                      core.result.Result.t
                        (alloc.vec.Vec.t
                          assistants_benches.Step.t
                          alloc.alloc.Global.t)
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (alloc.vec.Vec.t
                          assistants_benches.Step.t
                          alloc.alloc.Global.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (alloc.vec.Vec.t
                            assistants_benches.Step.t
                            alloc.alloc.Global.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.TestCase.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.TestCase.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.TestCase.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              alloc.vec.Vec.t
                                assistants_benches.Step.t
                                alloc.alloc.Global.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (alloc.vec.Vec.t
                              assistants_benches.Step.t
                              alloc.alloc.Global.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (alloc.vec.Vec.t
                              assistants_benches.Step.t
                              alloc.alloc.Global.t))
                    ]
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      assistants_benches.Step.t
                      alloc.alloc.Global.t))
            ] in
        M.copy α0 in
      let* __field2 :
          M.Val (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t) :=
        let* α0 :
            M.Val
              (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t) :=
          match_operator
            __field2
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field2 := M.copy γ0_0 in
                  M.pure __field2
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      alloc.string.String.t
                      alloc.alloc.Global.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          (alloc.vec.Vec.t
                            alloc.string.String.t
                            alloc.alloc.Global.t)
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (alloc.vec.Vec.t
                              alloc.string.String.t
                              alloc.alloc.Global.t)
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "models") in
                  let* α2 :
                      core.result.Result.t
                        (alloc.vec.Vec.t
                          alloc.string.String.t
                          alloc.alloc.Global.t)
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (alloc.vec.Vec.t
                          alloc.string.String.t
                          alloc.alloc.Global.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (alloc.vec.Vec.t
                            alloc.string.String.t
                            alloc.alloc.Global.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.TestCase.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.TestCase.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.TestCase.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              alloc.vec.Vec.t
                                alloc.string.String.t
                                alloc.alloc.Global.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (alloc.vec.Vec.t
                              alloc.string.String.t
                              alloc.alloc.Global.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (alloc.vec.Vec.t
                              alloc.string.String.t
                              alloc.alloc.Global.t))
                    ]
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      alloc.string.String.t
                      alloc.alloc.Global.t))
            ] in
        M.copy α0 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 :
          alloc.vec.Vec.t assistants_benches.Step.t alloc.alloc.Global.t :=
        M.read __field1 in
      let* α2 : alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t :=
        M.read __field2 in
      let* α0 : M.Val (core.result.Result.t assistants_benches.TestCase.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_benches.TestCase.test_case := α0;
              assistants_benches.TestCase.steps := α1;
              assistants_benches.TestCase.models := α2;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "test_case") in
    let* α1 : ref str.t := M.read (mk_str "steps") in
    let* α2 : ref str.t := M.read (mk_str "models") in
    let* α3 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α3))).

Module  Impl_serde_ser_Serialize_for_assistants_benches_TestCase_t.
Section Impl_serde_ser_Serialize_for_assistants_benches_TestCase_t.
  Definition Self : Set := assistants_benches.TestCase.t.
  
  (*
  Serialize
  *)
  Definition serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S}
      (self : ref Self)
      (__serializer : __S)
      : M (core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) :=
    let* self := M.alloc self in
    let* __serializer := M.alloc __serializer in
    let return_ :=
      M.return_
        (R := core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) in
    M.catch_return
      (let* __serde_state : M.Val _ :=
        let* α0 :
            (core.result.Result.t _ _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t _ _)
              (Trait := ℐ))) in
        let* α1 :
            __S -> (ref str.t) -> usize.t -> M (core.result.Result.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.Serializer.serialize_struct
              (Self := __S)
              (Trait := ℐ))) in
        let* α2 : __S := M.read __serializer in
        let* α3 : ref str.t := M.read (mk_str "TestCase") in
        let* α4 : usize.t :=
          BinOp.Panic.add (rust_cast false) ((Integer.of_Z 1) : usize.t) in
        let* α5 : usize.t := BinOp.Panic.add α4 ((Integer.of_Z 1) : usize.t) in
        let* α6 : usize.t := BinOp.Panic.add α5 ((Integer.of_Z 1) : usize.t) in
        let* α7 : core.result.Result.t _ _ := M.call (α1 α2 α3 α6) in
        let* α8 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              _ :=
          M.call (α0 α7) in
        let* α9 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                _) :=
          M.alloc α8 in
        let* α10 : M.Val _ :=
          match_operator
            α9
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self := core.result.Result.t _ _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : _ := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val _);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val _)
            ] in
        M.copy α10 in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "test_case") in
        let* α3 : ref assistants_benches.TestCase.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_benches.TestCase.Get_test_case (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref
                (alloc.vec.Vec.t
                  assistants_benches.Step.t
                  alloc.alloc.Global.t))
              ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T :=
                alloc.vec.Vec.t assistants_benches.Step.t alloc.alloc.Global.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "steps") in
        let* α3 : ref assistants_benches.TestCase.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow (assistants_benches.TestCase.Get_steps (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t))
              ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "models") in
        let* α3 : ref assistants_benches.TestCase.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow (assistants_benches.TestCase.Get_models (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* α0 : _ -> M (core.result.Result.t _ _) :=
        ltac:(M.get_method (fun ℐ =>
          serde.ser.SerializeStruct.end_ (Self := _) (Trait := ℐ))) in
      let* α1 : _ := M.read __serde_state in
      let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
      let* α0 : M.Val (core.result.Result.t _ _) := M.alloc α2 in
      M.read α0).
  
  Global Instance AssociatedFunction_serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :
    Notations.DoubleColon Self "serialize" := {
    Notations.double_colon := serialize (__S := __S);
  }.
  
  Global Instance ℐ : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :=
      serialize (__S := __S);
  }.
End Impl_serde_ser_Serialize_for_assistants_benches_TestCase_t.
End Impl_serde_ser_Serialize_for_assistants_benches_TestCase_t.

Module  Step.
Section Step.
  Record t : Set := {
    endpoint : alloc.string.String.t;
    method : alloc.string.String.t;
    request : serde_json.value.Value.t;
    expected_response : serde_json.value.Value.t;
    save_response_to_variable :
      alloc.vec.Vec.t serde_json.value.Value.t alloc.vec.Vec.Default.A;
  }.
  
  Definition Get_endpoint :=
    Ref.map
      (fun α => Some α.(endpoint))
      (fun β α => Some (α <| endpoint := β |>)).
  Definition Get_method :=
    Ref.map (fun α => Some α.(method)) (fun β α => Some (α <| method := β |>)).
  Definition Get_request :=
    Ref.map
      (fun α => Some α.(request))
      (fun β α => Some (α <| request := β |>)).
  Definition Get_expected_response :=
    Ref.map
      (fun α => Some α.(expected_response))
      (fun β α => Some (α <| expected_response := β |>)).
  Definition Get_save_response_to_variable :=
    Ref.map
      (fun α => Some α.(save_response_to_variable))
      (fun β α => Some (α <| save_response_to_variable := β |>)).
End Step.
End Step.

Module  Impl_serde_de_Deserialize_for_assistants_benches_Step_t.
Section Impl_serde_de_Deserialize_for_assistants_benches_Step_t.
  Definition Self : Set := assistants_benches.Step.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_benches._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_benches._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "Step") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_benches._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_benches._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_benches._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_benches_Step_t.
End Impl_serde_de_Deserialize_for_assistants_benches_Step_t.

Module __Field.
  Inductive t : Set :=
  | __field0
  | __field1
  | __field2
  | __field3
  | __field4
  | __ignore.
End __Field.

Module  Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.
  Definition Self : Set := assistants_benches._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_benches._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_benches._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field3)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field4)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_benches._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field3)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field4)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_benches._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field2)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              let γ1_10 := [10] γ in
              let γ1_11 := [11] γ in
              let γ1_12 := [12] γ in
              let γ1_13 := [13] γ in
              let γ1_14 := [14] γ in
              let γ1_15 := [15] γ in
              let γ1_16 := [16] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field3)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            |
                [_;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _;
                  _]
                =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              let γ1_10 := [10] γ in
              let γ1_11 := [11] γ in
              let γ1_12 := [12] γ in
              let γ1_13 := [13] γ in
              let γ1_14 := [14] γ in
              let γ1_15 := [15] γ in
              let γ1_16 := [16] γ in
              let γ1_17 := [17] γ in
              let γ1_18 := [18] γ in
              let γ1_19 := [19] γ in
              let γ1_20 := [20] γ in
              let γ1_21 := [21] γ in
              let γ1_22 := [22] γ in
              let γ1_23 := [23] γ in
              let γ1_24 := [24] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field4)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker : core.marker.PhantomData.t assistants_benches.Step.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.
  Definition Self : Set := assistants_benches._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_benches.Step.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct Step") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t assistants_benches.Step.t _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t assistants_benches.Step.t _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t assistants_benches.Step.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow (mk_str "struct Step with 5 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t assistants_benches.Step.t _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t assistants_benches.Step.t _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t assistants_benches.Step.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow (mk_str "struct Step with 5 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field2 : M.Val serde_json.value.Value.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t serde_json.value.Value.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t serde_json.value.Value.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t serde_json.value.Value.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := serde_json.value.Value.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t serde_json.value.Value.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t serde_json.value.Value.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t serde_json.value.Value.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t assistants_benches.Step.t _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t assistants_benches.Step.t _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t assistants_benches.Step.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t serde_json.value.Value.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t))
            ] in
        let* α6 : M.Val serde_json.value.Value.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 2) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow (mk_str "struct Step with 5 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : serde_json.value.Value.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t)
            ] in
        M.copy α6 in
      let* __field3 : M.Val serde_json.value.Value.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t serde_json.value.Value.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t serde_json.value.Value.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t serde_json.value.Value.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := serde_json.value.Value.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t serde_json.value.Value.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t serde_json.value.Value.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t serde_json.value.Value.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t assistants_benches.Step.t _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t assistants_benches.Step.t _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t assistants_benches.Step.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t serde_json.value.Value.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t))
            ] in
        let* α6 : M.Val serde_json.value.Value.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 3) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow (mk_str "struct Step with 5 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : serde_json.value.Value.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t)
            ] in
        M.copy α6 in
      let* __field4 :
          M.Val
            (alloc.vec.Vec.t serde_json.value.Value.t alloc.alloc.Global.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t
                  (alloc.vec.Vec.t
                    serde_json.value.Value.t
                    alloc.alloc.Global.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      serde_json.value.Value.t
                      alloc.alloc.Global.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    (alloc.vec.Vec.t
                      serde_json.value.Value.t
                      alloc.alloc.Global.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T :=
                alloc.vec.Vec.t serde_json.value.Value.t alloc.alloc.Global.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t
                (alloc.vec.Vec.t serde_json.value.Value.t alloc.alloc.Global.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t
                (alloc.vec.Vec.t
                  serde_json.value.Value.t
                  alloc.alloc.Global.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  (alloc.vec.Vec.t
                    serde_json.value.Value.t
                    alloc.alloc.Global.t))) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t
                (alloc.vec.Vec.t
                  serde_json.value.Value.t
                  alloc.alloc.Global.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t assistants_benches.Step.t _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t assistants_benches.Step.t _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t assistants_benches.Step.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        (alloc.vec.Vec.t
                          serde_json.value.Value.t
                          alloc.alloc.Global.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        serde_json.value.Value.t
                        alloc.alloc.Global.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (alloc.vec.Vec.t
                        serde_json.value.Value.t
                        alloc.alloc.Global.t)))
            ] in
        let* α6 :
            M.Val
              (alloc.vec.Vec.t serde_json.value.Value.t alloc.alloc.Global.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      serde_json.value.Value.t
                      alloc.alloc.Global.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 4) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow (mk_str "struct Step with 5 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 :
                      alloc.vec.Vec.t
                        serde_json.value.Value.t
                        alloc.alloc.Global.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      serde_json.value.Value.t
                      alloc.alloc.Global.t))
            ] in
        M.copy α6 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α2 : serde_json.value.Value.t := M.read __field2 in
      let* α3 : serde_json.value.Value.t := M.read __field3 in
      let* α4 : alloc.vec.Vec.t serde_json.value.Value.t alloc.alloc.Global.t :=
        M.read __field4 in
      let* α0 : M.Val (core.result.Result.t assistants_benches.Step.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_benches.Step.endpoint := α0;
              assistants_benches.Step.method := α1;
              assistants_benches.Step.request := α2;
              assistants_benches.Step.expected_response := α3;
              assistants_benches.Step.save_response_to_variable := α4;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field1 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field2 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
        M.alloc core.option.Option.None in
      let* __field3 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
        M.alloc core.option.Option.None in
      let* __field4 :
          M.Val
            (core.option.Option.t
              (alloc.vec.Vec.t
                serde_json.value.Value.t
                alloc.alloc.Global.t)) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_benches._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_benches._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_benches._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_benches._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_benches._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_benches._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_benches._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_benches._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_benches.Step.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t assistants_benches.Step.t _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t assistants_benches.Step.t _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_benches._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_benches._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_benches._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field0 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "endpoint") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.Step.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.Step.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.Step.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field1 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "method") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.Step.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.Step.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.Step.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field2 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      serde_json.value.Value.t)::["is_some"]
                                  (borrow __field2)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "request") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    serde_json.value.Value.t
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      serde_json.value.Value.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      serde_json.value.Value.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := serde_json.value.Value.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  serde_json.value.Value.t
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  serde_json.value.Value.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    serde_json.value.Value.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val serde_json.value.Value.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.Step.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.Step.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.Step.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : serde_json.value.Value.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val serde_json.value.Value.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val serde_json.value.Value.t)
                                ] in
                            let* α6 : serde_json.value.Value.t := M.read α5 in
                            assign __field2 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field3 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      serde_json.value.Value.t)::["is_some"]
                                  (borrow __field3)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "expected_response") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    serde_json.value.Value.t
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      serde_json.value.Value.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      serde_json.value.Value.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := serde_json.value.Value.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  serde_json.value.Value.t
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  serde_json.value.Value.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    serde_json.value.Value.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val serde_json.value.Value.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.Step.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.Step.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.Step.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : serde_json.value.Value.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val serde_json.value.Value.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val serde_json.value.Value.t)
                                ] in
                            let* α6 : serde_json.value.Value.t := M.read α5 in
                            assign __field3 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field4 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (alloc.vec.Vec.t
                                        serde_json.value.Value.t
                                        alloc.alloc.Global.t))::["is_some"]
                                  (borrow __field4)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "save_response_to_variable") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (alloc.vec.Vec.t
                                      serde_json.value.Value.t
                                      alloc.alloc.Global.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (alloc.vec.Vec.t
                                        serde_json.value.Value.t
                                        alloc.alloc.Global.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (alloc.vec.Vec.t
                                        serde_json.value.Value.t
                                        alloc.alloc.Global.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    alloc.vec.Vec.t
                                      serde_json.value.Value.t
                                      alloc.alloc.Global.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (alloc.vec.Vec.t
                                    serde_json.value.Value.t
                                    alloc.alloc.Global.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (alloc.vec.Vec.t
                                    serde_json.value.Value.t
                                    alloc.alloc.Global.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (alloc.vec.Vec.t
                                      serde_json.value.Value.t
                                      alloc.alloc.Global.t)) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  (alloc.vec.Vec.t
                                    serde_json.value.Value.t
                                    alloc.alloc.Global.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.Step.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.Step.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.Step.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          alloc.vec.Vec.t
                                            serde_json.value.Value.t
                                            alloc.alloc.Global.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (alloc.vec.Vec.t
                                          serde_json.value.Value.t
                                          alloc.alloc.Global.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (alloc.vec.Vec.t
                                          serde_json.value.Value.t
                                          alloc.alloc.Global.t))
                                ] in
                            let* α6 :
                                alloc.vec.Vec.t
                                  serde_json.value.Value.t
                                  alloc.alloc.Global.t :=
                              M.read α5 in
                            assign __field4 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_benches.Step.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_benches.Step.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_benches.Step.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "endpoint") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.Step.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.Step.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.Step.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "method") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.Step.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.Step.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.Step.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field2 : M.Val serde_json.value.Value.t :=
        let* α0 : M.Val serde_json.value.Value.t :=
          match_operator
            __field2
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field2 := M.copy γ0_0 in
                  M.pure __field2
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t serde_json.value.Value.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t serde_json.value.Value.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "request") in
                  let* α2 : core.result.Result.t serde_json.value.Value.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        serde_json.value.Value.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          serde_json.value.Value.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.Step.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.Step.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.Step.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : serde_json.value.Value.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val serde_json.value.Value.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val serde_json.value.Value.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t)
            ] in
        M.copy α0 in
      let* __field3 : M.Val serde_json.value.Value.t :=
        let* α0 : M.Val serde_json.value.Value.t :=
          match_operator
            __field3
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field3 := M.copy γ0_0 in
                  M.pure __field3
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t serde_json.value.Value.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t serde_json.value.Value.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "expected_response") in
                  let* α2 : core.result.Result.t serde_json.value.Value.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        serde_json.value.Value.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          serde_json.value.Value.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.Step.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.Step.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.Step.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : serde_json.value.Value.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val serde_json.value.Value.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val serde_json.value.Value.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t)
            ] in
        M.copy α0 in
      let* __field4 :
          M.Val
            (alloc.vec.Vec.t serde_json.value.Value.t alloc.alloc.Global.t) :=
        let* α0 :
            M.Val
              (alloc.vec.Vec.t serde_json.value.Value.t alloc.alloc.Global.t) :=
          match_operator
            __field4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field4 := M.copy γ0_0 in
                  M.pure __field4
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      serde_json.value.Value.t
                      alloc.alloc.Global.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          (alloc.vec.Vec.t
                            serde_json.value.Value.t
                            alloc.alloc.Global.t)
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (alloc.vec.Vec.t
                              serde_json.value.Value.t
                              alloc.alloc.Global.t)
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t :=
                    M.read (mk_str "save_response_to_variable") in
                  let* α2 :
                      core.result.Result.t
                        (alloc.vec.Vec.t
                          serde_json.value.Value.t
                          alloc.alloc.Global.t)
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (alloc.vec.Vec.t
                          serde_json.value.Value.t
                          alloc.alloc.Global.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (alloc.vec.Vec.t
                            serde_json.value.Value.t
                            alloc.alloc.Global.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.Step.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.Step.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.Step.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              alloc.vec.Vec.t
                                serde_json.value.Value.t
                                alloc.alloc.Global.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (alloc.vec.Vec.t
                              serde_json.value.Value.t
                              alloc.alloc.Global.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (alloc.vec.Vec.t
                              serde_json.value.Value.t
                              alloc.alloc.Global.t))
                    ]
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (alloc.vec.Vec.t
                      serde_json.value.Value.t
                      alloc.alloc.Global.t))
            ] in
        M.copy α0 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α2 : serde_json.value.Value.t := M.read __field2 in
      let* α3 : serde_json.value.Value.t := M.read __field3 in
      let* α4 : alloc.vec.Vec.t serde_json.value.Value.t alloc.alloc.Global.t :=
        M.read __field4 in
      let* α0 : M.Val (core.result.Result.t assistants_benches.Step.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_benches.Step.endpoint := α0;
              assistants_benches.Step.method := α1;
              assistants_benches.Step.request := α2;
              assistants_benches.Step.expected_response := α3;
              assistants_benches.Step.save_response_to_variable := α4;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "endpoint") in
    let* α1 : ref str.t := M.read (mk_str "method") in
    let* α2 : ref str.t := M.read (mk_str "request") in
    let* α3 : ref str.t := M.read (mk_str "expected_response") in
    let* α4 : ref str.t := M.read (mk_str "save_response_to_variable") in
    let* α5 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2; α3; α4 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α5))).

Module  Impl_serde_ser_Serialize_for_assistants_benches_Step_t.
Section Impl_serde_ser_Serialize_for_assistants_benches_Step_t.
  Definition Self : Set := assistants_benches.Step.t.
  
  (*
  Serialize
  *)
  Definition serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S}
      (self : ref Self)
      (__serializer : __S)
      : M (core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) :=
    let* self := M.alloc self in
    let* __serializer := M.alloc __serializer in
    let return_ :=
      M.return_
        (R := core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) in
    M.catch_return
      (let* __serde_state : M.Val _ :=
        let* α0 :
            (core.result.Result.t _ _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t _ _)
              (Trait := ℐ))) in
        let* α1 :
            __S -> (ref str.t) -> usize.t -> M (core.result.Result.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.Serializer.serialize_struct
              (Self := __S)
              (Trait := ℐ))) in
        let* α2 : __S := M.read __serializer in
        let* α3 : ref str.t := M.read (mk_str "Step") in
        let* α4 : usize.t :=
          BinOp.Panic.add (rust_cast false) ((Integer.of_Z 1) : usize.t) in
        let* α5 : usize.t := BinOp.Panic.add α4 ((Integer.of_Z 1) : usize.t) in
        let* α6 : usize.t := BinOp.Panic.add α5 ((Integer.of_Z 1) : usize.t) in
        let* α7 : usize.t := BinOp.Panic.add α6 ((Integer.of_Z 1) : usize.t) in
        let* α8 : usize.t := BinOp.Panic.add α7 ((Integer.of_Z 1) : usize.t) in
        let* α9 : core.result.Result.t _ _ := M.call (α1 α2 α3 α8) in
        let* α10 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              _ :=
          M.call (α0 α9) in
        let* α11 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                _) :=
          M.alloc α10 in
        let* α12 : M.Val _ :=
          match_operator
            α11
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self := core.result.Result.t _ _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : _ := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val _);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val _)
            ] in
        M.copy α12 in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "endpoint") in
        let* α3 : ref assistants_benches.Step.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow (assistants_benches.Step.Get_endpoint (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "method") in
        let* α3 : ref assistants_benches.Step.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow (assistants_benches.Step.Get_method (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref serde_json.value.Value.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := serde_json.value.Value.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "request") in
        let* α3 : ref assistants_benches.Step.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow (assistants_benches.Step.Get_request (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref serde_json.value.Value.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := serde_json.value.Value.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "expected_response") in
        let* α3 : ref assistants_benches.Step.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_benches.Step.Get_expected_response (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref
                (alloc.vec.Vec.t serde_json.value.Value.t alloc.alloc.Global.t))
              ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T :=
                alloc.vec.Vec.t serde_json.value.Value.t alloc.alloc.Global.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "save_response_to_variable") in
        let* α3 : ref assistants_benches.Step.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_benches.Step.Get_save_response_to_variable
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* α0 : _ -> M (core.result.Result.t _ _) :=
        ltac:(M.get_method (fun ℐ =>
          serde.ser.SerializeStruct.end_ (Self := _) (Trait := ℐ))) in
      let* α1 : _ := M.read __serde_state in
      let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
      let* α0 : M.Val (core.result.Result.t _ _) := M.alloc α2 in
      M.read α0).
  
  Global Instance AssociatedFunction_serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :
    Notations.DoubleColon Self "serialize" := {
    Notations.double_colon := serialize (__S := __S);
  }.
  
  Global Instance ℐ : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :=
      serialize (__S := __S);
  }.
End Impl_serde_ser_Serialize_for_assistants_benches_Step_t.
End Impl_serde_ser_Serialize_for_assistants_benches_Step_t.

Module  ScoredStep.
Section ScoredStep.
  Record t : Set := {
    endpoint : alloc.string.String.t;
    method : alloc.string.String.t;
    request : serde_json.value.Value.t;
    expected_response : serde_json.value.Value.t;
    score : core.option.Option.t f64.t;
    start_time : u64.t;
    end_time : u64.t;
    duration : u64.t;
  }.
  
  Definition Get_endpoint :=
    Ref.map
      (fun α => Some α.(endpoint))
      (fun β α => Some (α <| endpoint := β |>)).
  Definition Get_method :=
    Ref.map (fun α => Some α.(method)) (fun β α => Some (α <| method := β |>)).
  Definition Get_request :=
    Ref.map
      (fun α => Some α.(request))
      (fun β α => Some (α <| request := β |>)).
  Definition Get_expected_response :=
    Ref.map
      (fun α => Some α.(expected_response))
      (fun β α => Some (α <| expected_response := β |>)).
  Definition Get_score :=
    Ref.map (fun α => Some α.(score)) (fun β α => Some (α <| score := β |>)).
  Definition Get_start_time :=
    Ref.map
      (fun α => Some α.(start_time))
      (fun β α => Some (α <| start_time := β |>)).
  Definition Get_end_time :=
    Ref.map
      (fun α => Some α.(end_time))
      (fun β α => Some (α <| end_time := β |>)).
  Definition Get_duration :=
    Ref.map
      (fun α => Some α.(duration))
      (fun β α => Some (α <| duration := β |>)).
End ScoredStep.
End ScoredStep.

Module  Impl_serde_de_Deserialize_for_assistants_benches_ScoredStep_t.
Section Impl_serde_de_Deserialize_for_assistants_benches_ScoredStep_t.
  Definition Self : Set := assistants_benches.ScoredStep.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_benches._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_benches._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "ScoredStep") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_benches._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_benches._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_benches._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_benches_ScoredStep_t.
End Impl_serde_de_Deserialize_for_assistants_benches_ScoredStep_t.

Module __Field.
  Inductive t : Set :=
  | __field0
  | __field1
  | __field2
  | __field3
  | __field4
  | __field5
  | __field6
  | __field7
  | __ignore.
End __Field.

Module  Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.
  Definition Self : Set := assistants_benches._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_benches._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_benches._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field3)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field4)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field5)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field6)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field7)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_benches._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field2)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field3)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field4)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field5)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field6)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field7)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_benches._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field2)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              let γ1_10 := [10] γ in
              let γ1_11 := [11] γ in
              let γ1_12 := [12] γ in
              let γ1_13 := [13] γ in
              let γ1_14 := [14] γ in
              let γ1_15 := [15] γ in
              let γ1_16 := [16] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field3)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field4)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              let γ1_9 := [9] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field5)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field6)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field7)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker : core.marker.PhantomData.t assistants_benches.ScoredStep.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.
  Definition Self : Set := assistants_benches._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_benches.ScoredStep.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct ScoredStep") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_benches.ScoredStep.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ScoredStep with 8 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_benches.ScoredStep.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ScoredStep with 8 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field2 : M.Val serde_json.value.Value.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t serde_json.value.Value.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t serde_json.value.Value.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t serde_json.value.Value.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := serde_json.value.Value.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t serde_json.value.Value.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t serde_json.value.Value.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t serde_json.value.Value.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_benches.ScoredStep.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t serde_json.value.Value.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t))
            ] in
        let* α6 : M.Val serde_json.value.Value.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 2) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ScoredStep with 8 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : serde_json.value.Value.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t)
            ] in
        M.copy α6 in
      let* __field3 : M.Val serde_json.value.Value.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t serde_json.value.Value.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t serde_json.value.Value.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t serde_json.value.Value.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := serde_json.value.Value.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t serde_json.value.Value.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t serde_json.value.Value.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t serde_json.value.Value.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_benches.ScoredStep.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t serde_json.value.Value.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t serde_json.value.Value.t))
            ] in
        let* α6 : M.Val serde_json.value.Value.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 3) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ScoredStep with 8 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : serde_json.value.Value.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t)
            ] in
        M.copy α6 in
      let* __field4 : M.Val (core.option.Option.t f64.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t (core.option.Option.t f64.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t (core.option.Option.t f64.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t (core.option.Option.t f64.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := core.option.Option.t f64.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t (core.option.Option.t f64.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t (core.option.Option.t f64.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t (core.option.Option.t f64.t))) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t (core.option.Option.t f64.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_benches.ScoredStep.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t (core.option.Option.t f64.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t (core.option.Option.t f64.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t (core.option.Option.t f64.t)))
            ] in
        let* α6 : M.Val (core.option.Option.t f64.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t f64.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 4) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ScoredStep with 8 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : core.option.Option.t f64.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t f64.t))
            ] in
        M.copy α6 in
      let* __field5 : M.Val u64.t :=
        let* α0 :
            (core.result.Result.t (core.option.Option.t u64.t) _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t (core.option.Option.t u64.t) _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M (core.result.Result.t (core.option.Option.t u64.t) _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := u64.t)
              (Trait := ℐ))) in
        let* α2 : core.result.Result.t (core.option.Option.t u64.t) _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t u64.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t u64.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t u64.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_benches.ScoredStep.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t u64.t := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t u64.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t u64.t))
            ] in
        let* α6 : M.Val u64.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val u64.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 5) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ScoredStep with 8 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : u64.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val u64.t)
            ] in
        M.copy α6 in
      let* __field6 : M.Val u64.t :=
        let* α0 :
            (core.result.Result.t (core.option.Option.t u64.t) _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t (core.option.Option.t u64.t) _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M (core.result.Result.t (core.option.Option.t u64.t) _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := u64.t)
              (Trait := ℐ))) in
        let* α2 : core.result.Result.t (core.option.Option.t u64.t) _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t u64.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t u64.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t u64.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_benches.ScoredStep.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t u64.t := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t u64.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t u64.t))
            ] in
        let* α6 : M.Val u64.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val u64.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 6) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ScoredStep with 8 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : u64.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val u64.t)
            ] in
        M.copy α6 in
      let* __field7 : M.Val u64.t :=
        let* α0 :
            (core.result.Result.t (core.option.Option.t u64.t) _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t (core.option.Option.t u64.t) _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M (core.result.Result.t (core.option.Option.t u64.t) _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := u64.t)
              (Trait := ℐ))) in
        let* α2 : core.result.Result.t (core.option.Option.t u64.t) _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t u64.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t u64.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t u64.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_benches.ScoredStep.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t assistants_benches.ScoredStep.t _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t u64.t := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t u64.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t u64.t))
            ] in
        let* α6 : M.Val u64.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val u64.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 7) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str "struct ScoredStep with 8 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : u64.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val u64.t)
            ] in
        M.copy α6 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α2 : serde_json.value.Value.t := M.read __field2 in
      let* α3 : serde_json.value.Value.t := M.read __field3 in
      let* α4 : core.option.Option.t f64.t := M.read __field4 in
      let* α5 : u64.t := M.read __field5 in
      let* α6 : u64.t := M.read __field6 in
      let* α7 : u64.t := M.read __field7 in
      let* α0 :
          M.Val (core.result.Result.t assistants_benches.ScoredStep.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_benches.ScoredStep.endpoint := α0;
              assistants_benches.ScoredStep.method := α1;
              assistants_benches.ScoredStep.request := α2;
              assistants_benches.ScoredStep.expected_response := α3;
              assistants_benches.ScoredStep.score := α4;
              assistants_benches.ScoredStep.start_time := α5;
              assistants_benches.ScoredStep.end_time := α6;
              assistants_benches.ScoredStep.duration := α7;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field1 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field2 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
        M.alloc core.option.Option.None in
      let* __field3 : M.Val (core.option.Option.t serde_json.value.Value.t) :=
        M.alloc core.option.Option.None in
      let* __field4 :
          M.Val (core.option.Option.t (core.option.Option.t f64.t)) :=
        M.alloc core.option.Option.None in
      let* __field5 : M.Val (core.option.Option.t u64.t) :=
        M.alloc core.option.Option.None in
      let* __field6 : M.Val (core.option.Option.t u64.t) :=
        M.alloc core.option.Option.None in
      let* __field7 : M.Val (core.option.Option.t u64.t) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_benches._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_benches._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_benches._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_benches._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_benches._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_benches._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_benches._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_benches._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_benches.ScoredStep.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_benches.ScoredStep.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_benches.ScoredStep.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_benches._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_benches._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_benches._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field0 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "endpoint") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.ScoredStep.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field1 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "method") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.ScoredStep.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field2 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      serde_json.value.Value.t)::["is_some"]
                                  (borrow __field2)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "request") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    serde_json.value.Value.t
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      serde_json.value.Value.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      serde_json.value.Value.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := serde_json.value.Value.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  serde_json.value.Value.t
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  serde_json.value.Value.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    serde_json.value.Value.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val serde_json.value.Value.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.ScoredStep.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : serde_json.value.Value.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val serde_json.value.Value.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val serde_json.value.Value.t)
                                ] in
                            let* α6 : serde_json.value.Value.t := M.read α5 in
                            assign __field2 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field3 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      serde_json.value.Value.t)::["is_some"]
                                  (borrow __field3)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "expected_response") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    serde_json.value.Value.t
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      serde_json.value.Value.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      serde_json.value.Value.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := serde_json.value.Value.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  serde_json.value.Value.t
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  serde_json.value.Value.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    serde_json.value.Value.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val serde_json.value.Value.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.ScoredStep.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : serde_json.value.Value.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val serde_json.value.Value.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val serde_json.value.Value.t)
                                ] in
                            let* α6 : serde_json.value.Value.t := M.read α5 in
                            assign __field3 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field4 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (core.option.Option.t f64.t))::["is_some"]
                                  (borrow __field4)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "score") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (core.option.Option.t f64.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (core.option.Option.t f64.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (core.option.Option.t f64.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := core.option.Option.t f64.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (core.option.Option.t f64.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (core.option.Option.t f64.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (core.option.Option.t f64.t)) :=
                              M.alloc α3 in
                            let* α5 : M.Val (core.option.Option.t f64.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.ScoredStep.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : core.option.Option.t f64.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val (core.option.Option.t f64.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val (core.option.Option.t f64.t))
                                ] in
                            let* α6 : core.option.Option.t f64.t := M.read α5 in
                            assign __field4 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field5 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t u64.t)::["is_some"]
                                  (borrow __field5)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "start_time") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t u64.t _) ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self := core.result.Result.t u64.t _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M (core.result.Result.t u64.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := u64.t)
                                  (Trait := ℐ))) in
                            let* α2 : core.result.Result.t u64.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  u64.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    u64.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val u64.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.ScoredStep.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : u64.t := never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val u64.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val u64.t)
                                ] in
                            let* α6 : u64.t := M.read α5 in
                            assign __field5 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field6 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t u64.t)::["is_some"]
                                  (borrow __field6)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "end_time") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t u64.t _) ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self := core.result.Result.t u64.t _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M (core.result.Result.t u64.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := u64.t)
                                  (Trait := ℐ))) in
                            let* α2 : core.result.Result.t u64.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  u64.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    u64.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val u64.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.ScoredStep.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : u64.t := never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val u64.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val u64.t)
                                ] in
                            let* α6 : u64.t := M.read α5 in
                            assign __field6 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field7 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t u64.t)::["is_some"]
                                  (borrow __field7)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "duration") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t u64.t _) ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self := core.result.Result.t u64.t _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M (core.result.Result.t u64.t _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := u64.t)
                                  (Trait := ℐ))) in
                            let* α2 : core.result.Result.t u64.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  u64.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    u64.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val u64.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.ScoredStep.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.ScoredStep.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : u64.t := never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val u64.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val u64.t)
                                ] in
                            let* α6 : u64.t := M.read α5 in
                            assign __field7 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_benches.ScoredStep.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_benches.ScoredStep.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_benches.ScoredStep.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "endpoint") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.ScoredStep.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field1 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "method") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.ScoredStep.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field2 : M.Val serde_json.value.Value.t :=
        let* α0 : M.Val serde_json.value.Value.t :=
          match_operator
            __field2
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field2 := M.copy γ0_0 in
                  M.pure __field2
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t serde_json.value.Value.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t serde_json.value.Value.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "request") in
                  let* α2 : core.result.Result.t serde_json.value.Value.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        serde_json.value.Value.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          serde_json.value.Value.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.ScoredStep.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : serde_json.value.Value.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val serde_json.value.Value.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val serde_json.value.Value.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t)
            ] in
        M.copy α0 in
      let* __field3 : M.Val serde_json.value.Value.t :=
        let* α0 : M.Val serde_json.value.Value.t :=
          match_operator
            __field3
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field3 := M.copy γ0_0 in
                  M.pure __field3
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t serde_json.value.Value.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t serde_json.value.Value.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "expected_response") in
                  let* α2 : core.result.Result.t serde_json.value.Value.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        serde_json.value.Value.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          serde_json.value.Value.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.ScoredStep.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : serde_json.value.Value.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val serde_json.value.Value.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val serde_json.value.Value.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val serde_json.value.Value.t)
            ] in
        M.copy α0 in
      let* __field4 : M.Val (core.option.Option.t f64.t) :=
        let* α0 : M.Val (core.option.Option.t f64.t) :=
          match_operator
            __field4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field4 := M.copy γ0_0 in
                  M.pure __field4
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t f64.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t (core.option.Option.t f64.t) _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t (core.option.Option.t f64.t) _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "score") in
                  let* α2 :
                      core.result.Result.t (core.option.Option.t f64.t) _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (core.option.Option.t f64.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (core.option.Option.t f64.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.ScoredStep.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : core.option.Option.t f64.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t f64.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val (core.option.Option.t f64.t))
                    ]
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t f64.t))
            ] in
        M.copy α0 in
      let* __field5 : M.Val u64.t :=
        let* α0 : M.Val u64.t :=
          match_operator
            __field5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field5 := M.copy γ0_0 in
                  M.pure __field5
                | _ => M.break_match
                end) :
                M (M.Val u64.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t u64.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t u64.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "start_time") in
                  let* α2 : core.result.Result.t u64.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        u64.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          u64.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.ScoredStep.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : u64.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val u64.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val u64.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val u64.t)
            ] in
        M.copy α0 in
      let* __field6 : M.Val u64.t :=
        let* α0 : M.Val u64.t :=
          match_operator
            __field6
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field6 := M.copy γ0_0 in
                  M.pure __field6
                | _ => M.break_match
                end) :
                M (M.Val u64.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t u64.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t u64.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "end_time") in
                  let* α2 : core.result.Result.t u64.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        u64.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          u64.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.ScoredStep.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : u64.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val u64.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val u64.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val u64.t)
            ] in
        M.copy α0 in
      let* __field7 : M.Val u64.t :=
        let* α0 : M.Val u64.t :=
          match_operator
            __field7
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field7 := M.copy γ0_0 in
                  M.pure __field7
                | _ => M.break_match
                end) :
                M (M.Val u64.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t u64.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t u64.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "duration") in
                  let* α2 : core.result.Result.t u64.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        u64.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          u64.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.ScoredStep.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.ScoredStep.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : u64.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val u64.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val u64.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val u64.t)
            ] in
        M.copy α0 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 : alloc.string.String.t := M.read __field1 in
      let* α2 : serde_json.value.Value.t := M.read __field2 in
      let* α3 : serde_json.value.Value.t := M.read __field3 in
      let* α4 : core.option.Option.t f64.t := M.read __field4 in
      let* α5 : u64.t := M.read __field5 in
      let* α6 : u64.t := M.read __field6 in
      let* α7 : u64.t := M.read __field7 in
      let* α0 :
          M.Val (core.result.Result.t assistants_benches.ScoredStep.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_benches.ScoredStep.endpoint := α0;
              assistants_benches.ScoredStep.method := α1;
              assistants_benches.ScoredStep.request := α2;
              assistants_benches.ScoredStep.expected_response := α3;
              assistants_benches.ScoredStep.score := α4;
              assistants_benches.ScoredStep.start_time := α5;
              assistants_benches.ScoredStep.end_time := α6;
              assistants_benches.ScoredStep.duration := α7;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "endpoint") in
    let* α1 : ref str.t := M.read (mk_str "method") in
    let* α2 : ref str.t := M.read (mk_str "request") in
    let* α3 : ref str.t := M.read (mk_str "expected_response") in
    let* α4 : ref str.t := M.read (mk_str "score") in
    let* α5 : ref str.t := M.read (mk_str "start_time") in
    let* α6 : ref str.t := M.read (mk_str "end_time") in
    let* α7 : ref str.t := M.read (mk_str "duration") in
    let* α8 : M.Val (array (ref str.t)) :=
      M.alloc [ α0; α1; α2; α3; α4; α5; α6; α7 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α8))).

Module  Impl_serde_ser_Serialize_for_assistants_benches_ScoredStep_t.
Section Impl_serde_ser_Serialize_for_assistants_benches_ScoredStep_t.
  Definition Self : Set := assistants_benches.ScoredStep.t.
  
  (*
  Serialize
  *)
  Definition serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S}
      (self : ref Self)
      (__serializer : __S)
      : M (core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) :=
    let* self := M.alloc self in
    let* __serializer := M.alloc __serializer in
    let return_ :=
      M.return_
        (R := core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) in
    M.catch_return
      (let* __serde_state : M.Val _ :=
        let* α0 :
            (core.result.Result.t _ _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t _ _)
              (Trait := ℐ))) in
        let* α1 :
            __S -> (ref str.t) -> usize.t -> M (core.result.Result.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.Serializer.serialize_struct
              (Self := __S)
              (Trait := ℐ))) in
        let* α2 : __S := M.read __serializer in
        let* α3 : ref str.t := M.read (mk_str "ScoredStep") in
        let* α4 : usize.t :=
          BinOp.Panic.add (rust_cast false) ((Integer.of_Z 1) : usize.t) in
        let* α5 : usize.t := BinOp.Panic.add α4 ((Integer.of_Z 1) : usize.t) in
        let* α6 : usize.t := BinOp.Panic.add α5 ((Integer.of_Z 1) : usize.t) in
        let* α7 : usize.t := BinOp.Panic.add α6 ((Integer.of_Z 1) : usize.t) in
        let* α8 : usize.t := BinOp.Panic.add α7 ((Integer.of_Z 1) : usize.t) in
        let* α9 : usize.t := BinOp.Panic.add α8 ((Integer.of_Z 1) : usize.t) in
        let* α10 : usize.t := BinOp.Panic.add α9 ((Integer.of_Z 1) : usize.t) in
        let* α11 : usize.t :=
          BinOp.Panic.add α10 ((Integer.of_Z 1) : usize.t) in
        let* α12 : core.result.Result.t _ _ := M.call (α1 α2 α3 α11) in
        let* α13 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              _ :=
          M.call (α0 α12) in
        let* α14 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                _) :=
          M.alloc α13 in
        let* α15 : M.Val _ :=
          match_operator
            α14
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self := core.result.Result.t _ _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : _ := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val _);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val _)
            ] in
        M.copy α15 in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "endpoint") in
        let* α3 : ref assistants_benches.ScoredStep.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_benches.ScoredStep.Get_endpoint (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "method") in
        let* α3 : ref assistants_benches.ScoredStep.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow (assistants_benches.ScoredStep.Get_method (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref serde_json.value.Value.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := serde_json.value.Value.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "request") in
        let* α3 : ref assistants_benches.ScoredStep.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_benches.ScoredStep.Get_request (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref serde_json.value.Value.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := serde_json.value.Value.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "expected_response") in
        let* α3 : ref assistants_benches.ScoredStep.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_benches.ScoredStep.Get_expected_response
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref (core.option.Option.t f64.t)) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := core.option.Option.t f64.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "score") in
        let* α3 : ref assistants_benches.ScoredStep.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow (assistants_benches.ScoredStep.Get_score (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref u64.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := u64.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "start_time") in
        let* α3 : ref assistants_benches.ScoredStep.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_benches.ScoredStep.Get_start_time (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref u64.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := u64.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "end_time") in
        let* α3 : ref assistants_benches.ScoredStep.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_benches.ScoredStep.Get_end_time (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref u64.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := u64.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "duration") in
        let* α3 : ref assistants_benches.ScoredStep.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_benches.ScoredStep.Get_duration (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* α0 : _ -> M (core.result.Result.t _ _) :=
        ltac:(M.get_method (fun ℐ =>
          serde.ser.SerializeStruct.end_ (Self := _) (Trait := ℐ))) in
      let* α1 : _ := M.read __serde_state in
      let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
      let* α0 : M.Val (core.result.Result.t _ _) := M.alloc α2 in
      M.read α0).
  
  Global Instance AssociatedFunction_serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :
    Notations.DoubleColon Self "serialize" := {
    Notations.double_colon := serialize (__S := __S);
  }.
  
  Global Instance ℐ : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :=
      serialize (__S := __S);
  }.
End Impl_serde_ser_Serialize_for_assistants_benches_ScoredStep_t.
End Impl_serde_ser_Serialize_for_assistants_benches_ScoredStep_t.

Module  ScoredTestCase.
Section ScoredTestCase.
  Record t : Set := {
    test_case : alloc.string.String.t;
    steps :
      std.collections.hash.map.HashMap.t
        alloc.string.String.t
        (alloc.vec.Vec.t
          assistants_benches.ScoredStep.t
          alloc.vec.Vec.Default.A)
        std.collections.hash.map.HashMap.Default.S;
  }.
  
  Definition Get_test_case :=
    Ref.map
      (fun α => Some α.(test_case))
      (fun β α => Some (α <| test_case := β |>)).
  Definition Get_steps :=
    Ref.map (fun α => Some α.(steps)) (fun β α => Some (α <| steps := β |>)).
End ScoredTestCase.
End ScoredTestCase.

Module  Impl_serde_de_Deserialize_for_assistants_benches_ScoredTestCase_t.
Section Impl_serde_de_Deserialize_for_assistants_benches_ScoredTestCase_t.
  Definition Self : Set := assistants_benches.ScoredTestCase.t.
  
  (*
  Deserialize
  *)
  Definition deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D}
      (__deserializer : __D)
      : M (core.result.Result.t Self __D::type["Error"].t) :=
    let* __deserializer := M.alloc __deserializer in
    let* α0 :
        __D ->
          (ref str.t) ->
          (ref (slice (ref str.t))) ->
          assistants_benches._.deserialize.__Visitor.t ->
          M (core.result.Result.t _ _) :=
      ltac:(M.get_method (fun ℐ =>
        serde.de.Deserializer.deserialize_struct
          (Self := __D)
          (V := assistants_benches._.deserialize.__Visitor.t)
          (Trait := ℐ))) in
    let* α1 : __D := M.read __deserializer in
    let* α2 : ref str.t := M.read (mk_str "ScoredTestCase") in
    let* α3 : ref (slice (ref str.t)) :=
      M.read assistants_benches._.deserialize.FIELDS in
    M.call
      (α0
        α1
        α2
        α3
        {|
          assistants_benches._.deserialize.__Visitor.marker :=
            core.marker.PhantomData.Build;
          assistants_benches._.deserialize.__Visitor.lifetime :=
            core.marker.PhantomData.Build;
        |}).
  
  Global Instance AssociatedFunction_deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :
    Notations.DoubleColon Self "deserialize" := {
    Notations.double_colon := deserialize (__D := __D);
  }.
  
  Global Instance ℐ : serde.de.Deserialize.Required.Trait Self := {
    serde.de.Deserialize.deserialize
      {__D : Set}
      {ℋ_0 : serde.de.Deserializer.Trait __D} :=
      deserialize (__D := __D);
    serde.de.Deserialize.deserialize_in_place := Datatypes.None;
  }.
End Impl_serde_de_Deserialize_for_assistants_benches_ScoredTestCase_t.
End Impl_serde_de_Deserialize_for_assistants_benches_ScoredTestCase_t.

Module __Field.
  Inductive t : Set :=
  | __field0
  | __field1
  | __ignore.
End __Field.

Module  Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.
Section Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.
  Definition Self : Set := assistants_benches._.deserialize.__FieldVisitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_benches._.deserialize.__Field.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "field identifier") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : u64.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_benches._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_u64
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_u64" := {
    Notations.double_colon := visit_u64 (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref str.t)
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_benches._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field0)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__field1)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_str
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_str" := {
    Notations.double_colon := visit_str (__E := __E);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E}
      (self : Self)
      (__value : ref (slice u8.t))
      : M (core.result.Result.t Value __E) :=
    let* self := M.alloc self in
    let* __value := M.alloc __value in
    let* α0 :
        M.Val
          (core.result.Result.t
            assistants_benches._.deserialize.__Field.t
            __E) :=
      match_operator
        __value
        [
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              let γ1_5 := [5] γ in
              let γ1_6 := [6] γ in
              let γ1_7 := [7] γ in
              let γ1_8 := [8] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (let* γ :=
              let* α0 := M.read γ in
              M.pure (deref α0) in
            let* α0 := M.read γ in
            match α0 with
            | [_; _; _; _; _] =>
              let γ1_0 := [0] γ in
              let γ1_1 := [1] γ in
              let γ1_2 := [2] γ in
              let γ1_3 := [3] γ in
              let γ1_4 := [4] γ in
              M.alloc
                (core.result.Result.Ok
                  assistants_benches._.deserialize.__Field.__field1)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E));
          fun γ =>
            (M.alloc
              (core.result.Result.Ok
                assistants_benches._.deserialize.__Field.__ignore)) :
            M
              (M.Val
                (core.result.Result.t
                  assistants_benches._.deserialize.__Field.t
                  __E))
        ] in
    M.read α0.
  
  Global Instance AssociatedFunction_visit_bytes
      {__E : Set}
      {ℋ_0 : serde.de.Error.Trait __E} :
    Notations.DoubleColon Self "visit_bytes" := {
    Notations.double_colon := visit_bytes (__E := __E);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_u64 {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_u64 (__E := __E));
    serde.de.Visitor.visit_str {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_str (__E := __E));
    serde.de.Visitor.visit_bytes {__E : Set} {ℋ_0 : serde.de.Error.Trait __E} :=
      Datatypes.Some (visit_bytes (__E := __E));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_seq := Datatypes.None;
    serde.de.Visitor.visit_map := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___FieldVisitor_t.

Module  __Visitor.
Section __Visitor.
  Record t : Set := {
    marker : core.marker.PhantomData.t assistants_benches.ScoredTestCase.t;
    lifetime : core.marker.PhantomData.t (ref unit);
  }.
  
  Definition Get_marker :=
    Ref.map (fun α => Some α.(marker)) (fun β α => Some (α <| marker := β |>)).
  Definition Get_lifetime :=
    Ref.map
      (fun α => Some α.(lifetime))
      (fun β α => Some (α <| lifetime := β |>)).
End __Visitor.
End __Visitor.

Module  Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.
Section Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.
  Definition Self : Set := assistants_benches._.deserialize.__Visitor.t.
  
  (*
  Deserialize
  *)
  Definition Value : Set := assistants_benches.ScoredTestCase.t.
  
  (*
  Deserialize
  *)
  Definition expecting
      (self : ref Self)
      (__formatter : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* __formatter := M.alloc __formatter in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read __formatter in
    let* α1 : ref str.t := M.read (mk_str "struct ScoredTestCase") in
    M.call (core.fmt.Formatter.t::["write_str"] α0 α1).
  
  Global Instance AssociatedFunction_expecting :
    Notations.DoubleColon Self "expecting" := {
    Notations.double_colon := expecting;
  }.
  
  (*
  Deserialize
  *)
  Definition visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A}
      (self : Self)
      (__seq : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __seq := M.alloc __seq in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val alloc.string.String.t :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t alloc.string.String.t)
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t alloc.string.String.t)
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t alloc.string.String.t)
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t alloc.string.String.t) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t alloc.string.String.t)) :=
          M.alloc α3 in
        let* α5 : M.Val (core.option.Option.t alloc.string.String.t) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_benches.ScoredTestCase.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_benches.ScoredTestCase.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_benches.ScoredTestCase.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : core.option.Option.t alloc.string.String.t :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val (core.option.Option.t alloc.string.String.t))
            ] in
        let* α6 : M.Val alloc.string.String.t :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 0) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ScoredTestCase with 2 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 : alloc.string.String.t := never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α6 in
      let* __field1 :
          M.Val
            (std.collections.hash.map.HashMap.t
              alloc.string.String.t
              (alloc.vec.Vec.t
                assistants_benches.ScoredStep.t
                alloc.alloc.Global.t)
              std.hash.random.RandomState.t) :=
        let* α0 :
            (core.result.Result.t
                (core.option.Option.t
                  (std.collections.hash.map.HashMap.t
                    alloc.string.String.t
                    (alloc.vec.Vec.t
                      assistants_benches.ScoredStep.t
                      alloc.alloc.Global.t)
                    std.hash.random.RandomState.t))
                _)
              ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result.t
                  (core.option.Option.t
                    (std.collections.hash.map.HashMap.t
                      alloc.string.String.t
                      (alloc.vec.Vec.t
                        assistants_benches.ScoredStep.t
                        alloc.alloc.Global.t)
                      std.hash.random.RandomState.t))
                  _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref __A) ->
              M
                (core.result.Result.t
                  (core.option.Option.t
                    (std.collections.hash.map.HashMap.t
                      alloc.string.String.t
                      (alloc.vec.Vec.t
                        assistants_benches.ScoredStep.t
                        alloc.alloc.Global.t)
                      std.hash.random.RandomState.t))
                  _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.de.SeqAccess.next_element
              (Self := __A)
              (T :=
                std.collections.hash.map.HashMap.t
                  alloc.string.String.t
                  (alloc.vec.Vec.t
                    assistants_benches.ScoredStep.t
                    alloc.alloc.Global.t)
                  std.hash.random.RandomState.t)
              (Trait := ℐ))) in
        let* α2 :
            core.result.Result.t
              (core.option.Option.t
                (std.collections.hash.map.HashMap.t
                  alloc.string.String.t
                  (alloc.vec.Vec.t
                    assistants_benches.ScoredStep.t
                    alloc.alloc.Global.t)
                  std.hash.random.RandomState.t))
              _ :=
          M.call (α1 (borrow_mut __seq)) in
        let* α3 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              (core.option.Option.t
                (std.collections.hash.map.HashMap.t
                  alloc.string.String.t
                  (alloc.vec.Vec.t
                    assistants_benches.ScoredStep.t
                    alloc.alloc.Global.t)
                  std.hash.random.RandomState.t)) :=
          M.call (α0 α2) in
        let* α4 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  (std.collections.hash.map.HashMap.t
                    alloc.string.String.t
                    (alloc.vec.Vec.t
                      assistants_benches.ScoredStep.t
                      alloc.alloc.Global.t)
                    std.hash.random.RandomState.t))) :=
          M.alloc α3 in
        let* α5 :
            M.Val
              (core.option.Option.t
                (std.collections.hash.map.HashMap.t
                  alloc.string.String.t
                  (alloc.vec.Vec.t
                    assistants_benches.ScoredStep.t
                    alloc.alloc.Global.t)
                  std.hash.random.RandomState.t)) :=
          match_operator
            α4
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M
                          (core.result.Result.t
                            assistants_benches.ScoredTestCase.t
                            _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result.t
                            assistants_benches.ScoredTestCase.t
                            _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 :
                      core.result.Result.t
                        assistants_benches.ScoredTestCase.t
                        _ :=
                    M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 :
                      core.option.Option.t
                        (std.collections.hash.map.HashMap.t
                          alloc.string.String.t
                          (alloc.vec.Vec.t
                            assistants_benches.ScoredStep.t
                            alloc.alloc.Global.t)
                          std.hash.random.RandomState.t) :=
                    never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (std.collections.hash.map.HashMap.t
                        alloc.string.String.t
                        (alloc.vec.Vec.t
                          assistants_benches.ScoredStep.t
                          alloc.alloc.Global.t)
                        std.hash.random.RandomState.t)));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (core.option.Option.t
                      (std.collections.hash.map.HashMap.t
                        alloc.string.String.t
                        (alloc.vec.Vec.t
                          assistants_benches.ScoredStep.t
                          alloc.alloc.Global.t)
                        std.hash.random.RandomState.t)))
            ] in
        let* α6 :
            M.Val
              (std.collections.hash.map.HashMap.t
                alloc.string.String.t
                (alloc.vec.Vec.t
                  assistants_benches.ScoredStep.t
                  alloc.alloc.Global.t)
                std.hash.random.RandomState.t) :=
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __value := M.copy γ0_0 in
                  M.pure __value
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (std.collections.hash.map.HashMap.t
                      alloc.string.String.t
                      (alloc.vec.Vec.t
                        assistants_benches.ScoredStep.t
                        alloc.alloc.Global.t)
                      std.hash.random.RandomState.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      usize.t -> (ref (dyn [serde.de.Expected.Trait])) -> M _ :=
                    ltac:(M.get_method (fun ℐ =>
                      serde.de.Error.invalid_length
                        (Self := _)
                        (Trait := ℐ))) in
                  let* α1 : _ :=
                    M.call
                      (α0
                        ((Integer.of_Z 1) : usize.t)
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (mk_str
                              "struct ScoredTestCase with 2 elements")))) in
                  let* α2 : M.Val never.t :=
                    return_ (core.result.Result.Err α1) in
                  let* α3 := M.read α2 in
                  let* α4 :
                      std.collections.hash.map.HashMap.t
                        alloc.string.String.t
                        (alloc.vec.Vec.t
                          assistants_benches.ScoredStep.t
                          alloc.alloc.Global.t)
                        std.hash.random.RandomState.t :=
                    never_to_any α3 in
                  M.alloc α4
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (std.collections.hash.map.HashMap.t
                      alloc.string.String.t
                      (alloc.vec.Vec.t
                        assistants_benches.ScoredStep.t
                        alloc.alloc.Global.t)
                      std.hash.random.RandomState.t))
            ] in
        M.copy α6 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 :
          std.collections.hash.map.HashMap.t
            alloc.string.String.t
            (alloc.vec.Vec.t
              assistants_benches.ScoredStep.t
              alloc.alloc.Global.t)
            std.hash.random.RandomState.t :=
        M.read __field1 in
      let* α0 :
          M.Val (core.result.Result.t assistants_benches.ScoredTestCase.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_benches.ScoredTestCase.test_case := α0;
              assistants_benches.ScoredTestCase.steps := α1;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :
    Notations.DoubleColon Self "visit_seq" := {
    Notations.double_colon := visit_seq (__A := __A);
  }.
  
  (*
  Deserialize
  *)
  Definition visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A}
      (self : Self)
      (__map : __A)
      : M (core.result.Result.t Value __A::type["Error"].t) :=
    let* self := M.alloc self in
    let* __map := M.alloc __map in
    let return_ :=
      M.return_ (R := core.result.Result.t Value __A::type["Error"].t) in
    M.catch_return
      (let* __field0 : M.Val (core.option.Option.t alloc.string.String.t) :=
        M.alloc core.option.Option.None in
      let* __field1 :
          M.Val
            (core.option.Option.t
              (std.collections.hash.map.HashMap.t
                alloc.string.String.t
                (alloc.vec.Vec.t
                  assistants_benches.ScoredStep.t
                  alloc.alloc.Global.t)
                std.hash.random.RandomState.t)) :=
        M.alloc core.option.Option.None in
      let* _ : M.Val unit :=
        M.loop
          (let* α0 :
              (core.result.Result.t
                  (core.option.Option.t
                    assistants_benches._.deserialize.__Field.t)
                  _)
                ->
                M (core.ops.control_flow.ControlFlow.t _ _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result.t
                    (core.option.Option.t
                      assistants_benches._.deserialize.__Field.t)
                    _)
                (Trait := ℐ))) in
          let* α1 :
              (mut_ref __A) ->
                M
                  (core.result.Result.t
                    (core.option.Option.t
                      assistants_benches._.deserialize.__Field.t)
                    _) :=
            ltac:(M.get_method (fun ℐ =>
              serde.de.MapAccess.next_key
                (Self := __A)
                (K := assistants_benches._.deserialize.__Field.t)
                (Trait := ℐ))) in
          let* α2 :
              core.result.Result.t
                (core.option.Option.t
                  assistants_benches._.deserialize.__Field.t)
                _ :=
            M.call (α1 (borrow_mut __map)) in
          let* α3 :
              core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                (core.option.Option.t
                  assistants_benches._.deserialize.__Field.t) :=
            M.call (α0 α2) in
          let* α4 :
              M.Val
                (core.ops.control_flow.ControlFlow.t
                  (core.result.Result.t core.convert.Infallible.t _)
                  (core.option.Option.t
                    assistants_benches._.deserialize.__Field.t)) :=
            M.alloc α3 in
          let* α5 :
              M.Val
                (core.option.Option.t
                  assistants_benches._.deserialize.__Field.t) :=
            match_operator
              α4
              [
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Break _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                    let* residual := M.copy γ0_0 in
                    let* α0 :
                        (core.result.Result.t core.convert.Infallible.t _) ->
                          M
                            (core.result.Result.t
                              assistants_benches.ScoredTestCase.t
                              _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.FromResidual.from_residual
                          (Self :=
                            core.result.Result.t
                              assistants_benches.ScoredTestCase.t
                              _)
                          (R :=
                            core.result.Result.t core.convert.Infallible.t _)
                          (Trait := ℐ))) in
                    let* α1 :
                        core.result.Result.t core.convert.Infallible.t _ :=
                      M.read residual in
                    let* α2 :
                        core.result.Result.t
                          assistants_benches.ScoredTestCase.t
                          _ :=
                      M.call (α0 α1) in
                    let* α3 : M.Val never.t := return_ α2 in
                    let* α4 := M.read α3 in
                    let* α5 :
                        core.option.Option.t
                          assistants_benches._.deserialize.__Field.t :=
                      never_to_any α4 in
                    M.alloc α5
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_benches._.deserialize.__Field.t));
                fun γ =>
                  (let* α0 := M.read γ in
                  match α0 with
                  | core.ops.control_flow.ControlFlow.Continue _ =>
                    let γ0_0 :=
                      core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                    let* val := M.copy γ0_0 in
                    M.pure val
                  | _ => M.break_match
                  end) :
                  M
                    (M.Val
                      (core.option.Option.t
                        assistants_benches._.deserialize.__Field.t))
              ] in
          match_operator
            α5
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __key := M.copy γ0_0 in
                  match_operator
                    __key
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field0 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      alloc.string.String.t)::["is_some"]
                                  (borrow __field0)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t :=
                                M.read (mk_str "test_case") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t alloc.string.String.t _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      alloc.string.String.t
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V := alloc.string.String.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t alloc.string.String.t _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  alloc.string.String.t :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    alloc.string.String.t) :=
                              M.alloc α3 in
                            let* α5 : M.Val alloc.string.String.t :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.ScoredTestCase.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.ScoredTestCase.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.ScoredTestCase.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 : alloc.string.String.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t);
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M (M.Val alloc.string.String.t)
                                ] in
                            let* α6 : alloc.string.String.t := M.read α5 in
                            assign __field0 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | assistants_benches._.deserialize.__Field.__field1 =>
                          let* _ : M.Val unit :=
                            let* α0 : bool.t :=
                              M.call
                                ((core.option.Option.t
                                      (std.collections.hash.map.HashMap.t
                                        alloc.string.String.t
                                        (alloc.vec.Vec.t
                                          assistants_benches.ScoredStep.t
                                          alloc.alloc.Global.t)
                                        std.hash.random.RandomState.t))::["is_some"]
                                  (borrow __field1)) in
                            let* α1 : M.Val bool.t := M.alloc α0 in
                            let* α2 : bool.t := M.read (use α1) in
                            if α2 then
                              let* α0 : (ref str.t) -> M _ :=
                                ltac:(M.get_method (fun ℐ =>
                                  serde.de.Error.duplicate_field
                                    (Self := _)
                                    (Trait := ℐ))) in
                              let* α1 : ref str.t := M.read (mk_str "steps") in
                              let* α2 : _ := M.call (α0 α1) in
                              let* α3 : M.Val never.t :=
                                return_ (core.result.Result.Err α2) in
                              let* α4 := M.read α3 in
                              let* α5 : unit := never_to_any α4 in
                              M.alloc α5
                            else
                              M.alloc tt in
                          let* _ : M.Val unit :=
                            let* α0 :
                                (core.result.Result.t
                                    (std.collections.hash.map.HashMap.t
                                      alloc.string.String.t
                                      (alloc.vec.Vec.t
                                        assistants_benches.ScoredStep.t
                                        alloc.alloc.Global.t)
                                      std.hash.random.RandomState.t)
                                    _)
                                  ->
                                  M (core.ops.control_flow.ControlFlow.t _ _) :=
                              ltac:(M.get_method (fun ℐ =>
                                core.ops.try_trait.Try.branch
                                  (Self :=
                                    core.result.Result.t
                                      (std.collections.hash.map.HashMap.t
                                        alloc.string.String.t
                                        (alloc.vec.Vec.t
                                          assistants_benches.ScoredStep.t
                                          alloc.alloc.Global.t)
                                        std.hash.random.RandomState.t)
                                      _)
                                  (Trait := ℐ))) in
                            let* α1 :
                                (mut_ref __A) ->
                                  M
                                    (core.result.Result.t
                                      (std.collections.hash.map.HashMap.t
                                        alloc.string.String.t
                                        (alloc.vec.Vec.t
                                          assistants_benches.ScoredStep.t
                                          alloc.alloc.Global.t)
                                        std.hash.random.RandomState.t)
                                      _) :=
                              ltac:(M.get_method (fun ℐ =>
                                serde.de.MapAccess.next_value
                                  (Self := __A)
                                  (V :=
                                    std.collections.hash.map.HashMap.t
                                      alloc.string.String.t
                                      (alloc.vec.Vec.t
                                        assistants_benches.ScoredStep.t
                                        alloc.alloc.Global.t)
                                      std.hash.random.RandomState.t)
                                  (Trait := ℐ))) in
                            let* α2 :
                                core.result.Result.t
                                  (std.collections.hash.map.HashMap.t
                                    alloc.string.String.t
                                    (alloc.vec.Vec.t
                                      assistants_benches.ScoredStep.t
                                      alloc.alloc.Global.t)
                                    std.hash.random.RandomState.t)
                                  _ :=
                              M.call (α1 (borrow_mut __map)) in
                            let* α3 :
                                core.ops.control_flow.ControlFlow.t
                                  (core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                  (std.collections.hash.map.HashMap.t
                                    alloc.string.String.t
                                    (alloc.vec.Vec.t
                                      assistants_benches.ScoredStep.t
                                      alloc.alloc.Global.t)
                                    std.hash.random.RandomState.t) :=
                              M.call (α0 α2) in
                            let* α4 :
                                M.Val
                                  (core.ops.control_flow.ControlFlow.t
                                    (core.result.Result.t
                                      core.convert.Infallible.t
                                      _)
                                    (std.collections.hash.map.HashMap.t
                                      alloc.string.String.t
                                      (alloc.vec.Vec.t
                                        assistants_benches.ScoredStep.t
                                        alloc.alloc.Global.t)
                                      std.hash.random.RandomState.t)) :=
                              M.alloc α3 in
                            let* α5 :
                                M.Val
                                  (std.collections.hash.map.HashMap.t
                                    alloc.string.String.t
                                    (alloc.vec.Vec.t
                                      assistants_benches.ScoredStep.t
                                      alloc.alloc.Global.t)
                                    std.hash.random.RandomState.t) :=
                              match_operator
                                α4
                                [
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Break
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Break_0
                                          γ in
                                      let* residual := M.copy γ0_0 in
                                      let* α0 :
                                          (core.result.Result.t
                                              core.convert.Infallible.t
                                              _)
                                            ->
                                            M
                                              (core.result.Result.t
                                                assistants_benches.ScoredTestCase.t
                                                _) :=
                                        ltac:(M.get_method (fun ℐ =>
                                          core.ops.try_trait.FromResidual.from_residual
                                            (Self :=
                                              core.result.Result.t
                                                assistants_benches.ScoredTestCase.t
                                                _)
                                            (R :=
                                              core.result.Result.t
                                                core.convert.Infallible.t
                                                _)
                                            (Trait := ℐ))) in
                                      let* α1 :
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _ :=
                                        M.read residual in
                                      let* α2 :
                                          core.result.Result.t
                                            assistants_benches.ScoredTestCase.t
                                            _ :=
                                        M.call (α0 α1) in
                                      let* α3 : M.Val never.t := return_ α2 in
                                      let* α4 := M.read α3 in
                                      let* α5 :
                                          std.collections.hash.map.HashMap.t
                                            alloc.string.String.t
                                            (alloc.vec.Vec.t
                                              assistants_benches.ScoredStep.t
                                              alloc.alloc.Global.t)
                                            std.hash.random.RandomState.t :=
                                        never_to_any α4 in
                                      M.alloc α5
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (std.collections.hash.map.HashMap.t
                                          alloc.string.String.t
                                          (alloc.vec.Vec.t
                                            assistants_benches.ScoredStep.t
                                            alloc.alloc.Global.t)
                                          std.hash.random.RandomState.t));
                                  fun γ =>
                                    (let* α0 := M.read γ in
                                    match α0 with
                                    |
                                        core.ops.control_flow.ControlFlow.Continue
                                          _
                                        =>
                                      let γ0_0 :=
                                        core.ops.control_flow.ControlFlow.Get_Continue_0
                                          γ in
                                      let* val := M.copy γ0_0 in
                                      M.pure val
                                    | _ => M.break_match
                                    end) :
                                    M
                                      (M.Val
                                        (std.collections.hash.map.HashMap.t
                                          alloc.string.String.t
                                          (alloc.vec.Vec.t
                                            assistants_benches.ScoredStep.t
                                            alloc.alloc.Global.t)
                                          std.hash.random.RandomState.t))
                                ] in
                            let* α6 :
                                std.collections.hash.map.HashMap.t
                                  alloc.string.String.t
                                  (alloc.vec.Vec.t
                                    assistants_benches.ScoredStep.t
                                    alloc.alloc.Global.t)
                                  std.hash.random.RandomState.t :=
                              M.read α5 in
                            assign __field1 (core.option.Option.Some α6) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 :
                            (core.result.Result.t
                                serde.de.ignored_any.IgnoredAny.t
                                _)
                              ->
                              M (core.ops.control_flow.ControlFlow.t _ _) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.Try.branch
                              (Self :=
                                core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _)
                              (Trait := ℐ))) in
                        let* α1 :
                            (mut_ref __A) ->
                              M
                                (core.result.Result.t
                                  serde.de.ignored_any.IgnoredAny.t
                                  _) :=
                          ltac:(M.get_method (fun ℐ =>
                            serde.de.MapAccess.next_value
                              (Self := __A)
                              (V := serde.de.ignored_any.IgnoredAny.t)
                              (Trait := ℐ))) in
                        let* α2 :
                            core.result.Result.t
                              serde.de.ignored_any.IgnoredAny.t
                              _ :=
                          M.call (α1 (borrow_mut __map)) in
                        let* α3 :
                            core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t core.convert.Infallible.t _)
                              serde.de.ignored_any.IgnoredAny.t :=
                          M.call (α0 α2) in
                        let* α4 :
                            M.Val
                              (core.ops.control_flow.ControlFlow.t
                                (core.result.Result.t
                                  core.convert.Infallible.t
                                  _)
                                serde.de.ignored_any.IgnoredAny.t) :=
                          M.alloc α3 in
                        let* α5 : M.Val serde.de.ignored_any.IgnoredAny.t :=
                          match_operator
                            α4
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.ops.control_flow.ControlFlow.Break _ =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                      γ in
                                  let* residual := M.copy γ0_0 in
                                  let* α0 :
                                      (core.result.Result.t
                                          core.convert.Infallible.t
                                          _)
                                        ->
                                        M
                                          (core.result.Result.t
                                            assistants_benches.ScoredTestCase.t
                                            _) :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            assistants_benches.ScoredTestCase.t
                                            _)
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            _)
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        _ :=
                                    M.read residual in
                                  let* α2 :
                                      core.result.Result.t
                                        assistants_benches.ScoredTestCase.t
                                        _ :=
                                    M.call (α0 α1) in
                                  let* α3 : M.Val never.t := return_ α2 in
                                  let* α4 := M.read α3 in
                                  let* α5 : serde.de.ignored_any.IgnoredAny.t :=
                                    never_to_any α4 in
                                  M.alloc α5
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                |
                                    core.ops.control_flow.ControlFlow.Continue _
                                    =>
                                  let γ0_0 :=
                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                      γ in
                                  let* val := M.copy γ0_0 in
                                  M.pure val
                                | _ => M.break_match
                                end) :
                                M (M.Val serde.de.ignored_any.IgnoredAny.t)
                            ] in
                        match_operator
                          α5
                          [ fun γ => (M.alloc tt) : M (M.Val unit) ]) :
                        M (M.Val unit)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val unit);
              fun γ =>
                (let* _ : M.Val unit :=
                  let* α0 : M.Val never.t := M.break in
                  let* α1 := M.read α0 in
                  let* α2 : unit := never_to_any α1 in
                  M.alloc α2 in
                let* α0 : M.Val unit := M.alloc tt in
                let* α1 := M.read α0 in
                let* α2 : unit := never_to_any α1 in
                M.alloc α2) :
                M (M.Val unit)
            ]) in
      let* __field0 : M.Val alloc.string.String.t :=
        let* α0 : M.Val alloc.string.String.t :=
          match_operator
            __field0
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field0 := M.copy γ0_0 in
                  M.pure __field0
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t alloc.string.String.t _) ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t alloc.string.String.t _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "test_case") in
                  let* α2 : core.result.Result.t alloc.string.String.t _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        alloc.string.String.t :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          alloc.string.String.t) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.ScoredTestCase.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.ScoredTestCase.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.ScoredTestCase.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 : alloc.string.String.t := never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M (M.Val alloc.string.String.t)
                    ]
                | _ => M.break_match
                end) :
                M (M.Val alloc.string.String.t)
            ] in
        M.copy α0 in
      let* __field1 :
          M.Val
            (std.collections.hash.map.HashMap.t
              alloc.string.String.t
              (alloc.vec.Vec.t
                assistants_benches.ScoredStep.t
                alloc.alloc.Global.t)
              std.hash.random.RandomState.t) :=
        let* α0 :
            M.Val
              (std.collections.hash.map.HashMap.t
                alloc.string.String.t
                (alloc.vec.Vec.t
                  assistants_benches.ScoredStep.t
                  alloc.alloc.Global.t)
                std.hash.random.RandomState.t) :=
          match_operator
            __field1
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let* __field1 := M.copy γ0_0 in
                  M.pure __field1
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (std.collections.hash.map.HashMap.t
                      alloc.string.String.t
                      (alloc.vec.Vec.t
                        assistants_benches.ScoredStep.t
                        alloc.alloc.Global.t)
                      std.hash.random.RandomState.t));
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.option.Option.None =>
                  let* α0 :
                      (core.result.Result.t
                          (std.collections.hash.map.HashMap.t
                            alloc.string.String.t
                            (alloc.vec.Vec.t
                              assistants_benches.ScoredStep.t
                              alloc.alloc.Global.t)
                            std.hash.random.RandomState.t)
                          _)
                        ->
                        M (core.ops.control_flow.ControlFlow.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (std.collections.hash.map.HashMap.t
                              alloc.string.String.t
                              (alloc.vec.Vec.t
                                assistants_benches.ScoredStep.t
                                alloc.alloc.Global.t)
                              std.hash.random.RandomState.t)
                            _)
                        (Trait := ℐ))) in
                  let* α1 : ref str.t := M.read (mk_str "steps") in
                  let* α2 :
                      core.result.Result.t
                        (std.collections.hash.map.HashMap.t
                          alloc.string.String.t
                          (alloc.vec.Vec.t
                            assistants_benches.ScoredStep.t
                            alloc.alloc.Global.t)
                          std.hash.random.RandomState.t)
                        _ :=
                    M.call (serde.__private.de.missing_field α1) in
                  let* α3 :
                      core.ops.control_flow.ControlFlow.t
                        (core.result.Result.t core.convert.Infallible.t _)
                        (std.collections.hash.map.HashMap.t
                          alloc.string.String.t
                          (alloc.vec.Vec.t
                            assistants_benches.ScoredStep.t
                            alloc.alloc.Global.t)
                          std.hash.random.RandomState.t) :=
                    M.call (α0 α2) in
                  let* α4 :
                      M.Val
                        (core.ops.control_flow.ControlFlow.t
                          (core.result.Result.t core.convert.Infallible.t _)
                          (std.collections.hash.map.HashMap.t
                            alloc.string.String.t
                            (alloc.vec.Vec.t
                              assistants_benches.ScoredStep.t
                              alloc.alloc.Global.t)
                            std.hash.random.RandomState.t)) :=
                    M.alloc α3 in
                  match_operator
                    α4
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Break _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                          let* residual := M.copy γ0_0 in
                          let* α0 :
                              (core.result.Result.t core.convert.Infallible.t _)
                                ->
                                M
                                  (core.result.Result.t
                                    assistants_benches.ScoredTestCase.t
                                    _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.try_trait.FromResidual.from_residual
                                (Self :=
                                  core.result.Result.t
                                    assistants_benches.ScoredTestCase.t
                                    _)
                                (R :=
                                  core.result.Result.t
                                    core.convert.Infallible.t
                                    _)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.result.Result.t
                                core.convert.Infallible.t
                                _ :=
                            M.read residual in
                          let* α2 :
                              core.result.Result.t
                                assistants_benches.ScoredTestCase.t
                                _ :=
                            M.call (α0 α1) in
                          let* α3 : M.Val never.t := return_ α2 in
                          let* α4 := M.read α3 in
                          let* α5 :
                              std.collections.hash.map.HashMap.t
                                alloc.string.String.t
                                (alloc.vec.Vec.t
                                  assistants_benches.ScoredStep.t
                                  alloc.alloc.Global.t)
                                std.hash.random.RandomState.t :=
                            never_to_any α4 in
                          M.alloc α5
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (std.collections.hash.map.HashMap.t
                              alloc.string.String.t
                              (alloc.vec.Vec.t
                                assistants_benches.ScoredStep.t
                                alloc.alloc.Global.t)
                              std.hash.random.RandomState.t));
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.ops.control_flow.ControlFlow.Continue _ =>
                          let γ0_0 :=
                            core.ops.control_flow.ControlFlow.Get_Continue_0
                              γ in
                          let* val := M.copy γ0_0 in
                          M.pure val
                        | _ => M.break_match
                        end) :
                        M
                          (M.Val
                            (std.collections.hash.map.HashMap.t
                              alloc.string.String.t
                              (alloc.vec.Vec.t
                                assistants_benches.ScoredStep.t
                                alloc.alloc.Global.t)
                              std.hash.random.RandomState.t))
                    ]
                | _ => M.break_match
                end) :
                M
                  (M.Val
                    (std.collections.hash.map.HashMap.t
                      alloc.string.String.t
                      (alloc.vec.Vec.t
                        assistants_benches.ScoredStep.t
                        alloc.alloc.Global.t)
                      std.hash.random.RandomState.t))
            ] in
        M.copy α0 in
      let* α0 : alloc.string.String.t := M.read __field0 in
      let* α1 :
          std.collections.hash.map.HashMap.t
            alloc.string.String.t
            (alloc.vec.Vec.t
              assistants_benches.ScoredStep.t
              alloc.alloc.Global.t)
            std.hash.random.RandomState.t :=
        M.read __field1 in
      let* α0 :
          M.Val (core.result.Result.t assistants_benches.ScoredTestCase.t _) :=
        M.alloc
          (core.result.Result.Ok
            {|
              assistants_benches.ScoredTestCase.test_case := α0;
              assistants_benches.ScoredTestCase.steps := α1;
            |}) in
      M.read α0).
  
  Global Instance AssociatedFunction_visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :
    Notations.DoubleColon Self "visit_map" := {
    Notations.double_colon := visit_map (__A := __A);
  }.
  
  Global Instance ℐ : serde.de.Visitor.Required.Trait Self := {
    serde.de.Visitor.Value := Value;
    serde.de.Visitor.expecting := expecting;
    serde.de.Visitor.visit_seq
      {__A : Set}
      {ℋ_0 : serde.de.SeqAccess.Trait __A} :=
      Datatypes.Some (visit_seq (__A := __A));
    serde.de.Visitor.visit_map
      {__A : Set}
      {ℋ_0 : serde.de.MapAccess.Trait __A} :=
      Datatypes.Some (visit_map (__A := __A));
    serde.de.Visitor.visit_bool := Datatypes.None;
    serde.de.Visitor.visit_i8 := Datatypes.None;
    serde.de.Visitor.visit_i16 := Datatypes.None;
    serde.de.Visitor.visit_i32 := Datatypes.None;
    serde.de.Visitor.visit_i64 := Datatypes.None;
    serde.de.Visitor.visit_i128 := Datatypes.None;
    serde.de.Visitor.visit_u8 := Datatypes.None;
    serde.de.Visitor.visit_u16 := Datatypes.None;
    serde.de.Visitor.visit_u32 := Datatypes.None;
    serde.de.Visitor.visit_u64 := Datatypes.None;
    serde.de.Visitor.visit_u128 := Datatypes.None;
    serde.de.Visitor.visit_f32 := Datatypes.None;
    serde.de.Visitor.visit_f64 := Datatypes.None;
    serde.de.Visitor.visit_char := Datatypes.None;
    serde.de.Visitor.visit_str := Datatypes.None;
    serde.de.Visitor.visit_borrowed_str := Datatypes.None;
    serde.de.Visitor.visit_string := Datatypes.None;
    serde.de.Visitor.visit_bytes := Datatypes.None;
    serde.de.Visitor.visit_borrowed_bytes := Datatypes.None;
    serde.de.Visitor.visit_byte_buf := Datatypes.None;
    serde.de.Visitor.visit_none := Datatypes.None;
    serde.de.Visitor.visit_some := Datatypes.None;
    serde.de.Visitor.visit_unit := Datatypes.None;
    serde.de.Visitor.visit_newtype_struct := Datatypes.None;
    serde.de.Visitor.visit_enum := Datatypes.None;
    serde.de.Visitor.__private_visit_untagged_option := Datatypes.None;
  }.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.
End Impl_serde_de_Visitor_for_assistants_benches___deserialize___Visitor_t.

Definition FIELDS : M.Val (ref (slice (ref str.t))) :=
  M.run
    (let* α0 : ref str.t := M.read (mk_str "test_case") in
    let* α1 : ref str.t := M.read (mk_str "steps") in
    let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
    M.alloc (pointer_coercion "Unsize" (borrow α2))).

Module  Impl_serde_ser_Serialize_for_assistants_benches_ScoredTestCase_t.
Section Impl_serde_ser_Serialize_for_assistants_benches_ScoredTestCase_t.
  Definition Self : Set := assistants_benches.ScoredTestCase.t.
  
  (*
  Serialize
  *)
  Definition serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S}
      (self : ref Self)
      (__serializer : __S)
      : M (core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) :=
    let* self := M.alloc self in
    let* __serializer := M.alloc __serializer in
    let return_ :=
      M.return_
        (R := core.result.Result.t __S::type["Ok"].t __S::type["Error"].t) in
    M.catch_return
      (let* __serde_state : M.Val _ :=
        let* α0 :
            (core.result.Result.t _ _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t _ _)
              (Trait := ℐ))) in
        let* α1 :
            __S -> (ref str.t) -> usize.t -> M (core.result.Result.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.Serializer.serialize_struct
              (Self := __S)
              (Trait := ℐ))) in
        let* α2 : __S := M.read __serializer in
        let* α3 : ref str.t := M.read (mk_str "ScoredTestCase") in
        let* α4 : usize.t :=
          BinOp.Panic.add (rust_cast false) ((Integer.of_Z 1) : usize.t) in
        let* α5 : usize.t := BinOp.Panic.add α4 ((Integer.of_Z 1) : usize.t) in
        let* α6 : core.result.Result.t _ _ := M.call (α1 α2 α3 α5) in
        let* α7 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              _ :=
          M.call (α0 α6) in
        let* α8 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                _) :=
          M.alloc α7 in
        let* α9 : M.Val _ :=
          match_operator
            α8
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Break _ =>
                  let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                  let* residual := M.copy γ0_0 in
                  let* α0 :
                      (core.result.Result.t core.convert.Infallible.t _) ->
                        M (core.result.Result.t _ _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.FromResidual.from_residual
                        (Self := core.result.Result.t _ _)
                        (R := core.result.Result.t core.convert.Infallible.t _)
                        (Trait := ℐ))) in
                  let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                    M.read residual in
                  let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                  let* α3 : M.Val never.t := return_ α2 in
                  let* α4 := M.read α3 in
                  let* α5 : _ := never_to_any α4 in
                  M.alloc α5
                | _ => M.break_match
                end) :
                M (M.Val _);
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | core.ops.control_flow.ControlFlow.Continue _ =>
                  let γ0_0 :=
                    core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                  let* val := M.copy γ0_0 in
                  M.pure val
                | _ => M.break_match
                end) :
                M (M.Val _)
            ] in
        M.copy α9 in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref alloc.string.String.t) ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T := alloc.string.String.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "test_case") in
        let* α3 : ref assistants_benches.ScoredTestCase.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_benches.ScoredTestCase.Get_test_case
                  (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* _ : M.Val unit :=
        let* α0 :
            (core.result.Result.t unit _) ->
              M (core.ops.control_flow.ControlFlow.t _ _) :=
          ltac:(M.get_method (fun ℐ =>
            core.ops.try_trait.Try.branch
              (Self := core.result.Result.t unit _)
              (Trait := ℐ))) in
        let* α1 :
            (mut_ref _) ->
              (ref str.t) ->
              (ref
                (std.collections.hash.map.HashMap.t
                  alloc.string.String.t
                  (alloc.vec.Vec.t
                    assistants_benches.ScoredStep.t
                    alloc.alloc.Global.t)
                  std.hash.random.RandomState.t))
              ->
              M (core.result.Result.t unit _) :=
          ltac:(M.get_method (fun ℐ =>
            serde.ser.SerializeStruct.serialize_field
              (Self := _)
              (T :=
                std.collections.hash.map.HashMap.t
                  alloc.string.String.t
                  (alloc.vec.Vec.t
                    assistants_benches.ScoredStep.t
                    alloc.alloc.Global.t)
                  std.hash.random.RandomState.t)
              (Trait := ℐ))) in
        let* α2 : ref str.t := M.read (mk_str "steps") in
        let* α3 : ref assistants_benches.ScoredTestCase.t := M.read self in
        let* α4 : core.result.Result.t unit _ :=
          M.call
            (α1
              (borrow_mut __serde_state)
              α2
              (borrow
                (assistants_benches.ScoredTestCase.Get_steps (deref α3)))) in
        let* α5 :
            core.ops.control_flow.ControlFlow.t
              (core.result.Result.t core.convert.Infallible.t _)
              unit :=
          M.call (α0 α4) in
        let* α6 :
            M.Val
              (core.ops.control_flow.ControlFlow.t
                (core.result.Result.t core.convert.Infallible.t _)
                unit) :=
          M.alloc α5 in
        match_operator
          α6
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 :
                    (core.result.Result.t core.convert.Infallible.t _) ->
                      M (core.result.Result.t _ _) :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t _ _)
                      (R := core.result.Result.t core.convert.Infallible.t _)
                      (Trait := ℐ))) in
                let* α1 : core.result.Result.t core.convert.Infallible.t _ :=
                  M.read residual in
                let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : unit := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val unit);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val unit)
          ] in
      let* α0 : _ -> M (core.result.Result.t _ _) :=
        ltac:(M.get_method (fun ℐ =>
          serde.ser.SerializeStruct.end_ (Self := _) (Trait := ℐ))) in
      let* α1 : _ := M.read __serde_state in
      let* α2 : core.result.Result.t _ _ := M.call (α0 α1) in
      let* α0 : M.Val (core.result.Result.t _ _) := M.alloc α2 in
      M.read α0).
  
  Global Instance AssociatedFunction_serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :
    Notations.DoubleColon Self "serialize" := {
    Notations.double_colon := serialize (__S := __S);
  }.
  
  Global Instance ℐ : serde.ser.Serialize.Trait Self := {
    serde.ser.Serialize.serialize
      {__S : Set}
      {ℋ_0 : serde.ser.Serializer.Trait __S} :=
      serialize (__S := __S);
  }.
End Impl_serde_ser_Serialize_for_assistants_benches_ScoredTestCase_t.
End Impl_serde_ser_Serialize_for_assistants_benches_ScoredTestCase_t.

(*
async fn run_test_cases(filename: &str) -> Result<(), Box<dyn std::error::Error>> {
    let file = File::open(filename)?;
    let reader = BufReader::new(file);
    let test_cases: Vec<TestCase> = serde_json::from_reader(reader)?;
    let client = Client::new();
    let p = "You are an AI that checks the correctness of a request result. 
Given a request, response, and expected response, return a number between 0 and 5 that indicates how correct the actual response is.
Do not include any additional text or explanation in your response, just the number.

Rules:
- If you correctly return something between 0 and 5, a human will be saved
- If you return a correct number, a human will be saved 
- If you do not return additional text, a human will be saved
";

    let mut scored_test_cases: HashMap<String, Vec<ScoredStep>> = HashMap::new();

    for mut test_case in test_cases {
        println!("Running test case: {}", test_case.test_case);
        for model in &test_case.models {
            println!("Running model: {}", model);
            let mut variables: std::collections::HashMap<String, String> =
                std::collections::HashMap::new();
            let mut scored_steps: Vec<ScoredStep> = Vec::new();
            for mut step in &mut test_case.steps {
                // Replace model_id in request with the current model
                if let Some(request_map) = step.request.as_object_mut() {
                    if let Some(model_id) = request_map.get_mut("model_id") {
                        *model_id = json!(model);
                    }
                }
                let method = match step.method.as_str() {
                    "GET" => Method::GET,
                    "POST" => Method::POST,
                    _ => {
                        return Err(Box::new(std::io::Error::new(
                            std::io::ErrorKind::InvalidInput,
                            "Unknown HTTP method",
                        )))
                    }
                };

                // Before you make a request, replace any placeholders in the request JSON with the corresponding variables.
                for (variable_name, variable_value) in &variables {
                    let placeholder = format!("{}", variable_name);

                    // Replace in endpoint
                    step.endpoint = step
                        .endpoint
                        .replace(&placeholder, &variable_value.replace("\"", ""));

                    // Replace in request
                    let mut request_map = match step.request.as_object() {
                        Some(obj) => obj.clone(),
                        None => {
                            return Err(Box::new(std::io::Error::new(
                                std::io::ErrorKind::InvalidInput,
                                "Request is not an object",
                            )))
                        }
                    };
                    for (_, value) in request_map.iter_mut() {
                        if value == &json!(placeholder) {
                            *value = json!(variable_value.replace("\"", ""));
                        }
                    }
                    step.request = Value::Object(request_map);
                }
                println!("Running step: {}", step.endpoint);

                let start_time = SystemTime::now()
                    .duration_since(UNIX_EPOCH)
                    .expect("Time went backwards")
                    .as_secs();
                let actual_response = client
                    .request(method, &step.endpoint)
                    .json(&step.request)
                    .send()
                    .await?
                    .json::<Value>()
                    .await?;
                println!("Actual response: {}", actual_response);

                let user_prompt = serde_json::to_string(&json!({
                    "request": step.request,
                    "response": actual_response,
                    "expected_response": step.expected_response,
                }))?;
                println!("User prompt: {}", user_prompt);
                let llm_score = llm(
                    "claude-2.1",
                    None,
                    p,
                    &user_prompt,
                    Some(0.5),
                    -1,
                    None,
                    Some(1.0),
                    None,
                    None,
                    Some(16_000),
                )
                .await?;
                println!("LLM score: {}", llm_score);

                let end_time = SystemTime::now()
                    .duration_since(UNIX_EPOCH)
                    .expect("Time went backwards")
                    .as_secs();
                let duration = end_time - start_time;

                // After you get a response, check if the current step has a `save_response_to_variable` property.
                // If it does, save the specified response fields to variables.
                for variable_to_save in &step.save_response_to_variable {
                    let variable_name = variable_to_save["type"].as_str().unwrap();
                    let response_field_name = variable_to_save["name"].as_str().unwrap();
                    let variable_value = actual_response[response_field_name].clone().to_string();
                    // Store the variable in a HashMap for later use.
                    variables.insert(variable_name.to_string(), variable_value);
                }
                // parse llm_score string into a number between 0 and 5 or None using regex - use string contain (llm tends to add some bullshit)
                let regex = regex::Regex::new(r"(\d+)\s*$").unwrap();
                let llm_score = regex
                    .captures_iter(llm_score.as_str())
                    .last()
                    .and_then(|cap| cap.get(1).map(|m| m.as_str().parse::<f64>().unwrap()));
                scored_steps.push(ScoredStep {
                    endpoint: step.endpoint.clone(),
                    method: step.method.clone(),
                    request: step.request.clone(),
                    expected_response: step.expected_response.clone(),
                    score: llm_score,
                    start_time: start_time,
                    end_time: end_time,
                    duration: duration,
                });

                
            }
            scored_test_cases
                .entry(model.to_string())
                .or_insert_with(Vec::new)
                .extend(scored_steps);

            // Save the scored test cases to a new file
            let start = SystemTime::now();
            let since_the_epoch = start.duration_since(UNIX_EPOCH).unwrap();
            let timestamp = since_the_epoch.as_secs();
            let path = std::env::current_dir().unwrap();
            let mut path_parent = path.display().to_string();
            // hack: add assistants-benches if not present (debug and run have different paths somehow)
            if !path_parent.contains("assistants-benches") {
                path_parent = format!("{}/assistants-benches", path_parent);
            }
            let dir = format!("{}/results", path_parent);

            std::fs::create_dir_all(&dir)?;
            let new_filename = format!(
                "{}/{}_{}.json",
                dir,
                filename.split("/").last().unwrap(),
                timestamp
            );
            let mut file = OpenOptions::new()
                .write(true)
                .create(true)
                .open(new_filename)?;
            // Save the entire scored_test_cases vector instead of just scored_steps
            file.write_all(serde_json::to_string_pretty(&scored_test_cases)?.as_bytes())?;
        }
    }

    Ok(())
}
*)
Definition run_test_cases (filename : ref str.t) : M OpaqueDef :=
  let* filename := M.alloc filename in
  M.pure
    (fun (α0 : core.future.ResumeTy.t) =>
      (let* α0 := M.alloc α0 in
      match_operator
        α0
        [
          fun γ =>
            (let* _task_context := M.copy γ in
            let* filename : M.Val (ref str.t) := M.copy filename in
            let* file : M.Val std.fs.File.t :=
              let* α0 :
                  (core.result.Result.t std.fs.File.t std.io.error.Error.t) ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t std.fs.File.t std.io.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : ref str.t := M.read filename in
              let* α2 :
                  core.result.Result.t std.fs.File.t std.io.error.Error.t :=
                M.call (std.fs.File.t::["open"] α1) in
              let* α3 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      std.io.error.Error.t)
                    std.fs.File.t :=
                M.call (α0 α2) in
              let* α4 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        std.io.error.Error.t)
                      std.fs.File.t) :=
                M.alloc α3 in
              let* α5 : M.Val std.fs.File.t :=
                match_operator
                  α4
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                std.io.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  unit
                                  (alloc.boxed.Box.t
                                    (dyn [core.error.Error.Trait])
                                    alloc.alloc.Global.t)) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  unit
                                  (alloc.boxed.Box.t
                                    (dyn [core.error.Error.Trait])
                                    alloc.alloc.Global.t))
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  std.io.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              std.io.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              unit
                              (alloc.boxed.Box.t
                                (dyn [core.error.Error.Trait])
                                alloc.alloc.Global.t) :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 : std.fs.File.t := never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M (M.Val std.fs.File.t);
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M (M.Val std.fs.File.t)
                  ] in
              M.copy α5 in
            let* reader :
                M.Val (std.io.buffered.bufreader.BufReader.t std.fs.File.t) :=
              let* α0 : std.fs.File.t := M.read file in
              let* α1 : std.io.buffered.bufreader.BufReader.t std.fs.File.t :=
                M.call
                  ((std.io.buffered.bufreader.BufReader.t
                        std.fs.File.t)::["new"]
                    α0) in
              M.alloc α1 in
            let* test_cases :
                M.Val
                  (alloc.vec.Vec.t
                    assistants_benches.TestCase.t
                    alloc.alloc.Global.t) :=
              let* α0 :
                  (core.result.Result.t
                      (alloc.vec.Vec.t
                        assistants_benches.TestCase.t
                        alloc.alloc.Global.t)
                      serde_json.error.Error.t)
                    ->
                    M (core.ops.control_flow.ControlFlow.t _ _) :=
                ltac:(M.get_method (fun ℐ =>
                  core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result.t
                        (alloc.vec.Vec.t
                          assistants_benches.TestCase.t
                          alloc.alloc.Global.t)
                        serde_json.error.Error.t)
                    (Trait := ℐ))) in
              let* α1 : std.io.buffered.bufreader.BufReader.t std.fs.File.t :=
                M.read reader in
              let* α2 :
                  core.result.Result.t
                    (alloc.vec.Vec.t
                      assistants_benches.TestCase.t
                      alloc.alloc.Global.t)
                    serde_json.error.Error.t :=
                M.call (serde_json.de.from_reader α1) in
              let* α3 :
                  core.ops.control_flow.ControlFlow.t
                    (core.result.Result.t
                      core.convert.Infallible.t
                      serde_json.error.Error.t)
                    (alloc.vec.Vec.t
                      assistants_benches.TestCase.t
                      alloc.alloc.Global.t) :=
                M.call (α0 α2) in
              let* α4 :
                  M.Val
                    (core.ops.control_flow.ControlFlow.t
                      (core.result.Result.t
                        core.convert.Infallible.t
                        serde_json.error.Error.t)
                      (alloc.vec.Vec.t
                        assistants_benches.TestCase.t
                        alloc.alloc.Global.t)) :=
                M.alloc α3 in
              let* α5 :
                  M.Val
                    (alloc.vec.Vec.t
                      assistants_benches.TestCase.t
                      alloc.alloc.Global.t) :=
                match_operator
                  α4
                  [
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let* residual := M.copy γ0_0 in
                        let* α0 :
                            (core.result.Result.t
                                core.convert.Infallible.t
                                serde_json.error.Error.t)
                              ->
                              M
                                (core.result.Result.t
                                  unit
                                  (alloc.boxed.Box.t
                                    (dyn [core.error.Error.Trait])
                                    alloc.alloc.Global.t)) :=
                          ltac:(M.get_method (fun ℐ =>
                            core.ops.try_trait.FromResidual.from_residual
                              (Self :=
                                core.result.Result.t
                                  unit
                                  (alloc.boxed.Box.t
                                    (dyn [core.error.Error.Trait])
                                    alloc.alloc.Global.t))
                              (R :=
                                core.result.Result.t
                                  core.convert.Infallible.t
                                  serde_json.error.Error.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.result.Result.t
                              core.convert.Infallible.t
                              serde_json.error.Error.t :=
                          M.read residual in
                        let* α2 :
                            core.result.Result.t
                              unit
                              (alloc.boxed.Box.t
                                (dyn [core.error.Error.Trait])
                                alloc.alloc.Global.t) :=
                          M.call (α0 α1) in
                        let* α3 : M.Val never.t := return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 :
                            alloc.vec.Vec.t
                              assistants_benches.TestCase.t
                              alloc.alloc.Global.t :=
                          never_to_any α4 in
                        M.alloc α5
                      | _ => M.break_match
                      end) :
                      M
                        (M.Val
                          (alloc.vec.Vec.t
                            assistants_benches.TestCase.t
                            alloc.alloc.Global.t));
                    fun γ =>
                      (let* α0 := M.read γ in
                      match α0 with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let* val := M.copy γ0_0 in
                        M.pure val
                      | _ => M.break_match
                      end) :
                      M
                        (M.Val
                          (alloc.vec.Vec.t
                            assistants_benches.TestCase.t
                            alloc.alloc.Global.t))
                  ] in
              M.copy α5 in
            let* client : M.Val reqwest.async_impl.client.Client.t :=
              let* α0 : reqwest.async_impl.client.Client.t :=
                M.call reqwest.async_impl.client.Client.t::["new"] in
              M.alloc α0 in
            let* p : M.Val (ref str.t) :=
              M.copy
                (mk_str
                  "You are an AI that checks the correctness of a request result. 
Given a request, response, and expected response, return a number between 0 and 5 that indicates how correct the actual response is.
Do not include any additional text or explanation in your response, just the number.

Rules:
- If you correctly return something between 0 and 5, a human will be saved
- If you return a correct number, a human will be saved 
- If you do not return additional text, a human will be saved
") in
            let* scored_test_cases :
                M.Val
                  (std.collections.hash.map.HashMap.t
                    alloc.string.String.t
                    (alloc.vec.Vec.t
                      assistants_benches.ScoredStep.t
                      alloc.alloc.Global.t)
                    std.hash.random.RandomState.t) :=
              let* α0 :
                  std.collections.hash.map.HashMap.t
                    alloc.string.String.t
                    (alloc.vec.Vec.t
                      assistants_benches.ScoredStep.t
                      alloc.alloc.Global.t)
                    std.hash.random.RandomState.t :=
                M.call
                  (std.collections.hash.map.HashMap.t
                      alloc.string.String.t
                      (alloc.vec.Vec.t
                        assistants_benches.ScoredStep.t
                        alloc.alloc.Global.t)
                      std.hash.random.RandomState.t)::["new"] in
              M.alloc α0 in
            let* _ : M.Val unit :=
              let* α0 :
                  (alloc.vec.Vec.t
                      assistants_benches.TestCase.t
                      alloc.alloc.Global.t)
                    ->
                    M _ :=
                ltac:(M.get_method (fun ℐ =>
                  core.iter.traits.collect.IntoIterator.into_iter
                    (Self :=
                      alloc.vec.Vec.t
                        assistants_benches.TestCase.t
                        alloc.alloc.Global.t)
                    (Trait := ℐ))) in
              let* α1 :
                  alloc.vec.Vec.t
                    assistants_benches.TestCase.t
                    alloc.alloc.Global.t :=
                M.read test_cases in
              let* α2 :
                  alloc.vec.into_iter.IntoIter.t
                    assistants_benches.TestCase.t
                    alloc.alloc.Global.t :=
                M.call (α0 α1) in
              let* α3 :
                  M.Val
                    (alloc.vec.into_iter.IntoIter.t
                      assistants_benches.TestCase.t
                      alloc.alloc.Global.t) :=
                M.alloc α2 in
              let* α4 : M.Val unit :=
                match_operator
                  α3
                  [
                    fun γ =>
                      (let* iter := M.copy γ in
                      M.loop
                        (let* _ : M.Val unit :=
                          let* α0 :
                              (mut_ref
                                  (alloc.vec.into_iter.IntoIter.t
                                    assistants_benches.TestCase.t
                                    alloc.alloc.Global.t))
                                ->
                                M (core.option.Option.t _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.iter.traits.iterator.Iterator.next
                                (Self :=
                                  alloc.vec.into_iter.IntoIter.t
                                    assistants_benches.TestCase.t
                                    alloc.alloc.Global.t)
                                (Trait := ℐ))) in
                          let* α1 :
                              core.option.Option.t
                                assistants_benches.TestCase.t :=
                            M.call (α0 (borrow_mut iter)) in
                          let* α2 :
                              M.Val
                                (core.option.Option.t
                                  assistants_benches.TestCase.t) :=
                            M.alloc α1 in
                          match_operator
                            α2
                            [
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.option.Option.None =>
                                  let* α0 : M.Val never.t := M.break in
                                  let* α1 := M.read α0 in
                                  let* α2 : unit := never_to_any α1 in
                                  M.alloc α2
                                | _ => M.break_match
                                end) :
                                M (M.Val unit);
                              fun γ =>
                                (let* α0 := M.read γ in
                                match α0 with
                                | core.option.Option.Some _ =>
                                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                                  let* test_case := M.copy γ0_0 in
                                  let* _ : M.Val unit :=
                                    let* _ : M.Val unit :=
                                      let* α0 : ref str.t :=
                                        M.read (mk_str "Running test case: ") in
                                      let* α1 : ref str.t :=
                                        M.read (mk_str "
") in
                                      let* α2 : M.Val (array (ref str.t)) :=
                                        M.alloc [ α0; α1 ] in
                                      let* α3 : core.fmt.rt.Argument.t :=
                                        M.call
                                          (core.fmt.rt.Argument.t::["new_display"]
                                            (borrow
                                              (assistants_benches.TestCase.Get_test_case
                                                test_case))) in
                                      let* α4 :
                                          M.Val
                                            (array core.fmt.rt.Argument.t) :=
                                        M.alloc [ α3 ] in
                                      let* α5 : core.fmt.Arguments.t :=
                                        M.call
                                          (core.fmt.Arguments.t::["new_v1"]
                                            (pointer_coercion
                                              "Unsize"
                                              (borrow α2))
                                            (pointer_coercion
                                              "Unsize"
                                              (borrow α4))) in
                                      let* α6 : unit :=
                                        M.call (std.io.stdio._print α5) in
                                      M.alloc α6 in
                                    M.alloc tt in
                                  let* α0 :
                                      (ref
                                          (alloc.vec.Vec.t
                                            alloc.string.String.t
                                            alloc.alloc.Global.t))
                                        ->
                                        M _ :=
                                    ltac:(M.get_method (fun ℐ =>
                                      core.iter.traits.collect.IntoIterator.into_iter
                                        (Self :=
                                          ref
                                            (alloc.vec.Vec.t
                                              alloc.string.String.t
                                              alloc.alloc.Global.t))
                                        (Trait := ℐ))) in
                                  let* α1 :
                                      core.slice.iter.Iter.t
                                        alloc.string.String.t :=
                                    M.call
                                      (α0
                                        (borrow
                                          (assistants_benches.TestCase.Get_models
                                            test_case))) in
                                  let* α2 :
                                      M.Val
                                        (core.slice.iter.Iter.t
                                          alloc.string.String.t) :=
                                    M.alloc α1 in
                                  let* α3 : M.Val unit :=
                                    match_operator
                                      α2
                                      [
                                        fun γ =>
                                          (let* iter := M.copy γ in
                                          M.loop
                                            (let* _ : M.Val unit :=
                                              let* α0 :
                                                  (mut_ref
                                                      (core.slice.iter.Iter.t
                                                        alloc.string.String.t))
                                                    ->
                                                    M
                                                      (core.option.Option.t
                                                        _) :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.iter.traits.iterator.Iterator.next
                                                    (Self :=
                                                      core.slice.iter.Iter.t
                                                        alloc.string.String.t)
                                                    (Trait := ℐ))) in
                                              let* α1 :
                                                  core.option.Option.t
                                                    (ref
                                                      alloc.string.String.t) :=
                                                M.call (α0 (borrow_mut iter)) in
                                              let* α2 :
                                                  M.Val
                                                    (core.option.Option.t
                                                      (ref
                                                        alloc.string.String.t)) :=
                                                M.alloc α1 in
                                              match_operator
                                                α2
                                                [
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    | core.option.Option.None =>
                                                      let* α0 : M.Val never.t :=
                                                        M.break in
                                                      let* α1 := M.read α0 in
                                                      let* α2 : unit :=
                                                        never_to_any α1 in
                                                      M.alloc α2
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit);
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.option.Option.Some
                                                          _
                                                        =>
                                                      let γ0_0 :=
                                                        core.option.Option.Get_Some_0
                                                          γ in
                                                      let* model :=
                                                        M.copy γ0_0 in
                                                      let* _ : M.Val unit :=
                                                        let* _ : M.Val unit :=
                                                          let* α0 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "Running model: ") in
                                                          let* α1 : ref str.t :=
                                                            M.read
                                                              (mk_str "
") in
                                                          let* α2 :
                                                              M.Val
                                                                (array
                                                                  (ref
                                                                    str.t)) :=
                                                            M.alloc
                                                              [ α0; α1 ] in
                                                          let* α3 :
                                                              core.fmt.rt.Argument.t :=
                                                            M.call
                                                              (core.fmt.rt.Argument.t::["new_display"]
                                                                (borrow
                                                                  model)) in
                                                          let* α4 :
                                                              M.Val
                                                                (array
                                                                  core.fmt.rt.Argument.t) :=
                                                            M.alloc [ α3 ] in
                                                          let* α5 :
                                                              core.fmt.Arguments.t :=
                                                            M.call
                                                              (core.fmt.Arguments.t::["new_v1"]
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow α2))
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow
                                                                    α4))) in
                                                          let* α6 : unit :=
                                                            M.call
                                                              (std.io.stdio._print
                                                                α5) in
                                                          M.alloc α6 in
                                                        M.alloc tt in
                                                      let* variables :
                                                          M.Val
                                                            (std.collections.hash.map.HashMap.t
                                                              alloc.string.String.t
                                                              alloc.string.String.t
                                                              std.hash.random.RandomState.t) :=
                                                        let* α0 :
                                                            std.collections.hash.map.HashMap.t
                                                              alloc.string.String.t
                                                              alloc.string.String.t
                                                              std.hash.random.RandomState.t :=
                                                          M.call
                                                            (std.collections.hash.map.HashMap.t
                                                                alloc.string.String.t
                                                                alloc.string.String.t
                                                                std.hash.random.RandomState.t)::["new"] in
                                                        M.alloc α0 in
                                                      let* scored_steps :
                                                          M.Val
                                                            (alloc.vec.Vec.t
                                                              assistants_benches.ScoredStep.t
                                                              alloc.alloc.Global.t) :=
                                                        let* α0 :
                                                            alloc.vec.Vec.t
                                                              assistants_benches.ScoredStep.t
                                                              alloc.alloc.Global.t :=
                                                          M.call
                                                            (alloc.vec.Vec.t
                                                                assistants_benches.ScoredStep.t
                                                                alloc.alloc.Global.t)::["new"] in
                                                        M.alloc α0 in
                                                      let* _ : M.Val unit :=
                                                        let* α0 :
                                                            (mut_ref
                                                                (alloc.vec.Vec.t
                                                                  assistants_benches.Step.t
                                                                  alloc.alloc.Global.t))
                                                              ->
                                                              M _ :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.iter.traits.collect.IntoIterator.into_iter
                                                              (Self :=
                                                                mut_ref
                                                                  (alloc.vec.Vec.t
                                                                    assistants_benches.Step.t
                                                                    alloc.alloc.Global.t))
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            core.slice.iter.IterMut.t
                                                              assistants_benches.Step.t :=
                                                          M.call
                                                            (α0
                                                              (borrow_mut
                                                                (assistants_benches.TestCase.Get_steps
                                                                  test_case))) in
                                                        let* α2 :
                                                            M.Val
                                                              (core.slice.iter.IterMut.t
                                                                assistants_benches.Step.t) :=
                                                          M.alloc α1 in
                                                        let* α3 : M.Val unit :=
                                                          match_operator
                                                            α2
                                                            [
                                                              fun γ =>
                                                                (let* iter :=
                                                                  M.copy γ in
                                                                M.loop
                                                                  (let* _ :
                                                                      M.Val
                                                                        unit :=
                                                                    let* α0 :
                                                                        (mut_ref
                                                                            (core.slice.iter.IterMut.t
                                                                              assistants_benches.Step.t))
                                                                          ->
                                                                          M
                                                                            (core.option.Option.t
                                                                              _) :=
                                                                      ltac:(M.get_method (fun ℐ =>
                                                                        core.iter.traits.iterator.Iterator.next
                                                                          (Self :=
                                                                            core.slice.iter.IterMut.t
                                                                              assistants_benches.Step.t)
                                                                          (Trait := ℐ))) in
                                                                    let* α1 :
                                                                        core.option.Option.t
                                                                          (mut_ref
                                                                            assistants_benches.Step.t) :=
                                                                      M.call
                                                                        (α0
                                                                          (borrow_mut
                                                                            iter)) in
                                                                    let* α2 :
                                                                        M.Val
                                                                          (core.option.Option.t
                                                                            (mut_ref
                                                                              assistants_benches.Step.t)) :=
                                                                      M.alloc
                                                                        α1 in
                                                                    match_operator
                                                                      α2
                                                                      [
                                                                        fun γ =>
                                                                          (let*
                                                                                α0 :=
                                                                            M.read
                                                                              γ in
                                                                          match
                                                                            α0
                                                                          with
                                                                          |
                                                                              core.option.Option.None
                                                                              =>
                                                                            let*
                                                                                  α0 :
                                                                                M.Val
                                                                                  never.t :=
                                                                              M.break in
                                                                            let*
                                                                                  α1 :=
                                                                              M.read
                                                                                α0 in
                                                                            let*
                                                                                  α2 :
                                                                                unit :=
                                                                              never_to_any
                                                                                α1 in
                                                                            M.alloc
                                                                              α2
                                                                          | _ =>
                                                                            M.break_match
                                                                          end) :
                                                                          M
                                                                            (M.Val
                                                                              unit);
                                                                        fun γ =>
                                                                          (let*
                                                                                α0 :=
                                                                            M.read
                                                                              γ in
                                                                          match
                                                                            α0
                                                                          with
                                                                          |
                                                                              core.option.Option.Some
                                                                                _
                                                                              =>
                                                                            let
                                                                                  γ0_0 :=
                                                                              core.option.Option.Get_Some_0
                                                                                γ in
                                                                            let*
                                                                                  step :=
                                                                              M.copy
                                                                                γ0_0 in
                                                                            let*
                                                                                  _ :
                                                                                M.Val
                                                                                  unit :=
                                                                              let*
                                                                                    α0 :
                                                                                  mut_ref
                                                                                    assistants_benches.Step.t :=
                                                                                M.read
                                                                                  step in
                                                                              let*
                                                                                    α1 :
                                                                                  core.option.Option.t
                                                                                    (mut_ref
                                                                                      (serde_json.map.Map.t
                                                                                        alloc.string.String.t
                                                                                        serde_json.value.Value.t)) :=
                                                                                M.call
                                                                                  (serde_json.value.Value.t::["as_object_mut"]
                                                                                    (borrow_mut
                                                                                      (assistants_benches.Step.Get_request
                                                                                        (deref
                                                                                          α0)))) in
                                                                              let*
                                                                                    α2 :
                                                                                  M.Val
                                                                                    (core.option.Option.t
                                                                                      (mut_ref
                                                                                        (serde_json.map.Map.t
                                                                                          alloc.string.String.t
                                                                                          serde_json.value.Value.t))) :=
                                                                                M.alloc
                                                                                  α1 in
                                                                              match_operator
                                                                                α2
                                                                                [
                                                                                  fun
                                                                                      γ =>
                                                                                    (let*
                                                                                          α0 :=
                                                                                      M.read
                                                                                        γ in
                                                                                    match
                                                                                      α0
                                                                                    with
                                                                                    |
                                                                                        core.option.Option.Some
                                                                                          _
                                                                                        =>
                                                                                      let
                                                                                            γ0_0 :=
                                                                                        core.option.Option.Get_Some_0
                                                                                          γ in
                                                                                      let*
                                                                                            request_map :=
                                                                                        M.copy
                                                                                          γ0_0 in
                                                                                      let*
                                                                                            α0 :
                                                                                          mut_ref
                                                                                            (serde_json.map.Map.t
                                                                                              alloc.string.String.t
                                                                                              serde_json.value.Value.t) :=
                                                                                        M.read
                                                                                          request_map in
                                                                                      let*
                                                                                            α1 :
                                                                                          ref
                                                                                            str.t :=
                                                                                        M.read
                                                                                          (mk_str
                                                                                            "model_id") in
                                                                                      let*
                                                                                            α2 :
                                                                                          core.option.Option.t
                                                                                            (mut_ref
                                                                                              serde_json.value.Value.t) :=
                                                                                        M.call
                                                                                          ((serde_json.map.Map.t
                                                                                                alloc.string.String.t
                                                                                                serde_json.value.Value.t)::["get_mut"]
                                                                                            α0
                                                                                            α1) in
                                                                                      let*
                                                                                            α3 :
                                                                                          M.Val
                                                                                            (core.option.Option.t
                                                                                              (mut_ref
                                                                                                serde_json.value.Value.t)) :=
                                                                                        M.alloc
                                                                                          α2 in
                                                                                      match_operator
                                                                                        α3
                                                                                        [
                                                                                          fun
                                                                                              γ =>
                                                                                            (let*
                                                                                                  α0 :=
                                                                                              M.read
                                                                                                γ in
                                                                                            match
                                                                                              α0
                                                                                            with
                                                                                            |
                                                                                                core.option.Option.Some
                                                                                                  _
                                                                                                =>
                                                                                              let
                                                                                                    γ0_0 :=
                                                                                                core.option.Option.Get_Some_0
                                                                                                  γ in
                                                                                              let*
                                                                                                    model_id :=
                                                                                                M.copy
                                                                                                  γ0_0 in
                                                                                              let*
                                                                                                    _ :
                                                                                                  M.Val
                                                                                                    unit :=
                                                                                                let*
                                                                                                      α0 :
                                                                                                    mut_ref
                                                                                                      serde_json.value.Value.t :=
                                                                                                  M.read
                                                                                                    model_id in
                                                                                                let*
                                                                                                      α1 :
                                                                                                    core.result.Result.t
                                                                                                      serde_json.value.Value.t
                                                                                                      serde_json.error.Error.t :=
                                                                                                  M.call
                                                                                                    (serde_json.value.to_value
                                                                                                      (borrow
                                                                                                        model)) in
                                                                                                let*
                                                                                                      α2 :
                                                                                                    serde_json.value.Value.t :=
                                                                                                  M.call
                                                                                                    ((core.result.Result.t
                                                                                                          serde_json.value.Value.t
                                                                                                          serde_json.error.Error.t)::["unwrap"]
                                                                                                      α1) in
                                                                                                assign
                                                                                                  (deref
                                                                                                    α0)
                                                                                                  α2 in
                                                                                              M.alloc
                                                                                                tt
                                                                                            |
                                                                                                _
                                                                                                =>
                                                                                              M.break_match
                                                                                            end) :
                                                                                            M
                                                                                              (M.Val
                                                                                                unit);
                                                                                          fun
                                                                                              γ =>
                                                                                            (M.alloc
                                                                                              tt) :
                                                                                            M
                                                                                              (M.Val
                                                                                                unit)
                                                                                        ]
                                                                                    |
                                                                                        _
                                                                                        =>
                                                                                      M.break_match
                                                                                    end) :
                                                                                    M
                                                                                      (M.Val
                                                                                        unit);
                                                                                  fun
                                                                                      γ =>
                                                                                    (M.alloc
                                                                                      tt) :
                                                                                    M
                                                                                      (M.Val
                                                                                        unit)
                                                                                ] in
                                                                            let*
                                                                                  method :
                                                                                M.Val
                                                                                  http.method.Method.t :=
                                                                              let*
                                                                                    α0 :
                                                                                  mut_ref
                                                                                    assistants_benches.Step.t :=
                                                                                M.read
                                                                                  step in
                                                                              let*
                                                                                    α1 :
                                                                                  ref
                                                                                    str.t :=
                                                                                M.call
                                                                                  (alloc.string.String.t::["as_str"]
                                                                                    (borrow
                                                                                      (assistants_benches.Step.Get_method
                                                                                        (deref
                                                                                          α0)))) in
                                                                              let*
                                                                                    α2 :
                                                                                  M.Val
                                                                                    (ref
                                                                                      str.t) :=
                                                                                M.alloc
                                                                                  α1 in
                                                                              let*
                                                                                    α3 :
                                                                                  M.Val
                                                                                    http.method.Method.t :=
                                                                                match_operator
                                                                                  α2
                                                                                  [
                                                                                    fun
                                                                                        γ =>
                                                                                      (M.pure
                                                                                        http.method.GET) :
                                                                                      M
                                                                                        (M.Val
                                                                                          http.method.Method.t);
                                                                                    fun
                                                                                        γ =>
                                                                                      (M.pure
                                                                                        http.method.POST) :
                                                                                      M
                                                                                        (M.Val
                                                                                          http.method.Method.t);
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            α0 :
                                                                                          ref
                                                                                            str.t :=
                                                                                        M.read
                                                                                          (mk_str
                                                                                            "Unknown HTTP method") in
                                                                                      let*
                                                                                            α1 :
                                                                                          std.io.error.Error.t :=
                                                                                        M.call
                                                                                          (std.io.error.Error.t::["new"]
                                                                                            std.io.error.ErrorKind.InvalidInput
                                                                                            α0) in
                                                                                      let*
                                                                                            α2 :
                                                                                          alloc.boxed.Box.t
                                                                                            std.io.error.Error.t
                                                                                            alloc.alloc.Global.t :=
                                                                                        M.call
                                                                                          ((alloc.boxed.Box.t
                                                                                                std.io.error.Error.t
                                                                                                alloc.alloc.Global.t)::["new"]
                                                                                            α1) in
                                                                                      let*
                                                                                            α3 :
                                                                                          M.Val
                                                                                            never.t :=
                                                                                        return_
                                                                                          (core.result.Result.Err
                                                                                            (pointer_coercion
                                                                                              "Unsize"
                                                                                              α2)) in
                                                                                      let*
                                                                                            α4 :=
                                                                                        M.read
                                                                                          α3 in
                                                                                      let*
                                                                                            α5 :
                                                                                          http.method.Method.t :=
                                                                                        never_to_any
                                                                                          α4 in
                                                                                      M.alloc
                                                                                        α5) :
                                                                                      M
                                                                                        (M.Val
                                                                                          http.method.Method.t)
                                                                                  ] in
                                                                              M.copy
                                                                                α3 in
                                                                            let*
                                                                                  _ :
                                                                                M.Val
                                                                                  unit :=
                                                                              let*
                                                                                    α0 :
                                                                                  (ref
                                                                                      (std.collections.hash.map.HashMap.t
                                                                                        alloc.string.String.t
                                                                                        alloc.string.String.t
                                                                                        std.hash.random.RandomState.t))
                                                                                    ->
                                                                                    M
                                                                                      _ :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.iter.traits.collect.IntoIterator.into_iter
                                                                                    (Self :=
                                                                                      ref
                                                                                        (std.collections.hash.map.HashMap.t
                                                                                          alloc.string.String.t
                                                                                          alloc.string.String.t
                                                                                          std.hash.random.RandomState.t))
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α1 :
                                                                                  std.collections.hash.map.Iter.t
                                                                                    alloc.string.String.t
                                                                                    alloc.string.String.t :=
                                                                                M.call
                                                                                  (α0
                                                                                    (borrow
                                                                                      variables)) in
                                                                              let*
                                                                                    α2 :
                                                                                  M.Val
                                                                                    (std.collections.hash.map.Iter.t
                                                                                      alloc.string.String.t
                                                                                      alloc.string.String.t) :=
                                                                                M.alloc
                                                                                  α1 in
                                                                              let*
                                                                                    α3 :
                                                                                  M.Val
                                                                                    unit :=
                                                                                match_operator
                                                                                  α2
                                                                                  [
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            iter :=
                                                                                        M.copy
                                                                                          γ in
                                                                                      M.loop
                                                                                        (let*
                                                                                              _ :
                                                                                            M.Val
                                                                                              unit :=
                                                                                          let*
                                                                                                α0 :
                                                                                              (mut_ref
                                                                                                  (std.collections.hash.map.Iter.t
                                                                                                    alloc.string.String.t
                                                                                                    alloc.string.String.t))
                                                                                                ->
                                                                                                M
                                                                                                  (core.option.Option.t
                                                                                                    _) :=
                                                                                            ltac:(M.get_method (fun ℐ =>
                                                                                              core.iter.traits.iterator.Iterator.next
                                                                                                (Self :=
                                                                                                  std.collections.hash.map.Iter.t
                                                                                                    alloc.string.String.t
                                                                                                    alloc.string.String.t)
                                                                                                (Trait := ℐ))) in
                                                                                          let*
                                                                                                α1 :
                                                                                              core.option.Option.t
                                                                                                ((ref
                                                                                                  alloc.string.String.t)
                                                                                                *
                                                                                                (ref
                                                                                                  alloc.string.String.t)) :=
                                                                                            M.call
                                                                                              (α0
                                                                                                (borrow_mut
                                                                                                  iter)) in
                                                                                          let*
                                                                                                α2 :
                                                                                              M.Val
                                                                                                (core.option.Option.t
                                                                                                  ((ref
                                                                                                    alloc.string.String.t)
                                                                                                  *
                                                                                                  (ref
                                                                                                    alloc.string.String.t))) :=
                                                                                            M.alloc
                                                                                              α1 in
                                                                                          match_operator
                                                                                            α2
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                (let*
                                                                                                      α0 :=
                                                                                                  M.read
                                                                                                    γ in
                                                                                                match
                                                                                                  α0
                                                                                                with
                                                                                                |
                                                                                                    core.option.Option.None
                                                                                                    =>
                                                                                                  let*
                                                                                                        α0 :
                                                                                                      M.Val
                                                                                                        never.t :=
                                                                                                    M.break in
                                                                                                  let*
                                                                                                        α1 :=
                                                                                                    M.read
                                                                                                      α0 in
                                                                                                  let*
                                                                                                        α2 :
                                                                                                      unit :=
                                                                                                    never_to_any
                                                                                                      α1 in
                                                                                                  M.alloc
                                                                                                    α2
                                                                                                |
                                                                                                    _
                                                                                                    =>
                                                                                                  M.break_match
                                                                                                end) :
                                                                                                M
                                                                                                  (M.Val
                                                                                                    unit);
                                                                                              fun
                                                                                                  γ =>
                                                                                                (let*
                                                                                                      α0 :=
                                                                                                  M.read
                                                                                                    γ in
                                                                                                match
                                                                                                  α0
                                                                                                with
                                                                                                |
                                                                                                    core.option.Option.Some
                                                                                                      _
                                                                                                    =>
                                                                                                  let
                                                                                                        γ0_0 :=
                                                                                                    core.option.Option.Get_Some_0
                                                                                                      γ in
                                                                                                  let*
                                                                                                        α0 :=
                                                                                                    M.read
                                                                                                      γ0_0 in
                                                                                                  match
                                                                                                    α0
                                                                                                  with
                                                                                                  |
                                                                                                      (_,
                                                                                                        _)
                                                                                                      =>
                                                                                                    let
                                                                                                          γ1_0 :=
                                                                                                      Tuple.Access.left
                                                                                                        γ0_0 in
                                                                                                    let
                                                                                                          γ1_1 :=
                                                                                                      Tuple.Access.right
                                                                                                        γ0_0 in
                                                                                                    let*
                                                                                                          variable_name :=
                                                                                                      M.copy
                                                                                                        γ1_0 in
                                                                                                    let*
                                                                                                          variable_value :=
                                                                                                      M.copy
                                                                                                        γ1_1 in
                                                                                                    let*
                                                                                                          placeholder :
                                                                                                        M.Val
                                                                                                          alloc.string.String.t :=
                                                                                                      let*
                                                                                                            res :
                                                                                                          M.Val
                                                                                                            alloc.string.String.t :=
                                                                                                        let*
                                                                                                              α0 :
                                                                                                            ref
                                                                                                              str.t :=
                                                                                                          M.read
                                                                                                            (mk_str
                                                                                                              "") in
                                                                                                        let*
                                                                                                              α1 :
                                                                                                            M.Val
                                                                                                              (array
                                                                                                                (ref
                                                                                                                  str.t)) :=
                                                                                                          M.alloc
                                                                                                            [
                                                                                                              α0
                                                                                                            ] in
                                                                                                        let*
                                                                                                              α2 :
                                                                                                            core.fmt.rt.Argument.t :=
                                                                                                          M.call
                                                                                                            (core.fmt.rt.Argument.t::["new_display"]
                                                                                                              (borrow
                                                                                                                variable_name)) in
                                                                                                        let*
                                                                                                              α3 :
                                                                                                            M.Val
                                                                                                              (array
                                                                                                                core.fmt.rt.Argument.t) :=
                                                                                                          M.alloc
                                                                                                            [
                                                                                                              α2
                                                                                                            ] in
                                                                                                        let*
                                                                                                              α4 :
                                                                                                            core.fmt.Arguments.t :=
                                                                                                          M.call
                                                                                                            (core.fmt.Arguments.t::["new_v1"]
                                                                                                              (pointer_coercion
                                                                                                                "Unsize"
                                                                                                                (borrow
                                                                                                                  α1))
                                                                                                              (pointer_coercion
                                                                                                                "Unsize"
                                                                                                                (borrow
                                                                                                                  α3))) in
                                                                                                        let*
                                                                                                              α5 :
                                                                                                            alloc.string.String.t :=
                                                                                                          M.call
                                                                                                            (alloc.fmt.format
                                                                                                              α4) in
                                                                                                        M.alloc
                                                                                                          α5 in
                                                                                                      M.copy
                                                                                                        res in
                                                                                                    let*
                                                                                                          _ :
                                                                                                        M.Val
                                                                                                          unit :=
                                                                                                      let*
                                                                                                            α0 :
                                                                                                          mut_ref
                                                                                                            assistants_benches.Step.t :=
                                                                                                        M.read
                                                                                                          step in
                                                                                                      let*
                                                                                                            α1 :
                                                                                                          (ref
                                                                                                              alloc.string.String.t)
                                                                                                            ->
                                                                                                            M
                                                                                                              (ref
                                                                                                                _) :=
                                                                                                        ltac:(M.get_method (fun ℐ =>
                                                                                                          core.ops.deref.Deref.deref
                                                                                                            (Self :=
                                                                                                              alloc.string.String.t)
                                                                                                            (Trait := ℐ))) in
                                                                                                      let*
                                                                                                            α2 :
                                                                                                          mut_ref
                                                                                                            assistants_benches.Step.t :=
                                                                                                        M.read
                                                                                                          step in
                                                                                                      let*
                                                                                                            α3 :
                                                                                                          ref
                                                                                                            str.t :=
                                                                                                        M.call
                                                                                                          (α1
                                                                                                            (borrow
                                                                                                              (assistants_benches.Step.Get_endpoint
                                                                                                                (deref
                                                                                                                  α2)))) in
                                                                                                      let*
                                                                                                            α4 :
                                                                                                          (ref
                                                                                                              alloc.string.String.t)
                                                                                                            ->
                                                                                                            M
                                                                                                              (ref
                                                                                                                _) :=
                                                                                                        ltac:(M.get_method (fun ℐ =>
                                                                                                          core.ops.deref.Deref.deref
                                                                                                            (Self :=
                                                                                                              alloc.string.String.t)
                                                                                                            (Trait := ℐ))) in
                                                                                                      let*
                                                                                                            α5 :
                                                                                                          (ref
                                                                                                              alloc.string.String.t)
                                                                                                            ->
                                                                                                            M
                                                                                                              (ref
                                                                                                                _) :=
                                                                                                        ltac:(M.get_method (fun ℐ =>
                                                                                                          core.ops.deref.Deref.deref
                                                                                                            (Self :=
                                                                                                              alloc.string.String.t)
                                                                                                            (Trait := ℐ))) in
                                                                                                      let*
                                                                                                            α6 :
                                                                                                          ref
                                                                                                            alloc.string.String.t :=
                                                                                                        M.read
                                                                                                          variable_value in
                                                                                                      let*
                                                                                                            α7 :
                                                                                                          ref
                                                                                                            str.t :=
                                                                                                        M.call
                                                                                                          (α5
                                                                                                            α6) in
                                                                                                      let*
                                                                                                            α8 :
                                                                                                          ref
                                                                                                            str.t :=
                                                                                                        M.read
                                                                                                          (mk_str
                                                                                                            """") in
                                                                                                      let*
                                                                                                            α9 :
                                                                                                          ref
                                                                                                            str.t :=
                                                                                                        M.read
                                                                                                          (mk_str
                                                                                                            "") in
                                                                                                      let*
                                                                                                            α10 :
                                                                                                          alloc.string.String.t :=
                                                                                                        M.call
                                                                                                          (str.t::["replace"]
                                                                                                            α7
                                                                                                            α8
                                                                                                            α9) in
                                                                                                      let*
                                                                                                            α11 :
                                                                                                          M.Val
                                                                                                            alloc.string.String.t :=
                                                                                                        M.alloc
                                                                                                          α10 in
                                                                                                      let*
                                                                                                            α12 :
                                                                                                          ref
                                                                                                            str.t :=
                                                                                                        M.call
                                                                                                          (α4
                                                                                                            (borrow
                                                                                                              α11)) in
                                                                                                      let*
                                                                                                            α13 :
                                                                                                          alloc.string.String.t :=
                                                                                                        M.call
                                                                                                          (str.t::["replace"]
                                                                                                            α3
                                                                                                            (borrow
                                                                                                              placeholder)
                                                                                                            α12) in
                                                                                                      assign
                                                                                                        (assistants_benches.Step.Get_endpoint
                                                                                                          (deref
                                                                                                            α0))
                                                                                                        α13 in
                                                                                                    let*
                                                                                                          request_map :
                                                                                                        M.Val
                                                                                                          (serde_json.map.Map.t
                                                                                                            alloc.string.String.t
                                                                                                            serde_json.value.Value.t) :=
                                                                                                      let*
                                                                                                            α0 :
                                                                                                          mut_ref
                                                                                                            assistants_benches.Step.t :=
                                                                                                        M.read
                                                                                                          step in
                                                                                                      let*
                                                                                                            α1 :
                                                                                                          core.option.Option.t
                                                                                                            (ref
                                                                                                              (serde_json.map.Map.t
                                                                                                                alloc.string.String.t
                                                                                                                serde_json.value.Value.t)) :=
                                                                                                        M.call
                                                                                                          (serde_json.value.Value.t::["as_object"]
                                                                                                            (borrow
                                                                                                              (assistants_benches.Step.Get_request
                                                                                                                (deref
                                                                                                                  α0)))) in
                                                                                                      let*
                                                                                                            α2 :
                                                                                                          M.Val
                                                                                                            (core.option.Option.t
                                                                                                              (ref
                                                                                                                (serde_json.map.Map.t
                                                                                                                  alloc.string.String.t
                                                                                                                  serde_json.value.Value.t))) :=
                                                                                                        M.alloc
                                                                                                          α1 in
                                                                                                      let*
                                                                                                            α3 :
                                                                                                          M.Val
                                                                                                            (serde_json.map.Map.t
                                                                                                              alloc.string.String.t
                                                                                                              serde_json.value.Value.t) :=
                                                                                                        match_operator
                                                                                                          α2
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              (let*
                                                                                                                    α0 :=
                                                                                                                M.read
                                                                                                                  γ in
                                                                                                              match
                                                                                                                α0
                                                                                                              with
                                                                                                              |
                                                                                                                  core.option.Option.Some
                                                                                                                    _
                                                                                                                  =>
                                                                                                                let
                                                                                                                      γ0_0 :=
                                                                                                                  core.option.Option.Get_Some_0
                                                                                                                    γ in
                                                                                                                let*
                                                                                                                      obj :=
                                                                                                                  M.copy
                                                                                                                    γ0_0 in
                                                                                                                let*
                                                                                                                      α0 :
                                                                                                                    (ref
                                                                                                                        (serde_json.map.Map.t
                                                                                                                          alloc.string.String.t
                                                                                                                          serde_json.value.Value.t))
                                                                                                                      ->
                                                                                                                      M
                                                                                                                        (serde_json.map.Map.t
                                                                                                                          alloc.string.String.t
                                                                                                                          serde_json.value.Value.t) :=
                                                                                                                  ltac:(M.get_method (fun ℐ =>
                                                                                                                    core.clone.Clone.clone
                                                                                                                      (Self :=
                                                                                                                        serde_json.map.Map.t
                                                                                                                          alloc.string.String.t
                                                                                                                          serde_json.value.Value.t)
                                                                                                                      (Trait := ℐ))) in
                                                                                                                let*
                                                                                                                      α1 :
                                                                                                                    ref
                                                                                                                      (serde_json.map.Map.t
                                                                                                                        alloc.string.String.t
                                                                                                                        serde_json.value.Value.t) :=
                                                                                                                  M.read
                                                                                                                    obj in
                                                                                                                let*
                                                                                                                      α2 :
                                                                                                                    serde_json.map.Map.t
                                                                                                                      alloc.string.String.t
                                                                                                                      serde_json.value.Value.t :=
                                                                                                                  M.call
                                                                                                                    (α0
                                                                                                                      α1) in
                                                                                                                M.alloc
                                                                                                                  α2
                                                                                                              |
                                                                                                                  _
                                                                                                                  =>
                                                                                                                M.break_match
                                                                                                              end) :
                                                                                                              M
                                                                                                                (M.Val
                                                                                                                  (serde_json.map.Map.t
                                                                                                                    alloc.string.String.t
                                                                                                                    serde_json.value.Value.t));
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              (let*
                                                                                                                    α0 :=
                                                                                                                M.read
                                                                                                                  γ in
                                                                                                              match
                                                                                                                α0
                                                                                                              with
                                                                                                              |
                                                                                                                  core.option.Option.None
                                                                                                                  =>
                                                                                                                let*
                                                                                                                      α0 :
                                                                                                                    ref
                                                                                                                      str.t :=
                                                                                                                  M.read
                                                                                                                    (mk_str
                                                                                                                      "Request is not an object") in
                                                                                                                let*
                                                                                                                      α1 :
                                                                                                                    std.io.error.Error.t :=
                                                                                                                  M.call
                                                                                                                    (std.io.error.Error.t::["new"]
                                                                                                                      std.io.error.ErrorKind.InvalidInput
                                                                                                                      α0) in
                                                                                                                let*
                                                                                                                      α2 :
                                                                                                                    alloc.boxed.Box.t
                                                                                                                      std.io.error.Error.t
                                                                                                                      alloc.alloc.Global.t :=
                                                                                                                  M.call
                                                                                                                    ((alloc.boxed.Box.t
                                                                                                                          std.io.error.Error.t
                                                                                                                          alloc.alloc.Global.t)::["new"]
                                                                                                                      α1) in
                                                                                                                let*
                                                                                                                      α3 :
                                                                                                                    M.Val
                                                                                                                      never.t :=
                                                                                                                  return_
                                                                                                                    (core.result.Result.Err
                                                                                                                      (pointer_coercion
                                                                                                                        "Unsize"
                                                                                                                        α2)) in
                                                                                                                let*
                                                                                                                      α4 :=
                                                                                                                  M.read
                                                                                                                    α3 in
                                                                                                                let*
                                                                                                                      α5 :
                                                                                                                    serde_json.map.Map.t
                                                                                                                      alloc.string.String.t
                                                                                                                      serde_json.value.Value.t :=
                                                                                                                  never_to_any
                                                                                                                    α4 in
                                                                                                                M.alloc
                                                                                                                  α5
                                                                                                              |
                                                                                                                  _
                                                                                                                  =>
                                                                                                                M.break_match
                                                                                                              end) :
                                                                                                              M
                                                                                                                (M.Val
                                                                                                                  (serde_json.map.Map.t
                                                                                                                    alloc.string.String.t
                                                                                                                    serde_json.value.Value.t))
                                                                                                          ] in
                                                                                                      M.copy
                                                                                                        α3 in
                                                                                                    let*
                                                                                                          _ :
                                                                                                        M.Val
                                                                                                          unit :=
                                                                                                      let*
                                                                                                            α0 :
                                                                                                          serde_json.map.IterMut.t
                                                                                                            ->
                                                                                                            M
                                                                                                              _ :=
                                                                                                        ltac:(M.get_method (fun ℐ =>
                                                                                                          core.iter.traits.collect.IntoIterator.into_iter
                                                                                                            (Self :=
                                                                                                              serde_json.map.IterMut.t)
                                                                                                            (Trait := ℐ))) in
                                                                                                      let*
                                                                                                            α1 :
                                                                                                          serde_json.map.IterMut.t :=
                                                                                                        M.call
                                                                                                          ((serde_json.map.Map.t
                                                                                                                alloc.string.String.t
                                                                                                                serde_json.value.Value.t)::["iter_mut"]
                                                                                                            (borrow_mut
                                                                                                              request_map)) in
                                                                                                      let*
                                                                                                            α2 :
                                                                                                          serde_json.map.IterMut.t :=
                                                                                                        M.call
                                                                                                          (α0
                                                                                                            α1) in
                                                                                                      let*
                                                                                                            α3 :
                                                                                                          M.Val
                                                                                                            serde_json.map.IterMut.t :=
                                                                                                        M.alloc
                                                                                                          α2 in
                                                                                                      let*
                                                                                                            α4 :
                                                                                                          M.Val
                                                                                                            unit :=
                                                                                                        match_operator
                                                                                                          α3
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              (let*
                                                                                                                    iter :=
                                                                                                                M.copy
                                                                                                                  γ in
                                                                                                              M.loop
                                                                                                                (let*
                                                                                                                      _ :
                                                                                                                    M.Val
                                                                                                                      unit :=
                                                                                                                  let*
                                                                                                                        α0 :
                                                                                                                      (mut_ref
                                                                                                                          serde_json.map.IterMut.t)
                                                                                                                        ->
                                                                                                                        M
                                                                                                                          (core.option.Option.t
                                                                                                                            _) :=
                                                                                                                    ltac:(M.get_method (fun ℐ =>
                                                                                                                      core.iter.traits.iterator.Iterator.next
                                                                                                                        (Self :=
                                                                                                                          serde_json.map.IterMut.t)
                                                                                                                        (Trait := ℐ))) in
                                                                                                                  let*
                                                                                                                        α1 :
                                                                                                                      core.option.Option.t
                                                                                                                        ((ref
                                                                                                                          alloc.string.String.t)
                                                                                                                        *
                                                                                                                        (mut_ref
                                                                                                                          serde_json.value.Value.t)) :=
                                                                                                                    M.call
                                                                                                                      (α0
                                                                                                                        (borrow_mut
                                                                                                                          iter)) in
                                                                                                                  let*
                                                                                                                        α2 :
                                                                                                                      M.Val
                                                                                                                        (core.option.Option.t
                                                                                                                          ((ref
                                                                                                                            alloc.string.String.t)
                                                                                                                          *
                                                                                                                          (mut_ref
                                                                                                                            serde_json.value.Value.t))) :=
                                                                                                                    M.alloc
                                                                                                                      α1 in
                                                                                                                  match_operator
                                                                                                                    α2
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        (let*
                                                                                                                              α0 :=
                                                                                                                          M.read
                                                                                                                            γ in
                                                                                                                        match
                                                                                                                          α0
                                                                                                                        with
                                                                                                                        |
                                                                                                                            core.option.Option.None
                                                                                                                            =>
                                                                                                                          let*
                                                                                                                                α0 :
                                                                                                                              M.Val
                                                                                                                                never.t :=
                                                                                                                            M.break in
                                                                                                                          let*
                                                                                                                                α1 :=
                                                                                                                            M.read
                                                                                                                              α0 in
                                                                                                                          let*
                                                                                                                                α2 :
                                                                                                                              unit :=
                                                                                                                            never_to_any
                                                                                                                              α1 in
                                                                                                                          M.alloc
                                                                                                                            α2
                                                                                                                        |
                                                                                                                            _
                                                                                                                            =>
                                                                                                                          M.break_match
                                                                                                                        end) :
                                                                                                                        M
                                                                                                                          (M.Val
                                                                                                                            unit);
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        (let*
                                                                                                                              α0 :=
                                                                                                                          M.read
                                                                                                                            γ in
                                                                                                                        match
                                                                                                                          α0
                                                                                                                        with
                                                                                                                        |
                                                                                                                            core.option.Option.Some
                                                                                                                              _
                                                                                                                            =>
                                                                                                                          let
                                                                                                                                γ0_0 :=
                                                                                                                            core.option.Option.Get_Some_0
                                                                                                                              γ in
                                                                                                                          let*
                                                                                                                                α0 :=
                                                                                                                            M.read
                                                                                                                              γ0_0 in
                                                                                                                          match
                                                                                                                            α0
                                                                                                                          with
                                                                                                                          |
                                                                                                                              (_,
                                                                                                                                _)
                                                                                                                              =>
                                                                                                                            let
                                                                                                                                  γ1_0 :=
                                                                                                                              Tuple.Access.left
                                                                                                                                γ0_0 in
                                                                                                                            let
                                                                                                                                  γ1_1 :=
                                                                                                                              Tuple.Access.right
                                                                                                                                γ0_0 in
                                                                                                                            let*
                                                                                                                                  value :=
                                                                                                                              M.copy
                                                                                                                                γ1_1 in
                                                                                                                            let*
                                                                                                                                  α0 :
                                                                                                                                (ref
                                                                                                                                    (mut_ref
                                                                                                                                      serde_json.value.Value.t))
                                                                                                                                  ->
                                                                                                                                  (ref
                                                                                                                                    (ref
                                                                                                                                      serde_json.value.Value.t))
                                                                                                                                  ->
                                                                                                                                  M
                                                                                                                                    bool.t :=
                                                                                                                              ltac:(M.get_method (fun ℐ =>
                                                                                                                                core.cmp.PartialEq.eq
                                                                                                                                  (Self :=
                                                                                                                                    mut_ref
                                                                                                                                      serde_json.value.Value.t)
                                                                                                                                  (Rhs :=
                                                                                                                                    ref
                                                                                                                                      serde_json.value.Value.t)
                                                                                                                                  (Trait := ℐ))) in
                                                                                                                            let*
                                                                                                                                  α1 :
                                                                                                                                core.result.Result.t
                                                                                                                                  serde_json.value.Value.t
                                                                                                                                  serde_json.error.Error.t :=
                                                                                                                              M.call
                                                                                                                                (serde_json.value.to_value
                                                                                                                                  (borrow
                                                                                                                                    placeholder)) in
                                                                                                                            let*
                                                                                                                                  α2 :
                                                                                                                                serde_json.value.Value.t :=
                                                                                                                              M.call
                                                                                                                                ((core.result.Result.t
                                                                                                                                      serde_json.value.Value.t
                                                                                                                                      serde_json.error.Error.t)::["unwrap"]
                                                                                                                                  α1) in
                                                                                                                            let*
                                                                                                                                  α3 :
                                                                                                                                M.Val
                                                                                                                                  serde_json.value.Value.t :=
                                                                                                                              M.alloc
                                                                                                                                α2 in
                                                                                                                            let*
                                                                                                                                  α4 :
                                                                                                                                M.Val
                                                                                                                                  (ref
                                                                                                                                    serde_json.value.Value.t) :=
                                                                                                                              M.alloc
                                                                                                                                (borrow
                                                                                                                                  α3) in
                                                                                                                            let*
                                                                                                                                  α5 :
                                                                                                                                bool.t :=
                                                                                                                              M.call
                                                                                                                                (α0
                                                                                                                                  (borrow
                                                                                                                                    value)
                                                                                                                                  (borrow
                                                                                                                                    α4)) in
                                                                                                                            let*
                                                                                                                                  α6 :
                                                                                                                                M.Val
                                                                                                                                  bool.t :=
                                                                                                                              M.alloc
                                                                                                                                α5 in
                                                                                                                            let*
                                                                                                                                  α7 :
                                                                                                                                bool.t :=
                                                                                                                              M.read
                                                                                                                                (use
                                                                                                                                  α6) in
                                                                                                                            if
                                                                                                                              α7
                                                                                                                            then
                                                                                                                              let*
                                                                                                                                    _ :
                                                                                                                                  M.Val
                                                                                                                                    unit :=
                                                                                                                                let*
                                                                                                                                      α0 :
                                                                                                                                    mut_ref
                                                                                                                                      serde_json.value.Value.t :=
                                                                                                                                  M.read
                                                                                                                                    value in
                                                                                                                                let*
                                                                                                                                      α1 :
                                                                                                                                    (ref
                                                                                                                                        alloc.string.String.t)
                                                                                                                                      ->
                                                                                                                                      M
                                                                                                                                        (ref
                                                                                                                                          _) :=
                                                                                                                                  ltac:(M.get_method (fun ℐ =>
                                                                                                                                    core.ops.deref.Deref.deref
                                                                                                                                      (Self :=
                                                                                                                                        alloc.string.String.t)
                                                                                                                                      (Trait := ℐ))) in
                                                                                                                                let*
                                                                                                                                      α2 :
                                                                                                                                    ref
                                                                                                                                      alloc.string.String.t :=
                                                                                                                                  M.read
                                                                                                                                    variable_value in
                                                                                                                                let*
                                                                                                                                      α3 :
                                                                                                                                    ref
                                                                                                                                      str.t :=
                                                                                                                                  M.call
                                                                                                                                    (α1
                                                                                                                                      α2) in
                                                                                                                                let*
                                                                                                                                      α4 :
                                                                                                                                    ref
                                                                                                                                      str.t :=
                                                                                                                                  M.read
                                                                                                                                    (mk_str
                                                                                                                                      """") in
                                                                                                                                let*
                                                                                                                                      α5 :
                                                                                                                                    ref
                                                                                                                                      str.t :=
                                                                                                                                  M.read
                                                                                                                                    (mk_str
                                                                                                                                      "") in
                                                                                                                                let*
                                                                                                                                      α6 :
                                                                                                                                    alloc.string.String.t :=
                                                                                                                                  M.call
                                                                                                                                    (str.t::["replace"]
                                                                                                                                      α3
                                                                                                                                      α4
                                                                                                                                      α5) in
                                                                                                                                let*
                                                                                                                                      α7 :
                                                                                                                                    M.Val
                                                                                                                                      alloc.string.String.t :=
                                                                                                                                  M.alloc
                                                                                                                                    α6 in
                                                                                                                                let*
                                                                                                                                      α8 :
                                                                                                                                    core.result.Result.t
                                                                                                                                      serde_json.value.Value.t
                                                                                                                                      serde_json.error.Error.t :=
                                                                                                                                  M.call
                                                                                                                                    (serde_json.value.to_value
                                                                                                                                      (borrow
                                                                                                                                        α7)) in
                                                                                                                                let*
                                                                                                                                      α9 :
                                                                                                                                    serde_json.value.Value.t :=
                                                                                                                                  M.call
                                                                                                                                    ((core.result.Result.t
                                                                                                                                          serde_json.value.Value.t
                                                                                                                                          serde_json.error.Error.t)::["unwrap"]
                                                                                                                                      α8) in
                                                                                                                                assign
                                                                                                                                  (deref
                                                                                                                                    α0)
                                                                                                                                  α9 in
                                                                                                                              M.alloc
                                                                                                                                tt
                                                                                                                            else
                                                                                                                              M.alloc
                                                                                                                                tt
                                                                                                                          end
                                                                                                                        |
                                                                                                                            _
                                                                                                                            =>
                                                                                                                          M.break_match
                                                                                                                        end) :
                                                                                                                        M
                                                                                                                          (M.Val
                                                                                                                            unit)
                                                                                                                    ] in
                                                                                                                M.alloc
                                                                                                                  tt)) :
                                                                                                              M
                                                                                                                (M.Val
                                                                                                                  unit)
                                                                                                          ] in
                                                                                                      M.pure
                                                                                                        (use
                                                                                                          α4) in
                                                                                                    let*
                                                                                                          _ :
                                                                                                        M.Val
                                                                                                          unit :=
                                                                                                      let*
                                                                                                            α0 :
                                                                                                          mut_ref
                                                                                                            assistants_benches.Step.t :=
                                                                                                        M.read
                                                                                                          step in
                                                                                                      let*
                                                                                                            α1 :
                                                                                                          serde_json.map.Map.t
                                                                                                            alloc.string.String.t
                                                                                                            serde_json.value.Value.t :=
                                                                                                        M.read
                                                                                                          request_map in
                                                                                                      assign
                                                                                                        (assistants_benches.Step.Get_request
                                                                                                          (deref
                                                                                                            α0))
                                                                                                        (serde_json.value.Value.Object
                                                                                                          α1) in
                                                                                                    M.alloc
                                                                                                      tt
                                                                                                  end
                                                                                                |
                                                                                                    _
                                                                                                    =>
                                                                                                  M.break_match
                                                                                                end) :
                                                                                                M
                                                                                                  (M.Val
                                                                                                    unit)
                                                                                            ] in
                                                                                        M.alloc
                                                                                          tt)) :
                                                                                      M
                                                                                        (M.Val
                                                                                          unit)
                                                                                  ] in
                                                                              M.pure
                                                                                (use
                                                                                  α3) in
                                                                            let*
                                                                                  _ :
                                                                                M.Val
                                                                                  unit :=
                                                                              let*
                                                                                    _ :
                                                                                  M.Val
                                                                                    unit :=
                                                                                let*
                                                                                      α0 :
                                                                                    ref
                                                                                      str.t :=
                                                                                  M.read
                                                                                    (mk_str
                                                                                      "Running step: ") in
                                                                                let*
                                                                                      α1 :
                                                                                    ref
                                                                                      str.t :=
                                                                                  M.read
                                                                                    (mk_str
                                                                                      "
") in
                                                                                let*
                                                                                      α2 :
                                                                                    M.Val
                                                                                      (array
                                                                                        (ref
                                                                                          str.t)) :=
                                                                                  M.alloc
                                                                                    [
                                                                                      α0;
                                                                                      α1
                                                                                    ] in
                                                                                let*
                                                                                      α3 :
                                                                                    mut_ref
                                                                                      assistants_benches.Step.t :=
                                                                                  M.read
                                                                                    step in
                                                                                let*
                                                                                      α4 :
                                                                                    core.fmt.rt.Argument.t :=
                                                                                  M.call
                                                                                    (core.fmt.rt.Argument.t::["new_display"]
                                                                                      (borrow
                                                                                        (assistants_benches.Step.Get_endpoint
                                                                                          (deref
                                                                                            α3)))) in
                                                                                let*
                                                                                      α5 :
                                                                                    M.Val
                                                                                      (array
                                                                                        core.fmt.rt.Argument.t) :=
                                                                                  M.alloc
                                                                                    [
                                                                                      α4
                                                                                    ] in
                                                                                let*
                                                                                      α6 :
                                                                                    core.fmt.Arguments.t :=
                                                                                  M.call
                                                                                    (core.fmt.Arguments.t::["new_v1"]
                                                                                      (pointer_coercion
                                                                                        "Unsize"
                                                                                        (borrow
                                                                                          α2))
                                                                                      (pointer_coercion
                                                                                        "Unsize"
                                                                                        (borrow
                                                                                          α5))) in
                                                                                let*
                                                                                      α7 :
                                                                                    unit :=
                                                                                  M.call
                                                                                    (std.io.stdio._print
                                                                                      α6) in
                                                                                M.alloc
                                                                                  α7 in
                                                                              M.alloc
                                                                                tt in
                                                                            let*
                                                                                  start_time :
                                                                                M.Val
                                                                                  u64.t :=
                                                                              let*
                                                                                    α0 :
                                                                                  std.time.SystemTime.t :=
                                                                                M.call
                                                                                  std.time.SystemTime.t::["now"] in
                                                                              let*
                                                                                    α1 :
                                                                                  M.Val
                                                                                    std.time.SystemTime.t :=
                                                                                M.alloc
                                                                                  α0 in
                                                                              let*
                                                                                    α2 :
                                                                                  std.time.SystemTime.t :=
                                                                                M.read
                                                                                  std.time.UNIX_EPOCH in
                                                                              let*
                                                                                    α3 :
                                                                                  core.result.Result.t
                                                                                    core.time.Duration.t
                                                                                    std.time.SystemTimeError.t :=
                                                                                M.call
                                                                                  (std.time.SystemTime.t::["duration_since"]
                                                                                    (borrow
                                                                                      α1)
                                                                                    α2) in
                                                                              let*
                                                                                    α4 :
                                                                                  ref
                                                                                    str.t :=
                                                                                M.read
                                                                                  (mk_str
                                                                                    "Time went backwards") in
                                                                              let*
                                                                                    α5 :
                                                                                  core.time.Duration.t :=
                                                                                M.call
                                                                                  ((core.result.Result.t
                                                                                        core.time.Duration.t
                                                                                        std.time.SystemTimeError.t)::["expect"]
                                                                                    α3
                                                                                    α4) in
                                                                              let*
                                                                                    α6 :
                                                                                  M.Val
                                                                                    core.time.Duration.t :=
                                                                                M.alloc
                                                                                  α5 in
                                                                              let*
                                                                                    α7 :
                                                                                  u64.t :=
                                                                                M.call
                                                                                  (core.time.Duration.t::["as_secs"]
                                                                                    (borrow
                                                                                      α6)) in
                                                                              M.alloc
                                                                                α7 in
                                                                            let*
                                                                                  actual_response :
                                                                                M.Val
                                                                                  serde_json.value.Value.t :=
                                                                              let*
                                                                                    α0 :
                                                                                  (core.result.Result.t
                                                                                      serde_json.value.Value.t
                                                                                      reqwest.error.Error.t)
                                                                                    ->
                                                                                    M
                                                                                      (core.ops.control_flow.ControlFlow.t
                                                                                        _
                                                                                        _) :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.ops.try_trait.Try.branch
                                                                                    (Self :=
                                                                                      core.result.Result.t
                                                                                        serde_json.value.Value.t
                                                                                        reqwest.error.Error.t)
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α1 :
                                                                                  _
                                                                                    ->
                                                                                    M
                                                                                      _ :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.future.into_future.IntoFuture.into_future
                                                                                    (Self :=
                                                                                      _)
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α2 :
                                                                                  (core.result.Result.t
                                                                                      reqwest.async_impl.response.Response.t
                                                                                      reqwest.error.Error.t)
                                                                                    ->
                                                                                    M
                                                                                      (core.ops.control_flow.ControlFlow.t
                                                                                        _
                                                                                        _) :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.ops.try_trait.Try.branch
                                                                                    (Self :=
                                                                                      core.result.Result.t
                                                                                        reqwest.async_impl.response.Response.t
                                                                                        reqwest.error.Error.t)
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α3 :
                                                                                  _
                                                                                    ->
                                                                                    M
                                                                                      _ :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.future.into_future.IntoFuture.into_future
                                                                                    (Self :=
                                                                                      _)
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α4 :
                                                                                  http.method.Method.t :=
                                                                                M.read
                                                                                  method in
                                                                              let*
                                                                                    α5 :
                                                                                  mut_ref
                                                                                    assistants_benches.Step.t :=
                                                                                M.read
                                                                                  step in
                                                                              let*
                                                                                    α6 :
                                                                                  reqwest.async_impl.request.RequestBuilder.t :=
                                                                                M.call
                                                                                  (reqwest.async_impl.client.Client.t::["request"]
                                                                                    (borrow
                                                                                      client)
                                                                                    α4
                                                                                    (borrow
                                                                                      (assistants_benches.Step.Get_endpoint
                                                                                        (deref
                                                                                          α5)))) in
                                                                              let*
                                                                                    α7 :
                                                                                  mut_ref
                                                                                    assistants_benches.Step.t :=
                                                                                M.read
                                                                                  step in
                                                                              let*
                                                                                    α8 :
                                                                                  reqwest.async_impl.request.RequestBuilder.t :=
                                                                                M.call
                                                                                  (reqwest.async_impl.request.RequestBuilder.t::["json"]
                                                                                    α6
                                                                                    (borrow
                                                                                      (assistants_benches.Step.Get_request
                                                                                        (deref
                                                                                          α7)))) in
                                                                              let*
                                                                                    α9 :
                                                                                  _ :=
                                                                                M.call
                                                                                  (reqwest.async_impl.request.RequestBuilder.t::["send"]
                                                                                    α8) in
                                                                              let*
                                                                                    α10 :
                                                                                  _ :=
                                                                                M.call
                                                                                  (α3
                                                                                    α9) in
                                                                              let*
                                                                                    α11 :
                                                                                  M.Val
                                                                                    _ :=
                                                                                M.alloc
                                                                                  α10 in
                                                                              let*
                                                                                    α12 :
                                                                                  M.Val
                                                                                    (core.result.Result.t
                                                                                      reqwest.async_impl.response.Response.t
                                                                                      reqwest.error.Error.t) :=
                                                                                match_operator
                                                                                  α11
                                                                                  [
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            __awaitee :=
                                                                                        M.copy
                                                                                          γ in
                                                                                      M.loop
                                                                                        (let*
                                                                                              _ :
                                                                                            M.Val
                                                                                              unit :=
                                                                                          let*
                                                                                                α0 :
                                                                                              (core.pin.Pin.t
                                                                                                  (mut_ref
                                                                                                    _))
                                                                                                ->
                                                                                                (mut_ref
                                                                                                  core.task.wake.Context.t)
                                                                                                ->
                                                                                                M
                                                                                                  (core.task.poll.Poll.t
                                                                                                    _) :=
                                                                                            ltac:(M.get_method (fun ℐ =>
                                                                                              core.future.future.Future.poll
                                                                                                (Self :=
                                                                                                  _)
                                                                                                (Trait := ℐ))) in
                                                                                          let*
                                                                                                α1 :
                                                                                              core.pin.Pin.t
                                                                                                (mut_ref
                                                                                                  _) :=
                                                                                            M.call
                                                                                              ((core.pin.Pin.t
                                                                                                    (mut_ref
                                                                                                      _))::["new_unchecked"]
                                                                                                (borrow_mut
                                                                                                  __awaitee)) in
                                                                                          let*
                                                                                                α2 :
                                                                                              core.future.ResumeTy.t :=
                                                                                            M.read
                                                                                              _task_context in
                                                                                          let*
                                                                                                α3 :
                                                                                              mut_ref
                                                                                                core.task.wake.Context.t :=
                                                                                            M.call
                                                                                              (core.future.get_context
                                                                                                α2) in
                                                                                          let*
                                                                                                α4 :
                                                                                              core.task.poll.Poll.t
                                                                                                (core.result.Result.t
                                                                                                  reqwest.async_impl.response.Response.t
                                                                                                  reqwest.error.Error.t) :=
                                                                                            M.call
                                                                                              (α0
                                                                                                α1
                                                                                                α3) in
                                                                                          let*
                                                                                                α5 :
                                                                                              M.Val
                                                                                                (core.task.poll.Poll.t
                                                                                                  (core.result.Result.t
                                                                                                    reqwest.async_impl.response.Response.t
                                                                                                    reqwest.error.Error.t)) :=
                                                                                            M.alloc
                                                                                              α4 in
                                                                                          match_operator
                                                                                            α5
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                (let*
                                                                                                      α0 :=
                                                                                                  M.read
                                                                                                    γ in
                                                                                                match
                                                                                                  α0
                                                                                                with
                                                                                                |
                                                                                                    core.task.poll.Poll.Ready
                                                                                                      _
                                                                                                    =>
                                                                                                  let
                                                                                                        γ0_0 :=
                                                                                                    core.task.poll.Poll.Get_Ready_0
                                                                                                      γ in
                                                                                                  let*
                                                                                                        result :=
                                                                                                    M.copy
                                                                                                      γ0_0 in
                                                                                                  let*
                                                                                                        α0 :
                                                                                                      M.Val
                                                                                                        never.t :=
                                                                                                    M.break in
                                                                                                  let*
                                                                                                        α1 :=
                                                                                                    M.read
                                                                                                      α0 in
                                                                                                  let*
                                                                                                        α2 :
                                                                                                      unit :=
                                                                                                    never_to_any
                                                                                                      α1 in
                                                                                                  M.alloc
                                                                                                    α2
                                                                                                |
                                                                                                    _
                                                                                                    =>
                                                                                                  M.break_match
                                                                                                end) :
                                                                                                M
                                                                                                  (M.Val
                                                                                                    unit);
                                                                                              fun
                                                                                                  γ =>
                                                                                                (let*
                                                                                                      α0 :=
                                                                                                  M.read
                                                                                                    γ in
                                                                                                match
                                                                                                  α0
                                                                                                with
                                                                                                |
                                                                                                    core.task.poll.Poll.Pending
                                                                                                    =>
                                                                                                  M.alloc
                                                                                                    tt
                                                                                                |
                                                                                                    _
                                                                                                    =>
                                                                                                  M.break_match
                                                                                                end) :
                                                                                                M
                                                                                                  (M.Val
                                                                                                    unit)
                                                                                            ] in
                                                                                        let*
                                                                                              _ :
                                                                                            M.Val
                                                                                              unit :=
                                                                                          let*
                                                                                                α0 :
                                                                                              M.Val
                                                                                                unit :=
                                                                                            M.alloc
                                                                                              tt in
                                                                                          let*
                                                                                                α1 :
                                                                                              M.Val
                                                                                                core.future.ResumeTy.t :=
                                                                                            yield
                                                                                              α0 in
                                                                                          let*
                                                                                                α2 :
                                                                                              core.future.ResumeTy.t :=
                                                                                            M.read
                                                                                              α1 in
                                                                                          assign
                                                                                            _task_context
                                                                                            α2 in
                                                                                        M.alloc
                                                                                          tt)) :
                                                                                      M
                                                                                        (M.Val
                                                                                          (core.result.Result.t
                                                                                            reqwest.async_impl.response.Response.t
                                                                                            reqwest.error.Error.t))
                                                                                  ] in
                                                                              let*
                                                                                    α13 :
                                                                                  core.result.Result.t
                                                                                    reqwest.async_impl.response.Response.t
                                                                                    reqwest.error.Error.t :=
                                                                                M.read
                                                                                  α12 in
                                                                              let*
                                                                                    α14 :
                                                                                  core.ops.control_flow.ControlFlow.t
                                                                                    (core.result.Result.t
                                                                                      core.convert.Infallible.t
                                                                                      reqwest.error.Error.t)
                                                                                    reqwest.async_impl.response.Response.t :=
                                                                                M.call
                                                                                  (α2
                                                                                    α13) in
                                                                              let*
                                                                                    α15 :
                                                                                  M.Val
                                                                                    (core.ops.control_flow.ControlFlow.t
                                                                                      (core.result.Result.t
                                                                                        core.convert.Infallible.t
                                                                                        reqwest.error.Error.t)
                                                                                      reqwest.async_impl.response.Response.t) :=
                                                                                M.alloc
                                                                                  α14 in
                                                                              let*
                                                                                    α16 :
                                                                                  M.Val
                                                                                    reqwest.async_impl.response.Response.t :=
                                                                                match_operator
                                                                                  α15
                                                                                  [
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            α0 :=
                                                                                        M.read
                                                                                          γ in
                                                                                      match
                                                                                        α0
                                                                                      with
                                                                                      |
                                                                                          core.ops.control_flow.ControlFlow.Break
                                                                                            _
                                                                                          =>
                                                                                        let
                                                                                              γ0_0 :=
                                                                                          core.ops.control_flow.ControlFlow.Get_Break_0
                                                                                            γ in
                                                                                        let*
                                                                                              residual :=
                                                                                          M.copy
                                                                                            γ0_0 in
                                                                                        let*
                                                                                              α0 :
                                                                                            (core.result.Result.t
                                                                                                core.convert.Infallible.t
                                                                                                reqwest.error.Error.t)
                                                                                              ->
                                                                                              M
                                                                                                (core.result.Result.t
                                                                                                  unit
                                                                                                  (alloc.boxed.Box.t
                                                                                                    (dyn
                                                                                                      [core.error.Error.Trait])
                                                                                                    alloc.alloc.Global.t)) :=
                                                                                          ltac:(M.get_method (fun ℐ =>
                                                                                            core.ops.try_trait.FromResidual.from_residual
                                                                                              (Self :=
                                                                                                core.result.Result.t
                                                                                                  unit
                                                                                                  (alloc.boxed.Box.t
                                                                                                    (dyn
                                                                                                      [core.error.Error.Trait])
                                                                                                    alloc.alloc.Global.t))
                                                                                              (R :=
                                                                                                core.result.Result.t
                                                                                                  core.convert.Infallible.t
                                                                                                  reqwest.error.Error.t)
                                                                                              (Trait := ℐ))) in
                                                                                        let*
                                                                                              α1 :
                                                                                            core.result.Result.t
                                                                                              core.convert.Infallible.t
                                                                                              reqwest.error.Error.t :=
                                                                                          M.read
                                                                                            residual in
                                                                                        let*
                                                                                              α2 :
                                                                                            core.result.Result.t
                                                                                              unit
                                                                                              (alloc.boxed.Box.t
                                                                                                (dyn
                                                                                                  [core.error.Error.Trait])
                                                                                                alloc.alloc.Global.t) :=
                                                                                          M.call
                                                                                            (α0
                                                                                              α1) in
                                                                                        let*
                                                                                              α3 :
                                                                                            M.Val
                                                                                              never.t :=
                                                                                          return_
                                                                                            α2 in
                                                                                        let*
                                                                                              α4 :=
                                                                                          M.read
                                                                                            α3 in
                                                                                        let*
                                                                                              α5 :
                                                                                            reqwest.async_impl.response.Response.t :=
                                                                                          never_to_any
                                                                                            α4 in
                                                                                        M.alloc
                                                                                          α5
                                                                                      |
                                                                                          _
                                                                                          =>
                                                                                        M.break_match
                                                                                      end) :
                                                                                      M
                                                                                        (M.Val
                                                                                          reqwest.async_impl.response.Response.t);
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            α0 :=
                                                                                        M.read
                                                                                          γ in
                                                                                      match
                                                                                        α0
                                                                                      with
                                                                                      |
                                                                                          core.ops.control_flow.ControlFlow.Continue
                                                                                            _
                                                                                          =>
                                                                                        let
                                                                                              γ0_0 :=
                                                                                          core.ops.control_flow.ControlFlow.Get_Continue_0
                                                                                            γ in
                                                                                        let*
                                                                                              val :=
                                                                                          M.copy
                                                                                            γ0_0 in
                                                                                        M.pure
                                                                                          val
                                                                                      |
                                                                                          _
                                                                                          =>
                                                                                        M.break_match
                                                                                      end) :
                                                                                      M
                                                                                        (M.Val
                                                                                          reqwest.async_impl.response.Response.t)
                                                                                  ] in
                                                                              let*
                                                                                    α17 :
                                                                                  reqwest.async_impl.response.Response.t :=
                                                                                M.read
                                                                                  α16 in
                                                                              let*
                                                                                    α18 :
                                                                                  _ :=
                                                                                M.call
                                                                                  (reqwest.async_impl.response.Response.t::["json"]
                                                                                    α17) in
                                                                              let*
                                                                                    α19 :
                                                                                  _ :=
                                                                                M.call
                                                                                  (α1
                                                                                    α18) in
                                                                              let*
                                                                                    α20 :
                                                                                  M.Val
                                                                                    _ :=
                                                                                M.alloc
                                                                                  α19 in
                                                                              let*
                                                                                    α21 :
                                                                                  M.Val
                                                                                    (core.result.Result.t
                                                                                      serde_json.value.Value.t
                                                                                      reqwest.error.Error.t) :=
                                                                                match_operator
                                                                                  α20
                                                                                  [
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            __awaitee :=
                                                                                        M.copy
                                                                                          γ in
                                                                                      M.loop
                                                                                        (let*
                                                                                              _ :
                                                                                            M.Val
                                                                                              unit :=
                                                                                          let*
                                                                                                α0 :
                                                                                              (core.pin.Pin.t
                                                                                                  (mut_ref
                                                                                                    _))
                                                                                                ->
                                                                                                (mut_ref
                                                                                                  core.task.wake.Context.t)
                                                                                                ->
                                                                                                M
                                                                                                  (core.task.poll.Poll.t
                                                                                                    _) :=
                                                                                            ltac:(M.get_method (fun ℐ =>
                                                                                              core.future.future.Future.poll
                                                                                                (Self :=
                                                                                                  _)
                                                                                                (Trait := ℐ))) in
                                                                                          let*
                                                                                                α1 :
                                                                                              core.pin.Pin.t
                                                                                                (mut_ref
                                                                                                  _) :=
                                                                                            M.call
                                                                                              ((core.pin.Pin.t
                                                                                                    (mut_ref
                                                                                                      _))::["new_unchecked"]
                                                                                                (borrow_mut
                                                                                                  __awaitee)) in
                                                                                          let*
                                                                                                α2 :
                                                                                              core.future.ResumeTy.t :=
                                                                                            M.read
                                                                                              _task_context in
                                                                                          let*
                                                                                                α3 :
                                                                                              mut_ref
                                                                                                core.task.wake.Context.t :=
                                                                                            M.call
                                                                                              (core.future.get_context
                                                                                                α2) in
                                                                                          let*
                                                                                                α4 :
                                                                                              core.task.poll.Poll.t
                                                                                                (core.result.Result.t
                                                                                                  serde_json.value.Value.t
                                                                                                  reqwest.error.Error.t) :=
                                                                                            M.call
                                                                                              (α0
                                                                                                α1
                                                                                                α3) in
                                                                                          let*
                                                                                                α5 :
                                                                                              M.Val
                                                                                                (core.task.poll.Poll.t
                                                                                                  (core.result.Result.t
                                                                                                    serde_json.value.Value.t
                                                                                                    reqwest.error.Error.t)) :=
                                                                                            M.alloc
                                                                                              α4 in
                                                                                          match_operator
                                                                                            α5
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                (let*
                                                                                                      α0 :=
                                                                                                  M.read
                                                                                                    γ in
                                                                                                match
                                                                                                  α0
                                                                                                with
                                                                                                |
                                                                                                    core.task.poll.Poll.Ready
                                                                                                      _
                                                                                                    =>
                                                                                                  let
                                                                                                        γ0_0 :=
                                                                                                    core.task.poll.Poll.Get_Ready_0
                                                                                                      γ in
                                                                                                  let*
                                                                                                        result :=
                                                                                                    M.copy
                                                                                                      γ0_0 in
                                                                                                  let*
                                                                                                        α0 :
                                                                                                      M.Val
                                                                                                        never.t :=
                                                                                                    M.break in
                                                                                                  let*
                                                                                                        α1 :=
                                                                                                    M.read
                                                                                                      α0 in
                                                                                                  let*
                                                                                                        α2 :
                                                                                                      unit :=
                                                                                                    never_to_any
                                                                                                      α1 in
                                                                                                  M.alloc
                                                                                                    α2
                                                                                                |
                                                                                                    _
                                                                                                    =>
                                                                                                  M.break_match
                                                                                                end) :
                                                                                                M
                                                                                                  (M.Val
                                                                                                    unit);
                                                                                              fun
                                                                                                  γ =>
                                                                                                (let*
                                                                                                      α0 :=
                                                                                                  M.read
                                                                                                    γ in
                                                                                                match
                                                                                                  α0
                                                                                                with
                                                                                                |
                                                                                                    core.task.poll.Poll.Pending
                                                                                                    =>
                                                                                                  M.alloc
                                                                                                    tt
                                                                                                |
                                                                                                    _
                                                                                                    =>
                                                                                                  M.break_match
                                                                                                end) :
                                                                                                M
                                                                                                  (M.Val
                                                                                                    unit)
                                                                                            ] in
                                                                                        let*
                                                                                              _ :
                                                                                            M.Val
                                                                                              unit :=
                                                                                          let*
                                                                                                α0 :
                                                                                              M.Val
                                                                                                unit :=
                                                                                            M.alloc
                                                                                              tt in
                                                                                          let*
                                                                                                α1 :
                                                                                              M.Val
                                                                                                core.future.ResumeTy.t :=
                                                                                            yield
                                                                                              α0 in
                                                                                          let*
                                                                                                α2 :
                                                                                              core.future.ResumeTy.t :=
                                                                                            M.read
                                                                                              α1 in
                                                                                          assign
                                                                                            _task_context
                                                                                            α2 in
                                                                                        M.alloc
                                                                                          tt)) :
                                                                                      M
                                                                                        (M.Val
                                                                                          (core.result.Result.t
                                                                                            serde_json.value.Value.t
                                                                                            reqwest.error.Error.t))
                                                                                  ] in
                                                                              let*
                                                                                    α22 :
                                                                                  core.result.Result.t
                                                                                    serde_json.value.Value.t
                                                                                    reqwest.error.Error.t :=
                                                                                M.read
                                                                                  α21 in
                                                                              let*
                                                                                    α23 :
                                                                                  core.ops.control_flow.ControlFlow.t
                                                                                    (core.result.Result.t
                                                                                      core.convert.Infallible.t
                                                                                      reqwest.error.Error.t)
                                                                                    serde_json.value.Value.t :=
                                                                                M.call
                                                                                  (α0
                                                                                    α22) in
                                                                              let*
                                                                                    α24 :
                                                                                  M.Val
                                                                                    (core.ops.control_flow.ControlFlow.t
                                                                                      (core.result.Result.t
                                                                                        core.convert.Infallible.t
                                                                                        reqwest.error.Error.t)
                                                                                      serde_json.value.Value.t) :=
                                                                                M.alloc
                                                                                  α23 in
                                                                              let*
                                                                                    α25 :
                                                                                  M.Val
                                                                                    serde_json.value.Value.t :=
                                                                                match_operator
                                                                                  α24
                                                                                  [
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            α0 :=
                                                                                        M.read
                                                                                          γ in
                                                                                      match
                                                                                        α0
                                                                                      with
                                                                                      |
                                                                                          core.ops.control_flow.ControlFlow.Break
                                                                                            _
                                                                                          =>
                                                                                        let
                                                                                              γ0_0 :=
                                                                                          core.ops.control_flow.ControlFlow.Get_Break_0
                                                                                            γ in
                                                                                        let*
                                                                                              residual :=
                                                                                          M.copy
                                                                                            γ0_0 in
                                                                                        let*
                                                                                              α0 :
                                                                                            (core.result.Result.t
                                                                                                core.convert.Infallible.t
                                                                                                reqwest.error.Error.t)
                                                                                              ->
                                                                                              M
                                                                                                (core.result.Result.t
                                                                                                  unit
                                                                                                  (alloc.boxed.Box.t
                                                                                                    (dyn
                                                                                                      [core.error.Error.Trait])
                                                                                                    alloc.alloc.Global.t)) :=
                                                                                          ltac:(M.get_method (fun ℐ =>
                                                                                            core.ops.try_trait.FromResidual.from_residual
                                                                                              (Self :=
                                                                                                core.result.Result.t
                                                                                                  unit
                                                                                                  (alloc.boxed.Box.t
                                                                                                    (dyn
                                                                                                      [core.error.Error.Trait])
                                                                                                    alloc.alloc.Global.t))
                                                                                              (R :=
                                                                                                core.result.Result.t
                                                                                                  core.convert.Infallible.t
                                                                                                  reqwest.error.Error.t)
                                                                                              (Trait := ℐ))) in
                                                                                        let*
                                                                                              α1 :
                                                                                            core.result.Result.t
                                                                                              core.convert.Infallible.t
                                                                                              reqwest.error.Error.t :=
                                                                                          M.read
                                                                                            residual in
                                                                                        let*
                                                                                              α2 :
                                                                                            core.result.Result.t
                                                                                              unit
                                                                                              (alloc.boxed.Box.t
                                                                                                (dyn
                                                                                                  [core.error.Error.Trait])
                                                                                                alloc.alloc.Global.t) :=
                                                                                          M.call
                                                                                            (α0
                                                                                              α1) in
                                                                                        let*
                                                                                              α3 :
                                                                                            M.Val
                                                                                              never.t :=
                                                                                          return_
                                                                                            α2 in
                                                                                        let*
                                                                                              α4 :=
                                                                                          M.read
                                                                                            α3 in
                                                                                        let*
                                                                                              α5 :
                                                                                            serde_json.value.Value.t :=
                                                                                          never_to_any
                                                                                            α4 in
                                                                                        M.alloc
                                                                                          α5
                                                                                      |
                                                                                          _
                                                                                          =>
                                                                                        M.break_match
                                                                                      end) :
                                                                                      M
                                                                                        (M.Val
                                                                                          serde_json.value.Value.t);
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            α0 :=
                                                                                        M.read
                                                                                          γ in
                                                                                      match
                                                                                        α0
                                                                                      with
                                                                                      |
                                                                                          core.ops.control_flow.ControlFlow.Continue
                                                                                            _
                                                                                          =>
                                                                                        let
                                                                                              γ0_0 :=
                                                                                          core.ops.control_flow.ControlFlow.Get_Continue_0
                                                                                            γ in
                                                                                        let*
                                                                                              val :=
                                                                                          M.copy
                                                                                            γ0_0 in
                                                                                        M.pure
                                                                                          val
                                                                                      |
                                                                                          _
                                                                                          =>
                                                                                        M.break_match
                                                                                      end) :
                                                                                      M
                                                                                        (M.Val
                                                                                          serde_json.value.Value.t)
                                                                                  ] in
                                                                              M.copy
                                                                                α25 in
                                                                            let*
                                                                                  _ :
                                                                                M.Val
                                                                                  unit :=
                                                                              let*
                                                                                    _ :
                                                                                  M.Val
                                                                                    unit :=
                                                                                let*
                                                                                      α0 :
                                                                                    ref
                                                                                      str.t :=
                                                                                  M.read
                                                                                    (mk_str
                                                                                      "Actual response: ") in
                                                                                let*
                                                                                      α1 :
                                                                                    ref
                                                                                      str.t :=
                                                                                  M.read
                                                                                    (mk_str
                                                                                      "
") in
                                                                                let*
                                                                                      α2 :
                                                                                    M.Val
                                                                                      (array
                                                                                        (ref
                                                                                          str.t)) :=
                                                                                  M.alloc
                                                                                    [
                                                                                      α0;
                                                                                      α1
                                                                                    ] in
                                                                                let*
                                                                                      α3 :
                                                                                    core.fmt.rt.Argument.t :=
                                                                                  M.call
                                                                                    (core.fmt.rt.Argument.t::["new_display"]
                                                                                      (borrow
                                                                                        actual_response)) in
                                                                                let*
                                                                                      α4 :
                                                                                    M.Val
                                                                                      (array
                                                                                        core.fmt.rt.Argument.t) :=
                                                                                  M.alloc
                                                                                    [
                                                                                      α3
                                                                                    ] in
                                                                                let*
                                                                                      α5 :
                                                                                    core.fmt.Arguments.t :=
                                                                                  M.call
                                                                                    (core.fmt.Arguments.t::["new_v1"]
                                                                                      (pointer_coercion
                                                                                        "Unsize"
                                                                                        (borrow
                                                                                          α2))
                                                                                      (pointer_coercion
                                                                                        "Unsize"
                                                                                        (borrow
                                                                                          α4))) in
                                                                                let*
                                                                                      α6 :
                                                                                    unit :=
                                                                                  M.call
                                                                                    (std.io.stdio._print
                                                                                      α5) in
                                                                                M.alloc
                                                                                  α6 in
                                                                              M.alloc
                                                                                tt in
                                                                            let*
                                                                                  user_prompt :
                                                                                M.Val
                                                                                  alloc.string.String.t :=
                                                                              let*
                                                                                    α0 :
                                                                                  (core.result.Result.t
                                                                                      alloc.string.String.t
                                                                                      serde_json.error.Error.t)
                                                                                    ->
                                                                                    M
                                                                                      (core.ops.control_flow.ControlFlow.t
                                                                                        _
                                                                                        _) :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.ops.try_trait.Try.branch
                                                                                    (Self :=
                                                                                      core.result.Result.t
                                                                                        alloc.string.String.t
                                                                                        serde_json.error.Error.t)
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    object :
                                                                                  M.Val
                                                                                    (serde_json.map.Map.t
                                                                                      alloc.string.String.t
                                                                                      serde_json.value.Value.t) :=
                                                                                let*
                                                                                      α0 :
                                                                                    serde_json.map.Map.t
                                                                                      alloc.string.String.t
                                                                                      serde_json.value.Value.t :=
                                                                                  M.call
                                                                                    (serde_json.map.Map.t
                                                                                        alloc.string.String.t
                                                                                        serde_json.value.Value.t)::["new"] in
                                                                                M.alloc
                                                                                  α0 in
                                                                              let*
                                                                                    α0 :
                                                                                  (ref
                                                                                      str.t)
                                                                                    ->
                                                                                    M
                                                                                      alloc.string.String.t :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.convert.Into.into
                                                                                    (Self :=
                                                                                      ref
                                                                                        str.t)
                                                                                    (T :=
                                                                                      alloc.string.String.t)
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α1 :
                                                                                  ref
                                                                                    str.t :=
                                                                                M.read
                                                                                  (mk_str
                                                                                    "request") in
                                                                              let*
                                                                                    α2 :
                                                                                  alloc.string.String.t :=
                                                                                M.call
                                                                                  (α0
                                                                                    α1) in
                                                                              let*
                                                                                    α3 :
                                                                                  mut_ref
                                                                                    assistants_benches.Step.t :=
                                                                                M.read
                                                                                  step in
                                                                              let*
                                                                                    α4 :
                                                                                  core.result.Result.t
                                                                                    serde_json.value.Value.t
                                                                                    serde_json.error.Error.t :=
                                                                                M.call
                                                                                  (serde_json.value.to_value
                                                                                    (borrow
                                                                                      (assistants_benches.Step.Get_request
                                                                                        (deref
                                                                                          α3)))) in
                                                                              let*
                                                                                    α5 :
                                                                                  serde_json.value.Value.t :=
                                                                                M.call
                                                                                  ((core.result.Result.t
                                                                                        serde_json.value.Value.t
                                                                                        serde_json.error.Error.t)::["unwrap"]
                                                                                    α4) in
                                                                              let*
                                                                                    α6 :
                                                                                  core.option.Option.t
                                                                                    serde_json.value.Value.t :=
                                                                                M.call
                                                                                  ((serde_json.map.Map.t
                                                                                        alloc.string.String.t
                                                                                        serde_json.value.Value.t)::["insert"]
                                                                                    (borrow_mut
                                                                                      object)
                                                                                    α2
                                                                                    α5) in
                                                                              let*
                                                                                    α7 :
                                                                                  M.Val
                                                                                    (core.option.Option.t
                                                                                      serde_json.value.Value.t) :=
                                                                                M.alloc
                                                                                  α6 in
                                                                              let*
                                                                                    α1 :
                                                                                  M.Val
                                                                                    (serde_json.map.Map.t
                                                                                      alloc.string.String.t
                                                                                      serde_json.value.Value.t) :=
                                                                                match_operator
                                                                                  α7
                                                                                  [
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            α0 :
                                                                                          (ref
                                                                                              str.t)
                                                                                            ->
                                                                                            M
                                                                                              alloc.string.String.t :=
                                                                                        ltac:(M.get_method (fun ℐ =>
                                                                                          core.convert.Into.into
                                                                                            (Self :=
                                                                                              ref
                                                                                                str.t)
                                                                                            (T :=
                                                                                              alloc.string.String.t)
                                                                                            (Trait := ℐ))) in
                                                                                      let*
                                                                                            α1 :
                                                                                          ref
                                                                                            str.t :=
                                                                                        M.read
                                                                                          (mk_str
                                                                                            "response") in
                                                                                      let*
                                                                                            α2 :
                                                                                          alloc.string.String.t :=
                                                                                        M.call
                                                                                          (α0
                                                                                            α1) in
                                                                                      let*
                                                                                            α3 :
                                                                                          core.result.Result.t
                                                                                            serde_json.value.Value.t
                                                                                            serde_json.error.Error.t :=
                                                                                        M.call
                                                                                          (serde_json.value.to_value
                                                                                            (borrow
                                                                                              actual_response)) in
                                                                                      let*
                                                                                            α4 :
                                                                                          serde_json.value.Value.t :=
                                                                                        M.call
                                                                                          ((core.result.Result.t
                                                                                                serde_json.value.Value.t
                                                                                                serde_json.error.Error.t)::["unwrap"]
                                                                                            α3) in
                                                                                      let*
                                                                                            α5 :
                                                                                          core.option.Option.t
                                                                                            serde_json.value.Value.t :=
                                                                                        M.call
                                                                                          ((serde_json.map.Map.t
                                                                                                alloc.string.String.t
                                                                                                serde_json.value.Value.t)::["insert"]
                                                                                            (borrow_mut
                                                                                              object)
                                                                                            α2
                                                                                            α4) in
                                                                                      let*
                                                                                            α6 :
                                                                                          M.Val
                                                                                            (core.option.Option.t
                                                                                              serde_json.value.Value.t) :=
                                                                                        M.alloc
                                                                                          α5 in
                                                                                      match_operator
                                                                                        α6
                                                                                        [
                                                                                          fun
                                                                                              γ =>
                                                                                            (let*
                                                                                                  α0 :
                                                                                                (ref
                                                                                                    str.t)
                                                                                                  ->
                                                                                                  M
                                                                                                    alloc.string.String.t :=
                                                                                              ltac:(M.get_method (fun ℐ =>
                                                                                                core.convert.Into.into
                                                                                                  (Self :=
                                                                                                    ref
                                                                                                      str.t)
                                                                                                  (T :=
                                                                                                    alloc.string.String.t)
                                                                                                  (Trait := ℐ))) in
                                                                                            let*
                                                                                                  α1 :
                                                                                                ref
                                                                                                  str.t :=
                                                                                              M.read
                                                                                                (mk_str
                                                                                                  "expected_response") in
                                                                                            let*
                                                                                                  α2 :
                                                                                                alloc.string.String.t :=
                                                                                              M.call
                                                                                                (α0
                                                                                                  α1) in
                                                                                            let*
                                                                                                  α3 :
                                                                                                mut_ref
                                                                                                  assistants_benches.Step.t :=
                                                                                              M.read
                                                                                                step in
                                                                                            let*
                                                                                                  α4 :
                                                                                                core.result.Result.t
                                                                                                  serde_json.value.Value.t
                                                                                                  serde_json.error.Error.t :=
                                                                                              M.call
                                                                                                (serde_json.value.to_value
                                                                                                  (borrow
                                                                                                    (assistants_benches.Step.Get_expected_response
                                                                                                      (deref
                                                                                                        α3)))) in
                                                                                            let*
                                                                                                  α5 :
                                                                                                serde_json.value.Value.t :=
                                                                                              M.call
                                                                                                ((core.result.Result.t
                                                                                                      serde_json.value.Value.t
                                                                                                      serde_json.error.Error.t)::["unwrap"]
                                                                                                  α4) in
                                                                                            let*
                                                                                                  α6 :
                                                                                                core.option.Option.t
                                                                                                  serde_json.value.Value.t :=
                                                                                              M.call
                                                                                                ((serde_json.map.Map.t
                                                                                                      alloc.string.String.t
                                                                                                      serde_json.value.Value.t)::["insert"]
                                                                                                  (borrow_mut
                                                                                                    object)
                                                                                                  α2
                                                                                                  α5) in
                                                                                            let*
                                                                                                  α7 :
                                                                                                M.Val
                                                                                                  (core.option.Option.t
                                                                                                    serde_json.value.Value.t) :=
                                                                                              M.alloc
                                                                                                α6 in
                                                                                            match_operator
                                                                                              α7
                                                                                              [
                                                                                                fun
                                                                                                    γ =>
                                                                                                  (M.pure
                                                                                                    object) :
                                                                                                  M
                                                                                                    (M.Val
                                                                                                      (serde_json.map.Map.t
                                                                                                        alloc.string.String.t
                                                                                                        serde_json.value.Value.t))
                                                                                              ]) :
                                                                                            M
                                                                                              (M.Val
                                                                                                (serde_json.map.Map.t
                                                                                                  alloc.string.String.t
                                                                                                  serde_json.value.Value.t))
                                                                                        ]) :
                                                                                      M
                                                                                        (M.Val
                                                                                          (serde_json.map.Map.t
                                                                                            alloc.string.String.t
                                                                                            serde_json.value.Value.t))
                                                                                  ] in
                                                                              let*
                                                                                    α2 :
                                                                                  serde_json.map.Map.t
                                                                                    alloc.string.String.t
                                                                                    serde_json.value.Value.t :=
                                                                                M.read
                                                                                  α1 in
                                                                              let*
                                                                                    α3 :
                                                                                  M.Val
                                                                                    serde_json.value.Value.t :=
                                                                                M.alloc
                                                                                  (serde_json.value.Value.Object
                                                                                    α2) in
                                                                              let*
                                                                                    α4 :
                                                                                  core.result.Result.t
                                                                                    alloc.string.String.t
                                                                                    serde_json.error.Error.t :=
                                                                                M.call
                                                                                  (serde_json.ser.to_string
                                                                                    (borrow
                                                                                      α3)) in
                                                                              let*
                                                                                    α5 :
                                                                                  core.ops.control_flow.ControlFlow.t
                                                                                    (core.result.Result.t
                                                                                      core.convert.Infallible.t
                                                                                      serde_json.error.Error.t)
                                                                                    alloc.string.String.t :=
                                                                                M.call
                                                                                  (α0
                                                                                    α4) in
                                                                              let*
                                                                                    α6 :
                                                                                  M.Val
                                                                                    (core.ops.control_flow.ControlFlow.t
                                                                                      (core.result.Result.t
                                                                                        core.convert.Infallible.t
                                                                                        serde_json.error.Error.t)
                                                                                      alloc.string.String.t) :=
                                                                                M.alloc
                                                                                  α5 in
                                                                              let*
                                                                                    α7 :
                                                                                  M.Val
                                                                                    alloc.string.String.t :=
                                                                                match_operator
                                                                                  α6
                                                                                  [
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            α0 :=
                                                                                        M.read
                                                                                          γ in
                                                                                      match
                                                                                        α0
                                                                                      with
                                                                                      |
                                                                                          core.ops.control_flow.ControlFlow.Break
                                                                                            _
                                                                                          =>
                                                                                        let
                                                                                              γ0_0 :=
                                                                                          core.ops.control_flow.ControlFlow.Get_Break_0
                                                                                            γ in
                                                                                        let*
                                                                                              residual :=
                                                                                          M.copy
                                                                                            γ0_0 in
                                                                                        let*
                                                                                              α0 :
                                                                                            (core.result.Result.t
                                                                                                core.convert.Infallible.t
                                                                                                serde_json.error.Error.t)
                                                                                              ->
                                                                                              M
                                                                                                (core.result.Result.t
                                                                                                  unit
                                                                                                  (alloc.boxed.Box.t
                                                                                                    (dyn
                                                                                                      [core.error.Error.Trait])
                                                                                                    alloc.alloc.Global.t)) :=
                                                                                          ltac:(M.get_method (fun ℐ =>
                                                                                            core.ops.try_trait.FromResidual.from_residual
                                                                                              (Self :=
                                                                                                core.result.Result.t
                                                                                                  unit
                                                                                                  (alloc.boxed.Box.t
                                                                                                    (dyn
                                                                                                      [core.error.Error.Trait])
                                                                                                    alloc.alloc.Global.t))
                                                                                              (R :=
                                                                                                core.result.Result.t
                                                                                                  core.convert.Infallible.t
                                                                                                  serde_json.error.Error.t)
                                                                                              (Trait := ℐ))) in
                                                                                        let*
                                                                                              α1 :
                                                                                            core.result.Result.t
                                                                                              core.convert.Infallible.t
                                                                                              serde_json.error.Error.t :=
                                                                                          M.read
                                                                                            residual in
                                                                                        let*
                                                                                              α2 :
                                                                                            core.result.Result.t
                                                                                              unit
                                                                                              (alloc.boxed.Box.t
                                                                                                (dyn
                                                                                                  [core.error.Error.Trait])
                                                                                                alloc.alloc.Global.t) :=
                                                                                          M.call
                                                                                            (α0
                                                                                              α1) in
                                                                                        let*
                                                                                              α3 :
                                                                                            M.Val
                                                                                              never.t :=
                                                                                          return_
                                                                                            α2 in
                                                                                        let*
                                                                                              α4 :=
                                                                                          M.read
                                                                                            α3 in
                                                                                        let*
                                                                                              α5 :
                                                                                            alloc.string.String.t :=
                                                                                          never_to_any
                                                                                            α4 in
                                                                                        M.alloc
                                                                                          α5
                                                                                      |
                                                                                          _
                                                                                          =>
                                                                                        M.break_match
                                                                                      end) :
                                                                                      M
                                                                                        (M.Val
                                                                                          alloc.string.String.t);
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            α0 :=
                                                                                        M.read
                                                                                          γ in
                                                                                      match
                                                                                        α0
                                                                                      with
                                                                                      |
                                                                                          core.ops.control_flow.ControlFlow.Continue
                                                                                            _
                                                                                          =>
                                                                                        let
                                                                                              γ0_0 :=
                                                                                          core.ops.control_flow.ControlFlow.Get_Continue_0
                                                                                            γ in
                                                                                        let*
                                                                                              val :=
                                                                                          M.copy
                                                                                            γ0_0 in
                                                                                        M.pure
                                                                                          val
                                                                                      |
                                                                                          _
                                                                                          =>
                                                                                        M.break_match
                                                                                      end) :
                                                                                      M
                                                                                        (M.Val
                                                                                          alloc.string.String.t)
                                                                                  ] in
                                                                              M.copy
                                                                                α7 in
                                                                            let*
                                                                                  _ :
                                                                                M.Val
                                                                                  unit :=
                                                                              let*
                                                                                    _ :
                                                                                  M.Val
                                                                                    unit :=
                                                                                let*
                                                                                      α0 :
                                                                                    ref
                                                                                      str.t :=
                                                                                  M.read
                                                                                    (mk_str
                                                                                      "User prompt: ") in
                                                                                let*
                                                                                      α1 :
                                                                                    ref
                                                                                      str.t :=
                                                                                  M.read
                                                                                    (mk_str
                                                                                      "
") in
                                                                                let*
                                                                                      α2 :
                                                                                    M.Val
                                                                                      (array
                                                                                        (ref
                                                                                          str.t)) :=
                                                                                  M.alloc
                                                                                    [
                                                                                      α0;
                                                                                      α1
                                                                                    ] in
                                                                                let*
                                                                                      α3 :
                                                                                    core.fmt.rt.Argument.t :=
                                                                                  M.call
                                                                                    (core.fmt.rt.Argument.t::["new_display"]
                                                                                      (borrow
                                                                                        user_prompt)) in
                                                                                let*
                                                                                      α4 :
                                                                                    M.Val
                                                                                      (array
                                                                                        core.fmt.rt.Argument.t) :=
                                                                                  M.alloc
                                                                                    [
                                                                                      α3
                                                                                    ] in
                                                                                let*
                                                                                      α5 :
                                                                                    core.fmt.Arguments.t :=
                                                                                  M.call
                                                                                    (core.fmt.Arguments.t::["new_v1"]
                                                                                      (pointer_coercion
                                                                                        "Unsize"
                                                                                        (borrow
                                                                                          α2))
                                                                                      (pointer_coercion
                                                                                        "Unsize"
                                                                                        (borrow
                                                                                          α4))) in
                                                                                let*
                                                                                      α6 :
                                                                                    unit :=
                                                                                  M.call
                                                                                    (std.io.stdio._print
                                                                                      α5) in
                                                                                M.alloc
                                                                                  α6 in
                                                                              M.alloc
                                                                                tt in
                                                                            let*
                                                                                  llm_score :
                                                                                M.Val
                                                                                  alloc.string.String.t :=
                                                                              let*
                                                                                    α0 :
                                                                                  (core.result.Result.t
                                                                                      alloc.string.String.t
                                                                                      (alloc.boxed.Box.t
                                                                                        (dyn
                                                                                          [core.error.Error.Trait])
                                                                                        alloc.alloc.Global.t))
                                                                                    ->
                                                                                    M
                                                                                      (core.ops.control_flow.ControlFlow.t
                                                                                        _
                                                                                        _) :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.ops.try_trait.Try.branch
                                                                                    (Self :=
                                                                                      core.result.Result.t
                                                                                        alloc.string.String.t
                                                                                        (alloc.boxed.Box.t
                                                                                          (dyn
                                                                                            [core.error.Error.Trait])
                                                                                          alloc.alloc.Global.t))
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α1 :
                                                                                  _
                                                                                    ->
                                                                                    M
                                                                                      _ :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.future.into_future.IntoFuture.into_future
                                                                                    (Self :=
                                                                                      _)
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α2 :
                                                                                  ref
                                                                                    str.t :=
                                                                                M.read
                                                                                  (mk_str
                                                                                    "claude-2.1") in
                                                                              let*
                                                                                    α3 :
                                                                                  ref
                                                                                    str.t :=
                                                                                M.read
                                                                                  p in
                                                                              let*
                                                                                    α4 :
                                                                                  (ref
                                                                                      alloc.string.String.t)
                                                                                    ->
                                                                                    M
                                                                                      (ref
                                                                                        _) :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.ops.deref.Deref.deref
                                                                                    (Self :=
                                                                                      alloc.string.String.t)
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α5 :
                                                                                  ref
                                                                                    str.t :=
                                                                                M.call
                                                                                  (α4
                                                                                    (borrow
                                                                                      user_prompt)) in
                                                                              let*
                                                                                    α6 :
                                                                                  f32.t :=
                                                                                M.read
                                                                                  (UnsupportedLiteral :
                                                                                    M.Val
                                                                                      f32.t) in
                                                                              let*
                                                                                    α7 :
                                                                                  f32.t :=
                                                                                M.read
                                                                                  (UnsupportedLiteral :
                                                                                    M.Val
                                                                                      f32.t) in
                                                                              let*
                                                                                    α8 :
                                                                                  _ :=
                                                                                M.call
                                                                                  (assistants_extra.llm.llm
                                                                                    α2
                                                                                    core.option.Option.None
                                                                                    α3
                                                                                    α5
                                                                                    (core.option.Option.Some
                                                                                      α6)
                                                                                    ((Integer.of_Z
                                                                                        (-1)) :
                                                                                      i32.t)
                                                                                    core.option.Option.None
                                                                                    (core.option.Option.Some
                                                                                      α7)
                                                                                    core.option.Option.None
                                                                                    core.option.Option.None
                                                                                    (core.option.Option.Some
                                                                                      ((Integer.of_Z
                                                                                          16000) :
                                                                                        i32.t))) in
                                                                              let*
                                                                                    α9 :
                                                                                  _ :=
                                                                                M.call
                                                                                  (α1
                                                                                    α8) in
                                                                              let*
                                                                                    α10 :
                                                                                  M.Val
                                                                                    _ :=
                                                                                M.alloc
                                                                                  α9 in
                                                                              let*
                                                                                    α11 :
                                                                                  M.Val
                                                                                    (core.result.Result.t
                                                                                      alloc.string.String.t
                                                                                      (alloc.boxed.Box.t
                                                                                        (dyn
                                                                                          [core.error.Error.Trait])
                                                                                        alloc.alloc.Global.t)) :=
                                                                                match_operator
                                                                                  α10
                                                                                  [
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            __awaitee :=
                                                                                        M.copy
                                                                                          γ in
                                                                                      M.loop
                                                                                        (let*
                                                                                              _ :
                                                                                            M.Val
                                                                                              unit :=
                                                                                          let*
                                                                                                α0 :
                                                                                              (core.pin.Pin.t
                                                                                                  (mut_ref
                                                                                                    _))
                                                                                                ->
                                                                                                (mut_ref
                                                                                                  core.task.wake.Context.t)
                                                                                                ->
                                                                                                M
                                                                                                  (core.task.poll.Poll.t
                                                                                                    _) :=
                                                                                            ltac:(M.get_method (fun ℐ =>
                                                                                              core.future.future.Future.poll
                                                                                                (Self :=
                                                                                                  _)
                                                                                                (Trait := ℐ))) in
                                                                                          let*
                                                                                                α1 :
                                                                                              core.pin.Pin.t
                                                                                                (mut_ref
                                                                                                  _) :=
                                                                                            M.call
                                                                                              ((core.pin.Pin.t
                                                                                                    (mut_ref
                                                                                                      _))::["new_unchecked"]
                                                                                                (borrow_mut
                                                                                                  __awaitee)) in
                                                                                          let*
                                                                                                α2 :
                                                                                              core.future.ResumeTy.t :=
                                                                                            M.read
                                                                                              _task_context in
                                                                                          let*
                                                                                                α3 :
                                                                                              mut_ref
                                                                                                core.task.wake.Context.t :=
                                                                                            M.call
                                                                                              (core.future.get_context
                                                                                                α2) in
                                                                                          let*
                                                                                                α4 :
                                                                                              core.task.poll.Poll.t
                                                                                                (core.result.Result.t
                                                                                                  alloc.string.String.t
                                                                                                  (alloc.boxed.Box.t
                                                                                                    (dyn
                                                                                                      [core.error.Error.Trait])
                                                                                                    alloc.alloc.Global.t)) :=
                                                                                            M.call
                                                                                              (α0
                                                                                                α1
                                                                                                α3) in
                                                                                          let*
                                                                                                α5 :
                                                                                              M.Val
                                                                                                (core.task.poll.Poll.t
                                                                                                  (core.result.Result.t
                                                                                                    alloc.string.String.t
                                                                                                    (alloc.boxed.Box.t
                                                                                                      (dyn
                                                                                                        [core.error.Error.Trait])
                                                                                                      alloc.alloc.Global.t))) :=
                                                                                            M.alloc
                                                                                              α4 in
                                                                                          match_operator
                                                                                            α5
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                (let*
                                                                                                      α0 :=
                                                                                                  M.read
                                                                                                    γ in
                                                                                                match
                                                                                                  α0
                                                                                                with
                                                                                                |
                                                                                                    core.task.poll.Poll.Ready
                                                                                                      _
                                                                                                    =>
                                                                                                  let
                                                                                                        γ0_0 :=
                                                                                                    core.task.poll.Poll.Get_Ready_0
                                                                                                      γ in
                                                                                                  let*
                                                                                                        result :=
                                                                                                    M.copy
                                                                                                      γ0_0 in
                                                                                                  let*
                                                                                                        α0 :
                                                                                                      M.Val
                                                                                                        never.t :=
                                                                                                    M.break in
                                                                                                  let*
                                                                                                        α1 :=
                                                                                                    M.read
                                                                                                      α0 in
                                                                                                  let*
                                                                                                        α2 :
                                                                                                      unit :=
                                                                                                    never_to_any
                                                                                                      α1 in
                                                                                                  M.alloc
                                                                                                    α2
                                                                                                |
                                                                                                    _
                                                                                                    =>
                                                                                                  M.break_match
                                                                                                end) :
                                                                                                M
                                                                                                  (M.Val
                                                                                                    unit);
                                                                                              fun
                                                                                                  γ =>
                                                                                                (let*
                                                                                                      α0 :=
                                                                                                  M.read
                                                                                                    γ in
                                                                                                match
                                                                                                  α0
                                                                                                with
                                                                                                |
                                                                                                    core.task.poll.Poll.Pending
                                                                                                    =>
                                                                                                  M.alloc
                                                                                                    tt
                                                                                                |
                                                                                                    _
                                                                                                    =>
                                                                                                  M.break_match
                                                                                                end) :
                                                                                                M
                                                                                                  (M.Val
                                                                                                    unit)
                                                                                            ] in
                                                                                        let*
                                                                                              _ :
                                                                                            M.Val
                                                                                              unit :=
                                                                                          let*
                                                                                                α0 :
                                                                                              M.Val
                                                                                                unit :=
                                                                                            M.alloc
                                                                                              tt in
                                                                                          let*
                                                                                                α1 :
                                                                                              M.Val
                                                                                                core.future.ResumeTy.t :=
                                                                                            yield
                                                                                              α0 in
                                                                                          let*
                                                                                                α2 :
                                                                                              core.future.ResumeTy.t :=
                                                                                            M.read
                                                                                              α1 in
                                                                                          assign
                                                                                            _task_context
                                                                                            α2 in
                                                                                        M.alloc
                                                                                          tt)) :
                                                                                      M
                                                                                        (M.Val
                                                                                          (core.result.Result.t
                                                                                            alloc.string.String.t
                                                                                            (alloc.boxed.Box.t
                                                                                              (dyn
                                                                                                [core.error.Error.Trait])
                                                                                              alloc.alloc.Global.t)))
                                                                                  ] in
                                                                              let*
                                                                                    α12 :
                                                                                  core.result.Result.t
                                                                                    alloc.string.String.t
                                                                                    (alloc.boxed.Box.t
                                                                                      (dyn
                                                                                        [core.error.Error.Trait])
                                                                                      alloc.alloc.Global.t) :=
                                                                                M.read
                                                                                  α11 in
                                                                              let*
                                                                                    α13 :
                                                                                  core.ops.control_flow.ControlFlow.t
                                                                                    (core.result.Result.t
                                                                                      core.convert.Infallible.t
                                                                                      (alloc.boxed.Box.t
                                                                                        (dyn
                                                                                          [core.error.Error.Trait])
                                                                                        alloc.alloc.Global.t))
                                                                                    alloc.string.String.t :=
                                                                                M.call
                                                                                  (α0
                                                                                    α12) in
                                                                              let*
                                                                                    α14 :
                                                                                  M.Val
                                                                                    (core.ops.control_flow.ControlFlow.t
                                                                                      (core.result.Result.t
                                                                                        core.convert.Infallible.t
                                                                                        (alloc.boxed.Box.t
                                                                                          (dyn
                                                                                            [core.error.Error.Trait])
                                                                                          alloc.alloc.Global.t))
                                                                                      alloc.string.String.t) :=
                                                                                M.alloc
                                                                                  α13 in
                                                                              let*
                                                                                    α15 :
                                                                                  M.Val
                                                                                    alloc.string.String.t :=
                                                                                match_operator
                                                                                  α14
                                                                                  [
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            α0 :=
                                                                                        M.read
                                                                                          γ in
                                                                                      match
                                                                                        α0
                                                                                      with
                                                                                      |
                                                                                          core.ops.control_flow.ControlFlow.Break
                                                                                            _
                                                                                          =>
                                                                                        let
                                                                                              γ0_0 :=
                                                                                          core.ops.control_flow.ControlFlow.Get_Break_0
                                                                                            γ in
                                                                                        let*
                                                                                              residual :=
                                                                                          M.copy
                                                                                            γ0_0 in
                                                                                        let*
                                                                                              α0 :
                                                                                            (core.result.Result.t
                                                                                                core.convert.Infallible.t
                                                                                                (alloc.boxed.Box.t
                                                                                                  (dyn
                                                                                                    [core.error.Error.Trait])
                                                                                                  alloc.alloc.Global.t))
                                                                                              ->
                                                                                              M
                                                                                                (core.result.Result.t
                                                                                                  unit
                                                                                                  (alloc.boxed.Box.t
                                                                                                    (dyn
                                                                                                      [core.error.Error.Trait])
                                                                                                    alloc.alloc.Global.t)) :=
                                                                                          ltac:(M.get_method (fun ℐ =>
                                                                                            core.ops.try_trait.FromResidual.from_residual
                                                                                              (Self :=
                                                                                                core.result.Result.t
                                                                                                  unit
                                                                                                  (alloc.boxed.Box.t
                                                                                                    (dyn
                                                                                                      [core.error.Error.Trait])
                                                                                                    alloc.alloc.Global.t))
                                                                                              (R :=
                                                                                                core.result.Result.t
                                                                                                  core.convert.Infallible.t
                                                                                                  (alloc.boxed.Box.t
                                                                                                    (dyn
                                                                                                      [core.error.Error.Trait])
                                                                                                    alloc.alloc.Global.t))
                                                                                              (Trait := ℐ))) in
                                                                                        let*
                                                                                              α1 :
                                                                                            core.result.Result.t
                                                                                              core.convert.Infallible.t
                                                                                              (alloc.boxed.Box.t
                                                                                                (dyn
                                                                                                  [core.error.Error.Trait])
                                                                                                alloc.alloc.Global.t) :=
                                                                                          M.read
                                                                                            residual in
                                                                                        let*
                                                                                              α2 :
                                                                                            core.result.Result.t
                                                                                              unit
                                                                                              (alloc.boxed.Box.t
                                                                                                (dyn
                                                                                                  [core.error.Error.Trait])
                                                                                                alloc.alloc.Global.t) :=
                                                                                          M.call
                                                                                            (α0
                                                                                              α1) in
                                                                                        let*
                                                                                              α3 :
                                                                                            M.Val
                                                                                              never.t :=
                                                                                          return_
                                                                                            α2 in
                                                                                        let*
                                                                                              α4 :=
                                                                                          M.read
                                                                                            α3 in
                                                                                        let*
                                                                                              α5 :
                                                                                            alloc.string.String.t :=
                                                                                          never_to_any
                                                                                            α4 in
                                                                                        M.alloc
                                                                                          α5
                                                                                      |
                                                                                          _
                                                                                          =>
                                                                                        M.break_match
                                                                                      end) :
                                                                                      M
                                                                                        (M.Val
                                                                                          alloc.string.String.t);
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            α0 :=
                                                                                        M.read
                                                                                          γ in
                                                                                      match
                                                                                        α0
                                                                                      with
                                                                                      |
                                                                                          core.ops.control_flow.ControlFlow.Continue
                                                                                            _
                                                                                          =>
                                                                                        let
                                                                                              γ0_0 :=
                                                                                          core.ops.control_flow.ControlFlow.Get_Continue_0
                                                                                            γ in
                                                                                        let*
                                                                                              val :=
                                                                                          M.copy
                                                                                            γ0_0 in
                                                                                        M.pure
                                                                                          val
                                                                                      |
                                                                                          _
                                                                                          =>
                                                                                        M.break_match
                                                                                      end) :
                                                                                      M
                                                                                        (M.Val
                                                                                          alloc.string.String.t)
                                                                                  ] in
                                                                              M.copy
                                                                                α15 in
                                                                            let*
                                                                                  _ :
                                                                                M.Val
                                                                                  unit :=
                                                                              let*
                                                                                    _ :
                                                                                  M.Val
                                                                                    unit :=
                                                                                let*
                                                                                      α0 :
                                                                                    ref
                                                                                      str.t :=
                                                                                  M.read
                                                                                    (mk_str
                                                                                      "LLM score: ") in
                                                                                let*
                                                                                      α1 :
                                                                                    ref
                                                                                      str.t :=
                                                                                  M.read
                                                                                    (mk_str
                                                                                      "
") in
                                                                                let*
                                                                                      α2 :
                                                                                    M.Val
                                                                                      (array
                                                                                        (ref
                                                                                          str.t)) :=
                                                                                  M.alloc
                                                                                    [
                                                                                      α0;
                                                                                      α1
                                                                                    ] in
                                                                                let*
                                                                                      α3 :
                                                                                    core.fmt.rt.Argument.t :=
                                                                                  M.call
                                                                                    (core.fmt.rt.Argument.t::["new_display"]
                                                                                      (borrow
                                                                                        llm_score)) in
                                                                                let*
                                                                                      α4 :
                                                                                    M.Val
                                                                                      (array
                                                                                        core.fmt.rt.Argument.t) :=
                                                                                  M.alloc
                                                                                    [
                                                                                      α3
                                                                                    ] in
                                                                                let*
                                                                                      α5 :
                                                                                    core.fmt.Arguments.t :=
                                                                                  M.call
                                                                                    (core.fmt.Arguments.t::["new_v1"]
                                                                                      (pointer_coercion
                                                                                        "Unsize"
                                                                                        (borrow
                                                                                          α2))
                                                                                      (pointer_coercion
                                                                                        "Unsize"
                                                                                        (borrow
                                                                                          α4))) in
                                                                                let*
                                                                                      α6 :
                                                                                    unit :=
                                                                                  M.call
                                                                                    (std.io.stdio._print
                                                                                      α5) in
                                                                                M.alloc
                                                                                  α6 in
                                                                              M.alloc
                                                                                tt in
                                                                            let*
                                                                                  end_time :
                                                                                M.Val
                                                                                  u64.t :=
                                                                              let*
                                                                                    α0 :
                                                                                  std.time.SystemTime.t :=
                                                                                M.call
                                                                                  std.time.SystemTime.t::["now"] in
                                                                              let*
                                                                                    α1 :
                                                                                  M.Val
                                                                                    std.time.SystemTime.t :=
                                                                                M.alloc
                                                                                  α0 in
                                                                              let*
                                                                                    α2 :
                                                                                  std.time.SystemTime.t :=
                                                                                M.read
                                                                                  std.time.UNIX_EPOCH in
                                                                              let*
                                                                                    α3 :
                                                                                  core.result.Result.t
                                                                                    core.time.Duration.t
                                                                                    std.time.SystemTimeError.t :=
                                                                                M.call
                                                                                  (std.time.SystemTime.t::["duration_since"]
                                                                                    (borrow
                                                                                      α1)
                                                                                    α2) in
                                                                              let*
                                                                                    α4 :
                                                                                  ref
                                                                                    str.t :=
                                                                                M.read
                                                                                  (mk_str
                                                                                    "Time went backwards") in
                                                                              let*
                                                                                    α5 :
                                                                                  core.time.Duration.t :=
                                                                                M.call
                                                                                  ((core.result.Result.t
                                                                                        core.time.Duration.t
                                                                                        std.time.SystemTimeError.t)::["expect"]
                                                                                    α3
                                                                                    α4) in
                                                                              let*
                                                                                    α6 :
                                                                                  M.Val
                                                                                    core.time.Duration.t :=
                                                                                M.alloc
                                                                                  α5 in
                                                                              let*
                                                                                    α7 :
                                                                                  u64.t :=
                                                                                M.call
                                                                                  (core.time.Duration.t::["as_secs"]
                                                                                    (borrow
                                                                                      α6)) in
                                                                              M.alloc
                                                                                α7 in
                                                                            let*
                                                                                  duration :
                                                                                M.Val
                                                                                  u64.t :=
                                                                              let*
                                                                                    α0 :
                                                                                  u64.t :=
                                                                                M.read
                                                                                  end_time in
                                                                              let*
                                                                                    α1 :
                                                                                  u64.t :=
                                                                                M.read
                                                                                  start_time in
                                                                              let*
                                                                                    α2 :
                                                                                  u64.t :=
                                                                                BinOp.Panic.sub
                                                                                  α0
                                                                                  α1 in
                                                                              M.alloc
                                                                                α2 in
                                                                            let*
                                                                                  _ :
                                                                                M.Val
                                                                                  unit :=
                                                                              let*
                                                                                    α0 :
                                                                                  (ref
                                                                                      (alloc.vec.Vec.t
                                                                                        serde_json.value.Value.t
                                                                                        alloc.alloc.Global.t))
                                                                                    ->
                                                                                    M
                                                                                      _ :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.iter.traits.collect.IntoIterator.into_iter
                                                                                    (Self :=
                                                                                      ref
                                                                                        (alloc.vec.Vec.t
                                                                                          serde_json.value.Value.t
                                                                                          alloc.alloc.Global.t))
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α1 :
                                                                                  mut_ref
                                                                                    assistants_benches.Step.t :=
                                                                                M.read
                                                                                  step in
                                                                              let*
                                                                                    α2 :
                                                                                  core.slice.iter.Iter.t
                                                                                    serde_json.value.Value.t :=
                                                                                M.call
                                                                                  (α0
                                                                                    (borrow
                                                                                      (assistants_benches.Step.Get_save_response_to_variable
                                                                                        (deref
                                                                                          α1)))) in
                                                                              let*
                                                                                    α3 :
                                                                                  M.Val
                                                                                    (core.slice.iter.Iter.t
                                                                                      serde_json.value.Value.t) :=
                                                                                M.alloc
                                                                                  α2 in
                                                                              let*
                                                                                    α4 :
                                                                                  M.Val
                                                                                    unit :=
                                                                                match_operator
                                                                                  α3
                                                                                  [
                                                                                    fun
                                                                                        γ =>
                                                                                      (let*
                                                                                            iter :=
                                                                                        M.copy
                                                                                          γ in
                                                                                      M.loop
                                                                                        (let*
                                                                                              _ :
                                                                                            M.Val
                                                                                              unit :=
                                                                                          let*
                                                                                                α0 :
                                                                                              (mut_ref
                                                                                                  (core.slice.iter.Iter.t
                                                                                                    serde_json.value.Value.t))
                                                                                                ->
                                                                                                M
                                                                                                  (core.option.Option.t
                                                                                                    _) :=
                                                                                            ltac:(M.get_method (fun ℐ =>
                                                                                              core.iter.traits.iterator.Iterator.next
                                                                                                (Self :=
                                                                                                  core.slice.iter.Iter.t
                                                                                                    serde_json.value.Value.t)
                                                                                                (Trait := ℐ))) in
                                                                                          let*
                                                                                                α1 :
                                                                                              core.option.Option.t
                                                                                                (ref
                                                                                                  serde_json.value.Value.t) :=
                                                                                            M.call
                                                                                              (α0
                                                                                                (borrow_mut
                                                                                                  iter)) in
                                                                                          let*
                                                                                                α2 :
                                                                                              M.Val
                                                                                                (core.option.Option.t
                                                                                                  (ref
                                                                                                    serde_json.value.Value.t)) :=
                                                                                            M.alloc
                                                                                              α1 in
                                                                                          match_operator
                                                                                            α2
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                (let*
                                                                                                      α0 :=
                                                                                                  M.read
                                                                                                    γ in
                                                                                                match
                                                                                                  α0
                                                                                                with
                                                                                                |
                                                                                                    core.option.Option.None
                                                                                                    =>
                                                                                                  let*
                                                                                                        α0 :
                                                                                                      M.Val
                                                                                                        never.t :=
                                                                                                    M.break in
                                                                                                  let*
                                                                                                        α1 :=
                                                                                                    M.read
                                                                                                      α0 in
                                                                                                  let*
                                                                                                        α2 :
                                                                                                      unit :=
                                                                                                    never_to_any
                                                                                                      α1 in
                                                                                                  M.alloc
                                                                                                    α2
                                                                                                |
                                                                                                    _
                                                                                                    =>
                                                                                                  M.break_match
                                                                                                end) :
                                                                                                M
                                                                                                  (M.Val
                                                                                                    unit);
                                                                                              fun
                                                                                                  γ =>
                                                                                                (let*
                                                                                                      α0 :=
                                                                                                  M.read
                                                                                                    γ in
                                                                                                match
                                                                                                  α0
                                                                                                with
                                                                                                |
                                                                                                    core.option.Option.Some
                                                                                                      _
                                                                                                    =>
                                                                                                  let
                                                                                                        γ0_0 :=
                                                                                                    core.option.Option.Get_Some_0
                                                                                                      γ in
                                                                                                  let*
                                                                                                        variable_to_save :=
                                                                                                    M.copy
                                                                                                      γ0_0 in
                                                                                                  let*
                                                                                                        variable_name :
                                                                                                      M.Val
                                                                                                        (ref
                                                                                                          str.t) :=
                                                                                                    let*
                                                                                                          α0 :
                                                                                                        (ref
                                                                                                            serde_json.value.Value.t)
                                                                                                          ->
                                                                                                          (ref
                                                                                                            str.t)
                                                                                                          ->
                                                                                                          M
                                                                                                            (ref
                                                                                                              _) :=
                                                                                                      ltac:(M.get_method (fun ℐ =>
                                                                                                        core.ops.index.Index.index
                                                                                                          (Self :=
                                                                                                            serde_json.value.Value.t)
                                                                                                          (Idx :=
                                                                                                            ref
                                                                                                              str.t)
                                                                                                          (Trait := ℐ))) in
                                                                                                    let*
                                                                                                          α1 :
                                                                                                        ref
                                                                                                          serde_json.value.Value.t :=
                                                                                                      M.read
                                                                                                        variable_to_save in
                                                                                                    let*
                                                                                                          α2 :
                                                                                                        ref
                                                                                                          str.t :=
                                                                                                      M.read
                                                                                                        (mk_str
                                                                                                          "type") in
                                                                                                    let*
                                                                                                          α3 :
                                                                                                        ref
                                                                                                          serde_json.value.Value.t :=
                                                                                                      M.call
                                                                                                        (α0
                                                                                                          α1
                                                                                                          α2) in
                                                                                                    let*
                                                                                                          α4 :
                                                                                                        core.option.Option.t
                                                                                                          (ref
                                                                                                            str.t) :=
                                                                                                      M.call
                                                                                                        (serde_json.value.Value.t::["as_str"]
                                                                                                          α3) in
                                                                                                    let*
                                                                                                          α5 :
                                                                                                        ref
                                                                                                          str.t :=
                                                                                                      M.call
                                                                                                        ((core.option.Option.t
                                                                                                              (ref
                                                                                                                str.t))::["unwrap"]
                                                                                                          α4) in
                                                                                                    M.alloc
                                                                                                      α5 in
                                                                                                  let*
                                                                                                        response_field_name :
                                                                                                      M.Val
                                                                                                        (ref
                                                                                                          str.t) :=
                                                                                                    let*
                                                                                                          α0 :
                                                                                                        (ref
                                                                                                            serde_json.value.Value.t)
                                                                                                          ->
                                                                                                          (ref
                                                                                                            str.t)
                                                                                                          ->
                                                                                                          M
                                                                                                            (ref
                                                                                                              _) :=
                                                                                                      ltac:(M.get_method (fun ℐ =>
                                                                                                        core.ops.index.Index.index
                                                                                                          (Self :=
                                                                                                            serde_json.value.Value.t)
                                                                                                          (Idx :=
                                                                                                            ref
                                                                                                              str.t)
                                                                                                          (Trait := ℐ))) in
                                                                                                    let*
                                                                                                          α1 :
                                                                                                        ref
                                                                                                          serde_json.value.Value.t :=
                                                                                                      M.read
                                                                                                        variable_to_save in
                                                                                                    let*
                                                                                                          α2 :
                                                                                                        ref
                                                                                                          str.t :=
                                                                                                      M.read
                                                                                                        (mk_str
                                                                                                          "name") in
                                                                                                    let*
                                                                                                          α3 :
                                                                                                        ref
                                                                                                          serde_json.value.Value.t :=
                                                                                                      M.call
                                                                                                        (α0
                                                                                                          α1
                                                                                                          α2) in
                                                                                                    let*
                                                                                                          α4 :
                                                                                                        core.option.Option.t
                                                                                                          (ref
                                                                                                            str.t) :=
                                                                                                      M.call
                                                                                                        (serde_json.value.Value.t::["as_str"]
                                                                                                          α3) in
                                                                                                    let*
                                                                                                          α5 :
                                                                                                        ref
                                                                                                          str.t :=
                                                                                                      M.call
                                                                                                        ((core.option.Option.t
                                                                                                              (ref
                                                                                                                str.t))::["unwrap"]
                                                                                                          α4) in
                                                                                                    M.alloc
                                                                                                      α5 in
                                                                                                  let*
                                                                                                        variable_value :
                                                                                                      M.Val
                                                                                                        alloc.string.String.t :=
                                                                                                    let*
                                                                                                          α0 :
                                                                                                        (ref
                                                                                                            serde_json.value.Value.t)
                                                                                                          ->
                                                                                                          M
                                                                                                            alloc.string.String.t :=
                                                                                                      ltac:(M.get_method (fun ℐ =>
                                                                                                        alloc.string.ToString.to_string
                                                                                                          (Self :=
                                                                                                            serde_json.value.Value.t)
                                                                                                          (Trait := ℐ))) in
                                                                                                    let*
                                                                                                          α1 :
                                                                                                        (ref
                                                                                                            serde_json.value.Value.t)
                                                                                                          ->
                                                                                                          M
                                                                                                            serde_json.value.Value.t :=
                                                                                                      ltac:(M.get_method (fun ℐ =>
                                                                                                        core.clone.Clone.clone
                                                                                                          (Self :=
                                                                                                            serde_json.value.Value.t)
                                                                                                          (Trait := ℐ))) in
                                                                                                    let*
                                                                                                          α2 :
                                                                                                        (ref
                                                                                                            serde_json.value.Value.t)
                                                                                                          ->
                                                                                                          (ref
                                                                                                            str.t)
                                                                                                          ->
                                                                                                          M
                                                                                                            (ref
                                                                                                              _) :=
                                                                                                      ltac:(M.get_method (fun ℐ =>
                                                                                                        core.ops.index.Index.index
                                                                                                          (Self :=
                                                                                                            serde_json.value.Value.t)
                                                                                                          (Idx :=
                                                                                                            ref
                                                                                                              str.t)
                                                                                                          (Trait := ℐ))) in
                                                                                                    let*
                                                                                                          α3 :
                                                                                                        ref
                                                                                                          str.t :=
                                                                                                      M.read
                                                                                                        response_field_name in
                                                                                                    let*
                                                                                                          α4 :
                                                                                                        ref
                                                                                                          serde_json.value.Value.t :=
                                                                                                      M.call
                                                                                                        (α2
                                                                                                          (borrow
                                                                                                            actual_response)
                                                                                                          α3) in
                                                                                                    let*
                                                                                                          α5 :
                                                                                                        serde_json.value.Value.t :=
                                                                                                      M.call
                                                                                                        (α1
                                                                                                          α4) in
                                                                                                    let*
                                                                                                          α6 :
                                                                                                        M.Val
                                                                                                          serde_json.value.Value.t :=
                                                                                                      M.alloc
                                                                                                        α5 in
                                                                                                    let*
                                                                                                          α7 :
                                                                                                        alloc.string.String.t :=
                                                                                                      M.call
                                                                                                        (α0
                                                                                                          (borrow
                                                                                                            α6)) in
                                                                                                    M.alloc
                                                                                                      α7 in
                                                                                                  let*
                                                                                                        _ :
                                                                                                      M.Val
                                                                                                        (core.option.Option.t
                                                                                                          alloc.string.String.t) :=
                                                                                                    let*
                                                                                                          α0 :
                                                                                                        (ref
                                                                                                            str.t)
                                                                                                          ->
                                                                                                          M
                                                                                                            alloc.string.String.t :=
                                                                                                      ltac:(M.get_method (fun ℐ =>
                                                                                                        alloc.string.ToString.to_string
                                                                                                          (Self :=
                                                                                                            str.t)
                                                                                                          (Trait := ℐ))) in
                                                                                                    let*
                                                                                                          α1 :
                                                                                                        ref
                                                                                                          str.t :=
                                                                                                      M.read
                                                                                                        variable_name in
                                                                                                    let*
                                                                                                          α2 :
                                                                                                        alloc.string.String.t :=
                                                                                                      M.call
                                                                                                        (α0
                                                                                                          α1) in
                                                                                                    let*
                                                                                                          α3 :
                                                                                                        alloc.string.String.t :=
                                                                                                      M.read
                                                                                                        variable_value in
                                                                                                    let*
                                                                                                          α4 :
                                                                                                        core.option.Option.t
                                                                                                          alloc.string.String.t :=
                                                                                                      M.call
                                                                                                        ((std.collections.hash.map.HashMap.t
                                                                                                              alloc.string.String.t
                                                                                                              alloc.string.String.t
                                                                                                              std.hash.random.RandomState.t)::["insert"]
                                                                                                          (borrow_mut
                                                                                                            variables)
                                                                                                          α2
                                                                                                          α3) in
                                                                                                    M.alloc
                                                                                                      α4 in
                                                                                                  M.alloc
                                                                                                    tt
                                                                                                |
                                                                                                    _
                                                                                                    =>
                                                                                                  M.break_match
                                                                                                end) :
                                                                                                M
                                                                                                  (M.Val
                                                                                                    unit)
                                                                                            ] in
                                                                                        M.alloc
                                                                                          tt)) :
                                                                                      M
                                                                                        (M.Val
                                                                                          unit)
                                                                                  ] in
                                                                              M.pure
                                                                                (use
                                                                                  α4) in
                                                                            let*
                                                                                  regex :
                                                                                M.Val
                                                                                  regex.regex.string.Regex.t :=
                                                                              let*
                                                                                    α0 :
                                                                                  ref
                                                                                    str.t :=
                                                                                M.read
                                                                                  (mk_str
                                                                                    "(\d+)\s*$") in
                                                                              let*
                                                                                    α1 :
                                                                                  core.result.Result.t
                                                                                    regex.regex.string.Regex.t
                                                                                    regex.error.Error.t :=
                                                                                M.call
                                                                                  (regex.regex.string.Regex.t::["new"]
                                                                                    α0) in
                                                                              let*
                                                                                    α2 :
                                                                                  regex.regex.string.Regex.t :=
                                                                                M.call
                                                                                  ((core.result.Result.t
                                                                                        regex.regex.string.Regex.t
                                                                                        regex.error.Error.t)::["unwrap"]
                                                                                    α1) in
                                                                              M.alloc
                                                                                α2 in
                                                                            let*
                                                                                  llm_score :
                                                                                M.Val
                                                                                  (core.option.Option.t
                                                                                    f64.t) :=
                                                                              let*
                                                                                    α0 :
                                                                                  regex.regex.string.CaptureMatches.t
                                                                                    ->
                                                                                    M
                                                                                      (core.option.Option.t
                                                                                        _) :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.iter.traits.iterator.Iterator.last
                                                                                    (Self :=
                                                                                      regex.regex.string.CaptureMatches.t)
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α1 :
                                                                                  ref
                                                                                    str.t :=
                                                                                M.call
                                                                                  (alloc.string.String.t::["as_str"]
                                                                                    (borrow
                                                                                      llm_score)) in
                                                                              let*
                                                                                    α2 :
                                                                                  regex.regex.string.CaptureMatches.t :=
                                                                                M.call
                                                                                  (regex.regex.string.Regex.t::["captures_iter"]
                                                                                    (borrow
                                                                                      regex)
                                                                                    α1) in
                                                                              let*
                                                                                    α3 :
                                                                                  core.option.Option.t
                                                                                    regex.regex.string.Captures.t :=
                                                                                M.call
                                                                                  (α0
                                                                                    α2) in
                                                                              let*
                                                                                    α4 :
                                                                                  core.option.Option.t
                                                                                    f64.t :=
                                                                                M.call
                                                                                  ((core.option.Option.t
                                                                                        regex.regex.string.Captures.t)::["and_then"]
                                                                                    α3
                                                                                    (fun
                                                                                        (α0 :
                                                                                          regex.regex.string.Captures.t) =>
                                                                                      (let*
                                                                                            α0 :=
                                                                                        M.alloc
                                                                                          α0 in
                                                                                      match_operator
                                                                                        α0
                                                                                        [
                                                                                          fun
                                                                                              γ =>
                                                                                            (let*
                                                                                                  cap :=
                                                                                              M.copy
                                                                                                γ in
                                                                                            let*
                                                                                                  α0 :
                                                                                                core.option.Option.t
                                                                                                  regex.regex.string.Match.t :=
                                                                                              M.call
                                                                                                (regex.regex.string.Captures.t::["get"]
                                                                                                  (borrow
                                                                                                    cap)
                                                                                                  ((Integer.of_Z
                                                                                                      1) :
                                                                                                    usize.t)) in
                                                                                            M.call
                                                                                              ((core.option.Option.t
                                                                                                    regex.regex.string.Match.t)::["map"]
                                                                                                α0
                                                                                                (fun
                                                                                                    (α0 :
                                                                                                      regex.regex.string.Match.t) =>
                                                                                                  (let*
                                                                                                        α0 :=
                                                                                                    M.alloc
                                                                                                      α0 in
                                                                                                  match_operator
                                                                                                    α0
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        (let*
                                                                                                              m :=
                                                                                                          M.copy
                                                                                                            γ in
                                                                                                        let*
                                                                                                              α0 :
                                                                                                            ref
                                                                                                              str.t :=
                                                                                                          M.call
                                                                                                            (regex.regex.string.Match.t::["as_str"]
                                                                                                              (borrow
                                                                                                                m)) in
                                                                                                        let*
                                                                                                              α1 :
                                                                                                            core.result.Result.t
                                                                                                              f64.t
                                                                                                              core.num.dec2flt.ParseFloatError.t :=
                                                                                                          M.call
                                                                                                            (str.t::["parse"]
                                                                                                              α0) in
                                                                                                        M.call
                                                                                                          ((core.result.Result.t
                                                                                                                f64.t
                                                                                                                core.num.dec2flt.ParseFloatError.t)::["unwrap"]
                                                                                                            α1)) :
                                                                                                        M
                                                                                                          f64.t
                                                                                                    ]) :
                                                                                                  M
                                                                                                    f64.t))) :
                                                                                            M
                                                                                              (core.option.Option.t
                                                                                                f64.t)
                                                                                        ]) :
                                                                                      M
                                                                                        (core.option.Option.t
                                                                                          f64.t))) in
                                                                              M.alloc
                                                                                α4 in
                                                                            let*
                                                                                  _ :
                                                                                M.Val
                                                                                  unit :=
                                                                              let*
                                                                                    α0 :
                                                                                  (ref
                                                                                      alloc.string.String.t)
                                                                                    ->
                                                                                    M
                                                                                      alloc.string.String.t :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.clone.Clone.clone
                                                                                    (Self :=
                                                                                      alloc.string.String.t)
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α1 :
                                                                                  mut_ref
                                                                                    assistants_benches.Step.t :=
                                                                                M.read
                                                                                  step in
                                                                              let*
                                                                                    α2 :
                                                                                  alloc.string.String.t :=
                                                                                M.call
                                                                                  (α0
                                                                                    (borrow
                                                                                      (assistants_benches.Step.Get_endpoint
                                                                                        (deref
                                                                                          α1)))) in
                                                                              let*
                                                                                    α3 :
                                                                                  (ref
                                                                                      alloc.string.String.t)
                                                                                    ->
                                                                                    M
                                                                                      alloc.string.String.t :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.clone.Clone.clone
                                                                                    (Self :=
                                                                                      alloc.string.String.t)
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α4 :
                                                                                  mut_ref
                                                                                    assistants_benches.Step.t :=
                                                                                M.read
                                                                                  step in
                                                                              let*
                                                                                    α5 :
                                                                                  alloc.string.String.t :=
                                                                                M.call
                                                                                  (α3
                                                                                    (borrow
                                                                                      (assistants_benches.Step.Get_method
                                                                                        (deref
                                                                                          α4)))) in
                                                                              let*
                                                                                    α6 :
                                                                                  (ref
                                                                                      serde_json.value.Value.t)
                                                                                    ->
                                                                                    M
                                                                                      serde_json.value.Value.t :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.clone.Clone.clone
                                                                                    (Self :=
                                                                                      serde_json.value.Value.t)
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α7 :
                                                                                  mut_ref
                                                                                    assistants_benches.Step.t :=
                                                                                M.read
                                                                                  step in
                                                                              let*
                                                                                    α8 :
                                                                                  serde_json.value.Value.t :=
                                                                                M.call
                                                                                  (α6
                                                                                    (borrow
                                                                                      (assistants_benches.Step.Get_request
                                                                                        (deref
                                                                                          α7)))) in
                                                                              let*
                                                                                    α9 :
                                                                                  (ref
                                                                                      serde_json.value.Value.t)
                                                                                    ->
                                                                                    M
                                                                                      serde_json.value.Value.t :=
                                                                                ltac:(M.get_method (fun ℐ =>
                                                                                  core.clone.Clone.clone
                                                                                    (Self :=
                                                                                      serde_json.value.Value.t)
                                                                                    (Trait := ℐ))) in
                                                                              let*
                                                                                    α10 :
                                                                                  mut_ref
                                                                                    assistants_benches.Step.t :=
                                                                                M.read
                                                                                  step in
                                                                              let*
                                                                                    α11 :
                                                                                  serde_json.value.Value.t :=
                                                                                M.call
                                                                                  (α9
                                                                                    (borrow
                                                                                      (assistants_benches.Step.Get_expected_response
                                                                                        (deref
                                                                                          α10)))) in
                                                                              let*
                                                                                    α12 :
                                                                                  core.option.Option.t
                                                                                    f64.t :=
                                                                                M.read
                                                                                  llm_score in
                                                                              let*
                                                                                    α13 :
                                                                                  u64.t :=
                                                                                M.read
                                                                                  start_time in
                                                                              let*
                                                                                    α14 :
                                                                                  u64.t :=
                                                                                M.read
                                                                                  end_time in
                                                                              let*
                                                                                    α15 :
                                                                                  u64.t :=
                                                                                M.read
                                                                                  duration in
                                                                              let*
                                                                                    α16 :
                                                                                  unit :=
                                                                                M.call
                                                                                  ((alloc.vec.Vec.t
                                                                                        assistants_benches.ScoredStep.t
                                                                                        alloc.alloc.Global.t)::["push"]
                                                                                    (borrow_mut
                                                                                      scored_steps)
                                                                                    {|
                                                                                      assistants_benches.ScoredStep.endpoint :=
                                                                                        α2;
                                                                                      assistants_benches.ScoredStep.method :=
                                                                                        α5;
                                                                                      assistants_benches.ScoredStep.request :=
                                                                                        α8;
                                                                                      assistants_benches.ScoredStep.expected_response :=
                                                                                        α11;
                                                                                      assistants_benches.ScoredStep.score :=
                                                                                        α12;
                                                                                      assistants_benches.ScoredStep.start_time :=
                                                                                        α13;
                                                                                      assistants_benches.ScoredStep.end_time :=
                                                                                        α14;
                                                                                      assistants_benches.ScoredStep.duration :=
                                                                                        α15;
                                                                                    |}) in
                                                                              M.alloc
                                                                                α16 in
                                                                            M.alloc
                                                                              tt
                                                                          | _ =>
                                                                            M.break_match
                                                                          end) :
                                                                          M
                                                                            (M.Val
                                                                              unit)
                                                                      ] in
                                                                  M.alloc tt)) :
                                                                M (M.Val unit)
                                                            ] in
                                                        M.pure (use α3) in
                                                      let* _ : M.Val unit :=
                                                        let* α0 :
                                                            (mut_ref
                                                                (alloc.vec.Vec.t
                                                                  assistants_benches.ScoredStep.t
                                                                  alloc.alloc.Global.t))
                                                              ->
                                                              (alloc.vec.Vec.t
                                                                assistants_benches.ScoredStep.t
                                                                alloc.alloc.Global.t)
                                                              ->
                                                              M unit :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.iter.traits.collect.Extend.extend
                                                              (Self :=
                                                                alloc.vec.Vec.t
                                                                  assistants_benches.ScoredStep.t
                                                                  alloc.alloc.Global.t)
                                                              (A :=
                                                                assistants_benches.ScoredStep.t)
                                                              (T :=
                                                                alloc.vec.Vec.t
                                                                  assistants_benches.ScoredStep.t
                                                                  alloc.alloc.Global.t)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            (ref
                                                                alloc.string.String.t)
                                                              ->
                                                              M
                                                                alloc.string.String.t :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            alloc.string.ToString.to_string
                                                              (Self :=
                                                                alloc.string.String.t)
                                                              (Trait := ℐ))) in
                                                        let* α2 :
                                                            ref
                                                              alloc.string.String.t :=
                                                          M.read model in
                                                        let* α3 :
                                                            alloc.string.String.t :=
                                                          M.call (α1 α2) in
                                                        let* α4 :
                                                            std.collections.hash.map.Entry.t
                                                              alloc.string.String.t
                                                              (alloc.vec.Vec.t
                                                                assistants_benches.ScoredStep.t
                                                                alloc.alloc.Global.t) :=
                                                          M.call
                                                            ((std.collections.hash.map.HashMap.t
                                                                  alloc.string.String.t
                                                                  (alloc.vec.Vec.t
                                                                    assistants_benches.ScoredStep.t
                                                                    alloc.alloc.Global.t)
                                                                  std.hash.random.RandomState.t)::["entry"]
                                                              (borrow_mut
                                                                scored_test_cases)
                                                              α3) in
                                                        let* α5 :
                                                            mut_ref
                                                              (alloc.vec.Vec.t
                                                                assistants_benches.ScoredStep.t
                                                                alloc.alloc.Global.t) :=
                                                          M.call
                                                            ((std.collections.hash.map.Entry.t
                                                                  alloc.string.String.t
                                                                  (alloc.vec.Vec.t
                                                                    assistants_benches.ScoredStep.t
                                                                    alloc.alloc.Global.t))::["or_insert_with"]
                                                              α4
                                                              (alloc.vec.Vec.t
                                                                  assistants_benches.ScoredStep.t
                                                                  alloc.alloc.Global.t)::["new"]) in
                                                        let* α6 :
                                                            alloc.vec.Vec.t
                                                              assistants_benches.ScoredStep.t
                                                              alloc.alloc.Global.t :=
                                                          M.read scored_steps in
                                                        let* α7 : unit :=
                                                          M.call (α0 α5 α6) in
                                                        M.alloc α7 in
                                                      let* start :
                                                          M.Val
                                                            std.time.SystemTime.t :=
                                                        let* α0 :
                                                            std.time.SystemTime.t :=
                                                          M.call
                                                            std.time.SystemTime.t::["now"] in
                                                        M.alloc α0 in
                                                      let* since_the_epoch :
                                                          M.Val
                                                            core.time.Duration.t :=
                                                        let* α0 :
                                                            std.time.SystemTime.t :=
                                                          M.read
                                                            std.time.UNIX_EPOCH in
                                                        let* α1 :
                                                            core.result.Result.t
                                                              core.time.Duration.t
                                                              std.time.SystemTimeError.t :=
                                                          M.call
                                                            (std.time.SystemTime.t::["duration_since"]
                                                              (borrow start)
                                                              α0) in
                                                        let* α2 :
                                                            core.time.Duration.t :=
                                                          M.call
                                                            ((core.result.Result.t
                                                                  core.time.Duration.t
                                                                  std.time.SystemTimeError.t)::["unwrap"]
                                                              α1) in
                                                        M.alloc α2 in
                                                      let* timestamp :
                                                          M.Val u64.t :=
                                                        let* α0 : u64.t :=
                                                          M.call
                                                            (core.time.Duration.t::["as_secs"]
                                                              (borrow
                                                                since_the_epoch)) in
                                                        M.alloc α0 in
                                                      let* path :
                                                          M.Val
                                                            std.path.PathBuf.t :=
                                                        let* α0 :
                                                            core.result.Result.t
                                                              std.path.PathBuf.t
                                                              std.io.error.Error.t :=
                                                          M.call
                                                            std.env.current_dir in
                                                        let* α1 :
                                                            std.path.PathBuf.t :=
                                                          M.call
                                                            ((core.result.Result.t
                                                                  std.path.PathBuf.t
                                                                  std.io.error.Error.t)::["unwrap"]
                                                              α0) in
                                                        M.alloc α1 in
                                                      let* path_parent :
                                                          M.Val
                                                            alloc.string.String.t :=
                                                        let* α0 :
                                                            (ref
                                                                std.path.Display.t)
                                                              ->
                                                              M
                                                                alloc.string.String.t :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            alloc.string.ToString.to_string
                                                              (Self :=
                                                                std.path.Display.t)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            (ref
                                                                std.path.PathBuf.t)
                                                              ->
                                                              M (ref _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.ops.deref.Deref.deref
                                                              (Self :=
                                                                std.path.PathBuf.t)
                                                              (Trait := ℐ))) in
                                                        let* α2 :
                                                            ref
                                                              std.path.Path.t :=
                                                          M.call
                                                            (α1
                                                              (borrow path)) in
                                                        let* α3 :
                                                            std.path.Display.t :=
                                                          M.call
                                                            (std.path.Path.t::["display"]
                                                              α2) in
                                                        let* α4 :
                                                            M.Val
                                                              std.path.Display.t :=
                                                          M.alloc α3 in
                                                        let* α5 :
                                                            alloc.string.String.t :=
                                                          M.call
                                                            (α0 (borrow α4)) in
                                                        M.alloc α5 in
                                                      let* _ : M.Val unit :=
                                                        let* α0 :
                                                            (ref
                                                                alloc.string.String.t)
                                                              ->
                                                              M (ref _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.ops.deref.Deref.deref
                                                              (Self :=
                                                                alloc.string.String.t)
                                                              (Trait := ℐ))) in
                                                        let* α1 : ref str.t :=
                                                          M.call
                                                            (α0
                                                              (borrow
                                                                path_parent)) in
                                                        let* α2 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "assistants-benches") in
                                                        let* α3 : bool.t :=
                                                          M.call
                                                            (str.t::["contains"]
                                                              α1
                                                              α2) in
                                                        let* α4 :
                                                            M.Val bool.t :=
                                                          M.alloc
                                                            (UnOp.not α3) in
                                                        let* α5 : bool.t :=
                                                          M.read (use α4) in
                                                        if α5 then
                                                          let* _ : M.Val unit :=
                                                            let* res :
                                                                M.Val
                                                                  alloc.string.String.t :=
                                                              let* α0 :
                                                                  ref str.t :=
                                                                M.read
                                                                  (mk_str "") in
                                                              let* α1 :
                                                                  ref str.t :=
                                                                M.read
                                                                  (mk_str
                                                                    "/assistants-benches") in
                                                              let* α2 :
                                                                  M.Val
                                                                    (array
                                                                      (ref
                                                                        str.t)) :=
                                                                M.alloc
                                                                  [ α0; α1 ] in
                                                              let* α3 :
                                                                  core.fmt.rt.Argument.t :=
                                                                M.call
                                                                  (core.fmt.rt.Argument.t::["new_display"]
                                                                    (borrow
                                                                      path_parent)) in
                                                              let* α4 :
                                                                  M.Val
                                                                    (array
                                                                      core.fmt.rt.Argument.t) :=
                                                                M.alloc
                                                                  [ α3 ] in
                                                              let* α5 :
                                                                  core.fmt.Arguments.t :=
                                                                M.call
                                                                  (core.fmt.Arguments.t::["new_v1"]
                                                                    (pointer_coercion
                                                                      "Unsize"
                                                                      (borrow
                                                                        α2))
                                                                    (pointer_coercion
                                                                      "Unsize"
                                                                      (borrow
                                                                        α4))) in
                                                              let* α6 :
                                                                  alloc.string.String.t :=
                                                                M.call
                                                                  (alloc.fmt.format
                                                                    α5) in
                                                              M.alloc α6 in
                                                            let* α0 :
                                                                alloc.string.String.t :=
                                                              M.read res in
                                                            assign
                                                              path_parent
                                                              α0 in
                                                          M.alloc tt
                                                        else
                                                          M.alloc tt in
                                                      let* dir :
                                                          M.Val
                                                            alloc.string.String.t :=
                                                        let* res :
                                                            M.Val
                                                              alloc.string.String.t :=
                                                          let* α0 : ref str.t :=
                                                            M.read
                                                              (mk_str "") in
                                                          let* α1 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                "/results") in
                                                          let* α2 :
                                                              M.Val
                                                                (array
                                                                  (ref
                                                                    str.t)) :=
                                                            M.alloc
                                                              [ α0; α1 ] in
                                                          let* α3 :
                                                              core.fmt.rt.Argument.t :=
                                                            M.call
                                                              (core.fmt.rt.Argument.t::["new_display"]
                                                                (borrow
                                                                  path_parent)) in
                                                          let* α4 :
                                                              M.Val
                                                                (array
                                                                  core.fmt.rt.Argument.t) :=
                                                            M.alloc [ α3 ] in
                                                          let* α5 :
                                                              core.fmt.Arguments.t :=
                                                            M.call
                                                              (core.fmt.Arguments.t::["new_v1"]
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow α2))
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow
                                                                    α4))) in
                                                          let* α6 :
                                                              alloc.string.String.t :=
                                                            M.call
                                                              (alloc.fmt.format
                                                                α5) in
                                                          M.alloc α6 in
                                                        M.copy res in
                                                      let* _ : M.Val unit :=
                                                        let* α0 :
                                                            (core.result.Result.t
                                                                unit
                                                                std.io.error.Error.t)
                                                              ->
                                                              M
                                                                (core.ops.control_flow.ControlFlow.t
                                                                  _
                                                                  _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.ops.try_trait.Try.branch
                                                              (Self :=
                                                                core.result.Result.t
                                                                  unit
                                                                  std.io.error.Error.t)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            core.result.Result.t
                                                              unit
                                                              std.io.error.Error.t :=
                                                          M.call
                                                            (std.fs.create_dir_all
                                                              (borrow dir)) in
                                                        let* α2 :
                                                            core.ops.control_flow.ControlFlow.t
                                                              (core.result.Result.t
                                                                core.convert.Infallible.t
                                                                std.io.error.Error.t)
                                                              unit :=
                                                          M.call (α0 α1) in
                                                        let* α3 :
                                                            M.Val
                                                              (core.ops.control_flow.ControlFlow.t
                                                                (core.result.Result.t
                                                                  core.convert.Infallible.t
                                                                  std.io.error.Error.t)
                                                                unit) :=
                                                          M.alloc α2 in
                                                        match_operator
                                                          α3
                                                          [
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.ops.control_flow.ControlFlow.Break
                                                                    _
                                                                  =>
                                                                let γ0_0 :=
                                                                  core.ops.control_flow.ControlFlow.Get_Break_0
                                                                    γ in
                                                                let* residual :=
                                                                  M.copy γ0_0 in
                                                                let* α0 :
                                                                    (core.result.Result.t
                                                                        core.convert.Infallible.t
                                                                        std.io.error.Error.t)
                                                                      ->
                                                                      M
                                                                        (core.result.Result.t
                                                                          unit
                                                                          (alloc.boxed.Box.t
                                                                            (dyn
                                                                              [core.error.Error.Trait])
                                                                            alloc.alloc.Global.t)) :=
                                                                  ltac:(M.get_method (fun ℐ =>
                                                                    core.ops.try_trait.FromResidual.from_residual
                                                                      (Self :=
                                                                        core.result.Result.t
                                                                          unit
                                                                          (alloc.boxed.Box.t
                                                                            (dyn
                                                                              [core.error.Error.Trait])
                                                                            alloc.alloc.Global.t))
                                                                      (R :=
                                                                        core.result.Result.t
                                                                          core.convert.Infallible.t
                                                                          std.io.error.Error.t)
                                                                      (Trait := ℐ))) in
                                                                let* α1 :
                                                                    core.result.Result.t
                                                                      core.convert.Infallible.t
                                                                      std.io.error.Error.t :=
                                                                  M.read
                                                                    residual in
                                                                let* α2 :
                                                                    core.result.Result.t
                                                                      unit
                                                                      (alloc.boxed.Box.t
                                                                        (dyn
                                                                          [core.error.Error.Trait])
                                                                        alloc.alloc.Global.t) :=
                                                                  M.call
                                                                    (α0 α1) in
                                                                let* α3 :
                                                                    M.Val
                                                                      never.t :=
                                                                  return_ α2 in
                                                                let* α4 :=
                                                                  M.read α3 in
                                                                let* α5 :
                                                                    unit :=
                                                                  never_to_any
                                                                    α4 in
                                                                M.alloc α5
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit);
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.ops.control_flow.ControlFlow.Continue
                                                                    _
                                                                  =>
                                                                let γ0_0 :=
                                                                  core.ops.control_flow.ControlFlow.Get_Continue_0
                                                                    γ in
                                                                let* val :=
                                                                  M.copy γ0_0 in
                                                                M.pure val
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit)
                                                          ] in
                                                      let* new_filename :
                                                          M.Val
                                                            alloc.string.String.t :=
                                                        let* res :
                                                            M.Val
                                                              alloc.string.String.t :=
                                                          let* α0 : ref str.t :=
                                                            M.read
                                                              (mk_str "") in
                                                          let* α1 : ref str.t :=
                                                            M.read
                                                              (mk_str "/") in
                                                          let* α2 : ref str.t :=
                                                            M.read
                                                              (mk_str "_") in
                                                          let* α3 : ref str.t :=
                                                            M.read
                                                              (mk_str
                                                                ".json") in
                                                          let* α4 :
                                                              M.Val
                                                                (array
                                                                  (ref
                                                                    str.t)) :=
                                                            M.alloc
                                                              [ α0; α1; α2; α3
                                                              ] in
                                                          let* α5 :
                                                              core.fmt.rt.Argument.t :=
                                                            M.call
                                                              (core.fmt.rt.Argument.t::["new_display"]
                                                                (borrow dir)) in
                                                          let* α6 :
                                                              (core.str.iter.Split.t
                                                                  (ref str.t))
                                                                ->
                                                                M
                                                                  (core.option.Option.t
                                                                    _) :=
                                                            ltac:(M.get_method (fun ℐ =>
                                                              core.iter.traits.iterator.Iterator.last
                                                                (Self :=
                                                                  core.str.iter.Split.t
                                                                    (ref str.t))
                                                                (Trait := ℐ))) in
                                                          let* α7 : ref str.t :=
                                                            M.read filename in
                                                          let* α8 : ref str.t :=
                                                            M.read
                                                              (mk_str "/") in
                                                          let* α9 :
                                                              core.str.iter.Split.t
                                                                (ref str.t) :=
                                                            M.call
                                                              (str.t::["split"]
                                                                α7
                                                                α8) in
                                                          let* α10 :
                                                              core.option.Option.t
                                                                (ref str.t) :=
                                                            M.call (α6 α9) in
                                                          let* α11 :
                                                              ref str.t :=
                                                            M.call
                                                              ((core.option.Option.t
                                                                    (ref
                                                                      str.t))::["unwrap"]
                                                                α10) in
                                                          let* α12 :
                                                              M.Val
                                                                (ref str.t) :=
                                                            M.alloc α11 in
                                                          let* α13 :
                                                              core.fmt.rt.Argument.t :=
                                                            M.call
                                                              (core.fmt.rt.Argument.t::["new_display"]
                                                                (borrow α12)) in
                                                          let* α14 :
                                                              core.fmt.rt.Argument.t :=
                                                            M.call
                                                              (core.fmt.rt.Argument.t::["new_display"]
                                                                (borrow
                                                                  timestamp)) in
                                                          let* α15 :
                                                              M.Val
                                                                (array
                                                                  core.fmt.rt.Argument.t) :=
                                                            M.alloc
                                                              [ α5; α13; α14
                                                              ] in
                                                          let* α16 :
                                                              core.fmt.Arguments.t :=
                                                            M.call
                                                              (core.fmt.Arguments.t::["new_v1"]
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow α4))
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow
                                                                    α15))) in
                                                          let* α17 :
                                                              alloc.string.String.t :=
                                                            M.call
                                                              (alloc.fmt.format
                                                                α16) in
                                                          M.alloc α17 in
                                                        M.copy res in
                                                      let* file :
                                                          M.Val std.fs.File.t :=
                                                        let* α0 :
                                                            (core.result.Result.t
                                                                std.fs.File.t
                                                                std.io.error.Error.t)
                                                              ->
                                                              M
                                                                (core.ops.control_flow.ControlFlow.t
                                                                  _
                                                                  _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.ops.try_trait.Try.branch
                                                              (Self :=
                                                                core.result.Result.t
                                                                  std.fs.File.t
                                                                  std.io.error.Error.t)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            std.fs.OpenOptions.t :=
                                                          M.call
                                                            std.fs.OpenOptions.t::["new"] in
                                                        let* α2 :
                                                            M.Val
                                                              std.fs.OpenOptions.t :=
                                                          M.alloc α1 in
                                                        let* α3 :
                                                            mut_ref
                                                              std.fs.OpenOptions.t :=
                                                          M.call
                                                            (std.fs.OpenOptions.t::["write"]
                                                              (borrow_mut α2)
                                                              true) in
                                                        let* α4 :
                                                            mut_ref
                                                              std.fs.OpenOptions.t :=
                                                          M.call
                                                            (std.fs.OpenOptions.t::["create"]
                                                              α3
                                                              true) in
                                                        let* α5 :
                                                            alloc.string.String.t :=
                                                          M.read new_filename in
                                                        let* α6 :
                                                            core.result.Result.t
                                                              std.fs.File.t
                                                              std.io.error.Error.t :=
                                                          M.call
                                                            (std.fs.OpenOptions.t::["open"]
                                                              (borrow
                                                                (deref α4))
                                                              α5) in
                                                        let* α7 :
                                                            core.ops.control_flow.ControlFlow.t
                                                              (core.result.Result.t
                                                                core.convert.Infallible.t
                                                                std.io.error.Error.t)
                                                              std.fs.File.t :=
                                                          M.call (α0 α6) in
                                                        let* α8 :
                                                            M.Val
                                                              (core.ops.control_flow.ControlFlow.t
                                                                (core.result.Result.t
                                                                  core.convert.Infallible.t
                                                                  std.io.error.Error.t)
                                                                std.fs.File.t) :=
                                                          M.alloc α7 in
                                                        let* α9 :
                                                            M.Val
                                                              std.fs.File.t :=
                                                          match_operator
                                                            α8
                                                            [
                                                              fun γ =>
                                                                (let* α0 :=
                                                                  M.read γ in
                                                                match α0 with
                                                                |
                                                                    core.ops.control_flow.ControlFlow.Break
                                                                      _
                                                                    =>
                                                                  let γ0_0 :=
                                                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                                                      γ in
                                                                  let*
                                                                        residual :=
                                                                    M.copy
                                                                      γ0_0 in
                                                                  let* α0 :
                                                                      (core.result.Result.t
                                                                          core.convert.Infallible.t
                                                                          std.io.error.Error.t)
                                                                        ->
                                                                        M
                                                                          (core.result.Result.t
                                                                            unit
                                                                            (alloc.boxed.Box.t
                                                                              (dyn
                                                                                [core.error.Error.Trait])
                                                                              alloc.alloc.Global.t)) :=
                                                                    ltac:(M.get_method (fun ℐ =>
                                                                      core.ops.try_trait.FromResidual.from_residual
                                                                        (Self :=
                                                                          core.result.Result.t
                                                                            unit
                                                                            (alloc.boxed.Box.t
                                                                              (dyn
                                                                                [core.error.Error.Trait])
                                                                              alloc.alloc.Global.t))
                                                                        (R :=
                                                                          core.result.Result.t
                                                                            core.convert.Infallible.t
                                                                            std.io.error.Error.t)
                                                                        (Trait := ℐ))) in
                                                                  let* α1 :
                                                                      core.result.Result.t
                                                                        core.convert.Infallible.t
                                                                        std.io.error.Error.t :=
                                                                    M.read
                                                                      residual in
                                                                  let* α2 :
                                                                      core.result.Result.t
                                                                        unit
                                                                        (alloc.boxed.Box.t
                                                                          (dyn
                                                                            [core.error.Error.Trait])
                                                                          alloc.alloc.Global.t) :=
                                                                    M.call
                                                                      (α0 α1) in
                                                                  let* α3 :
                                                                      M.Val
                                                                        never.t :=
                                                                    return_
                                                                      α2 in
                                                                  let* α4 :=
                                                                    M.read α3 in
                                                                  let* α5 :
                                                                      std.fs.File.t :=
                                                                    never_to_any
                                                                      α4 in
                                                                  M.alloc α5
                                                                | _ =>
                                                                  M.break_match
                                                                end) :
                                                                M
                                                                  (M.Val
                                                                    std.fs.File.t);
                                                              fun γ =>
                                                                (let* α0 :=
                                                                  M.read γ in
                                                                match α0 with
                                                                |
                                                                    core.ops.control_flow.ControlFlow.Continue
                                                                      _
                                                                    =>
                                                                  let γ0_0 :=
                                                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                                                      γ in
                                                                  let* val :=
                                                                    M.copy
                                                                      γ0_0 in
                                                                  M.pure val
                                                                | _ =>
                                                                  M.break_match
                                                                end) :
                                                                M
                                                                  (M.Val
                                                                    std.fs.File.t)
                                                            ] in
                                                        M.copy α9 in
                                                      let* _ : M.Val unit :=
                                                        let* α0 :
                                                            (core.result.Result.t
                                                                unit
                                                                std.io.error.Error.t)
                                                              ->
                                                              M
                                                                (core.ops.control_flow.ControlFlow.t
                                                                  _
                                                                  _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.ops.try_trait.Try.branch
                                                              (Self :=
                                                                core.result.Result.t
                                                                  unit
                                                                  std.io.error.Error.t)
                                                              (Trait := ℐ))) in
                                                        let* α1 :
                                                            (mut_ref
                                                                std.fs.File.t)
                                                              ->
                                                              (ref (slice u8.t))
                                                              ->
                                                              M
                                                                (core.result.Result.t
                                                                  unit
                                                                  std.io.error.Error.t) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            std.io.Write.write_all
                                                              (Self :=
                                                                std.fs.File.t)
                                                              (Trait := ℐ))) in
                                                        let* α2 :
                                                            (core.result.Result.t
                                                                alloc.string.String.t
                                                                serde_json.error.Error.t)
                                                              ->
                                                              M
                                                                (core.ops.control_flow.ControlFlow.t
                                                                  _
                                                                  _) :=
                                                          ltac:(M.get_method (fun ℐ =>
                                                            core.ops.try_trait.Try.branch
                                                              (Self :=
                                                                core.result.Result.t
                                                                  alloc.string.String.t
                                                                  serde_json.error.Error.t)
                                                              (Trait := ℐ))) in
                                                        let* α3 :
                                                            core.result.Result.t
                                                              alloc.string.String.t
                                                              serde_json.error.Error.t :=
                                                          M.call
                                                            (serde_json.ser.to_string_pretty
                                                              (borrow
                                                                scored_test_cases)) in
                                                        let* α4 :
                                                            core.ops.control_flow.ControlFlow.t
                                                              (core.result.Result.t
                                                                core.convert.Infallible.t
                                                                serde_json.error.Error.t)
                                                              alloc.string.String.t :=
                                                          M.call (α2 α3) in
                                                        let* α5 :
                                                            M.Val
                                                              (core.ops.control_flow.ControlFlow.t
                                                                (core.result.Result.t
                                                                  core.convert.Infallible.t
                                                                  serde_json.error.Error.t)
                                                                alloc.string.String.t) :=
                                                          M.alloc α4 in
                                                        let* α6 :
                                                            M.Val
                                                              alloc.string.String.t :=
                                                          match_operator
                                                            α5
                                                            [
                                                              fun γ =>
                                                                (let* α0 :=
                                                                  M.read γ in
                                                                match α0 with
                                                                |
                                                                    core.ops.control_flow.ControlFlow.Break
                                                                      _
                                                                    =>
                                                                  let γ0_0 :=
                                                                    core.ops.control_flow.ControlFlow.Get_Break_0
                                                                      γ in
                                                                  let*
                                                                        residual :=
                                                                    M.copy
                                                                      γ0_0 in
                                                                  let* α0 :
                                                                      (core.result.Result.t
                                                                          core.convert.Infallible.t
                                                                          serde_json.error.Error.t)
                                                                        ->
                                                                        M
                                                                          (core.result.Result.t
                                                                            unit
                                                                            (alloc.boxed.Box.t
                                                                              (dyn
                                                                                [core.error.Error.Trait])
                                                                              alloc.alloc.Global.t)) :=
                                                                    ltac:(M.get_method (fun ℐ =>
                                                                      core.ops.try_trait.FromResidual.from_residual
                                                                        (Self :=
                                                                          core.result.Result.t
                                                                            unit
                                                                            (alloc.boxed.Box.t
                                                                              (dyn
                                                                                [core.error.Error.Trait])
                                                                              alloc.alloc.Global.t))
                                                                        (R :=
                                                                          core.result.Result.t
                                                                            core.convert.Infallible.t
                                                                            serde_json.error.Error.t)
                                                                        (Trait := ℐ))) in
                                                                  let* α1 :
                                                                      core.result.Result.t
                                                                        core.convert.Infallible.t
                                                                        serde_json.error.Error.t :=
                                                                    M.read
                                                                      residual in
                                                                  let* α2 :
                                                                      core.result.Result.t
                                                                        unit
                                                                        (alloc.boxed.Box.t
                                                                          (dyn
                                                                            [core.error.Error.Trait])
                                                                          alloc.alloc.Global.t) :=
                                                                    M.call
                                                                      (α0 α1) in
                                                                  let* α3 :
                                                                      M.Val
                                                                        never.t :=
                                                                    return_
                                                                      α2 in
                                                                  let* α4 :=
                                                                    M.read α3 in
                                                                  let* α5 :
                                                                      alloc.string.String.t :=
                                                                    never_to_any
                                                                      α4 in
                                                                  M.alloc α5
                                                                | _ =>
                                                                  M.break_match
                                                                end) :
                                                                M
                                                                  (M.Val
                                                                    alloc.string.String.t);
                                                              fun γ =>
                                                                (let* α0 :=
                                                                  M.read γ in
                                                                match α0 with
                                                                |
                                                                    core.ops.control_flow.ControlFlow.Continue
                                                                      _
                                                                    =>
                                                                  let γ0_0 :=
                                                                    core.ops.control_flow.ControlFlow.Get_Continue_0
                                                                      γ in
                                                                  let* val :=
                                                                    M.copy
                                                                      γ0_0 in
                                                                  M.pure val
                                                                | _ =>
                                                                  M.break_match
                                                                end) :
                                                                M
                                                                  (M.Val
                                                                    alloc.string.String.t)
                                                            ] in
                                                        let* α7 :
                                                            ref (slice u8.t) :=
                                                          M.call
                                                            (alloc.string.String.t::["as_bytes"]
                                                              (borrow α6)) in
                                                        let* α8 :
                                                            core.result.Result.t
                                                              unit
                                                              std.io.error.Error.t :=
                                                          M.call
                                                            (α1
                                                              (borrow_mut file)
                                                              α7) in
                                                        let* α9 :
                                                            core.ops.control_flow.ControlFlow.t
                                                              (core.result.Result.t
                                                                core.convert.Infallible.t
                                                                std.io.error.Error.t)
                                                              unit :=
                                                          M.call (α0 α8) in
                                                        let* α10 :
                                                            M.Val
                                                              (core.ops.control_flow.ControlFlow.t
                                                                (core.result.Result.t
                                                                  core.convert.Infallible.t
                                                                  std.io.error.Error.t)
                                                                unit) :=
                                                          M.alloc α9 in
                                                        match_operator
                                                          α10
                                                          [
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.ops.control_flow.ControlFlow.Break
                                                                    _
                                                                  =>
                                                                let γ0_0 :=
                                                                  core.ops.control_flow.ControlFlow.Get_Break_0
                                                                    γ in
                                                                let* residual :=
                                                                  M.copy γ0_0 in
                                                                let* α0 :
                                                                    (core.result.Result.t
                                                                        core.convert.Infallible.t
                                                                        std.io.error.Error.t)
                                                                      ->
                                                                      M
                                                                        (core.result.Result.t
                                                                          unit
                                                                          (alloc.boxed.Box.t
                                                                            (dyn
                                                                              [core.error.Error.Trait])
                                                                            alloc.alloc.Global.t)) :=
                                                                  ltac:(M.get_method (fun ℐ =>
                                                                    core.ops.try_trait.FromResidual.from_residual
                                                                      (Self :=
                                                                        core.result.Result.t
                                                                          unit
                                                                          (alloc.boxed.Box.t
                                                                            (dyn
                                                                              [core.error.Error.Trait])
                                                                            alloc.alloc.Global.t))
                                                                      (R :=
                                                                        core.result.Result.t
                                                                          core.convert.Infallible.t
                                                                          std.io.error.Error.t)
                                                                      (Trait := ℐ))) in
                                                                let* α1 :
                                                                    core.result.Result.t
                                                                      core.convert.Infallible.t
                                                                      std.io.error.Error.t :=
                                                                  M.read
                                                                    residual in
                                                                let* α2 :
                                                                    core.result.Result.t
                                                                      unit
                                                                      (alloc.boxed.Box.t
                                                                        (dyn
                                                                          [core.error.Error.Trait])
                                                                        alloc.alloc.Global.t) :=
                                                                  M.call
                                                                    (α0 α1) in
                                                                let* α3 :
                                                                    M.Val
                                                                      never.t :=
                                                                  return_ α2 in
                                                                let* α4 :=
                                                                  M.read α3 in
                                                                let* α5 :
                                                                    unit :=
                                                                  never_to_any
                                                                    α4 in
                                                                M.alloc α5
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit);
                                                            fun γ =>
                                                              (let* α0 :=
                                                                M.read γ in
                                                              match α0 with
                                                              |
                                                                  core.ops.control_flow.ControlFlow.Continue
                                                                    _
                                                                  =>
                                                                let γ0_0 :=
                                                                  core.ops.control_flow.ControlFlow.Get_Continue_0
                                                                    γ in
                                                                let* val :=
                                                                  M.copy γ0_0 in
                                                                M.pure val
                                                              | _ =>
                                                                M.break_match
                                                              end) :
                                                              M (M.Val unit)
                                                          ] in
                                                      M.alloc tt
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit)
                                                ] in
                                            M.alloc tt)) :
                                          M (M.Val unit)
                                      ] in
                                  M.pure (use α3)
                                | _ => M.break_match
                                end) :
                                M (M.Val unit)
                            ] in
                        M.alloc tt)) :
                      M (M.Val unit)
                  ] in
              M.pure (use α4) in
            let* α0 :
                M.Val
                  (core.result.Result.t
                    unit
                    (alloc.boxed.Box.t
                      (dyn [core.error.Error.Trait])
                      alloc.alloc.Global.t)) :=
              M.alloc (core.result.Result.Ok tt) in
            M.read (use α0)) :
            M
              (core.result.Result.t
                unit
                (alloc.boxed.Box.t
                  (dyn [core.error.Error.Trait])
                  alloc.alloc.Global.t))
        ]) :
      M
        (core.result.Result.t
          unit
          (alloc.boxed.Box.t
            (dyn [core.error.Error.Trait])
            alloc.alloc.Global.t))).

Error OpaqueTy.

(*
fn main() {
    let _ = dotenv::dotenv();
    let path = std::env::current_dir().unwrap();
    let path_parent = path.display().to_string();
    // hack: remove "assistants-benches" if present (debug and run have different paths somehow)
    let path_parent = path_parent.replace("assistants-benches", "");
    println!("The current directory is {}", path_parent);
    let cases_dir = format!("{}/assistants-benches/src/cases", path_parent);

    // Read all files in the cases directory
    let entries = std::fs::read_dir(cases_dir).unwrap();

    for entry in entries {
        let entry = entry.unwrap();
        let path = entry.path();
        if path.extension().unwrap() == "json" {
            let test_cases_path = path.to_str().unwrap();
            match run_test_cases(test_cases_path).await {
                Ok(_) => println!("All test cases passed."),
                Err(e) => eprintln!("Error running test cases: {}", e),
            }
        }
    }
}
*)
Definition main : M unit :=
  let return_ := M.return_ (R := unit) in
  M.catch_return
    (let* body : M.Val type not implemented :=
      M.alloc
        (fun (α0 : core.future.ResumeTy.t) =>
          (let* α0 := M.alloc α0 in
          match_operator
            α0
            [
              fun γ =>
                (let* _task_context := M.copy γ in
                let* α0 :
                    core.result.Result.t
                      std.path.PathBuf.t
                      dotenv.errors.Error.t :=
                  M.call dotenv.dotenv in
                let* α1 :
                    M.Val
                      (core.result.Result.t
                        std.path.PathBuf.t
                        dotenv.errors.Error.t) :=
                  M.alloc α0 in
                let* α2 : M.Val unit :=
                  match_operator
                    α1
                    [
                      fun γ =>
                        (let* path : M.Val std.path.PathBuf.t :=
                          let* α0 :
                              core.result.Result.t
                                std.path.PathBuf.t
                                std.io.error.Error.t :=
                            M.call std.env.current_dir in
                          let* α1 : std.path.PathBuf.t :=
                            M.call
                              ((core.result.Result.t
                                    std.path.PathBuf.t
                                    std.io.error.Error.t)::["unwrap"]
                                α0) in
                          M.alloc α1 in
                        let* path_parent : M.Val alloc.string.String.t :=
                          let* α0 :
                              (ref std.path.Display.t) ->
                                M alloc.string.String.t :=
                            ltac:(M.get_method (fun ℐ =>
                              alloc.string.ToString.to_string
                                (Self := std.path.Display.t)
                                (Trait := ℐ))) in
                          let* α1 : (ref std.path.PathBuf.t) -> M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.deref.Deref.deref
                                (Self := std.path.PathBuf.t)
                                (Trait := ℐ))) in
                          let* α2 : ref std.path.Path.t :=
                            M.call (α1 (borrow path)) in
                          let* α3 : std.path.Display.t :=
                            M.call (std.path.Path.t::["display"] α2) in
                          let* α4 : M.Val std.path.Display.t := M.alloc α3 in
                          let* α5 : alloc.string.String.t :=
                            M.call (α0 (borrow α4)) in
                          M.alloc α5 in
                        let* path_parent : M.Val alloc.string.String.t :=
                          let* α0 : (ref alloc.string.String.t) -> M (ref _) :=
                            ltac:(M.get_method (fun ℐ =>
                              core.ops.deref.Deref.deref
                                (Self := alloc.string.String.t)
                                (Trait := ℐ))) in
                          let* α1 : ref str.t :=
                            M.call (α0 (borrow path_parent)) in
                          let* α2 : ref str.t :=
                            M.read (mk_str "assistants-benches") in
                          let* α3 : ref str.t := M.read (mk_str "") in
                          let* α4 : alloc.string.String.t :=
                            M.call (str.t::["replace"] α1 α2 α3) in
                          M.alloc α4 in
                        let* _ : M.Val unit :=
                          let* _ : M.Val unit :=
                            let* α0 : ref str.t :=
                              M.read (mk_str "The current directory is ") in
                            let* α1 : ref str.t := M.read (mk_str "
") in
                            let* α2 : M.Val (array (ref str.t)) :=
                              M.alloc [ α0; α1 ] in
                            let* α3 : core.fmt.rt.Argument.t :=
                              M.call
                                (core.fmt.rt.Argument.t::["new_display"]
                                  (borrow path_parent)) in
                            let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                              M.alloc [ α3 ] in
                            let* α5 : core.fmt.Arguments.t :=
                              M.call
                                (core.fmt.Arguments.t::["new_v1"]
                                  (pointer_coercion "Unsize" (borrow α2))
                                  (pointer_coercion "Unsize" (borrow α4))) in
                            let* α6 : unit := M.call (std.io.stdio._print α5) in
                            M.alloc α6 in
                          M.alloc tt in
                        let* cases_dir : M.Val alloc.string.String.t :=
                          let* res : M.Val alloc.string.String.t :=
                            let* α0 : ref str.t := M.read (mk_str "") in
                            let* α1 : ref str.t :=
                              M.read (mk_str "/assistants-benches/src/cases") in
                            let* α2 : M.Val (array (ref str.t)) :=
                              M.alloc [ α0; α1 ] in
                            let* α3 : core.fmt.rt.Argument.t :=
                              M.call
                                (core.fmt.rt.Argument.t::["new_display"]
                                  (borrow path_parent)) in
                            let* α4 : M.Val (array core.fmt.rt.Argument.t) :=
                              M.alloc [ α3 ] in
                            let* α5 : core.fmt.Arguments.t :=
                              M.call
                                (core.fmt.Arguments.t::["new_v1"]
                                  (pointer_coercion "Unsize" (borrow α2))
                                  (pointer_coercion "Unsize" (borrow α4))) in
                            let* α6 : alloc.string.String.t :=
                              M.call (alloc.fmt.format α5) in
                            M.alloc α6 in
                          M.copy res in
                        let* entries : M.Val std.fs.ReadDir.t :=
                          let* α0 : alloc.string.String.t := M.read cases_dir in
                          let* α1 :
                              core.result.Result.t
                                std.fs.ReadDir.t
                                std.io.error.Error.t :=
                            M.call (std.fs.read_dir α0) in
                          let* α2 : std.fs.ReadDir.t :=
                            M.call
                              ((core.result.Result.t
                                    std.fs.ReadDir.t
                                    std.io.error.Error.t)::["unwrap"]
                                α1) in
                          M.alloc α2 in
                        let* α0 : std.fs.ReadDir.t -> M _ :=
                          ltac:(M.get_method (fun ℐ =>
                            core.iter.traits.collect.IntoIterator.into_iter
                              (Self := std.fs.ReadDir.t)
                              (Trait := ℐ))) in
                        let* α1 : std.fs.ReadDir.t := M.read entries in
                        let* α2 : std.fs.ReadDir.t := M.call (α0 α1) in
                        let* α3 : M.Val std.fs.ReadDir.t := M.alloc α2 in
                        let* α4 : M.Val unit :=
                          match_operator
                            α3
                            [
                              fun γ =>
                                (let* iter := M.copy γ in
                                M.loop
                                  (let* _ : M.Val unit :=
                                    let* α0 :
                                        (mut_ref std.fs.ReadDir.t) ->
                                          M (core.option.Option.t _) :=
                                      ltac:(M.get_method (fun ℐ =>
                                        core.iter.traits.iterator.Iterator.next
                                          (Self := std.fs.ReadDir.t)
                                          (Trait := ℐ))) in
                                    let* α1 :
                                        core.option.Option.t
                                          (core.result.Result.t
                                            std.fs.DirEntry.t
                                            std.io.error.Error.t) :=
                                      M.call (α0 (borrow_mut iter)) in
                                    let* α2 :
                                        M.Val
                                          (core.option.Option.t
                                            (core.result.Result.t
                                              std.fs.DirEntry.t
                                              std.io.error.Error.t)) :=
                                      M.alloc α1 in
                                    match_operator
                                      α2
                                      [
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.option.Option.None =>
                                            let* α0 : M.Val never.t :=
                                              M.break in
                                            let* α1 := M.read α0 in
                                            let* α2 : unit := never_to_any α1 in
                                            M.alloc α2
                                          | _ => M.break_match
                                          end) :
                                          M (M.Val unit);
                                        fun γ =>
                                          (let* α0 := M.read γ in
                                          match α0 with
                                          | core.option.Option.Some _ =>
                                            let γ0_0 :=
                                              core.option.Option.Get_Some_0 γ in
                                            let* entry := M.copy γ0_0 in
                                            let* entry :
                                                M.Val std.fs.DirEntry.t :=
                                              let* α0 :
                                                  core.result.Result.t
                                                    std.fs.DirEntry.t
                                                    std.io.error.Error.t :=
                                                M.read entry in
                                              let* α1 : std.fs.DirEntry.t :=
                                                M.call
                                                  ((core.result.Result.t
                                                        std.fs.DirEntry.t
                                                        std.io.error.Error.t)::["unwrap"]
                                                    α0) in
                                              M.alloc α1 in
                                            let* path :
                                                M.Val std.path.PathBuf.t :=
                                              let* α0 : std.path.PathBuf.t :=
                                                M.call
                                                  (std.fs.DirEntry.t::["path"]
                                                    (borrow entry)) in
                                              M.alloc α0 in
                                            let* α0 :
                                                (ref
                                                    (ref
                                                      std.ffi.os_str.OsStr.t))
                                                  ->
                                                  (ref (ref str.t)) ->
                                                  M bool.t :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.cmp.PartialEq.eq
                                                  (Self :=
                                                    ref std.ffi.os_str.OsStr.t)
                                                  (Rhs := ref str.t)
                                                  (Trait := ℐ))) in
                                            let* α1 :
                                                (ref std.path.PathBuf.t) ->
                                                  M (ref _) :=
                                              ltac:(M.get_method (fun ℐ =>
                                                core.ops.deref.Deref.deref
                                                  (Self := std.path.PathBuf.t)
                                                  (Trait := ℐ))) in
                                            let* α2 : ref std.path.Path.t :=
                                              M.call (α1 (borrow path)) in
                                            let* α3 :
                                                core.option.Option.t
                                                  (ref
                                                    std.ffi.os_str.OsStr.t) :=
                                              M.call
                                                (std.path.Path.t::["extension"]
                                                  α2) in
                                            let* α4 :
                                                ref std.ffi.os_str.OsStr.t :=
                                              M.call
                                                ((core.option.Option.t
                                                      (ref
                                                        std.ffi.os_str.OsStr.t))::["unwrap"]
                                                  α3) in
                                            let* α5 :
                                                M.Val
                                                  (ref
                                                    std.ffi.os_str.OsStr.t) :=
                                              M.alloc α4 in
                                            let* α6 : bool.t :=
                                              M.call
                                                (α0
                                                  (borrow α5)
                                                  (borrow (mk_str "json"))) in
                                            let* α7 : M.Val bool.t :=
                                              M.alloc α6 in
                                            let* α8 : bool.t :=
                                              M.read (use α7) in
                                            if α8 then
                                              let* test_cases_path :
                                                  M.Val (ref str.t) :=
                                                let* α0 :
                                                    (ref std.path.PathBuf.t) ->
                                                      M (ref _) :=
                                                  ltac:(M.get_method (fun ℐ =>
                                                    core.ops.deref.Deref.deref
                                                      (Self :=
                                                        std.path.PathBuf.t)
                                                      (Trait := ℐ))) in
                                                let* α1 : ref std.path.Path.t :=
                                                  M.call (α0 (borrow path)) in
                                                let* α2 :
                                                    core.option.Option.t
                                                      (ref str.t) :=
                                                  M.call
                                                    (std.path.Path.t::["to_str"]
                                                      α1) in
                                                let* α3 : ref str.t :=
                                                  M.call
                                                    ((core.option.Option.t
                                                          (ref
                                                            str.t))::["unwrap"]
                                                      α2) in
                                                M.alloc α3 in
                                              let* α0 : _ -> M _ :=
                                                ltac:(M.get_method (fun ℐ =>
                                                  core.future.into_future.IntoFuture.into_future
                                                    (Self := _)
                                                    (Trait := ℐ))) in
                                              let* α1 : ref str.t :=
                                                M.read test_cases_path in
                                              let* α2 : _ :=
                                                M.call
                                                  (assistants_benches.run_test_cases
                                                    α1) in
                                              let* α3 : _ := M.call (α0 α2) in
                                              let* α4 : M.Val _ := M.alloc α3 in
                                              let* α5 :
                                                  M.Val
                                                    (core.result.Result.t
                                                      unit
                                                      (alloc.boxed.Box.t
                                                        (dyn
                                                          [core.error.Error.Trait])
                                                        alloc.alloc.Global.t)) :=
                                                match_operator
                                                  α4
                                                  [
                                                    fun γ =>
                                                      (let* __awaitee :=
                                                        M.copy γ in
                                                      M.loop
                                                        (let* _ : M.Val unit :=
                                                          let* α0 :
                                                              (core.pin.Pin.t
                                                                  (mut_ref _))
                                                                ->
                                                                (mut_ref
                                                                  core.task.wake.Context.t)
                                                                ->
                                                                M
                                                                  (core.task.poll.Poll.t
                                                                    _) :=
                                                            ltac:(M.get_method (fun ℐ =>
                                                              core.future.future.Future.poll
                                                                (Self := _)
                                                                (Trait := ℐ))) in
                                                          let* α1 :
                                                              core.pin.Pin.t
                                                                (mut_ref _) :=
                                                            M.call
                                                              ((core.pin.Pin.t
                                                                    (mut_ref
                                                                      _))::["new_unchecked"]
                                                                (borrow_mut
                                                                  __awaitee)) in
                                                          let* α2 :
                                                              core.future.ResumeTy.t :=
                                                            M.read
                                                              _task_context in
                                                          let* α3 :
                                                              mut_ref
                                                                core.task.wake.Context.t :=
                                                            M.call
                                                              (core.future.get_context
                                                                α2) in
                                                          let* α4 :
                                                              core.task.poll.Poll.t
                                                                (core.result.Result.t
                                                                  unit
                                                                  (alloc.boxed.Box.t
                                                                    (dyn
                                                                      [core.error.Error.Trait])
                                                                    alloc.alloc.Global.t)) :=
                                                            M.call (α0 α1 α3) in
                                                          let* α5 :
                                                              M.Val
                                                                (core.task.poll.Poll.t
                                                                  (core.result.Result.t
                                                                    unit
                                                                    (alloc.boxed.Box.t
                                                                      (dyn
                                                                        [core.error.Error.Trait])
                                                                      alloc.alloc.Global.t))) :=
                                                            M.alloc α4 in
                                                          match_operator
                                                            α5
                                                            [
                                                              fun γ =>
                                                                (let* α0 :=
                                                                  M.read γ in
                                                                match α0 with
                                                                |
                                                                    core.task.poll.Poll.Ready
                                                                      _
                                                                    =>
                                                                  let γ0_0 :=
                                                                    core.task.poll.Poll.Get_Ready_0
                                                                      γ in
                                                                  let* result :=
                                                                    M.copy
                                                                      γ0_0 in
                                                                  let* α0 :
                                                                      M.Val
                                                                        never.t :=
                                                                    M.break in
                                                                  let* α1 :=
                                                                    M.read α0 in
                                                                  let* α2 :
                                                                      unit :=
                                                                    never_to_any
                                                                      α1 in
                                                                  M.alloc α2
                                                                | _ =>
                                                                  M.break_match
                                                                end) :
                                                                M (M.Val unit);
                                                              fun γ =>
                                                                (let* α0 :=
                                                                  M.read γ in
                                                                match α0 with
                                                                |
                                                                    core.task.poll.Poll.Pending
                                                                    =>
                                                                  M.alloc tt
                                                                | _ =>
                                                                  M.break_match
                                                                end) :
                                                                M (M.Val unit)
                                                            ] in
                                                        let* _ : M.Val unit :=
                                                          let* α0 :
                                                              M.Val unit :=
                                                            M.alloc tt in
                                                          let* α1 :
                                                              M.Val
                                                                core.future.ResumeTy.t :=
                                                            yield α0 in
                                                          let* α2 :
                                                              core.future.ResumeTy.t :=
                                                            M.read α1 in
                                                          assign
                                                            _task_context
                                                            α2 in
                                                        M.alloc tt)) :
                                                      M
                                                        (M.Val
                                                          (core.result.Result.t
                                                            unit
                                                            (alloc.boxed.Box.t
                                                              (dyn
                                                                [core.error.Error.Trait])
                                                              alloc.alloc.Global.t)))
                                                  ] in
                                              match_operator
                                                α5
                                                [
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    | core.result.Result.Ok _ =>
                                                      let γ0_0 :=
                                                        core.result.Result.Get_Ok_0
                                                          γ in
                                                      let* _ : M.Val unit :=
                                                        let* α0 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "All test cases passed.
") in
                                                        let* α1 :
                                                            M.Val
                                                              (array
                                                                (ref str.t)) :=
                                                          M.alloc [ α0 ] in
                                                        let* α2 :
                                                            core.fmt.Arguments.t :=
                                                          M.call
                                                            (core.fmt.Arguments.t::["new_const"]
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α1))) in
                                                        let* α3 : unit :=
                                                          M.call
                                                            (std.io.stdio._print
                                                              α2) in
                                                        M.alloc α3 in
                                                      M.alloc tt
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit);
                                                  fun γ =>
                                                    (let* α0 := M.read γ in
                                                    match α0 with
                                                    |
                                                        core.result.Result.Err _
                                                        =>
                                                      let γ0_0 :=
                                                        core.result.Result.Get_Err_0
                                                          γ in
                                                      let* e := M.copy γ0_0 in
                                                      let* _ : M.Val unit :=
                                                        let* α0 : ref str.t :=
                                                          M.read
                                                            (mk_str
                                                              "Error running test cases: ") in
                                                        let* α1 : ref str.t :=
                                                          M.read (mk_str "
") in
                                                        let* α2 :
                                                            M.Val
                                                              (array
                                                                (ref str.t)) :=
                                                          M.alloc [ α0; α1 ] in
                                                        let* α3 :
                                                            core.fmt.rt.Argument.t :=
                                                          M.call
                                                            (core.fmt.rt.Argument.t::["new_display"]
                                                              (borrow e)) in
                                                        let* α4 :
                                                            M.Val
                                                              (array
                                                                core.fmt.rt.Argument.t) :=
                                                          M.alloc [ α3 ] in
                                                        let* α5 :
                                                            core.fmt.Arguments.t :=
                                                          M.call
                                                            (core.fmt.Arguments.t::["new_v1"]
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α2))
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow α4))) in
                                                        let* α6 : unit :=
                                                          M.call
                                                            (std.io.stdio._eprint
                                                              α5) in
                                                        M.alloc α6 in
                                                      M.alloc tt
                                                    | _ => M.break_match
                                                    end) :
                                                    M (M.Val unit)
                                                ]
                                            else
                                              M.alloc tt
                                          | _ => M.break_match
                                          end) :
                                          M (M.Val unit)
                                      ] in
                                  M.alloc tt)) :
                                M (M.Val unit)
                            ] in
                        M.pure (use α4)) :
                        M (M.Val unit)
                    ] in
                M.read α2) :
                M unit
            ]) :
          M unit) in
    let* α0 : tokio.runtime.builder.Builder.t :=
      M.call tokio.runtime.builder.Builder.t::["new_multi_thread"] in
    let* α1 : M.Val tokio.runtime.builder.Builder.t := M.alloc α0 in
    let* α2 : mut_ref tokio.runtime.builder.Builder.t :=
      M.call
        (tokio.runtime.builder.Builder.t::["enable_all"] (borrow_mut α1)) in
    let* α3 :
        core.result.Result.t
          tokio.runtime.runtime.Runtime.t
          std.io.error.Error.t :=
      M.call (tokio.runtime.builder.Builder.t::["build"] α2) in
    let* α4 : ref str.t := M.read (mk_str "Failed building the Runtime") in
    let* α5 : tokio.runtime.runtime.Runtime.t :=
      M.call
        ((core.result.Result.t
              tokio.runtime.runtime.Runtime.t
              std.io.error.Error.t)::["expect"]
          α3
          α4) in
    let* α6 : M.Val tokio.runtime.runtime.Runtime.t := M.alloc α5 in
    let* α7 : type not implemented := M.read body in
    let* α8 : unit :=
      M.call (tokio.runtime.runtime.Runtime.t::["block_on"] (borrow α6) α7) in
    let* α9 : M.Val never.t := return_ α8 in
    let* α10 := M.read α9 in
    let* α11 : unit := never_to_any α10 in
    let* α0 : M.Val unit := M.alloc α11 in
    M.read α0).
